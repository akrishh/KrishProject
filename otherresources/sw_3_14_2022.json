{
  "basePath": "/casenet-server/api",
  "definitions": {
    "AAGNumberResponse": {
      "properties": {
        "aagNumbers": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "Aag": {
      "properties": {
        "aagComplete": {
          "$ref": "#/definitions/AagComplete"
        },
        "aagDetails": {
          "$ref": "#/definitions/AagDetails"
        },
        "aagHeader": {
          "$ref": "#/definitions/AagHeader"
        },
        "aagId": {
          "type": "string"
        },
        "aagRequestorInfo": {
          "$ref": "#/definitions/AagRequestorInfo"
        },
        "aagState": {
          "enum": [
            "DRAFT",
            "SUBMITTED"
          ],
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "outcomes": {
          "items": {
            "$ref": "#/definitions/AagOutcomeSummary"
          },
          "type": "array"
        },
        "requestForInformation": {
          "items": {
            "$ref": "#/definitions/AagRequestForInformationSummary"
          },
          "type": "array"
        },
        "reviews": {
          "items": {
            "$ref": "#/definitions/AagReviewSummary"
          },
          "type": "array"
        },
        "state": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "required": [
        "aagId"
      ],
      "type": "object",
      "xml": {
        "name": "Aag",
        "namespace": "http://www.casenet.com/Aag"
      }
    },
    "AagActionPathRequest": {
      "properties": {
        "aagActivity": {
          "enum": [
            "AAG_CLINICAL_REVIEW",
            "AAG_ADVISOR_REVIEW",
            "AAG_OUTCOME",
            "AAG_EVALUATE_ADVISOR_REVIEW"
          ],
          "type": "string",
          "xml": {
            "name": "AagActivity",
            "namespace": "http://www.casenet.com/AagActivity"
          }
        },
        "assignedTo": {
          "$ref": "#/definitions/AssigneeRequest"
        },
        "description": {
          "maxLength": 2048,
          "minLength": 0,
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "priority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        }
      },
      "required": [
        "aagActivity",
        "dueDate",
        "priority"
      ],
      "type": "object",
      "xml": {
        "name": "AagActionPathRequest",
        "namespace": "http://www.casenet.com/AagActionPathRequest"
      }
    },
    "AagComplete": {
      "properties": {
        "closedDate": {
          "format": "date-time",
          "type": "string"
        },
        "closureNotes": {
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "AagComplete",
        "namespace": "http://www.casenet.com/AagComplete"
      }
    },
    "AagConfigurationBhpSetup": {
      "properties": {
        "urgencyChangeReasonTrigger": {
          "$ref": "#/definitions/OptionValue"
        }
      },
      "type": "object",
      "xml": {
        "name": "AagConfigurationBhpSetup",
        "namespace": "http://www.casenet.com/AagConfigurationBhpSetup"
      }
    },
    "AagDefinition": {
      "properties": {
        "aagDetailsConfiguration": {
          "$ref": "#/definitions/AagDetailsConfiguration"
        },
        "aagHeaderConfiguration": {
          "$ref": "#/definitions/AagHeaderConfiguration"
        },
        "aagOutcomeConfiguration": {
          "$ref": "#/definitions/AagOutcomeConfiguration"
        },
        "aagRequestorConfiguration": {
          "$ref": "#/definitions/AagRequestorConfiguration"
        },
        "disabled": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "AagDefinition",
        "namespace": "http://www.casenet.com/AagDefinition"
      }
    },
    "AagDetails": {
      "properties": {
        "aagSpecificContactName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "aagSpecificContactPhone": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "additionalDetails": {
          "maxLength": 2500,
          "minLength": 0,
          "type": "string"
        },
        "additionalDiagnosisCode": {
          "items": {
            "$ref": "#/definitions/DiagnosisCodeLite"
          },
          "type": "array",
          "uniqueItems": true
        },
        "additionalProcedureCode": {
          "items": {
            "$ref": "#/definitions/Procedure"
          },
          "type": "array",
          "uniqueItems": true
        },
        "datesOfService": {
          "type": "string"
        },
        "disputedDates": {
          "type": "string"
        },
        "disputedUnitType": {
          "$ref": "#/definitions/OptionValue"
        },
        "disputedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "incidentDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "placeOfService": {
          "$ref": "#/definitions/OptionValue"
        },
        "primaryDiagnosisCode": {
          "$ref": "#/definitions/DiagnosisCodeLite"
        },
        "primaryProcedureCode": {
          "$ref": "#/definitions/Procedure"
        },
        "requestedUnitType": {
          "$ref": "#/definitions/OptionValue"
        },
        "requestedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "serviceType": {
          "$ref": "#/definitions/OptionValue"
        },
        "servicingProviderId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "servicingProviderLocationId": {
          "type": "string"
        },
        "servicingProviderName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "servicingProviderPhoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "servicingProviderSpecialty": {
          "$ref": "#/definitions/OptionValue"
        }
      },
      "type": "object",
      "xml": {
        "name": "AagDetails",
        "namespace": "http://www.casenet.com/AagDetails"
      }
    },
    "AagDetailsConfiguration": {
      "properties": {
        "aagContact": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "additionalDetails": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "additionalDiagnosisCode": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "additionalProcedureCode": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "datesOfService": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "disputedDate": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "disputedUnits": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "incidentDate": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "modifierCodes": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "placeOfServices": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "primaryDiagnosisCode": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "primaryProcedureCode": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "requestedDisputedUnits": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "requestedUnits": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "serviceTypes": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "servicingProvider": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "servicingProviderSpecialties": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        }
      },
      "type": "object",
      "xml": {
        "name": "AagDetailsConfiguration",
        "namespace": "http://www.casenet.com/AagDetailsConfiguration"
      }
    },
    "AagDetailsRequest": {
      "properties": {
        "aagContactName": {
          "type": "string"
        },
        "aagContactPhoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "aagDiagnosisCodeRequest": {
          "$ref": "#/definitions/AagDiagnosisCodeRequest"
        },
        "aagProcedureCodeRequest": {
          "$ref": "#/definitions/AagProcedureCodeRequest"
        },
        "additionalDetails": {
          "maxLength": 2500,
          "minLength": 0,
          "type": "string"
        },
        "disputedFromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "disputedToDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "disputedUnitTypeOption": {
          "type": "string"
        },
        "disputedUnits": {
          "format": "int32",
          "maximum": 999999,
          "minimum": 0,
          "type": "integer"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "incidentDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "placeOfServiceOption": {
          "type": "string"
        },
        "providerPhoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "requestForInformationList": {
          "items": {
            "$ref": "#/definitions/AagRequestForInformationRequest"
          },
          "type": "array"
        },
        "requestedUnitTypeOption": {
          "type": "string"
        },
        "requestedUnits": {
          "format": "int32",
          "maximum": 999999,
          "minimum": 0,
          "type": "integer"
        },
        "serviceFromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "serviceToDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "serviceTypeOption": {
          "type": "string"
        },
        "servicingProviderLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "servicingProviderSpecialtyOption": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "AagDetailsRequest",
        "namespace": "http://www.casenet.com/AagDetailsRequest"
      }
    },
    "AagDiagnosisCodeRequest": {
      "properties": {
        "additionalDiagnosisCodeIdSet": {
          "items": {
            "$ref": "#/definitions/DiagnosisCodeNaturalId"
          },
          "type": "array",
          "uniqueItems": true
        },
        "primaryDiagnosisCodeId": {
          "$ref": "#/definitions/DiagnosisCodeNaturalId"
        }
      },
      "type": "object",
      "xml": {
        "name": "AagDiagnosisCodeRequest",
        "namespace": "http://www.casenet.com/AagDiagnosisCodeRequest"
      }
    },
    "AagEmail": {
      "properties": {
        "emailAddress": {
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "emailAddress"
      ],
      "type": "object",
      "xml": {
        "name": "AagEmail",
        "namespace": "http://www.casenet.com/AagEmail"
      }
    },
    "AagHeader": {
      "properties": {
        "aagCreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "aagDueDate": {
          "format": "date-time",
          "type": "string"
        },
        "aagNumber": {
          "type": "string"
        },
        "aagOwner": {
          "$ref": "#/definitions/User"
        },
        "aagReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "aagReasonOther": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "aagReceivedDate": {
          "format": "date-time",
          "type": "string"
        },
        "aagType": {
          "$ref": "#/definitions/OptionValue"
        },
        "aagUrgency": {
          "$ref": "#/definitions/OptionValue"
        },
        "aagUrgencyChangeReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "aagUrgencyChangeReasonOther": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "appealType": {
          "$ref": "#/definitions/OptionValue"
        },
        "claimId": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "receivedMethod": {
          "$ref": "#/definitions/OptionValue"
        },
        "trackingNumber": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "vendorId": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "aagNumber",
        "aagReceivedDate"
      ],
      "type": "object",
      "xml": {
        "name": "AagHeader",
        "namespace": "http://www.casenet.com/AagHeader"
      }
    },
    "AagHeaderConfiguration": {
      "properties": {
        "aagConfigurationBhpSetup": {
          "$ref": "#/definitions/AagConfigurationBhpSetup"
        },
        "aagDueDate": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "aagReasons": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "aagUrgencies": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "aagUrgencyChangeReasons": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "appealTypes": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "claimId": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "receivedMethods": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "vendorId": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        }
      },
      "type": "object",
      "xml": {
        "name": "AagHeaderConfiguration",
        "namespace": "http://www.casenet.com/AagHeaderConfiguration"
      }
    },
    "AagHeaderRequest": {
      "properties": {
        "aagOwnerUserName": {
          "type": "string"
        },
        "aagReasonOption": {
          "type": "string"
        },
        "aagReasonOther": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "aagReceivedDate": {
          "format": "date-time",
          "type": "string"
        },
        "aagUrgencyChangeReasonOption": {
          "type": "string"
        },
        "aagUrgencyChangeReasonOther": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "aagUrgencyOption": {
          "type": "string"
        },
        "appealTypeOption": {
          "type": "string"
        },
        "claimId": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "noteRequests": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "receivedMethodOption": {
          "type": "string"
        },
        "trackingNumber": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "vendorId": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "aagOwnerUserName",
        "aagReasonOption",
        "aagReceivedDate",
        "aagUrgencyOption",
        "receivedMethodOption"
      ],
      "type": "object",
      "xml": {
        "name": "AagHeaderRequest",
        "namespace": "http://www.casenet.com/AagHeaderRequest"
      }
    },
    "AagInfo": {
      "properties": {
        "aagId": {
          "type": "string"
        },
        "aagNumber": {
          "type": "string"
        },
        "aagState": {
          "enum": [
            "DRAFT",
            "SUBMITTED"
          ],
          "type": "string"
        },
        "aagTypeId": {
          "$ref": "#/definitions/OptionValue"
        }
      },
      "type": "object"
    },
    "AagInformationReviewedRequest": {
      "properties": {
        "informationReviewedOption": {
          "type": "string"
        },
        "informationReviewedOther": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "informationReviewedOption"
      ],
      "type": "object"
    },
    "AagOutcomeConfiguration": {
      "properties": {
        "aagOutcomes": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "AagOutcomeConfiguration",
        "namespace": "http://www.casenet.com/AagOutcomeConfiguration"
      }
    },
    "AagOutcomeSummary": {
      "properties": {
        "outcome": {
          "$ref": "#/definitions/OptionValue"
        },
        "outcomeDetail": {
          "$ref": "#/definitions/OptionValue"
        },
        "outcomeDetailOther": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "outcomeNote": {
          "type": "string"
        },
        "outcomeOther": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "resolutionDate": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        }
      },
      "required": [
        "resolutionDate"
      ],
      "type": "object",
      "xml": {
        "name": "AagOutcomeSummary",
        "namespace": "http://www.casenet.com/AagOutcomeSummary"
      }
    },
    "AagProcedureCodeRequest": {
      "properties": {
        "additionalProcedures": {
          "items": {
            "$ref": "#/definitions/ModifiedProcedureCodeNaturalId"
          },
          "type": "array",
          "uniqueItems": true
        },
        "primaryProcedure": {
          "$ref": "#/definitions/ModifiedProcedureCodeNaturalId"
        }
      },
      "type": "object",
      "xml": {
        "name": "AagProcedureCodeRequest",
        "namespace": "http://www.casenet.com/AagProcedureCodeRequest"
      }
    },
    "AagRequestForInformationRequest": {
      "properties": {
        "attemptNumber": {
          "format": "int32",
          "type": "integer"
        },
        "attendingMD": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "dateReceived": {
          "format": "date-time",
          "type": "string"
        },
        "dateRequested": {
          "format": "date-time",
          "type": "string"
        },
        "informationRequested": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "requestTypeOption": {
          "type": "string"
        }
      },
      "required": [
        "attemptNumber",
        "dateRequested",
        "informationRequested",
        "requestTypeOption"
      ],
      "type": "object"
    },
    "AagRequestForInformationSummary": {
      "properties": {
        "attemptNumber": {
          "format": "int32",
          "type": "integer"
        },
        "dateReceived": {
          "format": "date-time",
          "type": "string"
        },
        "dateRequested": {
          "format": "date-time",
          "type": "string"
        },
        "informationRequested": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "requestType": {
          "$ref": "#/definitions/OptionValue"
        }
      },
      "required": [
        "dateRequested",
        "informationRequested"
      ],
      "type": "object",
      "xml": {
        "name": "AagRequestForInformationSummary",
        "namespace": "http://www.casenet.com/AagRequestForInformationSummary"
      }
    },
    "AagRequestorConfiguration": {
      "properties": {
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "requestSources": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        },
        "requestorTypes": {
          "$ref": "#/definitions/TailoredAagDefinitionField"
        }
      },
      "type": "object",
      "xml": {
        "name": "AagRequestorConfiguration",
        "namespace": "http://www.casenet.com/AagRequestorConfiguration"
      }
    },
    "AagRequestorInfo": {
      "properties": {
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "requestSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "requestorAddress": {
          "$ref": "#/definitions/Address"
        },
        "requestorEmail": {
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "requestorFax": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "requestorName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "requestorPrimaryPhone": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "requestorSecondaryPhone": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "requestorType": {
          "$ref": "#/definitions/OptionValue"
        }
      },
      "type": "object",
      "xml": {
        "name": "AagRequestorInfo",
        "namespace": "http://www.casenet.com/AagRequestorInfo"
      }
    },
    "AagRequestorInfoRequest": {
      "properties": {
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "requestSourceOption": {
          "type": "string"
        },
        "requestorAddress": {
          "$ref": "#/definitions/CreateAddressRequest"
        },
        "requestorAlternatePhone": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "requestorEmail": {
          "$ref": "#/definitions/AagEmail"
        },
        "requestorFax": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "requestorName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "requestorPrimaryPhone": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "requestorTypeOption": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "AagRequestorInfoRequest",
        "namespace": "http://www.casenet.com/AagRequestorInfoRequest"
      }
    },
    "AagReview": {
      "properties": {
        "aagReviewState": {
          "enum": [
            "DRAFT",
            "SUBMITTED"
          ],
          "type": "string"
        },
        "aagReviewer": {
          "$ref": "#/definitions/AagReviewer"
        },
        "advisorReviewOutcome": {
          "$ref": "#/definitions/OptionValue"
        },
        "advisorReviewOutcomeOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "clinicalCriteria": {
          "enum": [
            "MANUAL"
          ],
          "type": "string",
          "xml": {
            "name": "AagClinicalCriteria",
            "namespace": "http://www.casenet.com/AagClinicalCriteria"
          }
        },
        "criteriaMet": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "informationReviewed": {
          "items": {
            "$ref": "#/definitions/InformationReviewed"
          },
          "type": "array"
        },
        "rationale": {
          "type": "string"
        },
        "requestForInformation": {
          "items": {
            "$ref": "#/definitions/AagRequestForInformationSummary"
          },
          "type": "array"
        },
        "reviewCompletedDate": {
          "format": "date-time",
          "type": "string"
        },
        "reviewInitiatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "reviewNotes": {
          "maxLength": 5000,
          "minLength": 0,
          "type": "string"
        },
        "reviewSummary": {
          "type": "string"
        },
        "reviewType": {
          "enum": [
            "CLINICAL_REVIEW",
            "ADVISOR_REVIEW"
          ],
          "type": "string",
          "xml": {
            "name": "AagReviewType",
            "namespace": "http://www.casenet.com/AagReviewType"
          }
        },
        "reviewerSpecialty": {
          "$ref": "#/definitions/OptionValue"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "required": [
        "clinicalCriteria",
        "id",
        "informationReviewed",
        "reviewType"
      ],
      "type": "object",
      "xml": {
        "name": "AagReview",
        "namespace": "http://www.casenet.com/AagReview"
      }
    },
    "AagReviewRequest": {
      "properties": {
        "aagReviewerRequest": {
          "$ref": "#/definitions/AagReviewerRequest"
        },
        "advisorReviewOutcomeOption": {
          "type": "string"
        },
        "advisorReviewOutcomeOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "clinicalCriteria": {
          "enum": [
            "MANUAL"
          ],
          "type": "string",
          "xml": {
            "name": "AagClinicalCriteria",
            "namespace": "http://www.casenet.com/AagClinicalCriteria"
          }
        },
        "criteriaMet": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "informationReviewedList": {
          "items": {
            "$ref": "#/definitions/AagInformationReviewedRequest"
          },
          "type": "array"
        },
        "rationale": {
          "type": "string"
        },
        "requestForInformationList": {
          "items": {
            "$ref": "#/definitions/AagRequestForInformationRequest"
          },
          "type": "array"
        },
        "reviewCompletedDate": {
          "format": "date-time",
          "type": "string"
        },
        "reviewInitiatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "reviewNotes": {
          "maxLength": 5000,
          "minLength": 0,
          "type": "string"
        },
        "reviewSummary": {
          "type": "string"
        },
        "reviewType": {
          "enum": [
            "CLINICAL_REVIEW",
            "ADVISOR_REVIEW"
          ],
          "type": "string",
          "xml": {
            "name": "AagReviewType",
            "namespace": "http://www.casenet.com/AagReviewType"
          }
        },
        "reviewerSpecialtyOption": {
          "type": "string"
        }
      },
      "required": [
        "clinicalCriteria",
        "informationReviewedList",
        "reviewType",
        "reviewerSpecialtyOption"
      ],
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "AagReviewSummary": {
      "properties": {
        "independentReviewOrganization": {
          "$ref": "#/definitions/OptionValue"
        },
        "independentReviewOrganizationOther": {
          "type": "string"
        },
        "reviewCompletedDate": {
          "format": "date-time",
          "type": "string"
        },
        "reviewId": {
          "type": "string"
        },
        "reviewInitiatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "reviewType": {
          "type": "string"
        },
        "reviewedBy": {
          "type": "string"
        },
        "reviewerName": {
          "type": "string"
        }
      },
      "required": [
        "reviewId"
      ],
      "type": "object",
      "xml": {
        "name": "AagReviewSummary",
        "namespace": "http://www.casenet.com/AagReviewSummary"
      }
    },
    "AagReviewer": {
      "type": "object",
      "xml": {
        "name": "AagReviewer",
        "namespace": "http://www.casenet.com/AagReviewer"
      }
    },
    "AagReviewerRequest": {
      "type": "object"
    },
    "AagSearchCriteria": {
      "properties": {
        "aagNumber": {
          "type": "string"
        },
        "aagStateCriteria": {
          "enum": [
            "DRAFT",
            "SUBMITTED",
            "ALL"
          ],
          "type": "string"
        },
        "aagType": {
          "type": "string"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "fromDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "includeClosedAAGs": {
          "type": "boolean"
        },
        "includeVoidedAAGs": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/AagSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "toDateTime": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "AagSearchCriteria",
        "namespace": "http://www.casenet.com/AagSearchCriteria"
      }
    },
    "AagSearchResults": {
      "properties": {
        "aagSummary": {
          "items": {
            "$ref": "#/definitions/AagSummary"
          },
          "type": "array"
        },
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "AagSearchResults",
        "namespace": "http://www.casenet.com/AagSearchResults"
      }
    },
    "AagSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "AAG_NUMBER",
            "AAG_DUE_DATE"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "AagSubmissionResponse": {
      "properties": {
        "aagId": {
          "type": "string"
        },
        "aagNumber": {
          "type": "string"
        }
      },
      "required": [
        "aagId",
        "aagNumber"
      ],
      "type": "object",
      "xml": {
        "name": "AagSubmissionResponse",
        "namespace": "http://www.casenet.com/AagSubmissionResponse"
      }
    },
    "AagSummary": {
      "properties": {
        "aagDueDate": {
          "format": "date-time",
          "type": "string"
        },
        "aagId": {
          "type": "string"
        },
        "aagNumber": {
          "type": "string"
        },
        "aagOutcome": {
          "$ref": "#/definitions/OptionValue"
        },
        "aagReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "aagReasonOther": {
          "type": "string"
        },
        "aagReceivedDate": {
          "format": "date-time",
          "type": "string"
        },
        "aagState": {
          "enum": [
            "DRAFT",
            "SUBMITTED"
          ],
          "type": "string"
        },
        "aagType": {
          "$ref": "#/definitions/OptionValue"
        },
        "aagUrgency": {
          "$ref": "#/definitions/OptionValue"
        },
        "attachmentExists": {
          "type": "boolean"
        },
        "closedDate": {
          "format": "date-time",
          "type": "string"
        },
        "rfiExists": {
          "type": "boolean"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "required": [
        "aagId",
        "aagNumber"
      ],
      "type": "object",
      "xml": {
        "name": "AagSummary",
        "namespace": "http://www.casenet.com/AagSummary"
      }
    },
    "AbstractAdditionalAnswerRequest": {
      "properties": {
        "additionalAnswer": {
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "AbstractAdditionalAnswerRequest",
        "namespace": "http://www.casenet.com/AbstractAdditionalAnswerRequest"
      }
    },
    "AbstractAnswerPart": {
      "properties": {
        "answerDefinitionId": {
          "type": "string"
        },
        "answerDetail": {
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "answerPart": {
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AbstractAnswerPart",
        "namespace": "http://www.casenet.com/AbstractAnswerPart"
      }
    },
    "AbstractAnswerPartRequest": {
      "properties": {
        "additionalAnswer": {
          "$ref": "#/definitions/AbstractAdditionalAnswerRequest"
        },
        "answerDefinitionId": {
          "type": "string"
        },
        "answerDetail": {
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "answerPart": {
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "AbstractAnswerPartRequest",
        "namespace": "http://www.casenet.com/AbstractAnswerPartRequest"
      }
    },
    "AbstractAssessment": {
      "properties": {
        "answers": {
          "items": {
            "$ref": "#/definitions/Answer"
          },
          "type": "array",
          "uniqueItems": true
        },
        "assessmentMeta": {
          "$ref": "#/definitions/AssessmentMeta"
        },
        "completedBy": {
          "$ref": "#/definitions/User"
        },
        "completedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "notes": {
          "items": {
            "$ref": "#/definitions/NoteInstance"
          },
          "type": "array",
          "uniqueItems": true
        },
        "questionGroupResults": {
          "items": {
            "$ref": "#/definitions/QuestionGroupResult"
          },
          "type": "array",
          "uniqueItems": true
        },
        "score": {
          "format": "int32",
          "type": "integer"
        },
        "signatureFileName": {
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        },
        "voided": {
          "type": "boolean"
        },
        "voidedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "AbstractAssessment",
        "namespace": "http://www.casenet.com/AbstractAssessment"
      }
    },
    "AbstractAssessmentAnswerMeta": {
      "properties": {
        "answer": {
          "type": "object"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AbstractAssessmentRequest": {
      "type": "object"
    },
    "AbstractCarePlanTriggerableDefinition": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "definition": {
          "$ref": "#/definitions/CarePlanElementDefinition"
        },
        "exportable": {
          "$ref": "#/definitions/Exportable"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "triggeredArtifactID": {
          "type": "string"
        },
        "updateAvailableForTriggerable": {
          "enum": [
            "NO_UPDATE",
            "UPDATE_AVAILABLE",
            "UPDATE_APPLIED",
            "UPDATE_APPLIED_WITH_NEW_VERSION"
          ],
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AbstractConditionalResponseDefinition": {
      "properties": {
        "answerDefinition": {
          "$ref": "#/definitions/AnswerDefinition"
        },
        "conditionalResponseDefinition": {
          "type": "object"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "questionDefinitions": {
          "items": {
            "$ref": "#/definitions/QuestionDefinition"
          },
          "type": "array"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AbstractCorrespondenceSummary": {
      "properties": {
        "artifact": {
          "type": "string"
        },
        "artifactWithId": {
          "type": "string"
        },
        "authorization": {
          "$ref": "#/definitions/AuthorizationInfo"
        },
        "cnCase": {
          "$ref": "#/definitions/CaseIdentity"
        },
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "diagnosisType": {
          "enum": [
            "BEHAVIORAL_DSMIV",
            "MEDICAL",
            "BEHAVIORAL_DSM5"
          ],
          "type": "string",
          "xml": {
            "name": "UMDiagnosisType",
            "namespace": "http://www.casenet.com/UMDiagnosisType"
          }
        },
        "id": {
          "type": "string"
        },
        "letterName": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object"
    },
    "AbstractCostSavingsAreaLinkLite": {
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object",
      "xml": {
        "name": "AbstractCostSavingsAreaLinkLite",
        "namespace": "http://www.casenet.com/AbstractCostSavingsAreaLinkLite"
      }
    },
    "AbstractDueDateOffset": {
      "properties": {
        "dueDateOffset": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AbstractLetterMailing": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "letterType": {
          "enum": [
            "INTERNAL",
            "EXTERNAL"
          ],
          "type": "string",
          "xml": {
            "name": "LetterType",
            "namespace": "http://www.casenet.com/LetterType"
          }
        },
        "mailingInstanceDocumentId": {
          "type": "string"
        },
        "mailingInstanceId": {
          "type": "string"
        },
        "recipients": {
          "items": {
            "$ref": "#/definitions/LetterRecipient"
          },
          "type": "array"
        },
        "resendAsDuplicate": {
          "type": "boolean"
        },
        "sentBy": {
          "$ref": "#/definitions/User"
        },
        "sentDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AbstractLetterMailing",
        "namespace": "http://www.casenet.com/AbstractLetterMailing"
      }
    },
    "AbstractNextTaskConfiguration": {
      "properties": {
        "dueDateOffset": {
          "$ref": "#/definitions/AbstractDueDateOffset"
        },
        "nextTaskAssignee": {
          "$ref": "#/definitions/NextTaskAssignee"
        },
        "taskNameType": {
          "enum": [
            "REFERRAL_TASK",
            "COMPLETE_REFERRAL_TASK",
            "SELECT_CASE_TASK",
            "COMPLETE_INITIAL_ASSESSMENT_TASK",
            "SEND_SOURCE_NOTIFICATION_TASK",
            "COMPLETE_FURTHER_EVALUATION_TASK",
            "CLINICAL_REVIEW_TASK",
            "ADVISOR_REVIEW_TASK",
            "DETERMINATION_TASK",
            "NOTIFICATION_TASK",
            "CONCURRENT_REVIEW_TASK",
            "EVALUATE_ADVISOR_REVIEW_TASK",
            "REQUEST_FOR_INFORMATION_REVIEW_TASK",
            "APPEAL_CLINICAL_REVIEW",
            "APPEAL_ADVISOR_REVIEW_TASK",
            "APPEAL_OUTCOME_TASK",
            "APPEAL_EVALUATE_ADVISOR_REVIEW_TASK",
            "APPEAL_NOTIFICATION_TASK",
            "AAG_ADVISOR_REVIEW_TASK",
            "AAG_CLINICAL_REVIEW_TASK",
            "AAG_EVALUATE_ADVISOR_REVIEW_TASK",
            "AAG_OUTCOME_TASK",
            "SR_DETERMINATION_TASK",
            "SR_NOTIFICATION_TASK"
          ],
          "type": "string"
        },
        "taskPriority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        }
      },
      "type": "object"
    },
    "AbstractNoteRequest": {
      "properties": {
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "noteDefinitionVisibleId": {
          "type": "string"
        },
        "noteText": {
          "maxLength": 1000000,
          "minLength": 0,
          "type": "string"
        },
        "offlineCreatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "noteDefinitionVisibleId"
      ],
      "type": "object",
      "xml": {
        "name": "AbstractNoteRequest",
        "namespace": "http://www.casenet.com/AbstractNoteRequest"
      }
    },
    "AbstractTaskLog": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "AbstractTaskLog",
        "namespace": "http://www.casenet.com/AbstractTaskLog"
      }
    },
    "AbstractTaskRecurrenceOptions": {
      "properties": {
        "taskRecurrenceEndDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "taskRecurrenceEndDate"
      ],
      "type": "object",
      "xml": {
        "name": "AbstractTaskRecurrenceOptions",
        "namespace": "http://www.casenet.com/AbstractTaskRecurrenceOptions"
      }
    },
    "AbstractTaskRecurrenceOptionsRequest": {
      "properties": {
        "taskRecurrenceEndDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "taskRecurrenceEndDate"
      ],
      "type": "object",
      "xml": {
        "name": "AbstractTaskRecurrenceOptionsRequest",
        "namespace": "http://www.casenet.com/AbstractTaskRecurrenceOptionsRequest"
      }
    },
    "AbstractUpdateUserProfileRequest": {
      "properties": {
        "acuityOptions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "addresses": {
          "items": {
            "$ref": "#/definitions/ContactAddress"
          },
          "type": "array",
          "uniqueItems": true
        },
        "credentialOptions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "credentialsOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "emails": {
          "items": {
            "$ref": "#/definitions/ContactEmail"
          },
          "type": "array",
          "uniqueItems": true
        },
        "faxNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "genderOption": {
          "type": "string"
        },
        "levelOfCareOptions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "locationOptions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "phoneNumbers": {
          "items": {
            "$ref": "#/definitions/ContactPhoneNumber"
          },
          "type": "array",
          "uniqueItems": true
        },
        "primaryLanguageOption": {
          "type": "string"
        },
        "secondaryLanguageOptions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "serviceRegionOptions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "serviceZipCodes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "skillAreaOptions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "specialNeedsAreaOptions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "specializationOptions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "timezone": {
          "enum": [
            "AFRICA_ABIDJAN",
            "AFRICA_ACCRA",
            "AFRICA_NAIROBI",
            "AFRICA_ALGIERS",
            "AFRICA_LAGOS",
            "AFRICA_BISSAU",
            "AFRICA_MAPUTO",
            "AFRICA_CAIRO",
            "AFRICA_CASABLANCA",
            "AFRICA_CEUTA",
            "AFRICA_EL_AAIUN",
            "AFRICA_JOHANNESBURG",
            "AFRICA_KHARTOUM",
            "AFRICA_MONROVIA",
            "AFRICA_NDJAMENA",
            "AFRICA_TRIPOLI",
            "AFRICA_TUNIS",
            "AFRICA_WINDHOEK",
            "AMERICA_ADAK",
            "AMERICA_ANCHORAGE",
            "AMERICA_PORT_OF_SPAIN",
            "AMERICA_ANTIGUA",
            "AMERICA_ARAGUAINA",
            "AMERICA_ARGENTINA_BUENOS_AIRES",
            "AMERICA_ARGENTINA_CATAMARCA",
            "AMERICA_ARGENTINA_CORDOBA",
            "AMERICA_ARGENTINA_JUJUY",
            "AMERICA_ARGENTINA_LA_RIOJA",
            "AMERICA_ARGENTINA_MENDOZA",
            "AMERICA_ARGENTINA_RIO_GALLEGOS",
            "AMERICA_ARGENTINA_SALTA",
            "AMERICA_ARGENTINA_SAN_JUAN",
            "AMERICA_ARGENTINA_SAN_LUIS",
            "AMERICA_ARGENTINA_TUCUMAN",
            "AMERICA_ARGENTINA_USHUAIA",
            "AMERICA_CURACAO",
            "AMERICA_ASUNCION",
            "AMERICA_ATIKOKAN",
            "AMERICA_BAHIA",
            "AMERICA_BAHIA_BANDERAS",
            "AMERICA_BARBADOS",
            "AMERICA_BELEM",
            "AMERICA_BELIZE",
            "AMERICA_BLANC_SABLON",
            "AMERICA_BOA_VISTA",
            "AMERICA_BOGOTA",
            "AMERICA_BOISE",
            "AMERICA_CAMBRIDGE_BAY",
            "AMERICA_CAMPO_GRANDE",
            "AMERICA_CANCUN",
            "AMERICA_CARACAS",
            "AMERICA_CAYENNE",
            "AMERICA_CAYMAN",
            "AMERICA_CHICAGO",
            "AMERICA_CHIHUAHUA",
            "AMERICA_COSTA_RICA",
            "AMERICA_CRESTON",
            "AMERICA_CUIABA",
            "AMERICA_DANMARKSHAVN",
            "AMERICA_DAWSON",
            "AMERICA_DAWSON_CREEK",
            "AMERICA_DENVER",
            "AMERICA_DETROIT",
            "AMERICA_EDMONTON",
            "AMERICA_EIRUNEPE",
            "AMERICA_EL_SALVADOR",
            "AMERICA_TIJUANA",
            "AMERICA_INDIANA_INDIANAPOLIS",
            "AMERICA_FORTALEZA",
            "AMERICA_GLACE_BAY",
            "AMERICA_GODTHAB",
            "AMERICA_GOOSE_BAY",
            "AMERICA_GRAND_TURK",
            "AMERICA_GUATEMALA",
            "AMERICA_GUAYAQUIL",
            "AMERICA_GUYANA",
            "AMERICA_HALIFAX",
            "AMERICA_HAVANA",
            "AMERICA_HERMOSILLO",
            "AMERICA_INDIANA_KNOX",
            "AMERICA_INDIANA_MARENGO",
            "AMERICA_INDIANA_PETERSBURG",
            "AMERICA_INDIANA_TELL_CITY",
            "AMERICA_INDIANA_VEVAY",
            "AMERICA_INDIANA_VINCENNES",
            "AMERICA_INDIANA_WINAMAC",
            "AMERICA_INUVIK",
            "AMERICA_IQALUIT",
            "AMERICA_JAMAICA",
            "AMERICA_JUNEAU",
            "AMERICA_KENTUCKY_LOUISVILLE",
            "AMERICA_KENTUCKY_MONTICELLO",
            "AMERICA_LA_PAZ",
            "AMERICA_LIMA",
            "AMERICA_LOS_ANGELES",
            "AMERICA_MACEIO",
            "AMERICA_MANAGUA",
            "AMERICA_MANAUS",
            "AMERICA_MARTINIQUE",
            "AMERICA_MATAMOROS",
            "AMERICA_MAZATLAN",
            "AMERICA_MENOMINEE",
            "AMERICA_MERIDA",
            "AMERICA_METLAKATLA",
            "AMERICA_MEXICO_CITY",
            "AMERICA_MIQUELON",
            "AMERICA_MONCTON",
            "AMERICA_MONTERREY",
            "AMERICA_MONTEVIDEO",
            "AMERICA_MONTREAL",
            "AMERICA_NASSAU",
            "AMERICA_NEW_YORK",
            "AMERICA_NIPIGON",
            "AMERICA_NOME",
            "AMERICA_NORONHA",
            "AMERICA_NORTH_DAKOTA_BEULAH",
            "AMERICA_NORTH_DAKOTA_CENTER",
            "AMERICA_NORTH_DAKOTA_NEW_SALEM",
            "AMERICA_OJINAGA",
            "AMERICA_PANAMA",
            "AMERICA_PANGNIRTUNG",
            "AMERICA_PARAMARIBO",
            "AMERICA_PHOENIX",
            "AMERICA_PORT_AU_PRINCE",
            "AMERICA_RIO_BRANCO",
            "AMERICA_PORTO_VELHO",
            "AMERICA_PUERTO_RICO",
            "AMERICA_RAINY_RIVER",
            "AMERICA_RANKIN_INLET",
            "AMERICA_RECIFE",
            "AMERICA_REGINA",
            "AMERICA_RESOLUTE",
            "AMERICA_SANTA_ISABEL",
            "AMERICA_SANTAREM",
            "AMERICA_SANTIAGO",
            "AMERICA_SANTO_DOMINGO",
            "AMERICA_SAO_PAULO",
            "AMERICA_SCORESBYSUND",
            "AMERICA_SITKA",
            "AMERICA_ST_JOHNS",
            "AMERICA_SWIFT_CURRENT",
            "AMERICA_TEGUCIGALPA",
            "AMERICA_THULE",
            "AMERICA_THUNDER_BAY",
            "AMERICA_TORONTO",
            "AMERICA_VANCOUVER",
            "AMERICA_WHITEHORSE",
            "AMERICA_WINNIPEG",
            "AMERICA_YAKUTAT",
            "AMERICA_YELLOWKNIFE",
            "ANTARCTICA_CASEY",
            "ANTARCTICA_DAVIS",
            "ANTARCTICA_DUMONTDURVILLE",
            "ANTARCTICA_MACQUARIE",
            "ANTARCTICA_MAWSON",
            "PACIFIC_AUCKLAND",
            "ANTARCTICA_PALMER",
            "ANTARCTICA_ROTHERA",
            "ANTARCTICA_SYOWA",
            "ANTARCTICA_TROLL",
            "ANTARCTICA_VOSTOK",
            "EUROPE_OSLO",
            "ASIA_ADEN",
            "ASIA_ALMATY",
            "ASIA_AMMAN",
            "ASIA_ANADYR",
            "ASIA_AQTAU",
            "ASIA_AQTOBE",
            "ASIA_ASHGABAT",
            "ASIA_BAGHDAD",
            "ASIA_BAHRAIN",
            "ASIA_BAKU",
            "ASIA_BANGKOK",
            "ASIA_BEIRUT",
            "ASIA_BISHKEK",
            "ASIA_BRUNEI",
            "ASIA_KOLKATA",
            "ASIA_CHITA",
            "ASIA_CHOIBALSAN",
            "ASIA_SHANGHAI",
            "ASIA_COLOMBO",
            "ASIA_DHAKA",
            "ASIA_DAMASCUS",
            "ASIA_DILI",
            "ASIA_DUBAI",
            "ASIA_DUSHANBE",
            "ASIA_GAZA",
            "ASIA_HEBRON",
            "ASIA_HO_CHI_MINH",
            "ASIA_HONG_KONG",
            "ASIA_HOVD",
            "ASIA_IRKUTSK",
            "EUROPE_ISTANBUL",
            "ASIA_JAKARTA",
            "ASIA_JAYAPURA",
            "ASIA_JERUSALEM",
            "ASIA_KABUL",
            "ASIA_KAMCHATKA",
            "ASIA_KARACHI",
            "ASIA_URUMQI",
            "ASIA_KATHMANDU",
            "ASIA_KHANDYGA",
            "ASIA_KRASNOYARSK",
            "ASIA_KUALA_LUMPUR",
            "ASIA_KUCHING",
            "ASIA_KUWAIT",
            "ASIA_MACAU",
            "ASIA_MAGADAN",
            "ASIA_MAKASSAR",
            "ASIA_MANILA",
            "ASIA_MUSCAT",
            "ASIA_NICOSIA",
            "ASIA_NOVOKUZNETSK",
            "ASIA_NOVOSIBIRSK",
            "ASIA_OMSK",
            "ASIA_ORAL",
            "ASIA_PONTIANAK",
            "ASIA_PYONGYANG",
            "ASIA_QATAR",
            "ASIA_QYZYLORDA",
            "ASIA_RANGOON",
            "ASIA_RIYADH",
            "ASIA_SAKHALIN",
            "ASIA_SAMARKAND",
            "ASIA_SEOUL",
            "ASIA_SINGAPORE",
            "ASIA_SREDNEKOLYMSK",
            "ASIA_TAIPEI",
            "ASIA_TASHKENT",
            "ASIA_TBILISI",
            "ASIA_TEHRAN",
            "ASIA_THIMPHU",
            "ASIA_TOKYO",
            "ASIA_ULAANBAATAR",
            "ASIA_UST_NERA",
            "ASIA_VLADIVOSTOK",
            "ASIA_YAKUTSK",
            "ASIA_YEKATERINBURG",
            "ASIA_YEREVAN",
            "ATLANTIC_AZORES",
            "ATLANTIC_BERMUDA",
            "ATLANTIC_CANARY",
            "ATLANTIC_CAPE_VERDE",
            "ATLANTIC_FAROE",
            "ATLANTIC_MADEIRA",
            "ATLANTIC_REYKJAVIK",
            "ATLANTIC_SOUTH_GEORGIA",
            "ATLANTIC_STANLEY",
            "AUSTRALIA_SYDNEY",
            "AUSTRALIA_ADELAIDE",
            "AUSTRALIA_BRISBANE",
            "AUSTRALIA_BROKEN_HILL",
            "AUSTRALIA_CURRIE",
            "AUSTRALIA_DARWIN",
            "AUSTRALIA_EUCLA",
            "AUSTRALIA_HOBART",
            "AUSTRALIA_LORD_HOWE",
            "AUSTRALIA_LINDEMAN",
            "AUSTRALIA_MELBOURNE",
            "AUSTRALIA_PERTH",
            "CET",
            "CST6CDT",
            "PACIFIC_EASTER",
            "EET",
            "EST",
            "EST5EDT",
            "EUROPE_DUBLIN",
            "ETC_GMT",
            "ETC_GMT_PLUS_1",
            "ETC_GMT_PLUS_10",
            "ETC_GMT_PLUS_11",
            "ETC_GMT_PLUS_12",
            "ETC_GMT_PLUS_2",
            "ETC_GMT_PLUS_3",
            "ETC_GMT_PLUS_4",
            "ETC_GMT_PLUS_5",
            "ETC_GMT_PLUS_6",
            "ETC_GMT_PLUS_7",
            "ETC_GMT_PLUS_8",
            "ETC_GMT_PLUS_9",
            "ETC_GMT_MINUS_1",
            "ETC_GMT_MINUS_10",
            "ETC_GMT_MINUS_11",
            "ETC_GMT_MINUS_12",
            "ETC_GMT_MINUS_13",
            "ETC_GMT_MINUS_14",
            "ETC_GMT_MINUS_2",
            "ETC_GMT_MINUS_3",
            "ETC_GMT_MINUS_4",
            "ETC_GMT_MINUS_5",
            "ETC_GMT_MINUS_6",
            "ETC_GMT_MINUS_7",
            "ETC_GMT_MINUS_8",
            "ETC_GMT_MINUS_9",
            "ETC_UCT",
            "ETC_UTC",
            "EUROPE_AMSTERDAM",
            "EUROPE_ANDORRA",
            "EUROPE_ATHENS",
            "EUROPE_LONDON",
            "EUROPE_BELGRADE",
            "EUROPE_BERLIN",
            "EUROPE_PRAGUE",
            "EUROPE_BRUSSELS",
            "EUROPE_BUCHAREST",
            "EUROPE_BUDAPEST",
            "EUROPE_ZURICH",
            "EUROPE_CHISINAU",
            "EUROPE_COPENHAGEN",
            "EUROPE_GIBRALTAR",
            "EUROPE_HELSINKI",
            "EUROPE_KALININGRAD",
            "EUROPE_KIEV",
            "EUROPE_LISBON",
            "EUROPE_LUXEMBOURG",
            "EUROPE_MADRID",
            "EUROPE_MALTA",
            "EUROPE_MINSK",
            "EUROPE_MONACO",
            "EUROPE_MOSCOW",
            "EUROPE_PARIS",
            "EUROPE_RIGA",
            "EUROPE_ROME",
            "EUROPE_SAMARA",
            "EUROPE_SIMFEROPOL",
            "EUROPE_SOFIA",
            "EUROPE_STOCKHOLM",
            "EUROPE_TALLINN",
            "EUROPE_TIRANE",
            "EUROPE_UZHGOROD",
            "EUROPE_VIENNA",
            "EUROPE_VILNIUS",
            "EUROPE_VOLGOGRAD",
            "EUROPE_WARSAW",
            "EUROPE_ZAPOROZHYE",
            "HST",
            "INDIAN_CHAGOS",
            "INDIAN_CHRISTMAS",
            "INDIAN_COCOS",
            "INDIAN_KERGUELEN",
            "INDIAN_MAHE",
            "INDIAN_MALDIVES",
            "INDIAN_MAURITIUS",
            "INDIAN_REUNION",
            "PACIFIC_KWAJALEIN",
            "MET",
            "MST",
            "MST7MDT",
            "PACIFIC_CHATHAM",
            "PST8PDT",
            "PACIFIC_APIA",
            "PACIFIC_BOUGAINVILLE",
            "PACIFIC_CHUUK",
            "PACIFIC_EFATE",
            "PACIFIC_ENDERBURY",
            "PACIFIC_FAKAOFO",
            "PACIFIC_FIJI",
            "PACIFIC_FUNAFUTI",
            "PACIFIC_GALAPAGOS",
            "PACIFIC_GAMBIER",
            "PACIFIC_GUADALCANAL",
            "PACIFIC_GUAM",
            "PACIFIC_HONOLULU",
            "PACIFIC_KIRITIMATI",
            "PACIFIC_KOSRAE",
            "PACIFIC_MAJURO",
            "PACIFIC_MARQUESAS",
            "PACIFIC_MIDWAY",
            "PACIFIC_NAURU",
            "PACIFIC_NIUE",
            "PACIFIC_NORFOLK",
            "PACIFIC_NOUMEA",
            "PACIFIC_PAGO_PAGO",
            "PACIFIC_PALAU",
            "PACIFIC_PITCAIRN",
            "PACIFIC_POHNPEI",
            "PACIFIC_PORT_MORESBY",
            "PACIFIC_RAROTONGA",
            "PACIFIC_SAIPAN",
            "PACIFIC_TAHITI",
            "PACIFIC_TARAWA",
            "PACIFIC_TONGATAPU",
            "PACIFIC_WAKE",
            "PACIFIC_WALLIS",
            "UTC",
            "WET"
          ],
          "type": "string",
          "xml": {
            "name": "DateTimeZone",
            "namespace": "http://www.casenet.com/DateTimeZone"
          }
        },
        "title": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "titleOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "userLicenses": {
          "items": {
            "$ref": "#/definitions/UserLicensureRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AbstractUpdateUserProfileRequest",
        "namespace": "http://www.casenet.com/AbstractUpdateUserProfileRequest"
      }
    },
    "Action": {
      "properties": {
        "actionDefinitionId": {
          "type": "string"
        },
        "allowDuplicateActions": {
          "type": "boolean"
        },
        "assessmentId": {
          "type": "string"
        },
        "assessmentMetaId": {
          "type": "string"
        },
        "assessmentMetaResourceName": {
          "type": "string"
        },
        "assessmentStatus": {
          "enum": [
            "IN_PROGRESS",
            "COMPLETE",
            "VOID"
          ],
          "type": "string"
        },
        "category": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "closeDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "closeReason": {
          "type": "string"
        },
        "closeReasonOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "comments": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "interventionEffectiveness": {
          "type": "string"
        },
        "interventionEffectivenessOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "interventionType": {
          "type": "string"
        },
        "interventionTypeOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "isClosedAutomatically": {
          "type": "boolean"
        },
        "lastUpdated": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "origin": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        },
        "priorityOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "relatedTask": {
          "$ref": "#/definitions/RelatedTask"
        },
        "serviceRequestId": {
          "type": "string"
        },
        "serviceRequestProcedureCode": {
          "type": "string"
        },
        "serviceRequestProcedureCodeType": {
          "enum": [
            "CPT",
            "ICD9",
            "HCPCS",
            "REVENUE",
            "ICD10",
            "EXTENDED"
          ],
          "type": "string",
          "xml": {
            "name": "ProcedureCodeType",
            "namespace": "http://www.casenet.com/ProcedureCodeType"
          }
        },
        "serviceRequestProcedureName": {
          "type": "string"
        },
        "serviceRequestState": {
          "enum": [
            "DRAFT",
            "OPEN",
            "CLOSED",
            "VOID"
          ],
          "type": "string",
          "xml": {
            "name": "ServiceRequestState",
            "namespace": "http://www.casenet.com/ServiceRequestState"
          }
        },
        "source": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "OPEN",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CarePlanElementStatus",
            "namespace": "http://www.casenet.com/CarePlanElementStatus"
          }
        },
        "subType": {
          "type": "string"
        },
        "targetDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "textTypeOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "type": {
          "enum": [
            "INTERVENTION",
            "SERVICE_REQUEST",
            "ASSESSMENT",
            "TASK",
            "TEXT"
          ],
          "type": "string",
          "xml": {
            "name": "ActionType",
            "namespace": "http://www.casenet.com/ActionType"
          }
        },
        "urlEnglish": {
          "type": "string"
        },
        "urlSpanish": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "Action",
        "namespace": "http://www.casenet.com/Action"
      }
    },
    "ActionDefinition": {
      "properties": {
        "allowDuplicates": {
          "type": "boolean"
        },
        "assessmentMetaId": {
          "type": "string"
        },
        "category": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "createTask": {
          "type": "boolean"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "custom": {
          "type": "boolean"
        },
        "defaultAssignee": {
          "$ref": "#/definitions/TaskAssigneeResponse"
        },
        "definitionId": {
          "type": "string"
        },
        "definitionName": {
          "type": "string"
        },
        "definitionVisibleId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "mcgContentVersion": {
          "type": "string"
        },
        "mcgInterventionType": {
          "enum": [
            "SEND",
            "ASSIST",
            "COORDINATE",
            "EDUCATE",
            "RECONCILE"
          ],
          "type": "string"
        },
        "mcgPdfFileNames": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "readyToExport": {
          "type": "boolean"
        },
        "serviceCode": {
          "type": "string"
        },
        "serviceCodeType": {
          "enum": [
            "CPT",
            "ICD9",
            "HCPCS",
            "REVENUE",
            "ICD10",
            "EXTENDED"
          ],
          "type": "string",
          "xml": {
            "name": "ProcedureCodeType",
            "namespace": "http://www.casenet.com/ProcedureCodeType"
          }
        },
        "serviceName": {
          "type": "string"
        },
        "source": {
          "enum": [
            "MCG",
            "TRUCARE"
          ],
          "type": "string",
          "xml": {
            "name": "AssessmentSource",
            "namespace": "http://www.casenet.com/AssessmentSource"
          }
        },
        "status": {
          "enum": [
            "IN_PROGRESS",
            "PUBLISHED",
            "HIDDEN"
          ],
          "type": "string"
        },
        "subTypeOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "targetPublishDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "taskAssigneeType": {
          "enum": [
            "ALLOW_USER_TO_SELECT",
            "ASSIGNED_TEAM",
            "CURRENT_USER",
            "PRIMARY_CASE_OWNER",
            "QUEUE",
            "TEAM",
            "USER"
          ],
          "type": "string"
        },
        "taskDueDateOffset": {
          "format": "int32",
          "type": "integer"
        },
        "taskPriority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "type": {
          "enum": [
            "INTERVENTION",
            "SERVICE_REQUEST",
            "ASSESSMENT",
            "TASK",
            "TEXT"
          ],
          "type": "string",
          "xml": {
            "name": "ActionType",
            "namespace": "http://www.casenet.com/ActionType"
          }
        }
      },
      "type": "object"
    },
    "ActionDefinitionSearchCriteria": {
      "properties": {
        "actionCategory": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "actionDefinitionName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "actionDefinitionVisibleId": {
          "$ref": "#/definitions/StringCriteria"
        },
        "actionSubType": {
          "type": "string"
        },
        "actionTypes": {
          "items": {
            "enum": [
              "INTERVENTION",
              "SERVICE_REQUEST",
              "ASSESSMENT",
              "TASK",
              "TEXT"
            ],
            "type": "string",
            "xml": {
              "name": "ActionType",
              "namespace": "http://www.casenet.com/ActionType"
            }
          },
          "type": "array",
          "uniqueItems": true
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "mcgInterventionType": {
          "enum": [
            "SEND",
            "ASSIST",
            "COORDINATE",
            "EDUCATE",
            "RECONCILE"
          ],
          "type": "string"
        },
        "metaStatus": {
          "enum": [
            "IN_PROGRESS",
            "PUBLISHED",
            "HIDDEN"
          ],
          "type": "string"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/ActionDefinitionSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "ActionDefinitionSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/ActionDefinition"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "ActionDefinitionSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "ACTION_DEFINITION_NAME",
            "ACTION_DEFINITION_VISIBLE_ID",
            "ACTION_CATEGORY",
            "CUSTOM"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "ActionPathRequest": {
      "properties": {
        "activity": {
          "enum": [
            "CLINICAL_REVIEW",
            "ADVISOR_REVIEW",
            "DETERMINATION",
            "NOTIFICATION"
          ],
          "type": "string",
          "xml": {
            "name": "Activity",
            "namespace": "http://www.casenet.com/Activity"
          }
        },
        "assignedTo": {
          "$ref": "#/definitions/AssigneeRequest"
        },
        "description": {
          "maxLength": 2048,
          "minLength": 0,
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "priority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "useRuleOutputs": {
          "type": "boolean"
        }
      },
      "required": [
        "useRuleOutputs"
      ],
      "type": "object",
      "xml": {
        "name": "ActionPathRequest",
        "namespace": "http://www.casenet.com/ActionPathRequest"
      }
    },
    "ActionPathSummary": {
      "properties": {
        "taskIds": {
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object",
      "xml": {
        "name": "ActionPathSummary",
        "namespace": "http://www.casenet.com/ActionPathSummary"
      }
    },
    "ActionTask": {
      "properties": {
        "actionId": {
          "type": "string"
        },
        "taskId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ActionTriggeredArtifact": {
      "properties": {
        "actionId": {
          "type": "string"
        },
        "artifactId": {
          "type": "string"
        },
        "artifactType": {
          "enum": [
            "SERVICE_REQUEST",
            "ASSESSMENT",
            "TASK"
          ],
          "type": "string"
        },
        "taskId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ActivityItem": {
      "properties": {
        "actionName": {
          "type": "string"
        },
        "activityItemProperties": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "datetime": {
          "format": "date-time",
          "type": "string"
        },
        "userFullName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AddAuthorizationDiagnosis": {
      "properties": {
        "diagnosisCodeIdSet": {
          "items": {
            "$ref": "#/definitions/AuthorizationDiagnosisCode"
          },
          "type": "array",
          "uniqueItems": true
        },
        "primaryAdmittingDiagnosisId": {
          "$ref": "#/definitions/AuthorizationDiagnosisCode"
        }
      },
      "type": "object",
      "xml": {
        "name": "AddAuthorizationDiagnosis",
        "namespace": "http://www.casenet.com/AddAuthorizationDiagnosis"
      }
    },
    "AddAuthorizationDiagnosisRequest": {
      "properties": {
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AddAuthorizationDiagnosisRequest",
        "namespace": "http://www.casenet.com/AddAuthorizationDiagnosisRequest"
      }
    },
    "AddLineItemsToInpatientAuthorizationRequest": {
      "properties": {
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/CreateLineItemRequest"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array"
        },
        "nextTask": {
          "$ref": "#/definitions/ActionPathRequest"
        }
      },
      "required": [
        "authorizationVersion",
        "lineItems"
      ],
      "type": "object",
      "xml": {
        "name": "AddLineItemsToInpatientAuthorizationRequest",
        "namespace": "http://www.casenet.com/AddLineItemsToInpatientAuthorizationRequest"
      }
    },
    "AddRxLineItemRequest": {
      "properties": {
        "appliedEligibilityProductId": {
          "$ref": "#/definitions/ProductId"
        },
        "authSpecificContactAddress": {
          "$ref": "#/definitions/CreateAddressRequest"
        },
        "authSpecificContactFax": {
          "$ref": "#/definitions/Phone"
        },
        "authSpecificContactFaxI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "authSpecificContactName": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "authSpecificContactPhone": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "authSpecificContactPhoneI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "determination": {
          "$ref": "#/definitions/DeterminationRequest"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "inFormulary": {
          "type": "boolean"
        },
        "levelOfUrgencyOption": {
          "type": "string"
        },
        "lineItemMedicationInfoRequest": {
          "$ref": "#/definitions/LineItemMedicationInfoRequest"
        },
        "lineItemType": {
          "enum": [
            "IP",
            "SP",
            "RX"
          ],
          "type": "string",
          "xml": {
            "name": "UMLineItemType",
            "namespace": "http://www.casenet.com/UMLineItemType"
          }
        },
        "lineItemTypeOption": {
          "type": "string"
        },
        "oonReasonOption": {
          "type": "string"
        },
        "placeOfServiceOption": {
          "type": "string"
        },
        "prescribingProviderPhoneNumber": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "prescribingProviderPhoneNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "providerLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "providerSpecialtyOption": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "serviceTypeOption": {
          "type": "string"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "urgencyRequestedByOption": {
          "type": "string"
        },
        "useAuthSpecificContactAddressForCorrespondence": {
          "type": "boolean"
        },
        "useRuleOutputs": {
          "type": "boolean"
        }
      },
      "required": [
        "placeOfServiceOption",
        "serviceTypeOption"
      ],
      "type": "object",
      "xml": {
        "name": "AddRxLineItemRequest",
        "namespace": "http://www.casenet.com/AddRxLineItemRequest"
      }
    },
    "AddRxLineItemToAuthorizationRequest": {
      "properties": {
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/AddRxLineItemRequest"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array"
        },
        "nextTask": {
          "$ref": "#/definitions/ActionPathRequest"
        }
      },
      "required": [
        "authorizationVersion",
        "lineItems"
      ],
      "type": "object",
      "xml": {
        "name": "AddRxLineItemToAuthorizationRequest",
        "namespace": "http://www.casenet.com/AddRxLineItemToAuthorizationRequest"
      }
    },
    "AddServiceProcedureLineItemRequest": {
      "properties": {
        "additionalProcedures": {
          "items": {
            "$ref": "#/definitions/ModifiedProcedureCodeNaturalId"
          },
          "type": "array"
        },
        "appliedEligibilityProductId": {
          "$ref": "#/definitions/ProductId"
        },
        "authBy": {
          "enum": [
            "GROUP",
            "SPECIALTY",
            "PROVIDER",
            "PROCEDURE_CODE"
          ],
          "type": "string",
          "xml": {
            "name": "AuthorizedByType",
            "namespace": "http://www.casenet.com/AuthorizedByType"
          }
        },
        "authSpecificContactAddress": {
          "$ref": "#/definitions/CreateAddressRequest"
        },
        "authSpecificContactFax": {
          "$ref": "#/definitions/Phone"
        },
        "authSpecificContactFaxI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "authSpecificContactName": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "authSpecificContactPhone": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "authSpecificContactPhoneI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "clinicalReviewRequired": {
          "type": "boolean"
        },
        "determination": {
          "$ref": "#/definitions/DeterminationRequest"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "levelOfUrgencyOption": {
          "type": "string"
        },
        "lineItemMedicationInfoRequest": {
          "$ref": "#/definitions/SPLineItemMedicationInfoRequest"
        },
        "lineItemType": {
          "enum": [
            "IP",
            "SP",
            "RX"
          ],
          "type": "string",
          "xml": {
            "name": "UMLineItemType",
            "namespace": "http://www.casenet.com/UMLineItemType"
          }
        },
        "lineItemTypeOption": {
          "type": "string"
        },
        "locationCodeNaturalId": {
          "type": "string"
        },
        "oonReasonOption": {
          "type": "string"
        },
        "plCodeOption": {
          "type": "string"
        },
        "placeOfServiceOption": {
          "type": "string"
        },
        "primaryProcedure": {
          "$ref": "#/definitions/ModifiedProcedureCodeNaturalId"
        },
        "providerLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "providerSpecialtyOption": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestedUnits": {
          "format": "int32",
          "maximum": 999999999,
          "minimum": 1,
          "type": "integer"
        },
        "serviceTypeOption": {
          "type": "string"
        },
        "servicingProviderPhoneNumber": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "servicingProviderPhoneNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "treatmentTypeOption": {
          "type": "string"
        },
        "unitTypeOption": {
          "type": "string"
        },
        "urgencyRequestedByOption": {
          "type": "string"
        },
        "useAuthSpecificContactAddressForCorrespondence": {
          "type": "boolean"
        },
        "useRuleOutputs": {
          "type": "boolean"
        }
      },
      "required": [
        "placeOfServiceOption",
        "requestedUnits",
        "serviceTypeOption",
        "unitTypeOption"
      ],
      "type": "object",
      "xml": {
        "name": "AddServiceProcedureLineItemRequest",
        "namespace": "http://www.casenet.com/AddServiceProcedureLineItemRequest"
      }
    },
    "AddServiceProcedureLineItemToAuthorizationRequest": {
      "properties": {
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/AddServiceProcedureLineItemRequest"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array"
        },
        "nextTask": {
          "$ref": "#/definitions/ActionPathRequest"
        }
      },
      "required": [
        "authorizationVersion",
        "lineItems"
      ],
      "type": "object",
      "xml": {
        "name": "AddServiceProcedureLineItemToAuthorizationRequest",
        "namespace": "http://www.casenet.com/AddServiceProcedureLineItemToAuthorizationRequest"
      }
    },
    "AdditionalBenefit": {
      "properties": {
        "benefit": {
          "type": "string"
        },
        "coInsurance": {
          "$ref": "#/definitions/Money"
        },
        "coPay": {
          "$ref": "#/definitions/Money"
        },
        "deductible": {
          "$ref": "#/definitions/Money"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "indicator": {
          "enum": [
            "IN",
            "OUT"
          ],
          "type": "string"
        },
        "maxOOP": {
          "$ref": "#/definitions/Money"
        },
        "usedAsOf": {
          "format": "date-time",
          "type": "string"
        },
        "usedOOP": {
          "$ref": "#/definitions/Money"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtensibleObject",
        "namespace": "http://www.casenet.com/ExtensibleObject"
      }
    },
    "AdditionalInfoRequested": {
      "properties": {
        "additionalInfoRequested": {
          "type": "string"
        },
        "attempt": {
          "format": "int32",
          "type": "integer"
        },
        "attendingMD": {
          "type": "string"
        },
        "dateReceived": {
          "format": "date-time",
          "type": "string"
        },
        "dateRequested": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "phoneNumber": {
          "$ref": "#/definitions/Phone"
        },
        "requestType": {
          "enum": [
            "ADVISOR",
            "APPEAL_EXPEDITED",
            "APPEAL_STANDARD",
            "BENEFIT_EXCEPTION",
            "MEDICAL_NECESSITY_REVIEW_EXPEDITED",
            "MEDICAL_NECESSITY_REVIEW_RETRO",
            "MEDICAL_NECESSITY_REVIEW_STANDARD",
            "RECONSIDERATION",
            "STATE_REVIEW",
            "CLINICAL_REVIEW",
            "ADVISOR_REVIEW",
            "PHARMACY_REVIEW",
            "APPEAL"
          ],
          "type": "string",
          "xml": {
            "name": "UMRequestType",
            "namespace": "http://www.casenet.com/UMRequestType"
          }
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AdditionalInfoRequested",
        "namespace": "http://www.casenet.com/AdditionalInfoRequested"
      }
    },
    "Address": {
      "properties": {
        "addressForDisplayAsSingleLine": {
          "type": "string"
        },
        "addressLine1": {
          "maxLength": 120,
          "minLength": 0,
          "type": "string"
        },
        "addressLine2": {
          "maxLength": 120,
          "minLength": 0,
          "type": "string"
        },
        "addressLine3": {
          "maxLength": 120,
          "minLength": 0,
          "type": "string"
        },
        "canadaByZipCode": {
          "type": "boolean"
        },
        "city": {
          "maxLength": 35,
          "minLength": 0,
          "type": "string"
        },
        "country": {
          "maxLength": 35,
          "minLength": 0,
          "type": "string"
        },
        "countryEntity": {
          "$ref": "#/definitions/Country"
        },
        "county": {
          "maxLength": 35,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/OptionValue"
        },
        "stateText": {
          "maxLength": 120,
          "minLength": 0,
          "type": "string"
        },
        "undeliverable": {
          "type": "boolean"
        },
        "usbyZipCode": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "zipCode": {
          "maxLength": 10,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "Address",
        "namespace": "http://www.casenet.com/Address"
      }
    },
    "AddressConfiguration": {
      "properties": {
        "addressFieldConfigurations": {
          "items": {
            "$ref": "#/definitions/AddressFieldConfiguration"
          },
          "type": "array"
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "multiLineFormat": {
          "type": "string"
        },
        "singleLineFormat": {
          "type": "string"
        },
        "stateOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "AddressConfiguration",
        "namespace": "http://www.casenet.com/AddressConfiguration"
      }
    },
    "AddressFieldConfiguration": {
      "properties": {
        "addressFieldType": {
          "enum": [
            "ADDRESS_LINE_1",
            "ADDRESS_LINE_2",
            "ADDRESS_LINE_3",
            "CITY",
            "STATE",
            "STATE_TEXT",
            "COUNTY",
            "COUNTRY",
            "POSTAL_CODE"
          ],
          "type": "string",
          "xml": {
            "name": "AddressFieldType",
            "namespace": "http://www.casenet.com/AddressFieldType"
          }
        },
        "label": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "AddressFieldConfiguration",
        "namespace": "http://www.casenet.com/AddressFieldConfiguration"
      }
    },
    "AddressSearchCriteria": {
      "properties": {
        "zipCode": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "AddressSearchCriteria",
        "namespace": "http://www.casenet.com/AddressSearchCriteria"
      }
    },
    "AdminNoteRequest": {
      "properties": {
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "noteDefinitionVisibleId": {
          "type": "string"
        },
        "noteText": {
          "maxLength": 1000000,
          "minLength": 0,
          "type": "string"
        },
        "offlineCreatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "noteDefinitionVisibleId"
      ],
      "type": "object",
      "xml": {
        "name": "AdminNoteRequest",
        "namespace": "http://www.casenet.com/AbstractNoteRequest"
      }
    },
    "AdvancedCriteria": {
      "properties": {
        "city": {
          "$ref": "#/definitions/StringCriteria"
        },
        "country": {
          "$ref": "#/definitions/StringCriteria"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "groupId": {
          "$ref": "#/definitions/StringCriteria"
        },
        "groupName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "locGroupId": {
          "$ref": "#/definitions/StringCriteria"
        },
        "locGroupName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "locType": {
          "$ref": "#/definitions/StringCriteria"
        },
        "medicaidId": {
          "$ref": "#/definitions/StringCriteria"
        },
        "medicareId": {
          "$ref": "#/definitions/StringCriteria"
        },
        "product": {
          "$ref": "#/definitions/StringCriteria"
        },
        "providerLanguage": {
          "$ref": "#/definitions/StringCriteria"
        },
        "providerRating": {
          "$ref": "#/definitions/StringCriteria"
        },
        "serviceCode": {
          "$ref": "#/definitions/ProcedureCodeNaturalId"
        },
        "serviceName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "sourceId": {
          "$ref": "#/definitions/StringCriteria"
        },
        "specialtyOptionLabel": {
          "$ref": "#/definitions/StringCriteria"
        }
      },
      "type": "object",
      "xml": {
        "name": "AdvancedCriteria",
        "namespace": "http://www.casenet.com/AdvancedCriteria"
      }
    },
    "AdvisorReviewActionPathRequest": {
      "properties": {
        "activity": {
          "enum": [
            "UM_EVALUATE_ADVISOR_REVIEW_TASK"
          ],
          "type": "string",
          "xml": {
            "name": "AdvisorReviewActivity",
            "namespace": "http://www.casenet.com/AdvisorReviewActivity"
          }
        },
        "assignedTo": {
          "$ref": "#/definitions/AssigneeRequest"
        },
        "description": {
          "maxLength": 2048,
          "minLength": 0,
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "priority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "useRuleOutputs": {
          "type": "boolean"
        }
      },
      "required": [
        "useRuleOutputs"
      ],
      "type": "object",
      "xml": {
        "name": "AdvisorReviewActionPathRequest",
        "namespace": "http://www.casenet.com/AdvisorReviewActionPathRequest"
      }
    },
    "Age": {
      "properties": {
        "days": {
          "format": "int32",
          "type": "integer"
        },
        "months": {
          "format": "int32",
          "type": "integer"
        },
        "weeks": {
          "format": "int32",
          "type": "integer"
        },
        "years": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "Age",
        "namespace": "http://www.casenet.com/Age"
      }
    },
    "Allergy": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "allergy": {
          "$ref": "#/definitions/OptionValue"
        },
        "allergyDetail": {
          "type": "string"
        },
        "allergyType": {
          "enum": [
            "TRUCARE",
            "MEDISPAN"
          ],
          "type": "string",
          "xml": {
            "name": "AllergyType",
            "namespace": "http://www.casenet.com/AllergyType"
          }
        },
        "dateIdentified": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "medispanAllergyDescription": {
          "type": "string"
        },
        "otherAllergy": {
          "type": "string"
        },
        "otherReaction": {
          "type": "string"
        },
        "reaction": {
          "$ref": "#/definitions/OptionValue"
        },
        "severity": {
          "$ref": "#/definitions/OptionValue"
        },
        "source": {
          "$ref": "#/definitions/OptionValue"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        },
        "voided": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "Allergy",
        "namespace": "http://www.casenet.com/Allergy"
      }
    },
    "AllergyConfiguration": {
      "properties": {
        "allergyOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "allergyRequired": {
          "type": "boolean"
        },
        "reactionOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "reactionRequired": {
          "type": "boolean"
        },
        "severityOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "severityRequired": {
          "type": "boolean"
        },
        "sourceOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "sourceRequired": {
          "type": "boolean"
        },
        "voidConfig": {
          "$ref": "#/definitions/VoidConfig"
        }
      },
      "type": "object",
      "xml": {
        "name": "AllergyConfiguration",
        "namespace": "http://www.casenet.com/AllergyConfiguration"
      }
    },
    "AllergySearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/Allergy"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "Answer": {
      "properties": {
        "answerDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "answerParts": {
          "items": {
            "$ref": "#/definitions/AbstractAnswerPart"
          },
          "type": "array"
        },
        "assessmentQuestionDefinitionId": {
          "type": "string"
        },
        "medicationId": {
          "type": "string"
        }
      },
      "required": [
        "answerParts",
        "assessmentQuestionDefinitionId"
      ],
      "type": "object",
      "xml": {
        "name": "Answer",
        "namespace": "http://www.casenet.com/Answer"
      }
    },
    "AnswerDefinition": {
      "properties": {
        "answerDataType": {
          "$ref": "#/definitions/DataTypeConfiguration"
        },
        "answerDisplayType": {
          "$ref": "#/definitions/DisplayTypeConfiguration"
        },
        "answerLabel": {
          "type": "string"
        },
        "conditionalResponseDefinitions": {
          "items": {
            "$ref": "#/definitions/AbstractConditionalResponseDefinition"
          },
          "type": "array",
          "uniqueItems": true
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "externalAnswerDefMetadata": {
          "$ref": "#/definitions/ExternalAnswerDefMetadata"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "metaOptionGroup": {
          "$ref": "#/definitions/MetaOptionGroup"
        },
        "numberOfColumns": {
          "format": "int32",
          "type": "integer"
        },
        "obsolete": {
          "type": "boolean"
        },
        "orientation": {
          "enum": [
            "HORIZONTAL",
            "VERTICAL"
          ],
          "type": "string"
        },
        "questionDefinition": {
          "$ref": "#/definitions/QuestionDefinition"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AnswerRequest": {
      "properties": {
        "answerDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "answerPartRequests": {
          "items": {
            "$ref": "#/definitions/AbstractAnswerPartRequest"
          },
          "type": "array"
        },
        "assessmentQuestionDefinitionId": {
          "type": "string"
        },
        "medicationId": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "AnswerRequest",
        "namespace": "http://www.casenet.com/AnswerRequest"
      }
    },
    "Api": {
      "properties": {
        "operations": {
          "items": {
            "$ref": "#/definitions/ApiMethod"
          },
          "type": "array"
        },
        "path": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "Api",
        "namespace": "http://www.casenet.com/Api"
      }
    },
    "ApiGroup": {
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "apis": {
          "items": {
            "$ref": "#/definitions/Api"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "resourcePath": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object",
      "xml": {
        "name": "ApiGroup",
        "namespace": "http://www.casenet.com/ApiGroup"
      }
    },
    "ApiMethod": {
      "properties": {
        "consumes": {
          "items": {
            "type": "string",
            "xml": {
              "name": "enum"
            }
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "method": {
          "enum": [
            "GET",
            "POST",
            "PUT",
            "DELETE"
          ],
          "type": "string",
          "xml": {
            "name": "HttpMethod",
            "namespace": "http://www.casenet.com/HttpMethod"
          }
        },
        "operationId": {
          "type": "string"
        },
        "parameters": {
          "items": {
            "$ref": "#/definitions/ApiParameter"
          },
          "type": "array"
        },
        "produces": {
          "items": {
            "type": "string",
            "xml": {
              "name": "enum"
            }
          },
          "type": "array"
        },
        "summary": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ApiMethod",
        "namespace": "http://www.casenet.com/ApiMethod"
      }
    },
    "ApiParameter": {
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "items": {
            "type": "string",
            "xml": {
              "name": "enum"
            }
          },
          "type": "array"
        },
        "format": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "paramType": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ApiParameter",
        "namespace": "http://www.casenet.com/ApiParameter"
      }
    },
    "Appeal": {
      "properties": {
        "acknowledgementLetterSentDate": {
          "format": "date-time",
          "type": "string"
        },
        "additionalRequestedInformation": {
          "items": {
            "$ref": "#/definitions/AdditionalInfoRequested"
          },
          "type": "array"
        },
        "appealDueDateHistory": {
          "items": {
            "$ref": "#/definitions/AppealDueDateHistoryRecord"
          },
          "type": "array"
        },
        "correspondenceNotifications": {
          "items": {
            "$ref": "#/definitions/CorrespondenceNotification"
          },
          "type": "array"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "dueDateChangeReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "dueDateChangeReasonOther": {
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "globalOutcome": {
          "$ref": "#/definitions/AppealGlobalOutcomeFull"
        },
        "id": {
          "type": "string"
        },
        "level": {
          "$ref": "#/definitions/OptionValue"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/LineItemLite"
          },
          "type": "array"
        },
        "method": {
          "$ref": "#/definitions/OptionValue"
        },
        "number": {
          "type": "string"
        },
        "outcomes": {
          "items": {
            "$ref": "#/definitions/AppealOutcome"
          },
          "type": "array"
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "phoneNotifications": {
          "items": {
            "$ref": "#/definitions/PhoneNotification"
          },
          "type": "array"
        },
        "reason": {
          "$ref": "#/definitions/OptionValue"
        },
        "reasonOther": {
          "type": "string"
        },
        "receivedDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestorAddress": {
          "$ref": "#/definitions/Address"
        },
        "requestorAlternatePhone": {
          "$ref": "#/definitions/Phone"
        },
        "requestorEmail": {
          "type": "string"
        },
        "requestorFax": {
          "$ref": "#/definitions/Phone"
        },
        "requestorName": {
          "type": "string"
        },
        "requestorPrimaryPhone": {
          "$ref": "#/definitions/Phone"
        },
        "requestorType": {
          "$ref": "#/definitions/OptionValue"
        },
        "reviews": {
          "items": {
            "$ref": "#/definitions/AppealReviewLiteWithRFI"
          },
          "type": "array"
        },
        "type": {
          "$ref": "#/definitions/OptionValue"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "urgency": {
          "$ref": "#/definitions/OptionValue"
        },
        "urgencyChangeReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "urgencyChangeReasonOther": {
          "type": "string"
        },
        "verbalNotificationExpeditedDenialDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "Appeal",
        "namespace": "http://www.casenet.com/Appeal"
      }
    },
    "AppealActionPathRequest": {
      "properties": {
        "appealActivity": {
          "enum": [
            "APPEAL_CLINICAL_REVIEW",
            "APPEAL_ADVISOR_REVIEW",
            "APPEAL_OUTCOME",
            "APPEAL_NOTIFICATION",
            "APPEAL_EVALUATE_ADVISOR_REVIEW_TASK"
          ],
          "type": "string",
          "xml": {
            "name": "AppealActivity",
            "namespace": "http://www.casenet.com/AppealActivity"
          }
        },
        "assignedTo": {
          "$ref": "#/definitions/AssigneeRequest"
        },
        "beginWorkDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "maxLength": 2048,
          "minLength": 0,
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "priority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "reminderDate": {
          "format": "date-time",
          "type": "string"
        },
        "selectedLineItemsNumbers": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array",
          "uniqueItems": true
        },
        "useRuleOutputs": {
          "type": "boolean"
        }
      },
      "required": [
        "appealActivity",
        "useRuleOutputs"
      ],
      "type": "object",
      "xml": {
        "name": "AppealActionPathRequest",
        "namespace": "http://www.casenet.com/AppealActionPathRequest"
      }
    },
    "AppealDueDateHistoryRecord": {
      "properties": {
        "changeReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "changeReasonOther": {
          "type": "string"
        },
        "changedBy": {
          "$ref": "#/definitions/User"
        },
        "changedDate": {
          "format": "date-time",
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AppealDueDateHistoryRecord",
        "namespace": "http://www.casenet.com/AppealDueDateHistoryRecord"
      }
    },
    "AppealGlobalOutcome": {
      "properties": {
        "completionDate": {
          "format": "date-time",
          "type": "string"
        },
        "outcome": {
          "$ref": "#/definitions/OptionValue"
        },
        "outcomeDetail": {
          "$ref": "#/definitions/OptionValue"
        },
        "outcomeOther": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AppealGlobalOutcome",
        "namespace": "http://www.casenet.com/AppealGlobalOutcome"
      }
    },
    "AppealGlobalOutcomeFull": {
      "properties": {
        "completionDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "decision": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "notificationTo": {
          "$ref": "#/definitions/OptionValue"
        },
        "outcome": {
          "$ref": "#/definitions/OptionValue"
        },
        "outcomeDetail": {
          "$ref": "#/definitions/OptionValue"
        },
        "outcomeOther": {
          "type": "string"
        },
        "resolutionLetterSentDate": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "verbalNotificationOfResolutionDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AppealGlobalOutcomeFull",
        "namespace": "http://www.casenet.com/AppealGlobalOutcomeFull"
      }
    },
    "AppealInfo": {
      "properties": {
        "appealId": {
          "type": "string"
        },
        "appealNumber": {
          "type": "string"
        },
        "appealState": {
          "enum": [
            "DRAFT",
            "OPEN",
            "CLOSED",
            "VOID"
          ],
          "type": "string",
          "xml": {
            "name": "AppealState",
            "namespace": "http://www.casenet.com/AppealState"
          }
        }
      },
      "type": "object"
    },
    "AppealOutcome": {
      "properties": {
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "decision": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lineItem": {
          "$ref": "#/definitions/LineItemLite"
        },
        "notificationTo": {
          "$ref": "#/definitions/OptionValue"
        },
        "outcome": {
          "$ref": "#/definitions/OptionValue"
        },
        "outcomeDetail": {
          "$ref": "#/definitions/OptionValue"
        },
        "outcomeOther": {
          "type": "string"
        },
        "resolutionLetterSentDate": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "verbalNotificationOfResolutionDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AppealOutcome",
        "namespace": "http://www.casenet.com/AppealOutcome"
      }
    },
    "AppealRequestForInformationRequest": {
      "properties": {
        "answerToRequest": {
          "type": "string"
        },
        "attemptNumber": {
          "format": "int32",
          "type": "integer"
        },
        "attendingMD": {
          "type": "string"
        },
        "dateReceived": {
          "format": "date-time",
          "type": "string"
        },
        "dateRequested": {
          "format": "date-time",
          "type": "string"
        },
        "informationRequested": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "requestTypeOption": {
          "enum": [
            "ADVISOR",
            "APPEAL_EXPEDITED",
            "APPEAL_STANDARD",
            "BENEFIT_EXCEPTION",
            "MEDICAL_NECESSITY_REVIEW_EXPEDITED",
            "MEDICAL_NECESSITY_REVIEW_RETRO",
            "MEDICAL_NECESSITY_REVIEW_STANDARD",
            "RECONSIDERATION",
            "STATE_REVIEW",
            "CLINICAL_REVIEW",
            "ADVISOR_REVIEW",
            "PHARMACY_REVIEW",
            "APPEAL"
          ],
          "type": "string",
          "xml": {
            "name": "UMRequestType",
            "namespace": "http://www.casenet.com/UMRequestType"
          }
        }
      },
      "required": [
        "attemptNumber",
        "dateRequested",
        "informationRequested",
        "requestTypeOption"
      ],
      "type": "object"
    },
    "AppealReview": {
      "properties": {
        "additionalRequestedInformation": {
          "items": {
            "$ref": "#/definitions/AdditionalInfoRequested"
          },
          "type": "array"
        },
        "advisorReviewOutcome": {
          "$ref": "#/definitions/OptionValue"
        },
        "advisorReviewOutcomeOther": {
          "type": "string"
        },
        "completedDate": {
          "format": "date-time",
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "informationReviewed": {
          "items": {
            "$ref": "#/definitions/InformationReviewed"
          },
          "type": "array"
        },
        "initiatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "innerReview": {
          "$ref": "#/definitions/BaseInnerReview"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/LineItemLite"
          },
          "type": "array"
        },
        "rationale": {
          "type": "string"
        },
        "reviewNotes": {
          "type": "string"
        },
        "reviewer": {
          "$ref": "#/definitions/AppealReviewer"
        },
        "reviewerSpecialty": {
          "$ref": "#/definitions/OptionValue"
        },
        "type": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "AppealReview",
        "namespace": "http://www.casenet.com/AppealReview"
      }
    },
    "AppealReviewLiteWithRFI": {
      "properties": {
        "additionalRequestedInformation": {
          "items": {
            "$ref": "#/definitions/AdditionalInfoRequested"
          },
          "type": "array"
        },
        "appealReviewState": {
          "enum": [
            "DRAFT",
            "SUBMITTED"
          ],
          "type": "string",
          "xml": {
            "name": "AppealReviewState",
            "namespace": "http://www.casenet.com/AppealReviewState"
          }
        },
        "appealReviewer": {
          "$ref": "#/definitions/AppealReviewer"
        },
        "completedDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "informationReviewed": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "initiatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/LineItemLite"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "AppealReviewLiteWithRFI",
        "namespace": "http://www.casenet.com/AppealReviewLiteWithRFI"
      }
    },
    "AppealReviewRequest": {
      "properties": {
        "advisorReviewOutcomeOption": {
          "type": "string"
        },
        "advisorReviewOutcomeOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "baseAppealReviewerRequest": {
          "$ref": "#/definitions/BaseAppealReviewerRequest"
        },
        "baseInnerReviewRequest": {
          "$ref": "#/definitions/BaseInnerReviewRequest"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "informationReviewedList": {
          "items": {
            "$ref": "#/definitions/InformationReviewedRequest"
          },
          "type": "array"
        },
        "lineItemNumberUnderReview": {
          "format": "int32",
          "type": "integer"
        },
        "lineItemNumbers": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array",
          "uniqueItems": true
        },
        "rationale": {
          "type": "string"
        },
        "requestForInformationList": {
          "items": {
            "$ref": "#/definitions/AppealRequestForInformationRequest"
          },
          "type": "array"
        },
        "reviewCompletedDate": {
          "format": "date-time",
          "type": "string"
        },
        "reviewInitiatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "reviewNotes": {
          "maxLength": 5000,
          "minLength": 0,
          "type": "string"
        },
        "reviewType": {
          "enum": [
            "CLINICAL_REVIEW",
            "ADVISOR_REVIEW"
          ],
          "type": "string"
        },
        "reviewerSpecialtyOption": {
          "type": "string"
        }
      },
      "required": [
        "lineItemNumberUnderReview",
        "lineItemNumbers",
        "reviewType",
        "reviewerSpecialtyOption"
      ],
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "AppealReviewer": {
      "properties": {
        "id": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AppealReviewer",
        "namespace": "http://www.casenet.com/AppealReviewer"
      }
    },
    "AppealSearchCriteria": {
      "properties": {
        "appealType": {
          "enum": [
            "DRAFT",
            "SUBMITTED",
            "ALL"
          ],
          "type": "string",
          "xml": {
            "name": "AppealType",
            "namespace": "http://www.casenet.com/AppealType"
          }
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/AppealSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AppealSearchCriteria",
        "namespace": "http://www.casenet.com/AppealSearchCriteria"
      }
    },
    "AppealSearchResult": {
      "properties": {
        "appealClosedDate": {
          "format": "date-time",
          "type": "string"
        },
        "appealDueDate": {
          "format": "date-time",
          "type": "string"
        },
        "appealLevel": {
          "$ref": "#/definitions/OptionValue"
        },
        "appealNumber": {
          "type": "string"
        },
        "appealOutcome": {
          "type": "string"
        },
        "appealReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "appealReasonOther": {
          "type": "string"
        },
        "appealReceivedDate": {
          "format": "date-time",
          "type": "string"
        },
        "appealState": {
          "enum": [
            "DRAFT",
            "OPEN",
            "CLOSED",
            "VOID"
          ],
          "type": "string",
          "xml": {
            "name": "AppealState",
            "namespace": "http://www.casenet.com/AppealState"
          }
        },
        "appealType": {
          "$ref": "#/definitions/OptionValue"
        },
        "appealUrgency": {
          "$ref": "#/definitions/OptionValue"
        },
        "globalOutcome": {
          "$ref": "#/definitions/AppealGlobalOutcome"
        },
        "id": {
          "type": "string"
        },
        "lineItemList": {
          "items": {
            "$ref": "#/definitions/LineItemWithAppealStatus"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "AppealSearchResult",
        "namespace": "http://www.casenet.com/AppealSearchResult"
      }
    },
    "AppealSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/AppealSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "AppealSearchResults",
        "namespace": "http://www.casenet.com/AppealSearchResults"
      }
    },
    "AppealSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "APPEAL_NUMBER",
            "RECEIVED_DATE",
            "DUE_DATE",
            "APPEAL_URGENCY",
            "APPEAL_TYPE",
            "APPEAL_LEVEL",
            "STATE",
            "CLOSED_DATE",
            "OUTCOME"
          ],
          "type": "string",
          "xml": {
            "name": "AppealSortColumn",
            "namespace": "http://www.casenet.com/AppealSortColumn"
          }
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "AppealSortField",
        "namespace": "http://www.casenet.com/AppealSortField"
      }
    },
    "AppealTask": {
      "properties": {
        "activity": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "assignedTo": {
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "user",
            "queue"
          ],
          "type": "string",
          "xml": {
            "name": "AssigneeType",
            "namespace": "http://www.casenet.com/AssigneeType"
          }
        },
        "completedDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "maxLength": 2048,
          "minLength": 0,
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instanceId": {
          "type": "string"
        },
        "priority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "reminderDate": {
          "format": "date-time",
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "enum": [
            "OPEN",
            "CLOSED",
            "CANCELLED",
            "OVERDUE",
            "NOT_CREATED"
          ],
          "type": "string",
          "xml": {
            "name": "TaskStatus",
            "namespace": "http://www.casenet.com/TaskStatus"
          }
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "activity",
        "assignedTo",
        "assigneeType",
        "dueDate",
        "instanceId",
        "priority",
        "status"
      ],
      "type": "object",
      "xml": {
        "name": "AppealTask",
        "namespace": "http://www.casenet.com/AppealTask"
      }
    },
    "AppealTasksBhpConfiguration": {
      "properties": {
        "appealTasksBhpSetupList": {
          "items": {
            "$ref": "#/definitions/AppealTasksBhpSetup"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AppealTasksBhpSetup": {
      "properties": {
        "dueDateOffset": {
          "format": "int32",
          "type": "integer"
        },
        "dueDateOffsetFrom": {
          "enum": [
            "APPEAL_RECEIVED_DATE",
            "APPEAL_ADVISOR_REVIEW_INITIATED_DATE",
            "APPEAL_CREATED_DATE",
            "APPEAL_REVIEW_INITIATED_DATE",
            "APPEAL_REVIEW_COMPLETED_DATE",
            "OUTCOME_RECORDED_DATE"
          ],
          "type": "string"
        },
        "dueDateOffsetType": {
          "enum": [
            "HOURS",
            "CALENDAR_DAYS",
            "BUSINESS_DAYS"
          ],
          "type": "string"
        },
        "jbpmTaskPriority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "queue": {
          "$ref": "#/definitions/Queue"
        },
        "taskDescription": {
          "type": "string"
        },
        "taskType": {
          "enum": [
            "APPEAL_CLINICAL_REVIEW",
            "APPEAL_ADVISOR_REVIEW",
            "APPEAL_OUTCOME",
            "APPEAL_NOTIFICATION",
            "APPEAL_EVALUATE_ADVISOR_REVIEW_TASK"
          ],
          "type": "string",
          "xml": {
            "name": "AppealActivity",
            "namespace": "http://www.casenet.com/AppealActivity"
          }
        }
      },
      "type": "object"
    },
    "AppealableLineItemResponse": {
      "properties": {
        "appealableLineItemIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Appointment": {
      "properties": {
        "durationOverrideReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "endTime": {
          "format": "date-time",
          "type": "string"
        },
        "eventType": {
          "$ref": "#/definitions/OptionValue"
        },
        "fieldVisit": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "memberLite": {
          "$ref": "#/definitions/MemberLite"
        },
        "missedCancelledAppointmentInfo": {
          "$ref": "#/definitions/MissedCancelledAppointmentInfo"
        },
        "notes": {
          "type": "string"
        },
        "otherContactPhoneNumberType": {
          "$ref": "#/definitions/OptionValue"
        },
        "otherEventType": {
          "type": "string"
        },
        "otherUsers": {
          "items": {
            "$ref": "#/definitions/User"
          },
          "type": "array"
        },
        "ownerUser": {
          "$ref": "#/definitions/User"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneNumberObject"
        },
        "startTime": {
          "format": "date-time",
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "Appointment",
        "namespace": "http://www.casenet.com/Appointment"
      }
    },
    "AppointmentSearchCriteria": {
      "properties": {
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "endDate",
        "startDate"
      ],
      "type": "object",
      "xml": {
        "name": "AppointmentSearchCriteria",
        "namespace": "http://www.casenet.com/AppointmentSearchCriteria"
      }
    },
    "AppointmentSearchResults": {
      "properties": {
        "appointments": {
          "items": {
            "$ref": "#/definitions/Appointment"
          },
          "type": "array"
        },
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "startIndex": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AppointmentSearchResults",
        "namespace": "http://www.casenet.com/AppointmentSearchResults"
      }
    },
    "AppointmentTypeConfiguration": {
      "properties": {
        "coachFilterAttributeConfigurations": {
          "items": {
            "$ref": "#/definitions/CoachFilterAttributeConfiguration"
          },
          "type": "array",
          "uniqueItems": true
        },
        "defaultDurationMinutes": {
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "eventType": {
          "$ref": "#/definitions/OptionValue"
        },
        "fieldVisit": {
          "type": "boolean"
        },
        "maxDaysIntoFutureSchedulingAllowed": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AppointmentTypeConfiguration",
        "namespace": "http://www.casenet.com/AppointmentTypeConfiguration"
      }
    },
    "Artifact": {
      "properties": {
        "cnCase": {
          "$ref": "#/definitions/CnCaseLite"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ArtifactNote": {
      "properties": {
        "artifactId": {
          "type": "string"
        },
        "artifactName": {
          "type": "string"
        },
        "note": {
          "$ref": "#/definitions/NoteInstance"
        }
      },
      "type": "object"
    },
    "AssessmentAnswerTriggeredArtifacts": {
      "properties": {
        "assementTriggeredTaskDefinitions": {
          "items": {
            "$ref": "#/definitions/TaskDefinitionLite"
          },
          "type": "array",
          "uniqueItems": true
        },
        "carePlanTriggered": {
          "type": "boolean"
        },
        "problemDefinitionMCGUids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "programTriggerableDefinitionSet": {
          "items": {
            "$ref": "#/definitions/ProgramTriggerableDefinition"
          },
          "type": "array",
          "uniqueItems": true
        },
        "recommendedAssessmentMetaTaskInfo": {
          "items": {
            "$ref": "#/definitions/RecommendedAssessmentMetaTaskInfo"
          },
          "type": "array",
          "uniqueItems": true
        },
        "taskTabWarnings": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "textActionMCGUids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AssessmentBhpSetup": {
      "properties": {
        "assessmentMeta": {
          "$ref": "#/definitions/AssessmentMeta"
        },
        "assessmentMetaId": {
          "type": "string"
        },
        "assignPrimaryHealthCoach": {
          "type": "boolean"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "dueDateOffset": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "jbpmTaskPriority": {
          "enum": [
            "HIGH",
            "NORMAL",
            "LOW"
          ],
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "publishedActiveAssessmentMeta": {
          "type": "boolean"
        },
        "queue": {
          "$ref": "#/definitions/Queue"
        },
        "triggerArtifactId": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AssessmentBhpSetupLite": {
      "properties": {
        "assignPrimaryHealthCoach": {
          "type": "boolean"
        },
        "dueDateOffset": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "jbpmTaskPriority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "queue": {
          "$ref": "#/definitions/Queue"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskAttributesBhpSetup",
        "namespace": "http://www.casenet.com/TaskAttributesBhpSetup"
      }
    },
    "AssessmentConfiguration": {
      "properties": {
        "mcgEnabled": {
          "type": "boolean"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "PortableConfiguration",
        "namespace": "http://www.casenet.com/PortableConfiguration"
      }
    },
    "AssessmentLite": {
      "properties": {
        "assessmentMeta": {
          "$ref": "#/definitions/AssessmentMetaLite"
        },
        "cnCase": {
          "$ref": "#/definitions/CnCaseLite"
        },
        "completedBy": {
          "$ref": "#/definitions/User"
        },
        "completedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "signatureFileName": {
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "taskAssignee": {
          "type": "string"
        },
        "taskAssigneeType": {
          "enum": [
            "USERS",
            "GROUP_QUEUES",
            "TEAMS"
          ],
          "type": "string",
          "xml": {
            "name": "TaskAssigneeType",
            "namespace": "http://www.casenet.com/TaskAssigneeType"
          }
        },
        "taskId": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        },
        "voided": {
          "type": "boolean"
        },
        "voidedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "AssessmentLite",
        "namespace": "http://www.casenet.com/AssessmentLite"
      }
    },
    "AssessmentMeta": {
      "properties": {
        "allQuestions": {
          "items": {
            "$ref": "#/definitions/QuestionDefinition"
          },
          "type": "array"
        },
        "assessmentQuestionGroups": {
          "items": {
            "$ref": "#/definitions/AssessmentQuestionGroupDefinition"
          },
          "type": "array",
          "uniqueItems": true
        },
        "childrenWithReadyToExport": {
          "items": {
            "$ref": "#/definitions/Exportable"
          },
          "type": "array"
        },
        "conditionalAssessmentArtifactType": {
          "enum": [
            "MEDICATION"
          ],
          "type": "string"
        },
        "copiedFromAssmVisibleId": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "deactivatedMCGAssessment": {
          "type": "boolean"
        },
        "definitionVersion": {
          "$ref": "#/definitions/DefinitionVersion"
        },
        "definitionVersionNumber": {
          "format": "int32",
          "type": "integer"
        },
        "draft": {
          "type": "boolean"
        },
        "exportEntityDetails": {
          "type": "string"
        },
        "externalAssessmentMetadata": {
          "$ref": "#/definitions/ExternalAssessmentMetadata"
        },
        "highScore": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "lineage": {
          "$ref": "#/definitions/SimpleLineage"
        },
        "lowScore": {
          "format": "int32",
          "type": "integer"
        },
        "mediumScore": {
          "format": "int32",
          "type": "integer"
        },
        "metaStatus": {
          "enum": [
            "IN_PROGRESS",
            "PUBLISHED",
            "HIDDEN"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "noteDefinitionType": {
          "enum": [
            "AUTH",
            "APPEAL",
            "ASSESSMENT",
            "ASSESSMENT_SUMMARY",
            "CASE",
            "CAREPLAN",
            "COST_SAVINGS",
            "TRANSITION_PLAN",
            "FOLLOWUP",
            "INDIVIDUAL_SERVICE_PLAN",
            "MCP",
            "MEMBER",
            "MEMBER_DEFINED_OUTCOME",
            "MANUAL_QUALITY_MEASURES",
            "PRESCREEN_DATA_IP",
            "PRESCREEN_DATA_SP",
            "PRESCREEN_DATA_RX",
            "PROBLEM",
            "QUESTION_GROUP",
            "QUALITY_MEASURES",
            "TRANSPORTATION",
            "SERVICE_REQUEST",
            "TASK_ATTEMPT",
            "TEAM_APPROACH",
            "UM_APPEAL",
            "IDENTITY_VERIFICATION",
            "AAG",
            "MEDICATION"
          ],
          "type": "string"
        },
        "noteDefinitions": {
          "items": {
            "$ref": "#/definitions/NoteDefinition"
          },
          "type": "array",
          "uniqueItems": true
        },
        "obsolete": {
          "type": "boolean"
        },
        "pastPublishDate": {
          "type": "boolean"
        },
        "programsRecommendedByOption": {
          "enum": [
            "SELECTED_PROGRAMS",
            "ASSSESSMENT_ANSWER_CHOICES"
          ],
          "type": "string"
        },
        "publishComment": {
          "type": "string"
        },
        "publishDateToday": {
          "type": "boolean"
        },
        "published": {
          "type": "boolean"
        },
        "readyToExport": {
          "type": "boolean"
        },
        "readyToExportInfo": {
          "$ref": "#/definitions/ReadyToExportInfo"
        },
        "resource": {
          "$ref": "#/definitions/Resource"
        },
        "resourceVersion": {
          "$ref": "#/definitions/ResourceVersion"
        },
        "scoreValuesOrdered": {
          "type": "boolean"
        },
        "source": {
          "enum": [
            "MCG",
            "TRUCARE"
          ],
          "type": "string"
        },
        "targetPublishDate": {
          "format": "date",
          "type": "string"
        },
        "triggerTasksWithIntervention": {
          "type": "boolean"
        },
        "type": {
          "enum": [
            "INITIAL",
            "GENERAL",
            "SPECIALTY"
          ],
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AssessmentMetaFull": {
      "properties": {
        "assessmentQuestionGroupDefinitions": {
          "items": {
            "$ref": "#/definitions/AssessmentQuestionGroupDefinitionLite"
          },
          "type": "array",
          "uniqueItems": true
        },
        "conditionalAssessmentArtifactType": {
          "enum": [
            "MEDICATION"
          ],
          "type": "string"
        },
        "contentVersion": {
          "type": "string"
        },
        "copiedFromAssmVisibleId": {
          "type": "string"
        },
        "custom": {
          "type": "boolean"
        },
        "duplicateQuestionMaps": {
          "additionalProperties": {
            "$ref": "#/definitions/AssessmentQuestionDefinitionListWrapper"
          },
          "type": "object"
        },
        "highScore": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "lowScore": {
          "format": "int32",
          "type": "integer"
        },
        "mediumScore": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "noteDefinitions": {
          "items": {
            "$ref": "#/definitions/NoteDefinitionLite"
          },
          "type": "array"
        },
        "resourceId": {
          "type": "string"
        },
        "resourceName": {
          "type": "string"
        },
        "source": {
          "enum": [
            "MCG",
            "TRUCARE"
          ],
          "type": "string",
          "xml": {
            "name": "AssessmentSource",
            "namespace": "http://www.casenet.com/AssessmentSource"
          }
        },
        "targetPublishDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "type": {
          "enum": [
            "INITIAL",
            "GENERAL",
            "SPECIALTY"
          ],
          "type": "string",
          "xml": {
            "name": "AssessmentType",
            "namespace": "http://www.casenet.com/AssessmentType"
          }
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "AssessmentMetaLite": {
      "properties": {
        "conditionalAssessmentArtifactType": {
          "enum": [
            "MEDICATION"
          ],
          "type": "string"
        },
        "contentVersion": {
          "type": "string"
        },
        "custom": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resourceId": {
          "type": "string"
        },
        "resourceName": {
          "type": "string"
        },
        "source": {
          "enum": [
            "MCG",
            "TRUCARE"
          ],
          "type": "string",
          "xml": {
            "name": "AssessmentSource",
            "namespace": "http://www.casenet.com/AssessmentSource"
          }
        },
        "type": {
          "enum": [
            "INITIAL",
            "GENERAL",
            "SPECIALTY"
          ],
          "type": "string",
          "xml": {
            "name": "AssessmentType",
            "namespace": "http://www.casenet.com/AssessmentType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "AssessmentMetaLite",
        "namespace": "http://www.casenet.com/AssessmentMetaLite"
      }
    },
    "AssessmentProgramTriggerRequest": {
      "properties": {
        "engagementLevelOption": {
          "type": "string"
        },
        "firstSessionTaskPackageVisibleId": {
          "type": "string"
        },
        "programName": {
          "type": "string"
        },
        "serviceLevelOption": {
          "type": "string"
        }
      },
      "required": [
        "programName"
      ],
      "type": "object"
    },
    "AssessmentQuestionDefinition": {
      "properties": {
        "assessmentResponseDefinitions": {
          "items": {
            "$ref": "#/definitions/AssessmentResponseDefinition"
          },
          "type": "array"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "prePopulate": {
          "type": "boolean"
        },
        "questionDefinition": {
          "$ref": "#/definitions/QuestionDefinition"
        },
        "required": {
          "type": "boolean"
        },
        "triggerablesUpdateAvailable": {
          "enum": [
            "NO_UPDATE",
            "UPDATE_AVAILABLE",
            "UPDATE_APPLIED",
            "UPDATE_APPLIED_WITH_NEW_VERSION"
          ],
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AssessmentQuestionDefinitionListWrapper": {
      "properties": {
        "assessmentQuestionDefinitions": {
          "items": {
            "$ref": "#/definitions/AssessmentQuestionDefinitionLite"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AssessmentQuestionDefinitionLite": {
      "properties": {
        "assessmentResponseDefinitions": {
          "items": {
            "$ref": "#/definitions/AssessmentResponseDefinitionLite"
          },
          "type": "array"
        },
        "childQuestionDefinitions": {
          "items": {
            "$ref": "#/definitions/AssessmentQuestionDefinitionLite"
          },
          "type": "array"
        },
        "dataType": {
          "enum": [
            "INTEGER",
            "STRING",
            "META_OPTION",
            "BOOLEAN",
            "BOOLEAN_DATE",
            "DATE",
            "DIAGNOSIS",
            "PHONE_NUMBER"
          ],
          "type": "string",
          "xml": {
            "name": "DataTypeConfigurationEnum",
            "namespace": "http://www.casenet.com/DataTypeConfigurationEnum"
          }
        },
        "displayType": {
          "enum": [
            "TEXT_FIELD",
            "VERTICAL_RADIO_BUTTONS",
            "HORIZONTAL_RADIO_BUTTONS",
            "LABEL",
            "VERTICAL_CHECKBOXES",
            "VERTICAL_CHECKBOXES_DATES",
            "DROPDOWN_LIST",
            "DATE_FIELD_CALENDAR",
            "PHONE_NUMBER",
            "DIAGNOSIS_FIELD",
            "THREE_COLUMN_RADIO_BUTTONS",
            "THREE_COLUMN_CHECKBOXES",
            "TEXT_AREA",
            "VERTICAL_CHECKBOX_GROUP",
            "LINK"
          ],
          "type": "string",
          "xml": {
            "name": "DisplayTypeConfigurationEnum",
            "namespace": "http://www.casenet.com/DisplayTypeConfigurationEnum"
          }
        },
        "id": {
          "type": "string"
        },
        "prePopulate": {
          "type": "boolean"
        },
        "questionDefinitionId": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "AssessmentQuestionDefinitionLite",
        "namespace": "http://www.casenet.com/AssessmentQuestionDefinitionLite"
      }
    },
    "AssessmentQuestionGroupDefinition": {
      "properties": {
        "assessmentMeta": {
          "$ref": "#/definitions/AssessmentMeta"
        },
        "assessmentQuestionDefinitions": {
          "items": {
            "$ref": "#/definitions/AssessmentQuestionDefinition"
          },
          "type": "array",
          "uniqueItems": true
        },
        "assessmentQuestionGroupScores": {
          "items": {
            "$ref": "#/definitions/AssessmentQuestionGroupScore"
          },
          "type": "array"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "externalQuestionGroupMetadata": {
          "$ref": "#/definitions/ExternalQuestionGroupMetadata"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "noteDefinitionDtos": {
          "items": {
            "type": "object"
          },
          "type": "array",
          "uniqueItems": true
        },
        "noteDefinitionType": {
          "enum": [
            "AUTH",
            "APPEAL",
            "ASSESSMENT",
            "ASSESSMENT_SUMMARY",
            "CASE",
            "CAREPLAN",
            "COST_SAVINGS",
            "TRANSITION_PLAN",
            "FOLLOWUP",
            "INDIVIDUAL_SERVICE_PLAN",
            "MCP",
            "MEMBER",
            "MEMBER_DEFINED_OUTCOME",
            "MANUAL_QUALITY_MEASURES",
            "PRESCREEN_DATA_IP",
            "PRESCREEN_DATA_SP",
            "PRESCREEN_DATA_RX",
            "PROBLEM",
            "QUESTION_GROUP",
            "QUALITY_MEASURES",
            "TRANSPORTATION",
            "SERVICE_REQUEST",
            "TASK_ATTEMPT",
            "TEAM_APPROACH",
            "UM_APPEAL",
            "IDENTITY_VERIFICATION",
            "AAG",
            "MEDICATION"
          ],
          "type": "string"
        },
        "noteDefinitions": {
          "items": {
            "$ref": "#/definitions/NoteDefinition"
          },
          "type": "array",
          "uniqueItems": true
        },
        "obsolete": {
          "type": "boolean"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "questionGroupDefinition": {
          "$ref": "#/definitions/QuestionGroupDefinition"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AssessmentQuestionGroupDefinitionLite": {
      "properties": {
        "assessmentQuestionDefinitions": {
          "items": {
            "$ref": "#/definitions/AssessmentQuestionDefinitionLite"
          },
          "type": "array",
          "uniqueItems": true
        },
        "assessmentQuestionGroupScores": {
          "items": {
            "$ref": "#/definitions/AssessmentQuestionGroupScore"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "questionGroup": {
          "$ref": "#/definitions/QuestionGroupLite"
        }
      },
      "type": "object",
      "xml": {
        "name": "AssessmentQuestionGroupDefinitionLite",
        "namespace": "http://www.casenet.com/AssessmentQuestionGroupDefinitionLite"
      }
    },
    "AssessmentQuestionGroupScore": {
      "properties": {
        "assessmentQuestionGroup": {
          "$ref": "#/definitions/AssessmentQuestionGroupDefinition"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "score": {
          "format": "int32",
          "type": "integer"
        },
        "scoreValue": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AssessmentResponseDefinition": {
      "properties": {
        "additionalAnswerDataType": {
          "enum": [
            "INTEGER",
            "STRING",
            "DATE"
          ],
          "type": "string"
        },
        "additionalAnswerLabel": {
          "type": "string"
        },
        "answerDefinition": {
          "$ref": "#/definitions/AnswerDefinition"
        },
        "assessmentQuestionDefinition": {
          "$ref": "#/definitions/AssessmentQuestionDefinition"
        },
        "assessmentTriggeredArtifactsDefinition": {
          "$ref": "#/definitions/AssessmentTriggeredArtifactsDefinition"
        },
        "childAssessmentQuestionDefinitions": {
          "items": {
            "$ref": "#/definitions/AssessmentQuestionDefinition"
          },
          "type": "array"
        },
        "conditionalAnswer": {
          "$ref": "#/definitions/AbstractAssessmentAnswerMeta"
        },
        "conditionalResponseDefinition": {
          "$ref": "#/definitions/AbstractConditionalResponseDefinition"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "hasSelectedAssmChanged": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "score": {
          "format": "int32",
          "type": "integer"
        },
        "selectedTriggerableAssessmentId": {
          "type": "string"
        },
        "updateAvailableForTriggerableAssm": {
          "enum": [
            "NO_UPDATE",
            "UPDATE_AVAILABLE",
            "UPDATE_APPLIED",
            "UPDATE_APPLIED_WITH_NEW_VERSION"
          ],
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AssessmentResponseDefinitionLite": {
      "properties": {
        "childAssessmentQuestionDefinitions": {
          "items": {
            "$ref": "#/definitions/AssessmentQuestionDefinitionLite"
          },
          "type": "array"
        },
        "conditionalAnswer": {
          "$ref": "#/definitions/AbstractAssessmentAnswerMeta"
        },
        "detailsDisplayed": {
          "type": "boolean"
        },
        "score": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AssessmentResponseDefinitionLite",
        "namespace": "http://www.casenet.com/AssessmentResponseDefinitionLite"
      }
    },
    "AssessmentScreen": {
      "properties": {
        "assessment": {
          "$ref": "#/definitions/AbstractAssessment"
        },
        "assessmentBhpSetups": {
          "items": {
            "$ref": "#/definitions/AssessmentBhpSetup"
          },
          "type": "array",
          "uniqueItems": true
        },
        "config": {
          "$ref": "#/definitions/ScreenConfigDto"
        },
        "initialVisibleQuestions": {
          "items": {
            "$ref": "#/definitions/QuestionDefinition"
          },
          "type": "array"
        },
        "noteDefinitions": {
          "items": {
            "$ref": "#/definitions/NoteDefinitionLite"
          },
          "type": "array"
        },
        "prepopulatedAnswers": {
          "additionalProperties": {
            "$ref": "#/definitions/Answer"
          },
          "type": "object"
        },
        "showProgramEnrollmentSection": {
          "type": "boolean"
        },
        "taskAssignedToUser": {
          "type": "boolean"
        },
        "taskId": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "userHasEditAccess": {
          "type": "boolean"
        },
        "voidConfig": {
          "$ref": "#/definitions/VoidConfig"
        }
      },
      "type": "object",
      "xml": {
        "name": "AssessmentScreen",
        "namespace": "http://www.casenet.com/AssessmentScreen"
      }
    },
    "AssessmentSearchCriteria": {
      "properties": {
        "assessmentId": {
          "type": "string"
        },
        "assessmentName": {
          "type": "string"
        },
        "assessmentStatusTypes": {
          "items": {
            "enum": [
              "IN_PROGRESS",
              "COMPLETE",
              "VOID"
            ],
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "assessmentType": {
          "enum": [
            "INITIAL",
            "GENERAL",
            "SPECIALTY"
          ],
          "type": "string",
          "xml": {
            "name": "AssessmentType",
            "namespace": "http://www.casenet.com/AssessmentType"
          }
        },
        "caseId": {
          "type": "string"
        },
        "caseNameOptionValue": {
          "type": "string"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/AssessmentSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "AssessmentSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/AssessmentLite"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "AssessmentSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "ASSESSMENT_ID",
            "ASSESSMENT_NAME",
            "ASSESSMENT_TYPE",
            "CASE_ID",
            "CASE_NAME",
            "CASE_NUMBER",
            "SOURCE",
            "VERSION",
            "START_DATE",
            "COMPLETE_DATE",
            "CREATED_BY",
            "LAST_UPDATED_BY",
            "STATUS"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "AssessmentStatus": {
      "properties": {
        "assessmentId": {
          "type": "string"
        },
        "assessmentMeta": {
          "$ref": "#/definitions/AssessmentMetaLite"
        },
        "assessmentStatusType": {
          "enum": [
            "IN_PROGRESS",
            "COMPLETE",
            "VOID"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "AssessmentStatusResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/AssessmentStatus"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "AssessmentSubmissionResponse": {
      "properties": {
        "assessmentId": {
          "type": "string"
        },
        "programEnrollmentResponses": {
          "items": {
            "$ref": "#/definitions/ProgramEnrollmentResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AssessmentSummary": {
      "properties": {
        "assessments": {
          "items": {
            "$ref": "#/definitions/AssessmentLite"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "AssessmentSummary",
        "namespace": "http://www.casenet.com/AssessmentSummary"
      }
    },
    "AssessmentSummaryScreen": {
      "properties": {
        "config": {
          "$ref": "#/definitions/ScreenConfigDto"
        },
        "screenObject": {
          "$ref": "#/definitions/AssessmentSummary"
        },
        "specialtyTypes": {
          "items": {
            "$ref": "#/definitions/AssessmentMetaLite"
          },
          "type": "array"
        },
        "tasks": {
          "items": {
            "$ref": "#/definitions/AssessmentTaskDTO"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "AssessmentSummaryScreen",
        "namespace": "http://www.casenet.com/AssessmentSummaryScreen"
      }
    },
    "AssessmentTaskDTO": {
      "properties": {
        "activity": {
          "type": "string"
        },
        "assessmentMeta": {
          "$ref": "#/definitions/AssessmentMetaLite"
        },
        "assessmentNameText": {
          "type": "string"
        },
        "assignedTo": {
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instanceId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "priority": {
          "format": "int32",
          "type": "integer"
        },
        "screenParameters": {
          "$ref": "#/definitions/ScreenParametersDTO"
        },
        "started": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "AssessmentTaskDTO",
        "namespace": "http://www.casenet.com/AssessmentTaskDTO"
      }
    },
    "AssessmentTaskTriggerRequest": {
      "properties": {
        "assignee": {
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "ALLOW_USER_TO_SELECT",
            "ASSIGNED_TEAM",
            "CURRENT_USER",
            "PRIMARY_CASE_OWNER",
            "QUEUE",
            "TEAM",
            "USER"
          ],
          "type": "string"
        },
        "description": {
          "maxLength": 2048,
          "minLength": 0,
          "type": "string"
        },
        "dueDateOffset": {
          "format": "int32",
          "type": "integer"
        },
        "priority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "visibleId": {
          "type": "string"
        }
      },
      "required": [
        "assigneeType",
        "dueDateOffset",
        "priority",
        "startDate",
        "visibleId"
      ],
      "type": "object"
    },
    "AssessmentTriggeredArtifactsDefinition": {
      "properties": {
        "carePlanTriggerableDefinitions": {
          "items": {
            "$ref": "#/definitions/AbstractCarePlanTriggerableDefinition"
          },
          "type": "array"
        },
        "copy": {
          "$ref": "#/definitions/AssessmentTriggeredArtifactsDefinition"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "programTriggerableDefinitions": {
          "items": {
            "$ref": "#/definitions/ProgramTriggerableDefinition"
          },
          "type": "array",
          "uniqueItems": true
        },
        "taskDefinitions": {
          "items": {
            "$ref": "#/definitions/TaskDefinition"
          },
          "type": "array",
          "uniqueItems": true
        },
        "triggerableAssessmentRecommendation": {
          "$ref": "#/definitions/AssessmentMeta"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AssessmentValidateRequest": {
      "properties": {
        "abstractAssessmentRequest": {
          "$ref": "#/definitions/AbstractAssessmentRequest"
        },
        "agreeToParticipate": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "answerRequests": {
          "items": {
            "$ref": "#/definitions/AnswerRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "assessmentMetaId": {
          "type": "string"
        },
        "locationId": {
          "type": "string"
        },
        "notes": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "questionGroupResults": {
          "items": {
            "$ref": "#/definitions/QuestionGroupResultDto"
          },
          "type": "array",
          "uniqueItems": true
        },
        "selectedPrograms": {
          "items": {
            "$ref": "#/definitions/AssessmentProgramTriggerRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "specialtyOptionValueID": {
          "type": "string"
        },
        "taskId": {
          "type": "string"
        }
      },
      "required": [
        "assessmentMetaId"
      ],
      "type": "object"
    },
    "AssignCaseToAssessmentRequest": {
      "properties": {
        "assessmentVersion": {
          "format": "int32",
          "type": "integer"
        },
        "caseId": {
          "$ref": "#/definitions/CaseId"
        }
      },
      "required": [
        "assessmentVersion"
      ],
      "type": "object"
    },
    "AssignCaseToServiceRequestRequest": {
      "properties": {
        "cnCaseId": {
          "type": "string"
        },
        "srVersion": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "cnCaseId",
        "srVersion"
      ],
      "type": "object"
    },
    "Assignee": {
      "properties": {
        "assigneeId": {
          "maxLength": 36,
          "minLength": 0,
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "user",
            "queue"
          ],
          "type": "string",
          "xml": {
            "name": "AssigneeType",
            "namespace": "http://www.casenet.com/AssigneeType"
          }
        }
      },
      "required": [
        "assigneeId",
        "assigneeType"
      ],
      "type": "object",
      "xml": {
        "name": "Assignee",
        "namespace": "http://www.casenet.com/Assignee"
      }
    },
    "AssigneeRequest": {
      "properties": {
        "assigneeName": {
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "user",
            "queue"
          ],
          "type": "string",
          "xml": {
            "name": "AssigneeType",
            "namespace": "http://www.casenet.com/AssigneeType"
          }
        }
      },
      "required": [
        "assigneeName",
        "assigneeType"
      ],
      "type": "object",
      "xml": {
        "name": "AssigneeRequest",
        "namespace": "http://www.casenet.com/AssigneeRequest"
      }
    },
    "AssociableArtifactRequest": {
      "properties": {
        "idValue": {
          "type": "object"
        },
        "type": {
          "enum": [
            "Authorization",
            "CarePlan",
            "Case",
            "ProgramEnrollment",
            "ServiceRequest",
            "Appeal"
          ],
          "type": "string",
          "xml": {
            "name": "AssociableArtifactType",
            "namespace": "http://www.casenet.com/AssociableArtifactType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "AssociableArtifactRequest",
        "namespace": "http://www.casenet.com/AssociableArtifactRequest"
      }
    },
    "AttributeValueObject": {
      "properties": {
        "copy": {
          "$ref": "#/definitions/AttributeValueObject"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "ruleValue": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "value": {
          "type": "object"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AttributeValueRequestObject": {
      "properties": {
        "value": {
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "AttributeValueRequest",
        "namespace": "http://www.casenet.com/AttributeValueRequest"
      }
    },
    "Authorization": {
      "properties": {
        "authorizationHeader": {
          "$ref": "#/definitions/AuthorizationHeader"
        },
        "authorizationNum": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/LineItem"
          },
          "type": "array"
        },
        "trackingNum": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "Authorization",
        "namespace": "http://www.casenet.com/Authorization"
      }
    },
    "AuthorizationAndLineItemsSummary": {
      "properties": {
        "authorizationId": {
          "type": "string"
        },
        "authorizationNum": {
          "type": "string"
        },
        "authorizationProcessWarnings": {
          "items": {
            "enum": [
              "DUPLICATE_AUTHORIZATION",
              "CORRESPONDENCE_AUTOMATION_FAILURE",
              "RFI_DISTRIBUTED_CORRESPONDENCE_ENABLED",
              "RFI_NO_ADDRESS_FOR_MEMBER_DESIGNEE",
              "RFI_NO_ADDRESS_FOR_MEMBER"
            ],
            "type": "string",
            "xml": {
              "name": "AuthorizationProcessWarnings",
              "namespace": "http://www.casenet.com/AuthorizationProcessWarnings"
            }
          },
          "type": "array"
        },
        "duplicated": {
          "type": "boolean"
        },
        "isOpen": {
          "type": "boolean"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/AuthorizationLineItemInfoLite"
          },
          "type": "array",
          "uniqueItems": true
        },
        "state": {
          "enum": [
            "OPEN",
            "OPEN_MODIFIED",
            "OPEN_REVISED",
            "CLOSED",
            "VOID",
            "DISCHARGED",
            "DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationState",
            "namespace": "http://www.casenet.com/UMAuthorizationState"
          }
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "UMStatus",
            "namespace": "http://www.casenet.com/UMStatus"
          }
        },
        "trackingNum": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationAndLineItemsSummary",
        "namespace": "http://www.casenet.com/AuthorizationAndLineItemsSummary"
      }
    },
    "AuthorizationAppeal": {
      "properties": {
        "appealDueDate": {
          "format": "date-time",
          "type": "string"
        },
        "appealNumber": {
          "type": "string"
        },
        "appealReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "appealReasonOther": {
          "type": "string"
        },
        "appealType": {
          "$ref": "#/definitions/OptionValue"
        },
        "appealUrgency": {
          "$ref": "#/definitions/OptionValue"
        },
        "id": {
          "type": "string"
        },
        "outcome": {
          "$ref": "#/definitions/AppealGlobalOutcome"
        },
        "receivedDate": {
          "format": "date-time",
          "type": "string"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationAppeal",
        "namespace": "http://www.casenet.com/AuthorizationAppeal"
      }
    },
    "AuthorizationAppealConfiguration": {
      "properties": {
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationAppealConfiguration",
        "namespace": "http://www.casenet.com/AuthorizationAppealConfiguration"
      }
    },
    "AuthorizationAppealSummary": {
      "properties": {
        "appealId": {
          "type": "string"
        },
        "appealNumber": {
          "type": "string"
        },
        "taskIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "appealId",
        "appealNumber"
      ],
      "type": "object",
      "xml": {
        "name": "AuthorizationAppealSummary",
        "namespace": "http://www.casenet.com/AuthorizationAppealSummary"
      }
    },
    "AuthorizationBhpConfiguration": {
      "properties": {
        "inpatientAuthorizationBhpConfiguration": {
          "$ref": "#/definitions/InpatientAuthorizationBhpConfiguration"
        },
        "rxAuthorizationBhpConfiguration": {
          "$ref": "#/definitions/RxAuthorizationBhpConfiguration"
        },
        "serviceProcedureAuthorizationBhpConfiguration": {
          "$ref": "#/definitions/ServiceProcedureAuthorizationBhpConfiguration"
        },
        "serviceRequestDisabledInAuthorizationSummary": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationBhpConfiguration",
        "namespace": "http://www.casenet.com/AuthorizationBhpConfiguration"
      }
    },
    "AuthorizationCaseAssociationRequest": {
      "properties": {
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "caseId": {
          "$ref": "#/definitions/CaseId"
        }
      },
      "required": [
        "authorizationVersion"
      ],
      "type": "object"
    },
    "AuthorizationDiagnosis": {
      "properties": {
        "id": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationDiagnosis",
        "namespace": "http://www.casenet.com/AuthorizationDiagnosis"
      }
    },
    "AuthorizationDiagnosisCode": {
      "properties": {
        "diagnosisCode": {
          "type": "string"
        },
        "diagnosisCodeType": {
          "enum": [
            "ICD9",
            "ICD10"
          ],
          "type": "string",
          "xml": {
            "name": "DiagnosisCodeType",
            "namespace": "http://www.casenet.com/DiagnosisCodeType"
          }
        },
        "voidReasonOption": {
          "type": "string"
        },
        "voidReasonOther": {
          "type": "string"
        }
      },
      "required": [
        "diagnosisCode",
        "diagnosisCodeType"
      ],
      "type": "object",
      "xml": {
        "name": "AuthorizationDiagnosisCode",
        "namespace": "http://www.casenet.com/AuthorizationDiagnosisCode"
      }
    },
    "AuthorizationDiagnosisRequest": {
      "properties": {
        "addAuthorizationDiagnosis": {
          "$ref": "#/definitions/AddAuthorizationDiagnosis"
        },
        "removeAuthorizationDiagnosis": {
          "$ref": "#/definitions/RemoveAuthorizationDiagnosis"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidAuthorizationDiagnosis": {
          "$ref": "#/definitions/VoidAuthorizationDiagnosis"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationDiagnosisRequest",
        "namespace": "http://www.casenet.com/AuthorizationDiagnosisRequest"
      }
    },
    "AuthorizationDischargeRequest": {
      "properties": {
        "dischargeDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "dischargeDiagnosisRequest": {
          "$ref": "#/definitions/CreateAuthorizationDiagnosisRequest"
        },
        "dischargeDispositionOption": {
          "type": "string"
        },
        "dischargeStatusOption": {
          "type": "string"
        },
        "qualityOfCareDetails": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "qualityOfCareIssue": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "UserOptionEnum",
            "namespace": "http://www.casenet.com/UserOptionEnum"
          }
        },
        "verified": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationDischargeRequest",
        "namespace": "http://www.casenet.com/AuthorizationDischargeRequest"
      }
    },
    "AuthorizationGlobalSearchConfiguration": {
      "properties": {
        "displayedColumns": {
          "items": {
            "$ref": "#/definitions/AuthorizationGlobalSearchDisplayedColumn"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationGlobalSearchConfiguration",
        "namespace": "http://www.casenet.com/AuthorizationGlobalSearchConfiguration"
      }
    },
    "AuthorizationGlobalSearchCriteria": {
      "properties": {
        "authorizationNumber": {
          "type": "string"
        },
        "trackingNumber": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AuthorizationGlobalSearchDisplayedColumn": {
      "properties": {
        "columnName": {
          "enum": [
            "AUTH_NUMBER",
            "TRACKING_NUMBER",
            "DIAGNOSIS",
            "REQUESTING_PROVIDER",
            "SERVICING_FACILITY",
            "SPECIALITY",
            "START_DATE",
            "END_DATE",
            "STATUS",
            "STATE",
            "ELIGIBILITY_GROUP",
            "MEMBER_GROUP",
            "POLICY_NUMBER",
            "PRODUCT",
            "BHP"
          ],
          "type": "string",
          "xml": {
            "name": "AuthorizationGlobalSearchColumnName",
            "namespace": "http://www.casenet.com/AuthorizationGlobalSearchColumnName"
          }
        },
        "displayWithNoAccess": {
          "type": "boolean"
        },
        "indexPosition": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationGlobalSearchDisplayedColumn",
        "namespace": "http://www.casenet.com/AuthorizationGlobalSearchDisplayedColumn"
      }
    },
    "AuthorizationGlobalSearchResults": {
      "properties": {
        "displayedColumns": {
          "items": {
            "enum": [
              "AUTH_NUMBER",
              "TRACKING_NUMBER",
              "DIAGNOSIS",
              "REQUESTING_PROVIDER",
              "SERVICING_FACILITY",
              "SPECIALITY",
              "START_DATE",
              "END_DATE",
              "STATUS",
              "STATE",
              "ELIGIBILITY_GROUP",
              "MEMBER_GROUP",
              "POLICY_NUMBER",
              "PRODUCT",
              "BHP"
            ],
            "type": "string",
            "xml": {
              "name": "AuthorizationGlobalSearchColumnName",
              "namespace": "http://www.casenet.com/AuthorizationGlobalSearchColumnName"
            }
          },
          "type": "array"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/AuthorizationGlobalSearchRow"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AuthorizationGlobalSearchRow": {
      "properties": {
        "authorizationNumber": {
          "type": "string"
        },
        "authorizationState": {
          "type": "string"
        },
        "authorizationType": {
          "type": "string"
        },
        "bhp": {
          "type": "string"
        },
        "canEdit": {
          "type": "boolean"
        },
        "canView": {
          "type": "boolean"
        },
        "diagnosisName": {
          "type": "string"
        },
        "diagnosisType": {
          "type": "string"
        },
        "eligibilityGroup": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "memberGroup": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "open": {
          "type": "boolean"
        },
        "policyNumber": {
          "type": "string"
        },
        "product": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "requestingProvider": {
          "type": "string"
        },
        "servicingFacility": {
          "type": "string"
        },
        "speciality": {
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "trackingNumber": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AuthorizationHeader": {
      "properties": {
        "appealed": {
          "type": "boolean"
        },
        "approvedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "authorizationDiagnosis": {
          "$ref": "#/definitions/AuthorizationDiagnosis"
        },
        "authorizationLocks": {
          "items": {
            "$ref": "#/definitions/Lock"
          },
          "type": "array",
          "uniqueItems": true
        },
        "authorizationNum": {
          "type": "string"
        },
        "authorizationState": {
          "enum": [
            "OPEN",
            "OPEN_MODIFIED",
            "OPEN_REVISED",
            "CLOSED",
            "VOID",
            "DISCHARGED",
            "DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationState",
            "namespace": "http://www.casenet.com/UMAuthorizationState"
          }
        },
        "canBeDenied": {
          "type": "boolean"
        },
        "caseId": {
          "type": "string"
        },
        "continuityOfCare": {
          "type": "boolean"
        },
        "courtOrdered": {
          "type": "boolean"
        },
        "dateSentToClaims": {
          "format": "date-time",
          "type": "string"
        },
        "deniedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "eligibleVerified": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/SimpleAttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "isOpen": {
          "type": "boolean"
        },
        "levelOfUrgency": {
          "$ref": "#/definitions/OptionValue"
        },
        "locked": {
          "type": "boolean"
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestMethod": {
          "$ref": "#/definitions/OptionValue"
        },
        "requestSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "requestedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "requestingProvider": {
          "$ref": "#/definitions/RequestingProvider"
        },
        "singleCaseAgreement": {
          "type": "boolean"
        },
        "stateDate": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "UMStatus",
            "namespace": "http://www.casenet.com/UMStatus"
          }
        },
        "trackingNum": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "urgencyRequestedBy": {
          "$ref": "#/definitions/OptionValue"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationHeader",
        "namespace": "http://www.casenet.com/AuthorizationHeader"
      }
    },
    "AuthorizationHeader2": {
      "properties": {
        "appealed": {
          "type": "boolean"
        },
        "approvedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "authorizationDiagnosis": {
          "$ref": "#/definitions/AuthorizationDiagnosis"
        },
        "authorizationLocks": {
          "items": {
            "$ref": "#/definitions/Lock"
          },
          "type": "array",
          "uniqueItems": true
        },
        "authorizationNum": {
          "type": "string"
        },
        "authorizationState": {
          "enum": [
            "OPEN",
            "OPEN_MODIFIED",
            "OPEN_REVISED",
            "CLOSED",
            "VOID",
            "DISCHARGED",
            "DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationState",
            "namespace": "http://www.casenet.com/UMAuthorizationState"
          }
        },
        "canBeDenied": {
          "type": "boolean"
        },
        "caseId": {
          "type": "string"
        },
        "continuityOfCare": {
          "type": "boolean"
        },
        "courtOrdered": {
          "type": "boolean"
        },
        "dateSentToClaims": {
          "format": "date-time",
          "type": "string"
        },
        "deniedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "eligibleVerified": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/SimpleAttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "isOpen": {
          "type": "boolean"
        },
        "levelOfUrgency": {
          "$ref": "#/definitions/OptionValue"
        },
        "locked": {
          "type": "boolean"
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestMethod": {
          "$ref": "#/definitions/OptionValue"
        },
        "requestSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "requestedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "requestingProvider": {
          "$ref": "#/definitions/RequestingProvider"
        },
        "singleCaseAgreement": {
          "type": "boolean"
        },
        "stateDate": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "UMStatus",
            "namespace": "http://www.casenet.com/UMStatus"
          }
        },
        "trackingNum": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "urgencyRequestedBy": {
          "$ref": "#/definitions/OptionValue"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SimpleExtensibleObject",
        "namespace": "http://www.casenet.com/SimpleExtensibleObject"
      }
    },
    "AuthorizationHeaderRequest": {
      "properties": {
        "continuityOfCare": {
          "type": "boolean"
        },
        "courtOrdered": {
          "type": "boolean"
        },
        "eligibleVerified": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "levelOfUrgencyOption": {
          "type": "string"
        },
        "ownerUsername": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestMethodOption": {
          "type": "string"
        },
        "requestSourceOption": {
          "type": "string"
        },
        "singleCaseAgreement": {
          "type": "boolean"
        },
        "urgencyRequestedByOption": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationHeaderRequest",
        "namespace": "http://www.casenet.com/AuthorizationHeaderRequest"
      }
    },
    "AuthorizationId": {
      "properties": {
        "authorizationIdType": {
          "enum": [
            "INTERNAL_ID",
            "AUTHORIZATION_NUMBER",
            "TRACKING_NUMBER"
          ],
          "type": "string",
          "xml": {
            "name": "AuthorizationIdType",
            "namespace": "http://www.casenet.com/AuthorizationIdType"
          }
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "authorizationIdType",
        "id"
      ],
      "type": "object",
      "xml": {
        "name": "AuthorizationId",
        "namespace": "http://www.casenet.com/AuthorizationId"
      }
    },
    "AuthorizationInfo": {
      "properties": {
        "authorizationId": {
          "type": "string"
        },
        "authorizationNum": {
          "type": "string"
        },
        "trackingNum": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationInfo",
        "namespace": "http://www.casenet.com/AuthorizationInfo"
      }
    },
    "AuthorizationLineItemInfoLite": {
      "properties": {
        "id": {
          "type": "string"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        },
        "lineItemStatus": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND",
            "NO_DECISION",
            "REVIEWED"
          ],
          "type": "string",
          "xml": {
            "name": "UMLineItemStatus",
            "namespace": "http://www.casenet.com/UMLineItemStatus"
          }
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "UMStatus",
            "namespace": "http://www.casenet.com/UMStatus"
          }
        },
        "unitCountApproved": {
          "format": "int32",
          "type": "integer"
        },
        "unitCountDenied": {
          "format": "int32",
          "type": "integer"
        },
        "unitCountDetermined": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationLineItemInfoLite",
        "namespace": "http://www.casenet.com/AuthorizationLineItemInfoLite"
      }
    },
    "AuthorizationLineItemReview": {
      "properties": {
        "administrativeDenial": {
          "type": "boolean"
        },
        "canBeSaved": {
          "type": "boolean"
        },
        "canBeSubmitted": {
          "type": "boolean"
        },
        "eligibilityBenefitVerified": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/SimpleAttributeValueObject"
          },
          "type": "object"
        },
        "externalReviewer": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "infoSourceSet": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "innerReview": {
          "$ref": "#/definitions/BaseInnerReview"
        },
        "internalReview": {
          "type": "boolean"
        },
        "isDraft": {
          "type": "boolean"
        },
        "lineItemList": {
          "items": {
            "$ref": "#/definitions/LineItemLite"
          },
          "type": "array"
        },
        "method": {
          "$ref": "#/definitions/OptionValue"
        },
        "outcome": {
          "$ref": "#/definitions/OptionValue"
        },
        "peerToPeerDate": {
          "format": "date-time",
          "type": "string"
        },
        "rationale": {
          "type": "string"
        },
        "reviewDate": {
          "format": "date-time",
          "type": "string"
        },
        "reviewNotes": {
          "type": "string"
        },
        "reviewReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "reviewType": {
          "enum": [
            "CLINICAL",
            "ADVISOR"
          ],
          "type": "string",
          "xml": {
            "name": "UMLineItemReviewType",
            "namespace": "http://www.casenet.com/UMLineItemReviewType"
          }
        },
        "reviewedBy": {
          "$ref": "#/definitions/User"
        },
        "specialty": {
          "$ref": "#/definitions/OptionValue"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationLineItemReview",
        "namespace": "http://www.casenet.com/AuthorizationLineItemReview"
      }
    },
    "AuthorizationLocation": {
      "properties": {
        "externalId": {
          "type": "string"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "npi": {
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/AuthorizationProvider"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationLocation",
        "namespace": "http://www.casenet.com/AuthorizationLocation"
      }
    },
    "AuthorizationMultiPrescreenResult": {
      "properties": {
        "authorizationPrescreenResults": {
          "items": {
            "$ref": "#/definitions/AuthorizationPrescreenResult"
          },
          "type": "array"
        }
      },
      "required": [
        "authorizationPrescreenResults"
      ],
      "type": "object"
    },
    "AuthorizationPrescreenResult": {
      "properties": {
        "authorizationRequired": {
          "type": "boolean"
        },
        "autoApprovedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "autoDetermine": {
          "enum": [
            "NO",
            "DENY",
            "APPROVE"
          ],
          "type": "string",
          "xml": {
            "name": "AutoDetermine",
            "namespace": "http://www.casenet.com/AutoDetermine"
          }
        },
        "clinicalReviewEnabledProAuth": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "decisionReason": {
          "type": "string"
        },
        "decisionReasonProAuth": {
          "type": "string"
        },
        "duplicatedAuthorization": {
          "$ref": "#/definitions/AuthorizationInfo"
        },
        "memberEligible": {
          "enum": [
            "ELIGIBLE",
            "PARTIALLY_ELIGIBLE",
            "NOT_ELIGIBLE"
          ],
          "type": "string",
          "xml": {
            "name": "MemberEligibility",
            "namespace": "http://www.casenet.com/MemberEligibility"
          }
        },
        "noteInstance": {
          "$ref": "#/definitions/NoteInstance"
        },
        "recommendedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "recommendedUnitsReason": {
          "type": "string"
        },
        "recommendedUnitsReasonProAuth": {
          "type": "string"
        },
        "requiredReason": {
          "type": "string"
        },
        "requiredReasonProAuth": {
          "type": "string"
        },
        "reviewNote": {
          "type": "string"
        },
        "reviewNoteProAuth": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationPrescreenResult",
        "namespace": "http://www.casenet.com/AuthorizationPrescreenResult"
      }
    },
    "AuthorizationProvider": {
      "properties": {
        "externalId": {
          "type": "string"
        },
        "groupAffiliation": {
          "$ref": "#/definitions/AuthorizationProvider"
        },
        "id": {
          "type": "string"
        },
        "npi": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "providerNumber": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationProvider",
        "namespace": "http://www.casenet.com/AuthorizationProvider"
      }
    },
    "AuthorizationReadmission": {
      "properties": {
        "readmitDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "readmitNotes": {
          "type": "string"
        },
        "readmitReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationReadmission",
        "namespace": "http://www.casenet.com/AuthorizationReadmission"
      }
    },
    "AuthorizationReopening": {
      "properties": {
        "reopenDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationReopening",
        "namespace": "http://www.casenet.com/AuthorizationReopening"
      }
    },
    "AuthorizationRequest": {
      "properties": {
        "authDiagnosisRequest": {
          "$ref": "#/definitions/CreateCommonAuthorizationDiagnosisRequest"
        },
        "authorizationHeaderRequest": {
          "$ref": "#/definitions/AuthorizationHeaderRequest"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/LineItemRequest"
          },
          "type": "array"
        },
        "newLineItems": {
          "items": {
            "$ref": "#/definitions/CreateLineItemRequest"
          },
          "type": "array"
        },
        "nextTask": {
          "$ref": "#/definitions/ActionPathRequest"
        },
        "noteRequests": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "preScreenNoteInstanceId": {
          "type": "string"
        },
        "prescreenNoteGroupId": {
          "type": "string"
        },
        "requestingProviderRequest": {
          "$ref": "#/definitions/RequestingProviderRequest"
        },
        "trackingNum": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationRequest",
        "namespace": "http://www.casenet.com/AuthorizationRequest"
      }
    },
    "AuthorizationSearchCriteria": {
      "properties": {
        "asc": {
          "type": "boolean"
        },
        "authorizationNumber": {
          "$ref": "#/definitions/StringCriteria"
        },
        "authorizationSearchParam": {
          "$ref": "#/definitions/AuthorizationSearchParam"
        },
        "authorizationTrackingNumber": {
          "type": "string"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "includeClosed": {
          "type": "boolean"
        },
        "includeVoided": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "lockState": {
          "enum": [
            "LOCKED",
            "UNLOCKED"
          ],
          "type": "string",
          "xml": {
            "name": "LockState",
            "namespace": "http://www.casenet.com/LockState"
          }
        },
        "memberIds": {
          "items": {
            "$ref": "#/definitions/MemberId"
          },
          "type": "array",
          "uniqueItems": true
        },
        "sortField": {
          "enum": [
            "AUTHORIZATION_NUM",
            "FROM_DATE",
            "UPDATED_DATE",
            "END_DATE",
            "STATUS",
            "STATE",
            "MEMBER_NAME",
            "MEMBER_EXTERNAL_ID",
            "REQUESTING_PROVIDER",
            "FACILITY_PROVIDER",
            "DIAGNOSIS_CODE",
            "DIAGNOSIS_NAME"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationSortField",
            "namespace": "http://www.casenet.com/UMAuthorizationSortField"
          }
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationSearchCriteria",
        "namespace": "http://www.casenet.com/AuthorizationSearchCriteria"
      }
    },
    "AuthorizationSearchParam": {
      "properties": {
        "authorizationType": {
          "enum": [
            "INPATIENT",
            "SP",
            "RX"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationType",
            "namespace": "http://www.casenet.com/UMAuthorizationType"
          }
        },
        "prescribingProviderLocations": {
          "items": {
            "$ref": "#/definitions/LocationId"
          },
          "type": "array",
          "uniqueItems": true
        },
        "providerLocations": {
          "items": {
            "$ref": "#/definitions/LocationId"
          },
          "type": "array",
          "uniqueItems": true
        },
        "requestingProviderLocations": {
          "items": {
            "$ref": "#/definitions/LocationId"
          },
          "type": "array",
          "uniqueItems": true
        },
        "serviceTypeLabels": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "servicingFacilityLocations": {
          "items": {
            "$ref": "#/definitions/LocationId"
          },
          "type": "array",
          "uniqueItems": true
        },
        "servicingProviderLocations": {
          "items": {
            "$ref": "#/definitions/LocationId"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationSearchParam",
        "namespace": "http://www.casenet.com/AuthorizationSearchParam"
      }
    },
    "AuthorizationSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "ipAuthorizations": {
          "items": {
            "$ref": "#/definitions/SummaryInpatientAuthorization"
          },
          "type": "array",
          "uniqueItems": true
        },
        "rxAuthorizations": {
          "items": {
            "$ref": "#/definitions/SummaryRxAuthorization"
          },
          "type": "array",
          "uniqueItems": true
        },
        "spAuthorizations": {
          "items": {
            "$ref": "#/definitions/SummaryServiceProcedureAuthorization"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationSearchResults",
        "namespace": "http://www.casenet.com/AuthorizationSearchResults"
      }
    },
    "AuthorizationSubmissionResponse": {
      "properties": {
        "createAuthorizationResponse": {
          "$ref": "#/definitions/AuthorizationAndLineItemsSummary"
        },
        "prescreenResult": {
          "$ref": "#/definitions/AuthorizationPrescreenResult"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationSubmissionResponse",
        "namespace": "http://www.casenet.com/AuthorizationSubmissionResponse"
      }
    },
    "AuthorizationSummaryLite": {
      "properties": {
        "appealed": {
          "type": "boolean"
        },
        "authorizationNum": {
          "type": "string"
        },
        "authorizationState": {
          "enum": [
            "OPEN",
            "OPEN_MODIFIED",
            "OPEN_REVISED",
            "CLOSED",
            "VOID",
            "DISCHARGED",
            "DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationState",
            "namespace": "http://www.casenet.com/UMAuthorizationState"
          }
        },
        "authorizationType": {
          "enum": [
            "INPATIENT",
            "SP",
            "RX"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationType",
            "namespace": "http://www.casenet.com/UMAuthorizationType"
          }
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "isOpen": {
          "type": "boolean"
        },
        "primaryAdmittingDiagnosis": {
          "$ref": "#/definitions/DiagnosisCodeLite"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "UMStatus",
            "namespace": "http://www.casenet.com/UMStatus"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationSummaryLite",
        "namespace": "http://www.casenet.com/AuthorizationSummaryLite"
      }
    },
    "AuthorizationWithSelectedLineItems": {
      "properties": {
        "authorizationId": {
          "type": "string"
        },
        "authorizationNum": {
          "type": "string"
        },
        "selectedLineItems": {
          "items": {
            "$ref": "#/definitions/AuthorizationLineItemInfoLite"
          },
          "type": "array",
          "uniqueItems": true
        },
        "trackingNum": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationWithSelectedLineItems",
        "namespace": "http://www.casenet.com/AuthorizationWithSelectedLineItems"
      }
    },
    "Availability": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "dayOfWeek": {
          "enum": [
            "MON",
            "TUE",
            "WED",
            "THU",
            "FRI",
            "SAT",
            "SUN"
          ],
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "timeOfDay": {
          "enum": [
            "MORNING",
            "AFTERNOON",
            "EVENING"
          ],
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AvailableTime": {
      "properties": {
        "availabilityTypes": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "dayOfWeek": {
          "enum": [
            "SUNDAY",
            "MONDAY",
            "TUESDAY",
            "WEDNESDAY",
            "THURSDAY",
            "FRIDAY",
            "SATURDAY"
          ],
          "type": "string"
        },
        "endLocalDateTime": {
          "$ref": "#/definitions/LocalDateTime"
        },
        "endTime": {
          "format": "date-time",
          "type": "string"
        },
        "fieldAvailability": {
          "type": "boolean"
        },
        "startLocalDateTime": {
          "$ref": "#/definitions/LocalDateTime"
        },
        "startTime": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AvailableTimeListRequest": {
      "properties": {
        "availableTimeRequests": {
          "items": {
            "$ref": "#/definitions/AvailableTimeRequest"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AvailableTimeRequest": {
      "properties": {
        "availabilityTypeOptions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dayOfWeek": {
          "enum": [
            "SUNDAY",
            "MONDAY",
            "TUESDAY",
            "WEDNESDAY",
            "THURSDAY",
            "FRIDAY",
            "SATURDAY"
          ],
          "type": "string"
        },
        "endTime": {
          "format": "date-time",
          "type": "string"
        },
        "fieldAvailability": {
          "type": "boolean"
        },
        "startTime": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "dayOfWeek",
        "endTime",
        "startTime"
      ],
      "type": "object"
    },
    "AvailableTimeResponse": {
      "properties": {
        "availableTimes": {
          "items": {
            "$ref": "#/definitions/AvailableTime"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "BRSProxyStatus": {
      "properties": {
        "available": {
          "type": "string"
        },
        "serviceURL": {
          "type": "string"
        }
      },
      "required": [
        "available",
        "serviceURL"
      ],
      "type": "object",
      "xml": {
        "name": "BRSProxyStatus",
        "namespace": "http://www.casenet.com/BRSProxyStatus"
      }
    },
    "BRSProxyStatusSummary": {
      "properties": {
        "status": {
          "items": {
            "$ref": "#/definitions/BRSProxyStatus"
          },
          "type": "array"
        }
      },
      "required": [
        "status"
      ],
      "type": "object",
      "xml": {
        "name": "BRSProxyStatusSummary",
        "namespace": "http://www.casenet.com/BRSProxyStatusSummary"
      }
    },
    "BaseAppealReviewerRequest": {
      "type": "object"
    },
    "BaseAssessment": {
      "properties": {
        "answers": {
          "items": {
            "$ref": "#/definitions/Answer"
          },
          "type": "array",
          "uniqueItems": true
        },
        "assessmentMeta": {
          "$ref": "#/definitions/AssessmentMetaLite"
        },
        "associatedProvider": {
          "$ref": "#/definitions/LocationLite"
        },
        "completedBy": {
          "$ref": "#/definitions/User"
        },
        "completedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "notes": {
          "items": {
            "$ref": "#/definitions/NoteInstance"
          },
          "type": "array",
          "uniqueItems": true
        },
        "questionGroupResults": {
          "items": {
            "$ref": "#/definitions/QuestionGroupResult"
          },
          "type": "array",
          "uniqueItems": true
        },
        "referralSource": {
          "$ref": "#/definitions/ReferralLite"
        },
        "score": {
          "format": "int32",
          "type": "integer"
        },
        "selectedMedications": {
          "items": {
            "$ref": "#/definitions/SelectedMedication"
          },
          "type": "array",
          "uniqueItems": true
        },
        "selectedProviderSpecialty": {
          "$ref": "#/definitions/ProviderSpecialty"
        },
        "showProgramEnrollmentSection": {
          "type": "boolean"
        },
        "signatureFileName": {
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "enum": [
            "IN_PROGRESS",
            "COMPLETE",
            "VOID"
          ],
          "type": "string"
        },
        "taskAssignedToCurrentUser": {
          "type": "boolean"
        },
        "taskId": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        },
        "voidedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "BaseClaim": {
      "properties": {
        "claimNumber": {
          "type": "string"
        },
        "claimStatus": {
          "$ref": "#/definitions/OptionValue"
        },
        "id": {
          "type": "string"
        },
        "totalCharges": {
          "type": "number"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "BaseInnerReview": {
      "properties": {
        "reviewSummary": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "BaseInnerReview",
        "namespace": "http://www.casenet.com/BaseInnerReview"
      }
    },
    "BaseInnerReviewRequest": {
      "type": "object",
      "xml": {
        "name": "BaseInnerReviewRequest",
        "namespace": "http://www.casenet.com/BaseInnerReviewRequest"
      }
    },
    "BaseMedicationRequest": {
      "properties": {
        "adjustedDose": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "adjustedRouteOption": {
          "type": "string"
        },
        "adjustedRouteOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "frequencyOption": {
          "type": "string"
        },
        "frequencyOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "isCurrentlyTaking": {
          "type": "boolean"
        },
        "procurementMethodOption": {
          "type": "string"
        },
        "procurementMethodOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "regimenEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "regimenStartDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "sourceOption": {
          "type": "string"
        },
        "sourceOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "BaseNoteLink": {
      "properties": {
        "id": {
          "type": "string"
        },
        "noteInstanceId": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "BaseNoteLink",
        "namespace": "http://www.casenet.com/BaseNoteLink"
      }
    },
    "BaseServiceRequestServiceQuantityRequest": {
      "properties": {
        "quantity": {
          "type": "number"
        },
        "quantityUnitType": {
          "enum": [
            "UNITS",
            "VISITS",
            "HOURS",
            "QUARTER_HOURS"
          ],
          "type": "string",
          "xml": {
            "name": "ServiceQuantityUnitType",
            "namespace": "http://www.casenet.com/ServiceQuantityUnitType"
          }
        }
      },
      "required": [
        "quantityUnitType"
      ],
      "type": "object",
      "xml": {
        "name": "BaseServiceRequestServiceQuantityRequest",
        "namespace": "http://www.casenet.com/BaseServiceRequestServiceQuantityRequest"
      }
    },
    "Benefit": {
      "properties": {
        "additionalBenefits": {
          "items": {
            "$ref": "#/definitions/AdditionalBenefit"
          },
          "type": "array"
        },
        "expensesOOP": {
          "items": {
            "$ref": "#/definitions/OOPExpense"
          },
          "type": "array"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "pharmacy": {
          "$ref": "#/definitions/RxDTO"
        },
        "totalDollarMax": {
          "$ref": "#/definitions/Money"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtensibleObject",
        "namespace": "http://www.casenet.com/ExtensibleObject"
      }
    },
    "BhpNode": {
      "properties": {
        "assessmentBhpSetups": {
          "items": {
            "$ref": "#/definitions/AssessmentBhpSetup"
          },
          "type": "array",
          "uniqueItems": true
        },
        "carePlanBhpSetup": {
          "$ref": "#/definitions/CarePlanBhpSetup"
        },
        "caseOpenBhpSetup": {
          "$ref": "#/definitions/CaseOpenBhpSetup"
        },
        "children": {
          "items": {
            "$ref": "#/definitions/BhpNode"
          },
          "type": "array"
        },
        "cmTaskAttemptsBhpSetup": {
          "$ref": "#/definitions/TaskAttemptsBhpSetup"
        },
        "correspondenceTextLogoBhpSetup": {
          "$ref": "#/definitions/CorrespondenceTextLogoBhpSetup"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "features": {
          "items": {
            "$ref": "#/definitions/CustomerFeature"
          },
          "type": "array",
          "uniqueItems": true
        },
        "feedFullPath": {
          "type": "string"
        },
        "feedId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isLeaf": {
          "type": "boolean"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "memberFilterGroups": {
          "items": {
            "$ref": "#/definitions/MemberFilterGroup"
          },
          "type": "array",
          "uniqueItems": true
        },
        "messageTriggerBhpSetups": {
          "items": {
            "$ref": "#/definitions/MessageTriggerBhpSetup"
          },
          "type": "array",
          "uniqueItems": true
        },
        "name": {
          "type": "string"
        },
        "nameFullPath": {
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "parent": {
          "$ref": "#/definitions/BhpNode"
        },
        "programs": {
          "items": {
            "$ref": "#/definitions/Program"
          },
          "type": "array",
          "uniqueItems": true
        },
        "root": {
          "type": "boolean"
        },
        "serviceProcedureDefinitions": {
          "items": {
            "$ref": "#/definitions/ServiceProcedureDefinition"
          },
          "type": "array",
          "uniqueItems": true
        },
        "type": {
          "enum": [
            "PRIMARY_ENTITY",
            "LINE_OF_BUSINESS",
            "REGION",
            "PRODUCT",
            "RISK_POPULATION",
            "EMPLOYER",
            "SUB_REGION",
            "DIVISION",
            "FUNCTION"
          ],
          "type": "string"
        },
        "umTaskAttemptsBhpSetup": {
          "$ref": "#/definitions/TaskAttemptsBhpSetup"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "BhpNodeCriteria": {
      "properties": {
        "bhpNodeName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "leafsOnly": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/BhpNodeSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "BhpNodeCriteria",
        "namespace": "http://www.casenet.com/BhpNodeCriteria"
      }
    },
    "BhpNodeId": {
      "properties": {
        "bhpNodeIdType": {
          "enum": [
            "INTERNAL",
            "FEED_FULL_PATH"
          ],
          "type": "string",
          "xml": {
            "name": "BhpNodeIdType",
            "namespace": "http://www.casenet.com/BhpNodeIdType"
          }
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "bhpNodeIdType",
        "value"
      ],
      "type": "object",
      "xml": {
        "name": "BhpNodeId",
        "namespace": "http://www.casenet.com/BhpNodeId"
      }
    },
    "BhpNodeLite": {
      "properties": {
        "feedFullPath": {
          "type": "string"
        },
        "feedId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isLeaf": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "nameFullPath": {
          "type": "string"
        },
        "type": {
          "enum": [
            "PRIMARY_ENTITY",
            "LINE_OF_BUSINESS",
            "REGION",
            "PRODUCT",
            "RISK_POPULATION",
            "EMPLOYER",
            "SUB_REGION",
            "DIVISION",
            "FUNCTION"
          ],
          "type": "string",
          "xml": {
            "name": "BhpNodeType",
            "namespace": "http://www.casenet.com/BhpNodeType"
          }
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "BhpNodeLite",
        "namespace": "http://www.casenet.com/BhpNodeLite"
      }
    },
    "BhpNodeSearchResult": {
      "properties": {
        "feedFullPath": {
          "type": "string"
        },
        "feedId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isAccessible": {
          "type": "boolean"
        },
        "isLeaf": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "nameFullPath": {
          "type": "string"
        },
        "type": {
          "enum": [
            "PRIMARY_ENTITY",
            "LINE_OF_BUSINESS",
            "REGION",
            "PRODUCT",
            "RISK_POPULATION",
            "EMPLOYER",
            "SUB_REGION",
            "DIVISION",
            "FUNCTION"
          ],
          "type": "string",
          "xml": {
            "name": "BhpNodeType",
            "namespace": "http://www.casenet.com/BhpNodeType"
          }
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "BhpNodeSearchResult",
        "namespace": "http://www.casenet.com/BhpNodeSearchResult"
      }
    },
    "BhpNodeSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/BhpNodeSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "BhpNodeSearchResults",
        "namespace": "http://www.casenet.com/BhpNodeSearchResults"
      }
    },
    "BhpNodeSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "NAME",
            "NAME_FULL_PATH",
            "FEED_ID",
            "FEED_FULL_PATH",
            "TYPE"
          ],
          "type": "string",
          "xml": {
            "name": "BhpNodeSortColumn",
            "namespace": "http://www.casenet.com/BhpNodeSortColumn"
          }
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "BhpNodeSortField",
        "namespace": "http://www.casenet.com/BhpNodeSortField"
      }
    },
    "BirthEvent": {
      "properties": {
        "babyAuthorization": {
          "$ref": "#/definitions/AuthorizationInfo"
        },
        "babyFirstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "babyLastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "babyMedicaidId": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "babyMember": {
          "$ref": "#/definitions/MemberLite"
        },
        "birthDateTime": {
          "$ref": "#/definitions/LocalDateTime"
        },
        "birthOrder": {
          "$ref": "#/definitions/OptionValue"
        },
        "birthStatus": {
          "$ref": "#/definitions/OptionValue"
        },
        "birthWeightGrams": {
          "format": "int32",
          "maximum": 16000,
          "minimum": 0,
          "type": "integer"
        },
        "deliveryAuthorization": {
          "$ref": "#/definitions/AuthorizationInfo"
        },
        "deliveryType": {
          "$ref": "#/definitions/OptionValue"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "fatherFirstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "fatherLastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "fiveMinuteApgar": {
          "format": "int32",
          "maximum": 10,
          "minimum": 0,
          "type": "integer"
        },
        "gender": {
          "$ref": "#/definitions/OptionValue"
        },
        "gestationalAgeDays": {
          "format": "int32",
          "maximum": 6,
          "minimum": 0,
          "type": "integer"
        },
        "gestationalAgeWeeks": {
          "format": "int32",
          "maximum": 99,
          "minimum": 0,
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "lastMenstrualPeriod": {
          "$ref": "#/definitions/LocalDate"
        },
        "motherFirstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "motherLastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "motherMember": {
          "$ref": "#/definitions/MemberLite"
        },
        "oneMinuteApgar": {
          "format": "int32",
          "maximum": 10,
          "minimum": 0,
          "type": "integer"
        },
        "scheduledDelivery": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "fiveMinuteApgar",
        "oneMinuteApgar"
      ],
      "type": "object",
      "xml": {
        "name": "BirthEvent",
        "namespace": "http://www.casenet.com/BirthEvent"
      }
    },
    "BirthEventRequest": {
      "properties": {
        "babyAuthorizationId": {
          "$ref": "#/definitions/AuthorizationId"
        },
        "babyFirstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "babyLastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "babyMedicaidId": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "babyMemberId": {
          "$ref": "#/definitions/MemberId"
        },
        "birthDateTime": {
          "$ref": "#/definitions/LocalDateTime"
        },
        "birthOrderOption": {
          "type": "string"
        },
        "birthStatusOption": {
          "type": "string"
        },
        "birthWeightGrams": {
          "format": "int32",
          "maximum": 16000,
          "minimum": 0,
          "type": "integer"
        },
        "deliveryAuthorizationId": {
          "$ref": "#/definitions/AuthorizationId"
        },
        "deliveryTypeOption": {
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "fatherFirstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "fatherLastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "fiveMinuteApgar": {
          "format": "int32",
          "maximum": 10,
          "minimum": 0,
          "type": "integer"
        },
        "genderOption": {
          "type": "string"
        },
        "gestationalAgeDays": {
          "format": "int32",
          "maximum": 6,
          "minimum": 0,
          "type": "integer"
        },
        "gestationalAgeWeeks": {
          "format": "int32",
          "maximum": 99,
          "minimum": 0,
          "type": "integer"
        },
        "lastMenstrualPeriod": {
          "$ref": "#/definitions/LocalDate"
        },
        "motherFirstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "motherLastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "motherMemberId": {
          "$ref": "#/definitions/MemberId"
        },
        "oneMinuteApgar": {
          "format": "int32",
          "maximum": 10,
          "minimum": 0,
          "type": "integer"
        },
        "scheduledDelivery": {
          "type": "boolean"
        }
      },
      "required": [
        "fiveMinuteApgar",
        "oneMinuteApgar"
      ],
      "type": "object",
      "xml": {
        "name": "BirthEventRequest",
        "namespace": "http://www.casenet.com/BirthEventRequest"
      }
    },
    "BirthEventSummary": {
      "properties": {
        "babyAuthDiagnosisType": {
          "enum": [
            "BEHAVIORAL_DSMIV",
            "MEDICAL",
            "BEHAVIORAL_DSM5"
          ],
          "type": "string",
          "xml": {
            "name": "UMDiagnosisType",
            "namespace": "http://www.casenet.com/UMDiagnosisType"
          }
        },
        "babyAuthorization": {
          "$ref": "#/definitions/AuthorizationInfo"
        },
        "babyFirstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "babyGender": {
          "$ref": "#/definitions/OptionValue"
        },
        "babyLastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "babyMember": {
          "$ref": "#/definitions/MemberLite"
        },
        "birthDate": {
          "$ref": "#/definitions/LocalDateTime"
        },
        "birthEventId": {
          "maxLength": 36,
          "minLength": 0,
          "type": "string"
        },
        "deliveryAuthDiagnosisType": {
          "enum": [
            "BEHAVIORAL_DSMIV",
            "MEDICAL",
            "BEHAVIORAL_DSM5"
          ],
          "type": "string",
          "xml": {
            "name": "UMDiagnosisType",
            "namespace": "http://www.casenet.com/UMDiagnosisType"
          }
        },
        "deliveryAuthorization": {
          "$ref": "#/definitions/AuthorizationInfo"
        },
        "lastUpdatedBy": {
          "$ref": "#/definitions/User"
        },
        "lastUpdatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "motherFirstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "motherLastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "motherMember": {
          "$ref": "#/definitions/MemberLite"
        }
      },
      "required": [
        "birthEventId"
      ],
      "type": "object",
      "xml": {
        "name": "BirthEventSummary",
        "namespace": "http://www.casenet.com/BirthEventSummary"
      }
    },
    "BoardMessage": {
      "properties": {
        "archived": {
          "type": "boolean"
        },
        "archivedDate": {
          "format": "date-time",
          "type": "string"
        },
        "associatedMember": {
          "$ref": "#/definitions/MemberLite"
        },
        "associatedUser": {
          "$ref": "#/definitions/User"
        },
        "bhpAccessible": {
          "type": "boolean"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "urgent": {
          "type": "boolean"
        },
        "userFrom": {
          "$ref": "#/definitions/User"
        }
      },
      "type": "object"
    },
    "BoardMessageArchivationRequest": {
      "properties": {
        "messageIDs": {
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "messageIDs"
      ],
      "type": "object"
    },
    "BoardMessageRequest": {
      "properties": {
        "associatedMemberId": {
          "type": "string"
        },
        "associatedUserId": {
          "type": "string"
        },
        "companyGroupIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "memberGroupIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "message": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "recipientIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "teamIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "urgent": {
          "type": "boolean"
        }
      },
      "required": [
        "message"
      ],
      "type": "object",
      "xml": {
        "name": "BoardMessageRequest",
        "namespace": "http://www.casenet.com/BoardMessageRequest"
      }
    },
    "BoardMessageSearchCriteria": {
      "properties": {
        "associatedMemberFirstName": {
          "$ref": "#/definitions/RestrictedStringCriteria"
        },
        "associatedMemberLastName": {
          "$ref": "#/definitions/RestrictedStringCriteria"
        },
        "associatedUsername": {
          "type": "string"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "showArchived": {
          "type": "boolean"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/BoardMessageSearchSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "urgentOnly": {
          "type": "boolean"
        },
        "userFrom": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "BoardMessageSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/BoardMessage"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "BoardMessageSearchSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "CREATION_DATE",
            "ASSOCIATED_MEMBER",
            "ASSOCIATED_USER",
            "FROM"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "BodyPart": {
      "properties": {
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "headers": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mediaType": {
          "properties": {
            "parameters": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "subtype": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "wildcardSubtype": {
              "type": "boolean"
            },
            "wildcardType": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parameterizedHeaders": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            },
            "type": "array"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "type": "object"
        }
      },
      "type": "object"
    },
    "BuildInfo": {
      "properties": {
        "apiBuildNumber": {
          "type": "string"
        },
        "apiClientRevision": {
          "type": "string"
        },
        "apiRevision": {
          "type": "string"
        },
        "apiVersion": {
          "type": "string"
        }
      },
      "required": [
        "apiBuildNumber",
        "apiClientRevision",
        "apiRevision",
        "apiVersion"
      ],
      "type": "object",
      "xml": {
        "name": "BuildInfo",
        "namespace": "http://www.casenet.com/BuildInfo"
      }
    },
    "CancelledAppointmentInfoRequest": {
      "properties": {
        "memberCancelled": {
          "type": "boolean"
        },
        "reasonOption": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CareOpportunityConfiguration": {
      "properties": {
        "riskCategoryOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "CareOpportunityConfiguration",
        "namespace": "http://www.casenet.com/CareOpportunityConfiguration"
      }
    },
    "CareOpportunityMemberConfiguration": {
      "properties": {
        "riskCategoryOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "riskConditionOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CareOpportunitySearchCriteria": {
      "properties": {
        "categoryOption": {
          "type": "string"
        },
        "conditionOption": {
          "type": "string"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "includeClosed": {
          "type": "boolean"
        },
        "includeOpen": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "riskIndicator": {
          "$ref": "#/definitions/StringCriteria"
        },
        "riskIndicatorDateFrom": {
          "$ref": "#/definitions/LocalDate"
        },
        "riskIndicatorDateTo": {
          "$ref": "#/definitions/LocalDate"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/CareOpportunitySortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "CareOpportunitySearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/RiskIndicatorResponse"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "CareOpportunitySortField": {
      "properties": {
        "columnType": {
          "enum": [
            "CATEGORY",
            "RISK_INDICATOR",
            "CONDITION",
            "ACUITY_RISK",
            "RISK_INDICATOR_VAL",
            "RISK_INDICATOR_DATE",
            "SOURCE",
            "STATUS",
            "STATUS_DATE"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "CarePlan": {
      "properties": {
        "actions": {
          "items": {
            "$ref": "#/definitions/Action"
          },
          "type": "array"
        },
        "assigneeType": {
          "enum": [
            "ALLOW_USER_TO_SELECT",
            "ASSIGNED_TEAM",
            "CURRENT_USER",
            "PRIMARY_CASE_OWNER",
            "QUEUE",
            "TEAM",
            "USER"
          ],
          "type": "string"
        },
        "caseId": {
          "type": "string"
        },
        "caseName": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "closeDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "definitionId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isCustomCarePlan": {
          "type": "boolean"
        },
        "isDraft": {
          "type": "boolean"
        },
        "lastAcknowledgementDate": {
          "format": "date-time",
          "type": "string"
        },
        "lastUpdated": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "objectives": {
          "items": {
            "$ref": "#/definitions/Objective"
          },
          "type": "array"
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "problems": {
          "items": {
            "$ref": "#/definitions/Problem"
          },
          "type": "array"
        },
        "reopenDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "IN_PROGRESS",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CarePlanStatusType",
            "namespace": "http://www.casenet.com/CarePlanStatusType"
          }
        },
        "tasks": {
          "items": {
            "$ref": "#/definitions/TaskLite"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "CarePlan",
        "namespace": "http://www.casenet.com/CarePlan"
      }
    },
    "CarePlanAcknowledgement": {
      "properties": {
        "acknowledgementDate": {
          "format": "date-time",
          "type": "string"
        },
        "acknowledgementMessage": {
          "type": "string"
        },
        "acknowledgementSelection": {
          "$ref": "#/definitions/OptionValue"
        },
        "id": {
          "type": "string"
        },
        "memberAgreed": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "CarePlanAcknowledgement",
        "namespace": "http://www.casenet.com/CarePlanAcknowledgement"
      }
    },
    "CarePlanAcknowledgementRequest": {
      "properties": {
        "acknowledgementDate": {
          "format": "date-time",
          "type": "string"
        },
        "acknowledgementMessage": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "memberAgreedOption": {
          "type": "string"
        }
      },
      "required": [
        "acknowledgementDate",
        "acknowledgementMessage",
        "memberAgreedOption"
      ],
      "type": "object"
    },
    "CarePlanAction": {
      "properties": {
        "actionDefinitionId": {
          "type": "string"
        },
        "allowDuplicateActions": {
          "type": "boolean"
        },
        "assessmentId": {
          "type": "string"
        },
        "assessmentMetaId": {
          "type": "string"
        },
        "assessmentMetaResourceName": {
          "type": "string"
        },
        "assessmentStatus": {
          "enum": [
            "IN_PROGRESS",
            "COMPLETE",
            "VOID"
          ],
          "type": "string"
        },
        "category": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "closeDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "closeReason": {
          "type": "string"
        },
        "closeReasonOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "comments": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "interventionEffectiveness": {
          "type": "string"
        },
        "interventionEffectivenessOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "interventionType": {
          "type": "string"
        },
        "interventionTypeOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "isClosedAutomatically": {
          "type": "boolean"
        },
        "isCustomRelatedCarePlan": {
          "type": "boolean"
        },
        "lastUpdated": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "origin": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        },
        "priorityOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "relatedCarePlanDefinitionId": {
          "type": "string"
        },
        "relatedCarePlanId": {
          "type": "string"
        },
        "relatedCarePlanName": {
          "type": "string"
        },
        "relatedCarePlanStatus": {
          "enum": [
            "IN_PROGRESS",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CarePlanStatusType",
            "namespace": "http://www.casenet.com/CarePlanStatusType"
          }
        },
        "relatedObjectiveId": {
          "type": "string"
        },
        "relatedObjectiveName": {
          "type": "string"
        },
        "relatedTask": {
          "$ref": "#/definitions/RelatedTask"
        },
        "serviceRequestId": {
          "type": "string"
        },
        "serviceRequestProcedureCode": {
          "type": "string"
        },
        "serviceRequestProcedureCodeType": {
          "enum": [
            "CPT",
            "ICD9",
            "HCPCS",
            "REVENUE",
            "ICD10",
            "EXTENDED"
          ],
          "type": "string",
          "xml": {
            "name": "ProcedureCodeType",
            "namespace": "http://www.casenet.com/ProcedureCodeType"
          }
        },
        "serviceRequestProcedureName": {
          "type": "string"
        },
        "serviceRequestState": {
          "enum": [
            "DRAFT",
            "OPEN",
            "CLOSED",
            "VOID"
          ],
          "type": "string",
          "xml": {
            "name": "ServiceRequestState",
            "namespace": "http://www.casenet.com/ServiceRequestState"
          }
        },
        "source": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "OPEN",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CarePlanElementStatus",
            "namespace": "http://www.casenet.com/CarePlanElementStatus"
          }
        },
        "subType": {
          "type": "string"
        },
        "targetDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "textTypeOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "type": {
          "enum": [
            "INTERVENTION",
            "SERVICE_REQUEST",
            "ASSESSMENT",
            "TASK",
            "TEXT"
          ],
          "type": "string",
          "xml": {
            "name": "ActionType",
            "namespace": "http://www.casenet.com/ActionType"
          }
        },
        "urlEnglish": {
          "type": "string"
        },
        "urlSpanish": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "CarePlanAction",
        "namespace": "http://www.casenet.com/CarePlanAction"
      }
    },
    "CarePlanBhpConfiguration": {
      "properties": {
        "actionTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "carePlanDefinitions": {
          "items": {
            "$ref": "#/definitions/CarePlanDefinition"
          },
          "type": "array"
        },
        "interventionTaskRequired": {
          "type": "boolean"
        },
        "memberAcknowledgementRequired": {
          "type": "boolean"
        },
        "memberAcknowledgementText": {
          "type": "string"
        },
        "reopenable": {
          "type": "boolean"
        },
        "subComponentsClosureRequired": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CarePlanBhpSetup": {
      "properties": {
        "carePlanReopenable": {
          "type": "boolean"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "interventionTaskRequired": {
          "type": "boolean"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "memberAcknowledgementRequired": {
          "type": "boolean"
        },
        "memberAcknowledgementText": {
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "subcomponentsClosureRequired": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CarePlanBuilderAssessment": {
      "properties": {
        "assessmentMetaId": {
          "type": "string"
        },
        "completedDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "mcgContentVersion": {
          "type": "string"
        },
        "mcgCustom": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "source": {
          "enum": [
            "MCG",
            "TRUCARE"
          ],
          "type": "string",
          "xml": {
            "name": "AssessmentSource",
            "namespace": "http://www.casenet.com/AssessmentSource"
          }
        }
      },
      "type": "object"
    },
    "CarePlanConfiguration": {
      "properties": {
        "carePlanElementOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "outcomeCategoryOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "outcomeTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "outcomeTypeToDescriptions": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionValueListWrapper"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "PortableConfiguration",
        "namespace": "http://www.casenet.com/PortableConfiguration"
      }
    },
    "CarePlanDefinition": {
      "properties": {
        "conditionDefinitionId": {
          "type": "string"
        },
        "conditionDefinitionName": {
          "type": "string"
        },
        "conditionDefinitionVisibleId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lineageIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "metaStatus": {
          "enum": [
            "IN_PROGRESS",
            "PUBLISHED",
            "HIDDEN"
          ],
          "type": "string"
        },
        "resourceName": {
          "type": "string"
        },
        "userPermissions": {
          "items": {
            "enum": [
              "CREATE",
              "EDIT",
              "VIEW",
              "CLAIM",
              "ASSIGN"
            ],
            "type": "string",
            "xml": {
              "name": "Actions",
              "namespace": "http://www.casenet.com/Actions"
            }
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "CarePlanDefinitionNode": {
      "properties": {
        "actionDefinitions": {
          "items": {
            "$ref": "#/definitions/ActionDefinition"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "noteDefinitions": {
          "items": {
            "$ref": "#/definitions/NoteDefinition"
          },
          "type": "array"
        },
        "objectiveDefinitions": {
          "items": {
            "$ref": "#/definitions/ObjectiveDefinition"
          },
          "type": "array"
        },
        "problemDefinitions": {
          "items": {
            "$ref": "#/definitions/ProblemDefinition"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CarePlanElementDefinition": {
      "properties": {
        "id": {
          "type": "string"
        },
        "metaStatus": {
          "enum": [
            "IN_PROGRESS",
            "PUBLISHED",
            "HIDDEN"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "CarePlanElementRecommendationArtifact": {
      "properties": {
        "addedToCarePlan": {
          "type": "boolean"
        },
        "assessmentId": {
          "type": "string"
        },
        "carePlanElementDefinition": {
          "$ref": "#/definitions/CarePlanElementDefinition"
        },
        "carePlanElementRecommendationArtifacts": {
          "items": {
            "$ref": "#/definitions/CarePlanElementRecommendationArtifact"
          },
          "type": "array"
        },
        "carePlanElementRecommendationId": {
          "type": "string"
        },
        "carePlanId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CarePlanElementRecommendationArtifactRequest": {
      "properties": {
        "artifactId": {
          "type": "string"
        },
        "taskDefinitionRequest": {
          "$ref": "#/definitions/TaskDefinitionRequest"
        }
      },
      "required": [
        "artifactId"
      ],
      "type": "object"
    },
    "CarePlanLite": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "CarePlanLite",
        "namespace": "http://www.casenet.com/CarePlanLite"
      }
    },
    "CarePlanNoteInstance": {
      "properties": {
        "associatedNoteInstanceIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "attachments": {
          "items": {
            "$ref": "#/definitions/DocumentInfo"
          },
          "type": "array",
          "uniqueItems": true
        },
        "baseNoteInstanceLink": {
          "$ref": "#/definitions/BaseNoteLink"
        },
        "canAddComment": {
          "type": "boolean"
        },
        "comments": {
          "items": {
            "$ref": "#/definitions/NoteComment"
          },
          "type": "array"
        },
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "encounterDate": {
          "format": "date-time",
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "noteDef": {
          "$ref": "#/definitions/NoteDefinition"
        },
        "noteDefType": {
          "enum": [
            "AAG",
            "AUTH",
            "APPEAL",
            "ASSESSMENT",
            "ASSESSMENT_SUMMARY",
            "CASE",
            "CAREPLAN",
            "COST_SAVINGS",
            "TRANSITION_PLAN",
            "FOLLOWUP",
            "INDIVIDUAL_SERVICE_PLAN",
            "MCP",
            "MEMBER",
            "MEMBER_DEFINED_OUTCOME",
            "MANUAL_QUALITY_MEASURES",
            "PROBLEM",
            "QUESTION_GROUP",
            "QUALITY_MEASURES",
            "TRANSPORTATION",
            "SERVICE_REQUEST",
            "TASK_ATTEMPT",
            "TEAM_APPROACH",
            "UM_APPEAL",
            "IDENTITY_VERIFICATION",
            "PRESCREEN_DATA_IP",
            "PRESCREEN_DATA_SP",
            "PRESCREEN_DATA_RX",
            "MEDICATION"
          ],
          "type": "string",
          "xml": {
            "name": "NoteDefinitionTypeEnum",
            "namespace": "http://www.casenet.com/NoteDefinitionTypeEnum"
          }
        },
        "noteText": {
          "type": "string"
        },
        "noteType": {
          "type": "string"
        },
        "prescreenNoteGroupId": {
          "type": "string"
        },
        "relatedProblemId": {
          "type": "string"
        },
        "relatedProblemName": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "CarePlanNoteInstance",
        "namespace": "http://www.casenet.com/CarePlanNoteInstance"
      }
    },
    "CarePlanObjective": {
      "properties": {
        "actions": {
          "items": {
            "$ref": "#/definitions/Action"
          },
          "type": "array"
        },
        "category": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "closeDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "closeReason": {
          "type": "string"
        },
        "closeReasonOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "comments": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isCustomRelatedCarePlan": {
          "type": "boolean"
        },
        "lastUpdated": {
          "format": "date-time",
          "type": "string"
        },
        "longTerm": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "objectiveDefinitionId": {
          "type": "string"
        },
        "objectiveOutcomes": {
          "items": {
            "$ref": "#/definitions/ObjectiveOutcome"
          },
          "type": "array"
        },
        "origin": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        },
        "priorityOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "progress": {
          "format": "int32",
          "type": "integer"
        },
        "readinessToChange": {
          "type": "string"
        },
        "readinessToChangeOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "reason": {
          "type": "string"
        },
        "relatedCarePlanDefinitionId": {
          "type": "string"
        },
        "relatedCarePlanId": {
          "type": "string"
        },
        "relatedCarePlanName": {
          "type": "string"
        },
        "relatedCarePlanStatus": {
          "enum": [
            "IN_PROGRESS",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CarePlanStatusType",
            "namespace": "http://www.casenet.com/CarePlanStatusType"
          }
        },
        "relatedProblemId": {
          "type": "string"
        },
        "relatedProblemName": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "OPEN",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CarePlanElementStatus",
            "namespace": "http://www.casenet.com/CarePlanElementStatus"
          }
        },
        "targetDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "type": {
          "type": "string"
        },
        "typeOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "CarePlanObjective",
        "namespace": "http://www.casenet.com/CarePlanObjective"
      }
    },
    "CarePlanProblem": {
      "properties": {
        "category": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "closeReason": {
          "type": "string"
        },
        "closeReasonOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "comments": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isCustomRelatedCarePlan": {
          "type": "boolean"
        },
        "lastReviewed": {
          "$ref": "#/definitions/LocalDate"
        },
        "lastUpdated": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "objectives": {
          "items": {
            "$ref": "#/definitions/Objective"
          },
          "type": "array"
        },
        "origin": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        },
        "priorityOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "problemDefinitionId": {
          "type": "string"
        },
        "readinessToChange": {
          "type": "string"
        },
        "readinessToChangeOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "reason": {
          "type": "string"
        },
        "relatedCarePlanDefinitionId": {
          "type": "string"
        },
        "relatedCarePlanId": {
          "type": "string"
        },
        "relatedCarePlanName": {
          "type": "string"
        },
        "relatedCarePlanStatus": {
          "enum": [
            "IN_PROGRESS",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CarePlanStatusType",
            "namespace": "http://www.casenet.com/CarePlanStatusType"
          }
        },
        "resolvedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "source": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "OPEN",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CarePlanElementStatus",
            "namespace": "http://www.casenet.com/CarePlanElementStatus"
          }
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "CarePlanProblem",
        "namespace": "http://www.casenet.com/CarePlanProblem"
      }
    },
    "CarePlanRelatedElement": {
      "properties": {
        "answer": {
          "$ref": "#/definitions/Answer"
        },
        "assessmentCompletedBy": {
          "$ref": "#/definitions/User"
        },
        "assessmentCompletedDate": {
          "format": "date-time",
          "type": "string"
        },
        "assessmentId": {
          "type": "string"
        },
        "assessmentName": {
          "type": "string"
        },
        "elementCategory": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "elementId": {
          "type": "string"
        },
        "elementName": {
          "type": "string"
        },
        "elementStatus": {
          "enum": [
            "OPEN",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CarePlanElementStatus",
            "namespace": "http://www.casenet.com/CarePlanElementStatus"
          }
        },
        "elementUpdatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "questionGroupName": {
          "type": "string"
        },
        "questionText": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CarePlanRelatedElementSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "ASSESSMENT_NAME",
            "QUESTION_TEXT",
            "ASSESSMENT_COMPLETED_DATE",
            "ASSESSMENT_COMPLETED_BY",
            "ELEMENT_CATEGORY",
            "ELEMENT_STATUS",
            "UPDATE_DATE"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "required": [
        "columnType"
      ],
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "CarePlanRelatedElementsSearchCriteria": {
      "properties": {
        "assessmentName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/CarePlanRelatedElementSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "CarePlanRelatedElementsSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/CarePlanRelatedElement"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "CarePlanStatus": {
      "properties": {
        "authorizedBy": {
          "$ref": "#/definitions/User"
        },
        "date": {
          "$ref": "#/definitions/LocalDate"
        },
        "details": {
          "type": "string"
        },
        "status": {
          "enum": [
            "IN_PROGRESS",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CarePlanStatusType",
            "namespace": "http://www.casenet.com/CarePlanStatusType"
          }
        },
        "statusChangeDate": {
          "format": "date-time",
          "type": "string"
        },
        "statusChangeReason": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "CarePlanStatus",
        "namespace": "http://www.casenet.com/CarePlanStatus"
      }
    },
    "CarePlanSummary": {
      "properties": {
        "caseId": {
          "type": "string"
        },
        "caseName": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "closeDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "closedBy": {
          "$ref": "#/definitions/User"
        },
        "definitionId": {
          "type": "string"
        },
        "hasChildren": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "isCustomCarePlan": {
          "type": "boolean"
        },
        "lastAcknowledgementDate": {
          "format": "date-time",
          "type": "string"
        },
        "lastUpdated": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "reopenDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "IN_PROGRESS",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CarePlanStatusType",
            "namespace": "http://www.casenet.com/CarePlanStatusType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "CarePlanSummary",
        "namespace": "http://www.casenet.com/CarePlanSummary"
      }
    },
    "CareWebQIInnerReviewRequest": {
      "properties": {
        "carewebReviewId": {
          "type": "string"
        },
        "criteriaMet": {
          "type": "boolean"
        },
        "isCarewebqiFinalized": {
          "type": "boolean"
        },
        "reviewSummary": {
          "type": "string"
        },
        "reviewXml": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "CareWebQIInnerReviewRequest",
        "namespace": "http://www.casenet.com/BaseInnerReviewRequest"
      }
    },
    "CareWebQIRequest": {
      "properties": {
        "DocumentingUser": {
          "type": "string"
        },
        "RequestType": {
          "type": "string"
        },
        "ResponseTarget": {
          "type": "string"
        },
        "ResultTransform": {
          "type": "string"
        },
        "ReturnUrl": {
          "type": "string"
        },
        "documentingUserFirstname": {
          "type": "string"
        },
        "documentingUserLastname": {
          "type": "string"
        },
        "entryPoint": {
          "type": "string"
        },
        "episodeID": {
          "type": "string"
        },
        "messageHash": {
          "type": "string"
        },
        "requestVersion": {
          "type": "string"
        },
        "txtInterfaceLoginUrl": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CareWebQIReview": {
      "properties": {
        "careWebQiCriteriaMet": {
          "type": "boolean"
        },
        "careWebQiFinalized": {
          "type": "boolean"
        },
        "careWebQiReviewId": {
          "type": "string"
        },
        "careWebQiSubmitted": {
          "type": "boolean"
        },
        "diagnosisCode": {
          "$ref": "#/definitions/DiagnosisCode"
        },
        "procedureCode": {
          "$ref": "#/definitions/ProcedureCode"
        },
        "reviewSummary": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "CareWebQIReview",
        "namespace": "http://www.casenet.com/BaseInnerReview"
      }
    },
    "CaseConfiguration": {
      "properties": {
        "alwaysOpenCase": {
          "type": "boolean"
        },
        "displayCreateCase": {
          "type": "boolean"
        },
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "primaryDiagnosisRequired": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "CaseConfiguration",
        "namespace": "http://www.casenet.com/CaseConfiguration"
      }
    },
    "CaseFieldChange": {
      "properties": {
        "authorizedBy": {
          "$ref": "#/definitions/User"
        },
        "authorizedByCustomUsername": {
          "type": "string"
        },
        "changeDate": {
          "format": "date-time",
          "type": "string"
        },
        "details": {
          "type": "string"
        },
        "fieldName": {
          "enum": [
            "CASE_TYPE",
            "CASE_NAME",
            "CASE_STATUS_TYPE",
            "PRIMARY_OWNER",
            "ACUITY_SCORE",
            "ACUITY_LABEL",
            "PRIMARY_DIAGNOSIS",
            "SECONDARY_OWNERS",
            "CASE_START_DATE",
            "CASE_NUMBER",
            "CASE_STATUS",
            "CASE_EXTENDED_ATTRIBUTE_VALUE"
          ],
          "type": "string"
        },
        "newValue": {
          "type": "string"
        },
        "oldValue": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "udfLabel": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        }
      },
      "type": "object"
    },
    "CaseId": {
      "properties": {
        "caseIdType": {
          "enum": [
            "INTERNAL_ID",
            "CASE_NUMBER"
          ],
          "type": "string",
          "xml": {
            "name": "CaseIdType",
            "namespace": "http://www.casenet.com/CaseIdType"
          }
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "caseIdType",
        "id"
      ],
      "type": "object",
      "xml": {
        "name": "CaseId",
        "namespace": "http://www.casenet.com/CaseId"
      }
    },
    "CaseIdentity": {
      "properties": {
        "caseNumber": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "CaseIdentity",
        "namespace": "http://www.casenet.com/CaseIdentity"
      }
    },
    "CaseIdentityExtended": {
      "properties": {
        "caseName": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "CaseIdentityExtended",
        "namespace": "http://www.casenet.com/CaseIdentityExtended"
      }
    },
    "CaseLiteResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/CnCaseLite"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "CaseNotificationDetails": {
      "properties": {
        "caseId": {
          "type": "string"
        },
        "caseNotificationType": {
          "enum": [
            "welcome",
            "closure"
          ],
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "letterDetails": {
          "$ref": "#/definitions/InternalLetterDetails"
        },
        "phoneNotificationDetails": {
          "$ref": "#/definitions/PhoneNotificationDetails"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "caseId",
        "caseNotificationType"
      ],
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "CaseOpenBhpSetup": {
      "properties": {
        "alwaysOpenCase": {
          "type": "boolean"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "displayAddCaseOnReferral": {
          "type": "boolean"
        },
        "dueDateOffset": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "jbpmTaskPriority": {
          "enum": [
            "HIGH",
            "NORMAL",
            "LOW"
          ],
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "primaryDiagnosisRequired": {
          "type": "boolean"
        },
        "queue": {
          "$ref": "#/definitions/Queue"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CaseSearchCriteria": {
      "properties": {
        "acuity": {
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "type": "string",
          "xml": {
            "name": "CaseAcuity",
            "namespace": "http://www.casenet.com/CaseAcuity"
          }
        },
        "caseId": {
          "$ref": "#/definitions/CaseId"
        },
        "caseNameLabel": {
          "type": "string"
        },
        "casePrimaryOwnerUsername": {
          "type": "string"
        },
        "caseStatus": {
          "enum": [
            "IN_PROGRESS",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CaseStatusType",
            "namespace": "http://www.casenet.com/CaseStatusType"
          }
        },
        "caseTypeOption": {
          "type": "string"
        },
        "contactedFromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "contactedToDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "includeClosedCases": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "reverseChronologicalOrder": {
          "type": "boolean"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object",
      "xml": {
        "name": "CaseSearchCriteria",
        "namespace": "http://www.casenet.com/CaseSearchCriteria"
      }
    },
    "CaseSearchCriteriaV2": {
      "properties": {
        "acuity": {
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "type": "string",
          "xml": {
            "name": "CaseAcuity",
            "namespace": "http://www.casenet.com/CaseAcuity"
          }
        },
        "caseId": {
          "$ref": "#/definitions/CaseId"
        },
        "caseNameLabel": {
          "type": "string"
        },
        "casePrimaryOwnerUsername": {
          "type": "string"
        },
        "caseStatus": {
          "enum": [
            "IN_PROGRESS",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CaseStatusType",
            "namespace": "http://www.casenet.com/CaseStatusType"
          }
        },
        "caseTypeOption": {
          "type": "string"
        },
        "contactedFromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "contactedToDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "includeClosedCases": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/CaseSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "CaseSearchResult": {
      "properties": {
        "acuityLabel": {
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "type": "string",
          "xml": {
            "name": "CaseAcuity",
            "namespace": "http://www.casenet.com/CaseAcuity"
          }
        },
        "acuityScore": {
          "format": "int32",
          "type": "integer"
        },
        "caseName": {
          "$ref": "#/definitions/OptionValue"
        },
        "caseNameOther": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "casePrimaryOwner": {
          "$ref": "#/definitions/User"
        },
        "casePrimaryOwnerPhoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "caseSecondaryOwnersCount": {
          "format": "int64",
          "type": "integer"
        },
        "caseType": {
          "$ref": "#/definitions/OptionValue"
        },
        "createdDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "IN_PROGRESS",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CaseStatusType",
            "namespace": "http://www.casenet.com/CaseStatusType"
          }
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object",
      "xml": {
        "name": "CaseSearchResult",
        "namespace": "http://www.casenet.com/CaseSearchResult"
      }
    },
    "CaseSearchResultV2": {
      "properties": {
        "acuityLabel": {
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "type": "string",
          "xml": {
            "name": "CaseAcuity",
            "namespace": "http://www.casenet.com/CaseAcuity"
          }
        },
        "acuityScore": {
          "format": "int32",
          "type": "integer"
        },
        "caseName": {
          "$ref": "#/definitions/OptionValue"
        },
        "caseNameOther": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "casePrimaryOwner": {
          "$ref": "#/definitions/User"
        },
        "casePrimaryOwnerPhoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "caseSecondaryOwnersCount": {
          "format": "int64",
          "type": "integer"
        },
        "caseType": {
          "$ref": "#/definitions/OptionValue"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "secondaryOwners": {
          "items": {
            "$ref": "#/definitions/User"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "IN_PROGRESS",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CaseStatusType",
            "namespace": "http://www.casenet.com/CaseStatusType"
          }
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CaseSearchResults": {
      "properties": {
        "cases": {
          "items": {
            "$ref": "#/definitions/CaseSearchResult"
          },
          "type": "array"
        },
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "CaseSearchResults",
        "namespace": "http://www.casenet.com/CaseSearchResults"
      }
    },
    "CaseSearchResultsV2": {
      "properties": {
        "cases": {
          "items": {
            "$ref": "#/definitions/CaseSearchResultV2"
          },
          "type": "array"
        },
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CaseSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "CASE_NUMBER",
            "CASE_NAME",
            "ACUITY",
            "SCORE",
            "START_DATE",
            "CASE_TYPE",
            "STATUS",
            "PRIMARY_CASE_OWNER",
            "CREATED_DATE",
            "UPDATED_DATE",
            "SECONDARY_OWNERS_COUNT"
          ],
          "type": "string",
          "xml": {
            "name": "CaseSortColumn",
            "namespace": "http://www.casenet.com/CaseSortColumn"
          }
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "CaseSortField",
        "namespace": "http://www.casenet.com/CaseSortField"
      }
    },
    "CaseStatus": {
      "properties": {
        "authorizedBy": {
          "$ref": "#/definitions/User"
        },
        "date": {
          "format": "date-time",
          "type": "string"
        },
        "detail": {
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "externalAuthorizedBy": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "reason": {
          "$ref": "#/definitions/OptionValue"
        },
        "statusType": {
          "enum": [
            "IN_PROGRESS",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CaseStatusType",
            "namespace": "http://www.casenet.com/CaseStatusType"
          }
        }
      },
      "required": [
        "statusType"
      ],
      "type": "object",
      "xml": {
        "name": "CaseStatus",
        "namespace": "http://www.casenet.com/CaseStatus"
      }
    },
    "CaseTasks": {
      "properties": {
        "hasManualTask": {
          "type": "boolean"
        },
        "taskDetails": {
          "items": {
            "$ref": "#/definitions/TaskDetails"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ChangePasswordRequest": {
      "properties": {
        "newPassword": {
          "type": "string"
        },
        "oldPassword": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CheckProcedureCodesRequest": {
      "properties": {
        "procedureCodeNaturalIds": {
          "items": {
            "$ref": "#/definitions/ProcedureCodeNaturalId"
          },
          "type": "array"
        }
      },
      "required": [
        "procedureCodeNaturalIds"
      ],
      "type": "object"
    },
    "ClaimAcceptance": {
      "properties": {
        "acceptanceStatus": {
          "enum": [
            "ACCEPTED",
            "REJECTED"
          ],
          "type": "string",
          "xml": {
            "name": "ClaimAcceptanceStatus",
            "namespace": "http://www.casenet.com/ClaimAcceptanceStatus"
          }
        },
        "dateReceived": {
          "format": "date-time",
          "type": "string"
        },
        "errors": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "ClaimAcceptance",
        "namespace": "http://www.casenet.com/ClaimAcceptance"
      }
    },
    "ClaimsBaseSearchCriteria": {
      "properties": {
        "claimID": {
          "type": "string"
        },
        "claimType": {
          "enum": [
            "All",
            "Institutional",
            "Professional",
            "Pharmacy"
          ],
          "type": "string"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/ClaimsSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "required": [
        "claimType"
      ],
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "ClaimsSearchResult": {
      "properties": {
        "amountPaid": {
          "type": "number"
        },
        "batchDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "claimDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "claimId": {
          "type": "string"
        },
        "claimNumber": {
          "type": "string"
        },
        "claimType": {
          "enum": [
            "All",
            "Institutional",
            "Professional",
            "Pharmacy"
          ],
          "type": "string"
        },
        "codeDescription": {
          "type": "string"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/OptionValue"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "totalCharges": {
          "type": "number"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "ClaimsSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/ClaimsSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "ClaimsSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "CLAIM_TYPE",
            "BATCH_DATE",
            "CLAIM_DATE",
            "CLAIM_NUMBER",
            "FROM_DATE",
            "TO_DATE",
            "STATUS",
            "DIAGNOSIS",
            "PROVIDER",
            "TOTAL_CHARGES",
            "AMOUNT_PAID"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "CloseCarePlanRequest": {
      "properties": {
        "carePlanElementReasonsOptions": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "closeDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "closureReasonOption": {
          "type": "string"
        },
        "details": {
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object"
    },
    "CloseCaseRequest": {
      "properties": {
        "authorizedByUsername": {
          "type": "string"
        },
        "caseClosureReasonOption": {
          "type": "string"
        },
        "detail": {
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "externalAuthorizedBy": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "CloseCaseRequest",
        "namespace": "http://www.casenet.com/CloseCaseRequest"
      }
    },
    "CloseDiagnosisRequest": {
      "properties": {
        "closedBy": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "closedDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object"
    },
    "CloseHcsWaiverEnrollmentRequest": {
      "properties": {
        "cancelOpenTasks": {
          "type": "boolean"
        },
        "closureDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "closureReasonOptionValueId": {
          "type": "string"
        },
        "reasonOther": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "taskPackageId": {
          "type": "string"
        }
      },
      "required": [
        "closureReasonOptionValueId"
      ],
      "type": "object",
      "xml": {
        "name": "CloseHcsWaiverEnrollmentRequest",
        "namespace": "http://www.casenet.com/CloseHcsWaiverEnrollmentRequest"
      }
    },
    "CloseHcsWaiverEnrollmentRequestV2": {
      "properties": {
        "closureDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "closureReasonOption": {
          "type": "string"
        },
        "closureReasonOther": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "taskAssigneeRequest": {
          "$ref": "#/definitions/TaskAssigneeRequest"
        },
        "taskPackageId": {
          "type": "string"
        }
      },
      "required": [
        "closureReasonOption"
      ],
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "CloseProgramEnrollmentRequest": {
      "properties": {
        "authorizedByUsername": {
          "type": "string"
        },
        "closeDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "closureOutcomeOption": {
          "type": "string"
        },
        "closureReasonOption": {
          "type": "string"
        },
        "details": {
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "engagementLevelOption": {
          "type": "string"
        },
        "outcomeOther": {
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "reasonOther": {
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "authorizedByUsername"
      ],
      "type": "object",
      "xml": {
        "name": "CloseProgramEnrollmentRequest",
        "namespace": "http://www.casenet.com/CloseProgramEnrollmentRequest"
      }
    },
    "CloseServiceRequestRequest": {
      "type": "object",
      "xml": {
        "name": "CloseServiceRequestRequest",
        "namespace": "http://www.casenet.com/CloseServiceRequestRequest"
      }
    },
    "CloseTasksRequest": {
      "properties": {
        "taskIds": {
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array"
        }
      },
      "type": "object"
    },
    "CnCase": {
      "properties": {
        "acuityLabel": {
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "type": "string",
          "xml": {
            "name": "CaseAcuity",
            "namespace": "http://www.casenet.com/CaseAcuity"
          }
        },
        "acuityScore": {
          "format": "int32",
          "type": "integer"
        },
        "caseName": {
          "$ref": "#/definitions/OptionValue"
        },
        "caseNameOther": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "caseType": {
          "$ref": "#/definitions/OptionValue"
        },
        "closed": {
          "type": "boolean"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "inProgress": {
          "type": "boolean"
        },
        "primaryDiagnosis": {
          "$ref": "#/definitions/Diagnosis"
        },
        "primaryOwner": {
          "$ref": "#/definitions/User"
        },
        "secondaryOwners": {
          "items": {
            "$ref": "#/definitions/User"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "$ref": "#/definitions/CaseStatus"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "CnCase",
        "namespace": "http://www.casenet.com/CnCase"
      }
    },
    "CnCaseLite": {
      "properties": {
        "caseName": {
          "$ref": "#/definitions/OptionValue"
        },
        "caseNameOther": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "caseType": {
          "$ref": "#/definitions/OptionValue"
        },
        "contactedOn": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "status": {
          "enum": [
            "IN_PROGRESS",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CaseStatusType",
            "namespace": "http://www.casenet.com/CaseStatusType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "CnCaseLite",
        "namespace": "http://www.casenet.com/CnCaseLite"
      }
    },
    "CoachCandidateUsersSearchCriteria": {
      "properties": {
        "activeLicenseRequired": {
          "type": "boolean"
        },
        "anyLanguageMatchRequired": {
          "type": "boolean"
        },
        "displayInMembersTime": {
          "type": "boolean"
        },
        "eventTypeOption": {
          "type": "string"
        },
        "fieldVisit": {
          "type": "boolean"
        },
        "firstName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "genderOption": {
          "type": "string"
        },
        "lastName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "memberId": {
          "$ref": "#/definitions/MemberId"
        },
        "onMemberBhpNodeTeam": {
          "type": "boolean"
        },
        "primaryHealthCoach": {
          "type": "boolean"
        },
        "primaryLanguageMatchRequired": {
          "type": "boolean"
        },
        "requireMatchingAvailability": {
          "type": "boolean"
        },
        "specializationMatchRequired": {
          "type": "boolean"
        },
        "specializationOptions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "userName": {
          "$ref": "#/definitions/StringCriteria"
        }
      },
      "type": "object"
    },
    "CoachFilterAttributeConfiguration": {
      "properties": {
        "attributeRequired": {
          "type": "boolean"
        },
        "coachFilterAttribute": {
          "enum": [
            "PRIMARY_LANGUAGE",
            "SECONDARY_LANGUAGE",
            "SPECIALIZATION",
            "TEAM",
            "ACTIVE_LICENSE",
            "COACH_VISIT_TYPE",
            "PRIMARY_HEALTH_COACH"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "CoachSearchCriteria": {
      "properties": {
        "allUsers": {
          "type": "boolean"
        },
        "availabilityTypeOption": {
          "type": "string"
        },
        "city": {
          "$ref": "#/definitions/StringCriteria"
        },
        "fieldVisit": {
          "type": "boolean"
        },
        "firstName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "genderOption": {
          "type": "string"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "lastName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "licensedStateOptions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "occupationOption": {
          "type": "string"
        },
        "primaryLanguageOption": {
          "type": "string"
        },
        "skillOption": {
          "type": "string"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/CoachSearchSortField"
          },
          "type": "array"
        },
        "specializationOptions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "teamIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "CoachSearchResult": {
      "properties": {
        "canAccessMember": {
          "type": "boolean"
        },
        "firstname": {
          "type": "string"
        },
        "gender": {
          "$ref": "#/definitions/OptionValue"
        },
        "id": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "User",
        "namespace": "http://www.casenet.com/User"
      }
    },
    "CoachSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/CoachSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "CoachSearchSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "LAST_NAME",
            "FIRST_NAME",
            "GENDER",
            "USER_NAME"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "CommonActionPathRequest": {
      "properties": {
        "assignedTo": {
          "$ref": "#/definitions/AssigneeRequest"
        },
        "description": {
          "maxLength": 2048,
          "minLength": 0,
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "priority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "useRuleOutputs": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "CommonActionPathRequest",
        "namespace": "http://www.casenet.com/CommonActionPathRequest"
      }
    },
    "CompanyGroup": {
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nameFullPath": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "CompanyGroup",
        "namespace": "http://www.casenet.com/CompanyGroup"
      }
    },
    "CompanyGroupSearchCriteria": {
      "properties": {
        "companyGroupNameFullPath": {
          "$ref": "#/definitions/StringCriteria"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/CompanyGroupSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "CompanyGroupSearchResult": {
      "properties": {
        "description": {
          "type": "string"
        },
        "hasSubgroups": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "nameFullPath": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CompanyGroupSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/CompanyGroupSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "CompanyGroupSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "NAME",
            "PATH"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "CompleteAagRequest": {
      "properties": {
        "aagCompleteDate": {
          "format": "date-time",
          "type": "string"
        },
        "closureNotes": {
          "maxLength": 5000,
          "minLength": 0,
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        }
      },
      "required": [
        "aagCompleteDate"
      ],
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "CompleteAppealResponse": {
      "properties": {
        "warningMessageKey": {
          "type": "string"
        },
        "warningMessageParameters": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CompleteMedicationRequest": {
      "properties": {
        "completionDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "medicationRequestIds": {
          "items": {
            "$ref": "#/definitions/MedicationIdRequest"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "medicationRequestIds"
      ],
      "type": "object"
    },
    "CompleteProgramTaskPackageRequest": {
      "properties": {
        "programEnrollmentStatusId": {
          "type": "string"
        },
        "programEnrollmentStatusVersion": {
          "format": "int32",
          "type": "integer"
        },
        "taskPackageInstanceId": {
          "type": "string"
        },
        "taskPackageInstanceVersion": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "programEnrollmentStatusId",
        "programEnrollmentStatusVersion",
        "taskPackageInstanceId",
        "taskPackageInstanceVersion"
      ],
      "type": "object"
    },
    "CompleteServiceRequestReviewRequest": {
      "properties": {
        "notes": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "reviewTaskId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "reviewTaskId"
      ],
      "type": "object"
    },
    "ConcurrentReviewActionPathRequest": {
      "properties": {
        "assignedTo": {
          "$ref": "#/definitions/AssigneeRequest"
        },
        "description": {
          "maxLength": 2048,
          "minLength": 0,
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "priority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "useRuleOutputs": {
          "type": "boolean"
        }
      },
      "required": [
        "useRuleOutputs"
      ],
      "type": "object",
      "xml": {
        "name": "ConcurrentReviewActionPathRequest",
        "namespace": "http://www.casenet.com/ConcurrentReviewActionPathRequest"
      }
    },
    "ConcurrentReviewConfiguration": {
      "properties": {
        "concurrentReviewEnabled": {
          "type": "boolean"
        },
        "defaultAssignee": {
          "$ref": "#/definitions/TaskAssignee"
        },
        "defaultPriority": {
          "type": "string"
        },
        "nextTask": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ConcurrentReviewConfiguration",
        "namespace": "http://www.casenet.com/ConcurrentReviewConfiguration"
      }
    },
    "ConfigurableBhpFieldSetup": {
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "fieldValue": {
          "type": "string"
        },
        "showHyperlink": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "ConfigurableBhpFieldSetup",
        "namespace": "http://www.casenet.com/ConfigurableBhpFieldSetup"
      }
    },
    "ContactAddress": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "addressForDisplayAsSingleLine": {
          "type": "string"
        },
        "addressType": {
          "$ref": "#/definitions/OptionValue"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "preferredAddress": {
          "type": "boolean"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ContactAddress",
        "namespace": "http://www.casenet.com/ContactAddress"
      }
    },
    "ContactEmail": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "email": {
          "$ref": "#/definitions/Email"
        },
        "emailType": {
          "$ref": "#/definitions/OptionValue"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "preferredEmail": {
          "type": "boolean"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ContactEmail",
        "namespace": "http://www.casenet.com/ContactEmail"
      }
    },
    "ContactPhoneNumber": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "formattedPhoneNumber": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "phoneNumber": {
          "$ref": "#/definitions/VersionedPhoneNumber"
        },
        "phoneNumberType": {
          "$ref": "#/definitions/OptionValue"
        },
        "preferredPhoneNumber": {
          "type": "boolean"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ContactPhoneNumber",
        "namespace": "http://www.casenet.com/ContactPhoneNumber"
      }
    },
    "ContentDisposition": {
      "properties": {
        "creationDate": {
          "format": "date-time",
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "modificationDate": {
          "format": "date-time",
          "type": "string"
        },
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "readDate": {
          "format": "date-time",
          "type": "string"
        },
        "size": {
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CopyNoteRequest": {
      "properties": {
        "encounterDate": {
          "format": "date-time",
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "noteLinkRequest": {
          "$ref": "#/definitions/NoteLinkRequest"
        },
        "noteText": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "CorrespondenceConfiguration": {
      "properties": {
        "distributedCorrespondenceEnabled": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CorrespondenceNotification": {
      "properties": {
        "id": {
          "type": "string"
        },
        "letter": {
          "$ref": "#/definitions/LetterLite"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/NotificationLineItem"
          },
          "type": "array"
        },
        "notificationDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "sentBy": {
          "$ref": "#/definitions/User"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "CorrespondenceNotification",
        "namespace": "http://www.casenet.com/CorrespondenceNotification"
      }
    },
    "CorrespondenceRecipient": {
      "properties": {
        "recipientTypeOption": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "required": {
          "type": "boolean"
        }
      },
      "required": [
        "recipientTypeOption",
        "required"
      ],
      "type": "object",
      "xml": {
        "name": "CorrespondenceRecipient",
        "namespace": "http://www.casenet.com/CorrespondenceRecipient"
      }
    },
    "CorrespondenceSummary": {
      "properties": {
        "authorization": {
          "$ref": "#/definitions/AuthorizationInfo"
        },
        "cnCase": {
          "$ref": "#/definitions/CaseIdentity"
        },
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "diagnosisType": {
          "enum": [
            "BEHAVIORAL_DSMIV",
            "MEDICAL",
            "BEHAVIORAL_DSM5"
          ],
          "type": "string",
          "xml": {
            "name": "UMDiagnosisType",
            "namespace": "http://www.casenet.com/UMDiagnosisType"
          }
        },
        "hasEnclosures": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "letterName": {
          "type": "string"
        },
        "letterStatus": {
          "enum": [
            "Complete",
            "Draft",
            "Locked"
          ],
          "type": "string",
          "xml": {
            "name": "InternalLetterStatus",
            "namespace": "http://www.casenet.com/InternalLetterStatus"
          }
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "CorrespondenceSummary",
        "namespace": "http://www.casenet.com/CorrespondenceSummary"
      }
    },
    "CorrespondenceSummarySearchCriteria": {
      "properties": {
        "authorizationType": {
          "enum": [
            "INPATIENT",
            "SP",
            "RX"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationType",
            "namespace": "http://www.casenet.com/UMAuthorizationType"
          }
        },
        "dateGeneratedFrom": {
          "$ref": "#/definitions/LocalDate"
        },
        "dateGeneratedTo": {
          "$ref": "#/definitions/LocalDate"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "includeVoided": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "letterName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "licenseFeature": {
          "enum": [
            "CM",
            "DM",
            "UM",
            "TRUMOBILE",
            "MEMBER_PORTAL",
            "EMPLOYER_PORTAL",
            "PROVIDER_PORTAL",
            "REPORTING",
            "ANALYTICS",
            "WELLNESS",
            "HCS",
            "GENERIC",
            "AAG",
            "MEDICATION_MANAGEMENT",
            "TCI_CARE_MANAGEMENT",
            "TCI_CARE_MANAGEMENT_BI_MODELING",
            "TCI_TIME_TRACKING",
            "TCI_TIME_TRACKING_BI_MODELING",
            "TCI_UTILIZATION_MANAGEMENT",
            "TCI_UTILIZATION_MANAGEMENT_BI_MODELING"
          ],
          "type": "string",
          "xml": {
            "name": "CasenetFeature",
            "namespace": "http://www.casenet.com/CasenetFeature"
          }
        },
        "sortAsc": {
          "type": "boolean"
        },
        "sortField": {
          "enum": [
            "LETTER_NAME",
            "LETTER_STATUS",
            "UPDATED_DATE",
            "UPDATED_BY",
            "CREATED_DATE",
            "CREATED_BY",
            "VOID_STATUS",
            "STATUS_NAME",
            "GENERATED_DATE",
            "CN_CASE",
            "ARTIFACT"
          ],
          "type": "string",
          "xml": {
            "name": "CorrespondenceSummarySortField",
            "namespace": "http://www.casenet.com/CorrespondenceSummarySortField"
          }
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "status": {
          "enum": [
            "Complete",
            "Draft",
            "Locked"
          ],
          "type": "string",
          "xml": {
            "name": "InternalLetterStatus",
            "namespace": "http://www.casenet.com/InternalLetterStatus"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "CorrespondenceSummarySearchCriteria",
        "namespace": "http://www.casenet.com/CorrespondenceSummarySearchCriteria"
      }
    },
    "CorrespondenceSummarySearchCriteriaV2": {
      "properties": {
        "dateGeneratedFrom": {
          "$ref": "#/definitions/LocalDate"
        },
        "dateGeneratedTo": {
          "$ref": "#/definitions/LocalDate"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "includeVoided": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "letterName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "licenseFeature": {
          "enum": [
            "CM",
            "DM",
            "UM",
            "TRUMOBILE",
            "MEMBER_PORTAL",
            "EMPLOYER_PORTAL",
            "PROVIDER_PORTAL",
            "REPORTING",
            "ANALYTICS",
            "WELLNESS",
            "HCS",
            "GENERIC",
            "AAG",
            "MEDICATION_MANAGEMENT",
            "TCI_CARE_MANAGEMENT",
            "TCI_CARE_MANAGEMENT_BI_MODELING",
            "TCI_TIME_TRACKING",
            "TCI_TIME_TRACKING_BI_MODELING",
            "TCI_UTILIZATION_MANAGEMENT",
            "TCI_UTILIZATION_MANAGEMENT_BI_MODELING"
          ],
          "type": "string",
          "xml": {
            "name": "CasenetFeature",
            "namespace": "http://www.casenet.com/CasenetFeature"
          }
        },
        "sortAsc": {
          "type": "boolean"
        },
        "sortField": {
          "enum": [
            "LETTER_NAME",
            "LETTER_STATUS",
            "UPDATED_DATE",
            "UPDATED_BY",
            "CREATED_DATE",
            "CREATED_BY",
            "VOID_STATUS",
            "STATUS_NAME",
            "GENERATED_DATE",
            "CN_CASE",
            "ARTIFACT"
          ],
          "type": "string",
          "xml": {
            "name": "CorrespondenceSummarySortField",
            "namespace": "http://www.casenet.com/CorrespondenceSummarySortField"
          }
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteria",
        "namespace": "http://www.casenet.com/SearchCriteria"
      }
    },
    "CorrespondenceSummarySearchResults": {
      "properties": {
        "correspondenceSummaries": {
          "items": {
            "$ref": "#/definitions/CorrespondenceSummary"
          },
          "type": "array"
        },
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "CorrespondenceSummarySearchResults",
        "namespace": "http://www.casenet.com/CorrespondenceSummarySearchResults"
      }
    },
    "CorrespondenceSummarySearchResultsV2": {
      "properties": {
        "correspondenceSummaries": {
          "items": {
            "$ref": "#/definitions/AbstractCorrespondenceSummary"
          },
          "type": "array"
        },
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/CorrespondenceSummary"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "CorrespondenceTextLogoBhpSetup": {
      "properties": {
        "bhpLogo": {
          "items": {
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        },
        "correspondenceValues": {
          "additionalProperties": {
            "$ref": "#/definitions/CorrespondenceValue"
          },
          "type": "object"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CorrespondenceValue": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "value": {
          "type": "object"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CorrespondenceValueObject": {
      "properties": {
        "id": {
          "type": "string"
        },
        "value": {
          "type": "object"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "CorrespondenceValue",
        "namespace": "http://www.casenet.com/CorrespondenceValue"
      }
    },
    "CostSavingsAmountRequest": {
      "properties": {
        "finalSavingsAmount": {
          "$ref": "#/definitions/Money"
        }
      },
      "type": "object"
    },
    "CostSavingsArtifact": {
      "properties": {
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object"
    },
    "CostSavingsBhpConfiguration": {
      "properties": {
        "cmCostSavingsEnabled": {
          "type": "boolean"
        },
        "costSavingsEnabled": {
          "type": "boolean"
        },
        "umCostSavingsEnabled": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CostSavingsConfiguration": {
      "properties": {
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesConfiguration",
        "namespace": "http://www.casenet.com/ExtendedAttributesConfiguration"
      }
    },
    "CostSavingsDefinition": {
      "properties": {
        "costSavingsCategory": {
          "$ref": "#/definitions/CostSavingsOptionFieldConfig"
        },
        "costSavingsDetail": {
          "$ref": "#/definitions/CostSavingsOptionFieldConfig"
        },
        "costSavingsType": {
          "$ref": "#/definitions/OptionValue"
        },
        "costSavingsUnitType": {
          "$ref": "#/definitions/CostSavingsOptionFieldConfig"
        },
        "finalize": {
          "$ref": "#/definitions/CostSavingsFieldConfig"
        },
        "id": {
          "type": "string"
        },
        "procedureCode": {
          "$ref": "#/definitions/CostSavingsFieldConfig"
        },
        "provider": {
          "$ref": "#/definitions/CostSavingsFieldConfig"
        },
        "typeOfService": {
          "$ref": "#/definitions/CostSavingsOptionFieldConfig"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "CostSavingsFieldConfig": {
      "properties": {
        "fieldDisplayed": {
          "type": "boolean"
        },
        "fieldRequired": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CostSavingsInstanceSummaryLite": {
      "properties": {
        "areaLink": {
          "$ref": "#/definitions/AbstractCostSavingsAreaLinkLite"
        },
        "costSavingsCategory": {
          "$ref": "#/definitions/OptionValue"
        },
        "costSavingsDetail": {
          "$ref": "#/definitions/OptionValue"
        },
        "costSavingsResult": {
          "$ref": "#/definitions/CostSavingsResultLite"
        },
        "costSavingsSource": {
          "enum": [
            "CASE",
            "AUTH",
            "GENERIC"
          ],
          "type": "string",
          "xml": {
            "name": "CostSavingsArea",
            "namespace": "http://www.casenet.com/CostSavingsArea"
          }
        },
        "costSavingsType": {
          "$ref": "#/definitions/OptionValue"
        },
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "finalizeInfo": {
          "$ref": "#/definitions/FinalizeInfo"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "member": {
          "$ref": "#/definitions/MemberLite"
        },
        "persistedState": {
          "enum": [
            "DRAFT",
            "SUBMITTED"
          ],
          "type": "string",
          "xml": {
            "name": "PersistentEntityState",
            "namespace": "http://www.casenet.com/PersistentEntityState"
          }
        },
        "procedureCode": {
          "$ref": "#/definitions/ProcedureCode"
        },
        "providerLocation": {
          "$ref": "#/definitions/AuthorizationLocation"
        },
        "savingsEntryMode": {
          "enum": [
            "AMOUNT_DIRECT",
            "AMOUNT_CALCULATED",
            "AMOUNT_PERCENTAGE_DIRECT",
            "AMOUNT_PERCENTAGE_CALCULATED",
            "UNIT_DIRECT"
          ],
          "type": "string",
          "xml": {
            "name": "CostSavingsResultType",
            "namespace": "http://www.casenet.com/CostSavingsResultType"
          }
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "typeOfService": {
          "$ref": "#/definitions/OptionValue"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "required": [
        "costSavingsSource",
        "id"
      ],
      "type": "object",
      "xml": {
        "name": "CostSavingsInstanceSummaryLite",
        "namespace": "http://www.casenet.com/CostSavingsInstanceSummaryLite"
      }
    },
    "CostSavingsOptionFieldConfig": {
      "properties": {
        "availableOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "defaultOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "fieldDisplayed": {
          "type": "boolean"
        },
        "fieldRequired": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CostSavingsResultLite": {
      "properties": {
        "finalSavingAmount": {
          "$ref": "#/definitions/Money"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object",
      "xml": {
        "name": "CostSavingsResultLite",
        "namespace": "http://www.casenet.com/CostSavingsResultLite"
      }
    },
    "CostSavingsSearchAdvancedCriteria": {
      "properties": {
        "authorizationId": {
          "$ref": "#/definitions/AuthorizationId"
        },
        "caseId": {
          "$ref": "#/definitions/CaseId"
        },
        "caseTypeOption": {
          "type": "string"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "includeFinal": {
          "type": "boolean"
        },
        "includeVoided": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "memberId": {
          "$ref": "#/definitions/MemberId"
        },
        "persistedState": {
          "enum": [
            "DRAFT",
            "SUBMITTED"
          ],
          "type": "string",
          "xml": {
            "name": "PersistentEntityState",
            "namespace": "http://www.casenet.com/PersistentEntityState"
          }
        },
        "providerId": {
          "type": "string"
        },
        "savingsCategoryOption": {
          "type": "string"
        },
        "savingsSourceOption": {
          "type": "string"
        },
        "savingsTypeOption": {
          "type": "string"
        },
        "serviceTypeOption": {
          "type": "string"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/CostSavingsSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object",
      "xml": {
        "name": "CostSavingsSearchCriteria",
        "namespace": "http://www.casenet.com/CostSavingsSearchCriteria"
      }
    },
    "CostSavingsSearchCriteria": {
      "properties": {
        "authorizationId": {
          "$ref": "#/definitions/AuthorizationId"
        },
        "caseId": {
          "$ref": "#/definitions/CaseId"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "memberId": {
          "$ref": "#/definitions/MemberId"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/CostSavingsSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "CostSavingsSearchCriteria",
        "namespace": "http://www.casenet.com/CostSavingsSearchCriteria"
      }
    },
    "CostSavingsSearchResults": {
      "properties": {
        "costSavings": {
          "items": {
            "$ref": "#/definitions/CostSavingsInstanceSummaryLite"
          },
          "type": "array",
          "uniqueItems": true
        },
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "CostSavingsSearchResults",
        "namespace": "http://www.casenet.com/CostSavingsSearchResults"
      }
    },
    "CostSavingsSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "SOURCE",
            "CATEGORY",
            "TYPE",
            "PROVIDER",
            "FROM_DATE",
            "TO_DATE",
            "SAVINGS",
            "CREATED_BY",
            "FINAL",
            "STATE"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "Country": {
      "properties": {
        "alpha2": {
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "maxLength": 35,
          "minLength": 0,
          "type": "string"
        },
        "phoneCountryCode": {
          "maxLength": 6,
          "minLength": 0,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "alpha2"
      ],
      "type": "object",
      "xml": {
        "name": "Country",
        "namespace": "http://www.casenet.com/Country"
      }
    },
    "CreateAAGReviewRequest": {
      "properties": {
        "aagActionPathRequest": {
          "$ref": "#/definitions/AagActionPathRequest"
        },
        "aagReviewRequest": {
          "$ref": "#/definitions/AagReviewRequest"
        },
        "taskId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateAagOutcomeRequest": {
      "properties": {
        "aagResolutionDate": {
          "format": "date-time",
          "type": "string"
        },
        "notificationToOption": {
          "type": "string"
        },
        "outcomeDetailOption": {
          "type": "string"
        },
        "outcomeDetailOther": {
          "type": "string"
        },
        "outcomeNote": {
          "maxLength": 5000,
          "minLength": 0,
          "type": "string"
        },
        "outcomeOption": {
          "type": "string"
        },
        "resolutionLetterSentDate": {
          "format": "date-time",
          "type": "string"
        },
        "taskId": {
          "type": "string"
        },
        "verbalNotificationOfResolutionDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateAagRequest": {
      "properties": {
        "aagDetailsRequest": {
          "$ref": "#/definitions/AagDetailsRequest"
        },
        "aagHeaderRequest": {
          "$ref": "#/definitions/AagHeaderRequest"
        },
        "aagRequestorInfoRequest": {
          "$ref": "#/definitions/AagRequestorInfoRequest"
        },
        "aagTypeOption": {
          "type": "string"
        },
        "actionPathRequest": {
          "$ref": "#/definitions/AagActionPathRequest"
        }
      },
      "required": [
        "aagTypeOption"
      ],
      "type": "object",
      "xml": {
        "name": "CreateAagRequest",
        "namespace": "http://www.casenet.com/CreateAagRequest"
      }
    },
    "CreateActionRequest": {
      "properties": {
        "carePlanElementPriorityOption": {
          "type": "string"
        },
        "category": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "closedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "closureReasonOption": {
          "type": "string"
        },
        "comments": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "relatedTask": {
          "$ref": "#/definitions/RelatedTaskRequest"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "targetDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object"
    },
    "CreateAddressRequest": {
      "properties": {
        "addressLine1": {
          "maxLength": 120,
          "minLength": 0,
          "type": "string"
        },
        "addressLine2": {
          "maxLength": 120,
          "minLength": 0,
          "type": "string"
        },
        "addressLine3": {
          "maxLength": 120,
          "minLength": 0,
          "type": "string"
        },
        "city": {
          "maxLength": 35,
          "minLength": 0,
          "type": "string"
        },
        "countryAlpha2Code": {
          "type": "string"
        },
        "countryText": {
          "maxLength": 35,
          "minLength": 0,
          "type": "string"
        },
        "county": {
          "maxLength": 35,
          "minLength": 0,
          "type": "string"
        },
        "stateOption": {
          "type": "string"
        },
        "stateText": {
          "maxLength": 120,
          "minLength": 0,
          "type": "string"
        },
        "undeliverable": {
          "type": "boolean"
        },
        "zipCode": {
          "maxLength": 10,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "countryAlpha2Code"
      ],
      "type": "object",
      "xml": {
        "name": "CreateAddressRequest",
        "namespace": "http://www.casenet.com/CreateAddressRequest"
      }
    },
    "CreateAllergyRequest": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "allergyDetail": {
          "maxLength": 250,
          "minLength": 0,
          "type": "string"
        },
        "allergyOptionValueId": {
          "type": "string"
        },
        "dateIdentified": {
          "$ref": "#/definitions/LocalDate"
        },
        "otherAllergy": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "otherReaction": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "reactionOptionValueId": {
          "type": "string"
        },
        "severityOptionValueId": {
          "type": "string"
        },
        "sourceOptionValueId": {
          "type": "string"
        }
      },
      "required": [
        "allergyOptionValueId",
        "reactionOptionValueId"
      ],
      "type": "object",
      "xml": {
        "name": "CreateAllergyRequest",
        "namespace": "http://www.casenet.com/CreateAllergyRequest"
      }
    },
    "CreateAppealGlobalOutcomeRequest": {
      "properties": {
        "actionPath": {
          "$ref": "#/definitions/AppealActionPathRequest"
        },
        "completionDate": {
          "format": "date-time",
          "type": "string"
        },
        "decision": {
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "notificationToOption": {
          "type": "string"
        },
        "outcomeDetailOption": {
          "type": "string"
        },
        "outcomeOption": {
          "type": "string"
        },
        "outcomeOther": {
          "type": "string"
        },
        "resolutionLetterSentDate": {
          "format": "date-time",
          "type": "string"
        },
        "taskId": {
          "type": "string"
        },
        "verbalNotificationOfResolutionDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "outcomeOption"
      ],
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "CreateAppealNotificationRequest": {
      "properties": {
        "appealVersion": {
          "format": "int32",
          "type": "integer"
        },
        "createInternalLetterNotificationRequest": {
          "$ref": "#/definitions/CreateInternalLetterNotificationRequest"
        },
        "createPhoneNotificationRequests": {
          "items": {
            "$ref": "#/definitions/CreatePhoneNotificationRequest"
          },
          "type": "array"
        },
        "lineItemIds": {
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        },
        "taskId": {
          "type": "string"
        }
      },
      "required": [
        "appealVersion",
        "lineItemIds"
      ],
      "type": "object"
    },
    "CreateAppealOutcomeRequest": {
      "properties": {
        "actionPath": {
          "$ref": "#/definitions/AppealActionPathRequest"
        },
        "additionalLineItemIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "decision": {
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "lineItemUnderReviewId": {
          "type": "string"
        },
        "notificationToOption": {
          "type": "string"
        },
        "outcomeDetailOption": {
          "type": "string"
        },
        "outcomeOption": {
          "type": "string"
        },
        "outcomeOther": {
          "type": "string"
        },
        "resolutionLetterSentDate": {
          "format": "date-time",
          "type": "string"
        },
        "taskId": {
          "type": "string"
        },
        "verbalNotificationOfResolutionDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "lineItemUnderReviewId",
        "outcomeOption"
      ],
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "CreateAppealReviewRequest": {
      "properties": {
        "appealActionPathRequest": {
          "$ref": "#/definitions/AppealActionPathRequest"
        },
        "appealReviewRequest": {
          "$ref": "#/definitions/AppealReviewRequest"
        },
        "taskId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateAssessmentRequest": {
      "properties": {
        "agreeToParticipate": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "answerRequests": {
          "items": {
            "$ref": "#/definitions/AnswerRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "assessmentMetaId": {
          "type": "string"
        },
        "enrollMemberInProgram": {
          "type": "boolean"
        },
        "notes": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "offlineCompletedDate": {
          "format": "date-time",
          "type": "string"
        },
        "offlineCreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "opportunityIdentified": {
          "type": "boolean"
        },
        "proceedToGeneralAssessment": {
          "type": "boolean"
        },
        "questionGroupResults": {
          "items": {
            "$ref": "#/definitions/QuestionGroupResultDto"
          },
          "type": "array",
          "uniqueItems": true
        },
        "selectedGeneralAssessmentId": {
          "type": "string"
        },
        "selectedProgramIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "signature": {
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "taskId": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "required": [
        "assessmentMetaId"
      ],
      "type": "object",
      "xml": {
        "name": "CreateAssessmentRequest",
        "namespace": "http://www.casenet.com/CreateAssessmentRequest"
      }
    },
    "CreateAssessmentTriggerRequest": {
      "properties": {
        "abstractAssessmentRequest": {
          "$ref": "#/definitions/AbstractAssessmentRequest"
        },
        "agreeToParticipate": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "answerRequests": {
          "items": {
            "$ref": "#/definitions/AnswerRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "assessmentMetaId": {
          "type": "string"
        },
        "locationId": {
          "type": "string"
        },
        "notes": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "problemDefinitionMcgUIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "questionGroupResults": {
          "items": {
            "$ref": "#/definitions/QuestionGroupResultDto"
          },
          "type": "array",
          "uniqueItems": true
        },
        "selectedAssessmentMetaIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "selectedMedicationRequestIds": {
          "items": {
            "$ref": "#/definitions/MedicationIdRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "selectedPrograms": {
          "items": {
            "$ref": "#/definitions/AssessmentProgramTriggerRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "selectedTasks": {
          "items": {
            "$ref": "#/definitions/AssessmentTaskTriggerRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "specialtyOptionValueID": {
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "taskId": {
          "type": "string"
        },
        "textActionMcgUIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "assessmentMetaId"
      ],
      "type": "object"
    },
    "CreateAttachmentsRequest": {
      "properties": {
        "existingDocumentIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "newDocuments": {
          "items": {
            "$ref": "#/definitions/DocumentInfoRequest"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CreateAuthorizationAppealRequest": {
      "properties": {
        "acknowledgementLetterSentDate": {
          "format": "date-time",
          "type": "string"
        },
        "appealActionPathRequest": {
          "$ref": "#/definitions/AppealActionPathRequest"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "levelOption": {
          "type": "string"
        },
        "lineItemNumbers": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array",
          "uniqueItems": true
        },
        "methodOption": {
          "type": "string"
        },
        "noteRequests": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "ownerUsername": {
          "type": "string"
        },
        "reasonOption": {
          "type": "string"
        },
        "reasonOther": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "receivedDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestForInformationList": {
          "items": {
            "$ref": "#/definitions/AppealRequestForInformationRequest"
          },
          "type": "array"
        },
        "requestorAddress": {
          "$ref": "#/definitions/CreateAddressRequest"
        },
        "requestorAlternatePhone": {
          "$ref": "#/definitions/Phone"
        },
        "requestorEmail": {
          "maxLength": 254,
          "minLength": 0,
          "type": "string"
        },
        "requestorFax": {
          "$ref": "#/definitions/Phone"
        },
        "requestorName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "requestorPrimaryPhone": {
          "$ref": "#/definitions/Phone"
        },
        "requestorTypeOption": {
          "type": "string"
        },
        "typeOption": {
          "type": "string"
        },
        "urgencyChangeReasonOption": {
          "type": "string"
        },
        "urgencyChangeReasonOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "urgencyOption": {
          "type": "string"
        },
        "verbalNotificationExpeditedDenialDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "lineItemNumbers",
        "receivedDate"
      ],
      "type": "object",
      "xml": {
        "name": "CreateAuthorizationAppealRequest",
        "namespace": "http://www.casenet.com/CreateAuthorizationAppealRequest"
      }
    },
    "CreateAuthorizationDiagnosisRequest": {
      "properties": {
        "diagnosisType": {
          "enum": [
            "BEHAVIORAL_DSMIV",
            "MEDICAL",
            "BEHAVIORAL_DSM5"
          ],
          "type": "string",
          "xml": {
            "name": "UMDiagnosisType",
            "namespace": "http://www.casenet.com/UMDiagnosisType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "CreateAuthorizationDiagnosisRequest",
        "namespace": "http://www.casenet.com/CreateAuthorizationDiagnosisRequest"
      }
    },
    "CreateAuthorizationNotificationRequest": {
      "properties": {
        "authVersion": {
          "format": "int32",
          "type": "integer"
        },
        "createInternalLetterNotificationRequest": {
          "$ref": "#/definitions/CreateInternalLetterNotificationRequest"
        },
        "createPhoneNotificationRequests": {
          "items": {
            "$ref": "#/definitions/CreatePhoneNotificationRequest"
          },
          "type": "array"
        },
        "lineItemIds": {
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "authVersion",
        "lineItemIds"
      ],
      "type": "object"
    },
    "CreateBaseAllergyRequest": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "allergyDetail": {
          "maxLength": 250,
          "minLength": 0,
          "type": "string"
        },
        "dateIdentified": {
          "$ref": "#/definitions/LocalDate"
        },
        "reactionOption": {
          "type": "string"
        },
        "reactionOther": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "severityOption": {
          "type": "string"
        },
        "sourceOption": {
          "type": "string"
        }
      },
      "required": [
        "reactionOption"
      ],
      "type": "object"
    },
    "CreateCarePlanFromBuilderRequest": {
      "properties": {
        "artifactRequestList": {
          "items": {
            "$ref": "#/definitions/CarePlanElementRecommendationArtifactRequest"
          },
          "type": "array"
        },
        "carePlanDefinitionId": {
          "maxLength": 36,
          "minLength": 0,
          "type": "string"
        },
        "caseId": {
          "$ref": "#/definitions/CaseId"
        },
        "customCarePlanName": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateCarePlanRequest": {
      "properties": {
        "caseId": {
          "$ref": "#/definitions/CaseId"
        },
        "definitionId": {
          "maxLength": 36,
          "minLength": 0,
          "type": "string"
        },
        "name": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "newActions": {
          "items": {
            "$ref": "#/definitions/CreateActionRequest"
          },
          "type": "array"
        },
        "newObjectives": {
          "items": {
            "$ref": "#/definitions/CreateObjectiveRequest"
          },
          "type": "array"
        },
        "newProblems": {
          "items": {
            "$ref": "#/definitions/CreateProblemRequest"
          },
          "type": "array"
        },
        "noteRequests": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "ownerUserName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "CreateCarePlansFromBuilderRequest": {
      "properties": {
        "createCarePlanRequests": {
          "items": {
            "$ref": "#/definitions/CreateCarePlanFromBuilderRequest"
          },
          "type": "array"
        }
      },
      "required": [
        "createCarePlanRequests"
      ],
      "type": "object"
    },
    "CreateCaseNotificationRequest": {
      "properties": {
        "caseNotificationType": {
          "enum": [
            "welcome",
            "closure"
          ],
          "type": "string"
        },
        "createInternalLetterNotificationRequest": {
          "$ref": "#/definitions/CreateInternalLetterNotificationRequest"
        },
        "createPhoneNotificationRequest": {
          "$ref": "#/definitions/CreatePhoneNotificationRequest"
        },
        "taskId": {
          "type": "string"
        }
      },
      "required": [
        "caseNotificationType",
        "taskId"
      ],
      "type": "object"
    },
    "CreateCaseRequest": {
      "properties": {
        "caseNameOption": {
          "type": "string"
        },
        "caseNameOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "caseTypeOption": {
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "noteRequests": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "primaryDiagnosisId": {
          "type": "string"
        },
        "primaryOwnerUsername": {
          "type": "string"
        },
        "secondaryOwnerUsernames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "required": [
        "caseNameOption",
        "caseTypeOption",
        "primaryOwnerUsername"
      ],
      "type": "object",
      "xml": {
        "name": "CreateCaseRequest",
        "namespace": "http://www.casenet.com/CreateCaseRequest"
      }
    },
    "CreateCommonAuthorizationDiagnosisRequest": {
      "properties": {
        "additionalDiagnosisCodeIdSet": {
          "items": {
            "$ref": "#/definitions/DiagnosisCodeNaturalId"
          },
          "type": "array",
          "uniqueItems": true
        },
        "diagnosisType": {
          "enum": [
            "BEHAVIORAL_DSMIV",
            "MEDICAL",
            "BEHAVIORAL_DSM5"
          ],
          "type": "string",
          "xml": {
            "name": "UMDiagnosisType",
            "namespace": "http://www.casenet.com/UMDiagnosisType"
          }
        },
        "primaryDiagnosisCodeId": {
          "$ref": "#/definitions/DiagnosisCodeNaturalId"
        }
      },
      "type": "object",
      "xml": {
        "name": "CreateCommonAuthorizationDiagnosisRequest",
        "namespace": "http://www.casenet.com/CreateCommonAuthorizationDiagnosisRequest"
      }
    },
    "CreateContactAddressRequest": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "address": {
          "$ref": "#/definitions/CreateAddressRequest"
        },
        "addressTypeOption": {
          "type": "string"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "preferredAddress": {
          "type": "boolean"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object"
    },
    "CreateContactEmailRequest": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "emailAddress": {
          "maxLength": 254,
          "minLength": 0,
          "type": "string"
        },
        "emailTypeOption": {
          "type": "string"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "preferredEmail": {
          "type": "boolean"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "required": [
        "emailAddress",
        "emailTypeOption"
      ],
      "type": "object"
    },
    "CreateContactPhoneNumberRequest": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "phoneNumberTypeOption": {
          "type": "string"
        },
        "preferredPhoneNumber": {
          "type": "boolean"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "required": [
        "phoneNumberTypeOption"
      ],
      "type": "object"
    },
    "CreateCostSavingsRequest": {
      "properties": {
        "careProviderId": {
          "type": "string"
        },
        "costSavingsAmountRequest": {
          "$ref": "#/definitions/CostSavingsAmountRequest"
        },
        "costSavingsCategoryOption": {
          "type": "string"
        },
        "costSavingsDetailsOption": {
          "type": "string"
        },
        "costSavingsTypeOption": {
          "type": "string"
        },
        "currencyOption": {
          "type": "string"
        },
        "finalizeFlag": {
          "type": "boolean"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "notes": {
          "items": {
            "$ref": "#/definitions/NoteRequest"
          },
          "type": "array"
        },
        "procedureCodeId": {
          "type": "string"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "typeOfServiceOption": {
          "type": "string"
        }
      },
      "required": [
        "costSavingsTypeOption"
      ],
      "type": "object"
    },
    "CreateDiagnosisRequest": {
      "properties": {
        "diagnosisCodeId": {
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "primaryDiagnosis": {
          "type": "boolean"
        },
        "reportedBy": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "reportedDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "required": [
        "diagnosisCodeId",
        "reportedBy"
      ],
      "type": "object",
      "xml": {
        "name": "CreateDiagnosisRequest",
        "namespace": "http://www.casenet.com/CreateDiagnosisRequest"
      }
    },
    "CreateDischargeDiagnosisRequest": {
      "type": "object"
    },
    "CreateExternalLetterRequest": {
      "properties": {
        "correspondenceRecipients": {
          "items": {
            "$ref": "#/definitions/CorrespondenceRecipient"
          },
          "type": "array"
        },
        "correspondenceTemplateId": {
          "maxLength": 36,
          "minLength": 0,
          "type": "string"
        },
        "externalLetterData": {
          "$ref": "#/definitions/ExternalLetterData"
        },
        "memberId": {
          "$ref": "#/definitions/MemberId"
        }
      },
      "required": [
        "correspondenceRecipients",
        "correspondenceTemplateId"
      ],
      "type": "object",
      "xml": {
        "name": "CreateExternalLetterRequest",
        "namespace": "http://www.casenet.com/CreateExternalLetterRequest"
      }
    },
    "CreateExternalLetterRequestV2": {
      "properties": {
        "correspondenceRecipients": {
          "items": {
            "$ref": "#/definitions/CorrespondenceRecipient"
          },
          "type": "array"
        },
        "correspondenceTemplateId": {
          "maxLength": 36,
          "minLength": 0,
          "type": "string"
        },
        "externalLetterData": {
          "$ref": "#/definitions/ExternalLetterData"
        },
        "memberId": {
          "$ref": "#/definitions/MemberId"
        }
      },
      "required": [
        "correspondenceRecipients",
        "correspondenceTemplateId"
      ],
      "type": "object"
    },
    "CreateHcsEnrollmentDetailsRequest": {
      "properties": {
        "enrollmentDetailDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "fundingSourceOptionValue": {
          "type": "string"
        },
        "stateClassificationOptionValues": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "teamId": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "CreateHcsWaiverEnrollmentRequest": {
      "properties": {
        "assignedTeamId": {
          "type": "string"
        },
        "caseId": {
          "$ref": "#/definitions/CaseId"
        },
        "eligibilityId": {
          "type": "string"
        },
        "enrollmentDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "fundingSourceOptionValueId": {
          "type": "string"
        },
        "stateClassificationOptionValueIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "taskPackageId": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "CreateHcsWaiverEnrollmentRequest",
        "namespace": "http://www.casenet.com/CreateHcsWaiverEnrollmentRequest"
      }
    },
    "CreateHcsWaiverEnrollmentRequestV2": {
      "properties": {
        "caseId": {
          "$ref": "#/definitions/CaseId"
        },
        "createHcsEnrollmentDetailsRequest": {
          "$ref": "#/definitions/CreateHcsEnrollmentDetailsRequest"
        },
        "eligibilityId": {
          "type": "string"
        },
        "enrollmentDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "taskAssigneeRequest": {
          "$ref": "#/definitions/TaskAssigneeRequest"
        },
        "taskPackageId": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "CreateHcsWaiverEnrollmentWithCaseRequest": {
      "properties": {
        "assignedTeamId": {
          "type": "string"
        },
        "createCaseRequest": {
          "$ref": "#/definitions/CreateCaseRequest"
        },
        "eligibilityId": {
          "type": "string"
        },
        "enrollmentDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "fundingSourceOptionValueId": {
          "type": "string"
        },
        "stateClassificationOptionValueIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "taskPackageId": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "CreateHcsWaiverEnrollmentWithCaseRequest",
        "namespace": "http://www.casenet.com/CreateHcsWaiverEnrollmentWithCaseRequest"
      }
    },
    "CreateIndividualServicePlanRequest": {
      "properties": {
        "authorizationIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "carePlanIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "ispId": {
          "type": "string"
        },
        "ispTitle": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "memberCenteredPlanIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "memberNoteIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "notes": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "serviceRequestIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CreateInternalLetterNotificationRequest": {
      "properties": {
        "bhpLogo": {
          "$ref": "#/definitions/LetterLogoRequest"
        },
        "companyGroupLogo": {
          "$ref": "#/definitions/LetterLogoRequest"
        },
        "enclosures": {
          "items": {
            "$ref": "#/definitions/EnclosureBase"
          },
          "type": "array"
        },
        "letterRecipients": {
          "items": {
            "$ref": "#/definitions/CreateLetterRecipientRequest"
          },
          "type": "array"
        },
        "letterTemplateVersionId": {
          "maxLength": 36,
          "minLength": 0,
          "type": "string"
        },
        "logoFour": {
          "$ref": "#/definitions/LetterLogoRequest"
        },
        "logoSignature": {
          "$ref": "#/definitions/LetterLogoRequest"
        },
        "logoThree": {
          "$ref": "#/definitions/LetterLogoRequest"
        },
        "resendAsDuplicate": {
          "type": "boolean"
        },
        "userNotes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "InternalLetterRequest",
        "namespace": "http://www.casenet.com/InternalLetterRequest"
      }
    },
    "CreateInternalLetterRequest": {
      "properties": {
        "associatedArtifacts": {
          "items": {
            "$ref": "#/definitions/AssociableArtifactRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "bhpLogo": {
          "$ref": "#/definitions/LetterLogoRequest"
        },
        "companyGroupLogo": {
          "$ref": "#/definitions/LetterLogoRequest"
        },
        "enclosures": {
          "items": {
            "$ref": "#/definitions/EnclosureBase"
          },
          "type": "array"
        },
        "letterRecipients": {
          "items": {
            "$ref": "#/definitions/CreateLetterRecipientRequest"
          },
          "type": "array"
        },
        "logoFour": {
          "$ref": "#/definitions/LetterLogoRequest"
        },
        "logoSignature": {
          "$ref": "#/definitions/LetterLogoRequest"
        },
        "logoThree": {
          "$ref": "#/definitions/LetterLogoRequest"
        },
        "resendAsDuplicate": {
          "type": "boolean"
        },
        "userNotes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "CreateInternalLetterRequest",
        "namespace": "http://www.casenet.com/CreateInternalLetterRequest"
      }
    },
    "CreateLetterRecipientRequest": {
      "properties": {
        "deliveries": {
          "items": {
            "enum": [
              "UI",
              "QUEUE",
              "FAX",
              "EMAIL"
            ],
            "type": "string",
            "xml": {
              "name": "DeliveryMethod",
              "namespace": "http://www.casenet.com/DeliveryMethod"
            }
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "deliveries"
      ],
      "type": "object",
      "xml": {
        "name": "CreateLetterRecipientRequest",
        "namespace": "http://www.casenet.com/CreateLetterRecipientRequest"
      }
    },
    "CreateLineItemAdvisorReviewRequest": {
      "properties": {
        "administrativeDenial": {
          "type": "boolean"
        },
        "claimReviewTask": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "innerReview": {
          "$ref": "#/definitions/BaseInnerReviewRequest"
        },
        "lineItemNumberUnderReview": {
          "format": "int32",
          "type": "integer"
        },
        "lineItemNumbers": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        },
        "nextTask": {
          "$ref": "#/definitions/AdvisorReviewActionPathRequest"
        },
        "outcomeOption": {
          "type": "string"
        },
        "peerToPeerDate": {
          "format": "date-time",
          "type": "string"
        },
        "rationale": {
          "type": "string"
        },
        "reasonOption": {
          "type": "string"
        },
        "reviewDate": {
          "format": "date-time",
          "type": "string"
        },
        "reviewNotes": {
          "maxLength": 5000,
          "minLength": 0,
          "type": "string"
        },
        "reviewerRequest": {
          "$ref": "#/definitions/ReviewerRequest"
        },
        "specialtyOption": {
          "type": "string"
        }
      },
      "required": [
        "lineItemNumberUnderReview",
        "lineItemNumbers",
        "reviewDate"
      ],
      "type": "object",
      "xml": {
        "name": "CreateLineItemAdvisorReviewRequest",
        "namespace": "http://www.casenet.com/CreateLineItemAdvisorReviewRequest"
      }
    },
    "CreateLineItemClinicalReviewRequest": {
      "properties": {
        "administrativeDenial": {
          "type": "boolean"
        },
        "claimReviewTask": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "informationSourceOption": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "informationSourceOptions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "innerReview": {
          "$ref": "#/definitions/BaseInnerReviewRequest"
        },
        "lineItemNumberUnderReview": {
          "format": "int32",
          "type": "integer"
        },
        "lineItemNumbers": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        },
        "methodOption": {
          "type": "string"
        },
        "nextTask": {
          "$ref": "#/definitions/ActionPathRequest"
        },
        "outcomeOption": {
          "type": "string"
        },
        "rationale": {
          "type": "string"
        },
        "reviewDate": {
          "format": "date-time",
          "type": "string"
        },
        "reviewNotes": {
          "maxLength": 5000,
          "minLength": 0,
          "type": "string"
        },
        "reviewerRequest": {
          "$ref": "#/definitions/ReviewerRequest"
        }
      },
      "required": [
        "lineItemNumberUnderReview",
        "lineItemNumbers",
        "reviewDate"
      ],
      "type": "object",
      "xml": {
        "name": "CreateLineItemClinicalReviewRequest",
        "namespace": "http://www.casenet.com/CreateLineItemClinicalReviewRequest"
      }
    },
    "CreateLineItemRequest": {
      "properties": {
        "appliedEligibilityProductId": {
          "$ref": "#/definitions/ProductId"
        },
        "determination": {
          "$ref": "#/definitions/DeterminationRequest"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "levelOfUrgencyOption": {
          "type": "string"
        },
        "lineItemType": {
          "enum": [
            "IP",
            "SP",
            "RX"
          ],
          "type": "string",
          "xml": {
            "name": "UMLineItemType",
            "namespace": "http://www.casenet.com/UMLineItemType"
          }
        },
        "lineItemTypeOption": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "serviceTypeOption": {
          "type": "string"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "urgencyRequestedByOption": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "CreateLineItemRequest",
        "namespace": "http://www.casenet.com/CreateLineItemRequest"
      }
    },
    "CreateMedicationRegimenReviewRequest": {
      "properties": {
        "actualDose": {
          "maxLength": 25,
          "minLength": 0,
          "type": "string"
        },
        "actualFrequencyOption": {
          "type": "string"
        },
        "actualFrequencyOther": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "adverseEffectsDetails": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "adverseEffectsOptions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "comments": {
          "maxLength": 2000,
          "minLength": 0,
          "type": "string"
        },
        "followUpRequired": {
          "type": "boolean"
        },
        "hasAdverseEffects": {
          "type": "boolean"
        },
        "isCurrentlyTakingMedication": {
          "type": "boolean"
        },
        "knowsWhy": {
          "type": "boolean"
        },
        "lastMissedDoseDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "medicationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "memberEducation": {
          "enum": [
            "EDUCATE_MEMBER",
            "REFER_TO_CASE_MANAGEMENT"
          ],
          "type": "string"
        },
        "missedDoseInLast30Days": {
          "type": "boolean"
        },
        "missedDoseOtherReason": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "missedDoseReasonOption": {
          "type": "string"
        },
        "nextReviewDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "primaryFactorOption": {
          "type": "string"
        },
        "quantityOnHand": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "regimenEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "reviewDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "reviewReason": {
          "enum": [
            "NO_CHANGE",
            "COMPLETE_MEDICATION"
          ],
          "type": "string"
        },
        "takingAsOrdered": {
          "type": "boolean"
        }
      },
      "required": [
        "medicationVersion"
      ],
      "type": "object"
    },
    "CreateMedicationRequest": {
      "properties": {
        "adjustedDose": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "adjustedRouteOption": {
          "type": "string"
        },
        "adjustedRouteOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "drugId": {
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "frequencyOption": {
          "type": "string"
        },
        "frequencyOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "prescriberId": {
          "type": "string"
        },
        "procurementMethodOption": {
          "type": "string"
        },
        "regimenEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "regimenStartDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "required": [
        "drugId"
      ],
      "type": "object",
      "xml": {
        "name": "CreateMedicationRequest",
        "namespace": "http://www.casenet.com/CreateMedicationRequest"
      }
    },
    "CreateMemberLocationRequest": {
      "properties": {
        "address": {
          "$ref": "#/definitions/CreateAddressRequest"
        },
        "addressVerifiedBy": {
          "type": "string"
        },
        "addressVerifiedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "comments": {
          "type": "string"
        },
        "contactName": {
          "type": "string"
        },
        "email": {
          "$ref": "#/definitions/Email"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "fax": {
          "$ref": "#/definitions/PhoneAndExtension"
        },
        "informationSourceOption": {
          "type": "string"
        },
        "informationSourceOther": {
          "type": "string"
        },
        "levelOfCareOption": {
          "type": "string"
        },
        "levelOfCareOther": {
          "type": "string"
        },
        "locationName": {
          "type": "string"
        },
        "locationType": {
          "enum": [
            "FACILITY",
            "MEMBER_CONTACT",
            "OTHER"
          ],
          "type": "string"
        },
        "locationTypeOther": {
          "type": "string"
        },
        "memberAtLocationConfirmed": {
          "type": "boolean"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneAndExtension"
        },
        "providerLocationInfo": {
          "$ref": "#/definitions/ProviderLocationInfo"
        },
        "reportedBy": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "Active",
            "Closed",
            "Historical",
            "Scheduled",
            "Voided"
          ],
          "type": "string"
        }
      },
      "required": [
        "locationName",
        "locationType",
        "memberAtLocationConfirmed",
        "reportedBy"
      ],
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "CreateMemberRequest": {
      "properties": {
        "addresses": {
          "items": {
            "$ref": "#/definitions/ContactAddress"
          },
          "type": "array",
          "uniqueItems": true
        },
        "bhpNodeFeedIdFullPath": {
          "type": "string"
        },
        "dateOfBirth": {
          "$ref": "#/definitions/LocalDate"
        },
        "emails": {
          "items": {
            "$ref": "#/definitions/ContactEmail"
          },
          "type": "array",
          "uniqueItems": true
        },
        "externalMemberId": {
          "maxLength": 100,
          "minLength": 1,
          "type": "string"
        },
        "firstName": {
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "genderOption": {
          "type": "string"
        },
        "lastName": {
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "middleName": {
          "maxLength": 100,
          "minLength": 1,
          "type": "string"
        },
        "phoneNumbers": {
          "items": {
            "$ref": "#/definitions/ContactPhoneNumber"
          },
          "type": "array",
          "uniqueItems": true
        },
        "ssn": {
          "maxLength": 9,
          "minLength": 9,
          "type": "string"
        }
      },
      "required": [
        "firstName",
        "lastName"
      ],
      "type": "object",
      "xml": {
        "name": "CreateMemberRequest",
        "namespace": "http://www.casenet.com/CreateMemberRequest"
      }
    },
    "CreateObjectiveOutcomeRequest": {
      "properties": {
        "detail": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "objectiveOutcomeDescriptionOption": {
          "type": "string"
        },
        "objectiveOutcomeTypeOption": {
          "type": "string"
        }
      },
      "required": [
        "objectiveOutcomeTypeOption"
      ],
      "type": "object"
    },
    "CreateObjectiveRequest": {
      "properties": {
        "carePlanElementPriorityOption": {
          "type": "string"
        },
        "category": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "closedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "closureReasonOption": {
          "type": "string"
        },
        "comments": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "longTerm": {
          "type": "boolean"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "newActions": {
          "items": {
            "$ref": "#/definitions/CreateActionRequest"
          },
          "type": "array"
        },
        "newObjectiveOutcomes": {
          "items": {
            "$ref": "#/definitions/CreateObjectiveOutcomeRequest"
          },
          "type": "array"
        },
        "progress": {
          "format": "int32",
          "maximum": 100,
          "minimum": 0,
          "type": "integer"
        },
        "readinessToChangeOption": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "targetDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object"
    },
    "CreateOptOutPreferenceRequest": {
      "properties": {
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "externalId": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "optOutReasonOption": {
          "type": "string"
        },
        "optOutReasonOther": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "required": [
        "optOutReasonOption"
      ],
      "type": "object",
      "xml": {
        "name": "CreateOptOutPreferenceRequest",
        "namespace": "http://www.casenet.com/CreateOptOutPreferenceRequest"
      }
    },
    "CreateOptionalTaskRequest": {
      "properties": {
        "assignee": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "ALLOW_USER_TO_SELECT",
            "ASSIGNED_TEAM",
            "CURRENT_USER",
            "PRIMARY_CASE_OWNER",
            "QUEUE",
            "TEAM",
            "USER"
          ],
          "type": "string"
        },
        "description": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "dueDateOffset": {
          "format": "int32",
          "type": "integer"
        },
        "priority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "taskDefinitionId": {
          "type": "string"
        },
        "taskPackageInstanceId": {
          "type": "string"
        },
        "taskPackageInstanceVersion": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "assigneeType",
        "dueDateOffset",
        "priority",
        "taskDefinitionId",
        "taskPackageInstanceId",
        "taskPackageInstanceVersion"
      ],
      "type": "object"
    },
    "CreatePdfRequest": {
      "type": "object"
    },
    "CreatePhoneNotificationRequest": {
      "properties": {
        "notifyByPhoneDate": {
          "format": "date-time",
          "type": "string"
        },
        "notifyByPhoneNote": {
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "phoneNotificationRecipientType": {
          "enum": [
            "MEMBER",
            "REQUESTING_PROVIDER",
            "SERVICING_FACILITY",
            "SERVICING_PROVIDER",
            "PRESCRIBING_PROVIDER",
            "PCP_CONTACT",
            "MEMBER_DESIGNEE",
            "PERSONAL_CONTACT"
          ],
          "type": "string"
        },
        "recipientId": {
          "maxLength": 36,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "phoneNotificationRecipientType",
        "recipientId"
      ],
      "type": "object"
    },
    "CreateProblemRequest": {
      "properties": {
        "carePlanElementPriorityOption": {
          "type": "string"
        },
        "category": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "closureReasonOption": {
          "type": "string"
        },
        "comments": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "lastReviewedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "newObjectives": {
          "items": {
            "$ref": "#/definitions/CreateObjectiveRequest"
          },
          "type": "array"
        },
        "noteRequests": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "readinessToChangeOption": {
          "type": "string"
        },
        "resolvedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object"
    },
    "CreateProgramEnrollmentRequest": {
      "properties": {
        "authorizedByUsername": {
          "type": "string"
        },
        "details": {
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "engagementLevelOption": {
          "type": "string"
        },
        "firstSessionTaskPackageVisibleId": {
          "type": "string"
        },
        "programName": {
          "type": "string"
        },
        "serviceLevelOption": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "required": [
        "authorizedByUsername",
        "programName"
      ],
      "type": "object",
      "xml": {
        "name": "CreateProgramEnrollmentRequest",
        "namespace": "http://www.casenet.com/CreateProgramEnrollmentRequest"
      }
    },
    "CreateProviderEmailRequest": {
      "properties": {
        "emailAddress": {
          "maxLength": 254,
          "minLength": 0,
          "type": "string"
        },
        "emailTypeOption": {
          "type": "string"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object"
    },
    "CreateProviderLocationAddressRequest": {
      "properties": {
        "addressLine1": {
          "maxLength": 120,
          "minLength": 0,
          "type": "string"
        },
        "addressLine2": {
          "maxLength": 120,
          "minLength": 0,
          "type": "string"
        },
        "addressLine3": {
          "maxLength": 120,
          "minLength": 0,
          "type": "string"
        },
        "addressType": {
          "enum": [
            "BILLING",
            "MAILING",
            "SERVICING"
          ],
          "type": "string",
          "xml": {
            "name": "ProviderAddressType",
            "namespace": "http://www.casenet.com/ProviderAddressType"
          }
        },
        "city": {
          "maxLength": 35,
          "minLength": 0,
          "type": "string"
        },
        "countryAlpha2Code": {
          "type": "string"
        },
        "countryText": {
          "maxLength": 35,
          "minLength": 0,
          "type": "string"
        },
        "county": {
          "maxLength": 35,
          "minLength": 0,
          "type": "string"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "stateOption": {
          "type": "string"
        },
        "stateText": {
          "maxLength": 120,
          "minLength": 0,
          "type": "string"
        },
        "undeliverable": {
          "type": "boolean"
        },
        "zipCode": {
          "maxLength": 10,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "countryAlpha2Code"
      ],
      "type": "object",
      "xml": {
        "name": "BaseAddressRequest",
        "namespace": "http://www.casenet.com/BaseAddressRequest"
      }
    },
    "CreateProviderLocationRequest": {
      "properties": {
        "emails": {
          "items": {
            "$ref": "#/definitions/CreateProviderEmailRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "fax": {
          "items": {
            "$ref": "#/definitions/CreateProviderPhoneNumberRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "locationType": {
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "phones": {
          "items": {
            "$ref": "#/definitions/CreateProviderPhoneNumberRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "providerLocationAddress": {
          "items": {
            "$ref": "#/definitions/CreateProviderLocationAddressRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "servicesOffered": {
          "items": {
            "$ref": "#/definitions/CreateServiceOfferRequest"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "providerLocationAddress"
      ],
      "type": "object"
    },
    "CreateProviderPhoneNumberRequest": {
      "properties": {
        "alpha2Code": {
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "formattedPhoneNumber": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "phoneCountryCode": {
          "maxLength": 3,
          "minLength": 0,
          "pattern": "^[0-9]*$",
          "type": "string"
        },
        "phoneExtension": {
          "maxLength": 7,
          "minLength": 0,
          "pattern": "^[0-9]*$",
          "type": "string"
        },
        "phoneExtensionString": {
          "type": "string"
        },
        "phoneNumber": {
          "pattern": "^[0-9]+$",
          "type": "string"
        },
        "phoneNumberString": {
          "type": "string"
        },
        "phoneTypeOption": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "required": [
        "alpha2Code",
        "phoneNumber"
      ],
      "type": "object",
      "xml": {
        "name": "PhoneNumber",
        "namespace": "http://www.casenet.com/PhoneNumber"
      }
    },
    "CreateProviderRequest": {
      "properties": {
        "individualProvider": {
          "type": "boolean"
        },
        "npi": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "providerName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "tin": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateProviderRequestV2": {
      "properties": {
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "locations": {
          "items": {
            "$ref": "#/definitions/CreateProviderLocationRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "medicaidNumber": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "medicareNumber": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "npi": {
          "maxLength": 15,
          "minLength": 0,
          "type": "string"
        },
        "number": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "providerName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "providerType": {
          "type": "string"
        },
        "providesMedical": {
          "type": "boolean"
        },
        "specialties": {
          "items": {
            "$ref": "#/definitions/CreateProviderSpecialtyRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "tin": {
          "maxLength": 15,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "locations",
        "providerType",
        "tin"
      ],
      "type": "object"
    },
    "CreateProviderSpecialtyRequest": {
      "properties": {
        "effectiveDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "specialtyOption": {
          "type": "string"
        },
        "terminationDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object"
    },
    "CreateReferralNotificationRequest": {
      "properties": {
        "createInternalLetterNotificationRequest": {
          "$ref": "#/definitions/CreateInternalLetterNotificationRequest"
        },
        "createPhoneNotificationRequest": {
          "$ref": "#/definitions/CreatePhoneNotificationRequest"
        },
        "taskId": {
          "type": "string"
        }
      },
      "required": [
        "taskId"
      ],
      "type": "object"
    },
    "CreateRequestForInformationRequest": {
      "properties": {
        "dateOfAttempt": {
          "format": "date-time",
          "type": "string"
        },
        "dateReceived": {
          "format": "date-time",
          "type": "string"
        },
        "faxNumber": {
          "$ref": "#/definitions/Phone"
        },
        "faxNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "informationRequested": {
          "maxLength": 4000,
          "minLength": 1,
          "type": "string"
        },
        "lineItemNumbers": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array"
        },
        "nextTask": {
          "$ref": "#/definitions/CommonActionPathRequest"
        },
        "phoneNumber": {
          "$ref": "#/definitions/Phone"
        },
        "phoneNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "provider": {
          "maxLength": 250,
          "minLength": 0,
          "type": "string"
        },
        "requestTypeOption": {
          "type": "string"
        }
      },
      "required": [
        "informationRequested",
        "lineItemNumbers",
        "requestTypeOption"
      ],
      "type": "object",
      "xml": {
        "name": "CreateRequestForInformationRequest",
        "namespace": "http://www.casenet.com/CreateRequestForInformationRequest"
      }
    },
    "CreateRequestForInformationResponse": {
      "properties": {
        "attemptNumber": {
          "format": "int32",
          "type": "integer"
        },
        "requestForInformationId": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "CreateRequestForInformationResponse",
        "namespace": "http://www.casenet.com/CreateRequestForInformationResponse"
      }
    },
    "CreateRiskIndicatorsRequest": {
      "properties": {
        "riskIndicators": {
          "items": {
            "$ref": "#/definitions/RiskIndicatorRequest"
          },
          "type": "array"
        }
      },
      "required": [
        "riskIndicators"
      ],
      "type": "object",
      "xml": {
        "name": "CreateRiskIndicatorsRequest",
        "namespace": "http://www.casenet.com/CreateRiskIndicatorsRequest"
      }
    },
    "CreateRxLineItemRequest": {
      "properties": {
        "appliedEligibilityProductId": {
          "$ref": "#/definitions/ProductId"
        },
        "authSpecificContactAddress": {
          "$ref": "#/definitions/CreateAddressRequest"
        },
        "authSpecificContactFax": {
          "$ref": "#/definitions/Phone"
        },
        "authSpecificContactFaxI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "authSpecificContactName": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "authSpecificContactPhone": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "authSpecificContactPhoneI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "determination": {
          "$ref": "#/definitions/DeterminationRequest"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "inFormulary": {
          "type": "boolean"
        },
        "levelOfUrgencyOption": {
          "type": "string"
        },
        "lineItemMedicationInfoRequest": {
          "$ref": "#/definitions/LineItemMedicationInfoRequest"
        },
        "lineItemType": {
          "enum": [
            "IP",
            "SP",
            "RX"
          ],
          "type": "string",
          "xml": {
            "name": "UMLineItemType",
            "namespace": "http://www.casenet.com/UMLineItemType"
          }
        },
        "lineItemTypeOption": {
          "type": "string"
        },
        "oonReasonOption": {
          "type": "string"
        },
        "placeOfServiceOption": {
          "type": "string"
        },
        "prescribingProviderPhoneNumber": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "prescribingProviderPhoneNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "providerLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "providerSpecialtyOption": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "serviceTypeOption": {
          "type": "string"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "urgencyRequestedByOption": {
          "type": "string"
        },
        "useAuthSpecificContactAddressForCorrespondence": {
          "type": "boolean"
        }
      },
      "required": [
        "placeOfServiceOption",
        "serviceTypeOption"
      ],
      "type": "object",
      "xml": {
        "name": "CreateRxLineItemRequest",
        "namespace": "http://www.casenet.com/CreateRxLineItemRequest"
      }
    },
    "CreateServiceOfferRequest": {
      "properties": {
        "additionalInformation": {
          "type": "string"
        },
        "contactName": {
          "type": "string"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "rate": {
          "$ref": "#/definitions/Money"
        },
        "rateUnitOption": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "required": [
        "serviceId"
      ],
      "type": "object"
    },
    "CreateServiceProcedureLineItemRequest": {
      "properties": {
        "additionalProcedures": {
          "items": {
            "$ref": "#/definitions/ModifiedProcedureCodeNaturalId"
          },
          "type": "array"
        },
        "appliedEligibilityProductId": {
          "$ref": "#/definitions/ProductId"
        },
        "authBy": {
          "enum": [
            "GROUP",
            "SPECIALTY",
            "PROVIDER",
            "PROCEDURE_CODE"
          ],
          "type": "string",
          "xml": {
            "name": "AuthorizedByType",
            "namespace": "http://www.casenet.com/AuthorizedByType"
          }
        },
        "authSpecificContactAddress": {
          "$ref": "#/definitions/CreateAddressRequest"
        },
        "authSpecificContactFax": {
          "$ref": "#/definitions/Phone"
        },
        "authSpecificContactFaxI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "authSpecificContactName": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "authSpecificContactPhone": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "authSpecificContactPhoneI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "clinicalReviewRequired": {
          "type": "boolean"
        },
        "determination": {
          "$ref": "#/definitions/DeterminationRequest"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "levelOfUrgencyOption": {
          "type": "string"
        },
        "lineItemMedicationInfoRequest": {
          "$ref": "#/definitions/SPLineItemMedicationInfoRequest"
        },
        "lineItemType": {
          "enum": [
            "IP",
            "SP",
            "RX"
          ],
          "type": "string",
          "xml": {
            "name": "UMLineItemType",
            "namespace": "http://www.casenet.com/UMLineItemType"
          }
        },
        "lineItemTypeOption": {
          "type": "string"
        },
        "locationCodeNaturalId": {
          "type": "string"
        },
        "oonReasonOption": {
          "type": "string"
        },
        "plCodeOption": {
          "type": "string"
        },
        "placeOfServiceOption": {
          "type": "string"
        },
        "primaryProcedure": {
          "$ref": "#/definitions/ModifiedProcedureCodeNaturalId"
        },
        "providerLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "providerSpecialtyOption": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestedUnits": {
          "format": "int32",
          "maximum": 999999999,
          "minimum": 1,
          "type": "integer"
        },
        "serviceTypeOption": {
          "type": "string"
        },
        "servicingProviderPhoneNumber": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "servicingProviderPhoneNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "treatmentTypeOption": {
          "type": "string"
        },
        "unitTypeOption": {
          "type": "string"
        },
        "urgencyRequestedByOption": {
          "type": "string"
        },
        "useAuthSpecificContactAddressForCorrespondence": {
          "type": "boolean"
        }
      },
      "required": [
        "placeOfServiceOption",
        "requestedUnits",
        "serviceTypeOption",
        "unitTypeOption"
      ],
      "type": "object",
      "xml": {
        "name": "CreateServiceProcedureLineItemRequest",
        "namespace": "http://www.casenet.com/CreateServiceProcedureLineItemRequest"
      }
    },
    "CreateServiceRequestLineItemRequest": {
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "appliedEligibilityId": {
          "type": "string"
        },
        "details": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "negotiateUnitRate": {
          "format": "double",
          "type": "number"
        },
        "overrideCost": {
          "format": "double",
          "type": "number"
        },
        "requestDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "serviceLocationTypeOptionId": {
          "type": "string"
        },
        "serviceOfferRequest": {
          "$ref": "#/definitions/ServiceRequestServiceOfferRequest"
        },
        "serviceQuantityRequest": {
          "$ref": "#/definitions/BaseServiceRequestServiceQuantityRequest"
        },
        "serviceRequestLineItemDeterminationRequest": {
          "$ref": "#/definitions/ServiceRequestLineItemDeterminationRequest"
        },
        "serviceRequestProcedureRequest": {
          "$ref": "#/definitions/ServiceRequestSRProcedureRequest"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "endDate",
        "startDate"
      ],
      "type": "object",
      "xml": {
        "name": "CreateServiceRequestLineItemRequest",
        "namespace": "http://www.casenet.com/CreateServiceRequestLineItemRequest"
      }
    },
    "CreateServiceRequestNotificationRequest": {
      "properties": {
        "createInternalLetterNotificationRequest": {
          "$ref": "#/definitions/CreateInternalLetterNotificationRequest"
        },
        "createPhoneNotificationRequests": {
          "items": {
            "$ref": "#/definitions/CreatePhoneNotificationRequest"
          },
          "type": "array"
        },
        "lineItemIds": {
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        },
        "serviceRequestVersion": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "lineItemIds"
      ],
      "type": "object"
    },
    "CreateServiceRequestRequest": {
      "properties": {
        "actionPath": {
          "$ref": "#/definitions/ServiceRequestActionPath"
        },
        "lineItemRequests": {
          "items": {
            "$ref": "#/definitions/CreateServiceRequestLineItemRequest"
          },
          "type": "array"
        },
        "mcpId": {
          "type": "string"
        },
        "noteRequests": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "referenceNumber": {
          "maxLength": 12,
          "minLength": 0,
          "type": "string"
        },
        "reviewAssignedTo": {
          "$ref": "#/definitions/Assignee"
        },
        "reviewerId": {
          "type": "string"
        },
        "serviceRequestHeaderRequest": {
          "$ref": "#/definitions/ServiceRequestHeaderRequest"
        }
      },
      "required": [
        "lineItemRequests"
      ],
      "type": "object"
    },
    "CreateTaskCommentRequest": {
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "narrative": {
          "maxLength": 8000,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "createdBy",
        "narrative"
      ],
      "type": "object",
      "xml": {
        "name": "CreateTaskCommentRequest",
        "namespace": "http://www.casenet.com/CreateTaskCommentRequest"
      }
    },
    "CreateTaskCommentsRequest": {
      "properties": {
        "taskComments": {
          "items": {
            "$ref": "#/definitions/TaskCommentRequest"
          },
          "type": "array"
        }
      },
      "required": [
        "taskComments"
      ],
      "type": "object",
      "xml": {
        "name": "CreateTaskCommentsRequest",
        "namespace": "http://www.casenet.com/CreateTaskCommentsRequest"
      }
    },
    "CreateTaskRequest": {
      "properties": {
        "assigneeName": {
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "USERS",
            "GROUP_QUEUES",
            "TEAMS"
          ],
          "type": "string",
          "xml": {
            "name": "TaskAssigneeType",
            "namespace": "http://www.casenet.com/TaskAssigneeType"
          }
        },
        "description": {
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "reminderDate": {
          "format": "date-time",
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "taskActivityOption": {
          "type": "string"
        },
        "taskComments": {
          "items": {
            "$ref": "#/definitions/TaskCommentRequest"
          },
          "type": "array"
        },
        "taskInstanceLinkRequest": {
          "$ref": "#/definitions/TaskInstanceLinkRequest"
        },
        "taskPriority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "taskRecurrenceOptionsRequest": {
          "$ref": "#/definitions/AbstractTaskRecurrenceOptionsRequest"
        }
      },
      "required": [
        "assigneeName",
        "assigneeType",
        "dueDate",
        "startDate",
        "taskActivityOption",
        "taskPriority"
      ],
      "type": "object",
      "xml": {
        "name": "CreateTaskRequest",
        "namespace": "http://www.casenet.com/CreateTaskRequest"
      }
    },
    "CreateTimeTrackingRequest": {
      "properties": {
        "activityDate": {
          "format": "date-time",
          "type": "string"
        },
        "activityNameOption": {
          "type": "string"
        },
        "activityTypeOption": {
          "type": "string"
        },
        "caseId": {
          "$ref": "#/definitions/CaseId"
        },
        "comments": {
          "maxLength": 1500,
          "minLength": 0,
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "minutes": {
          "format": "int32",
          "maximum": 999,
          "minimum": 1,
          "type": "integer"
        },
        "nonTruCareName": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "timeTrackingId": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CurrencyBhpConfiguration": {
      "properties": {
        "defaultCurrency": {
          "enum": [
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AUD",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BOV",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BYR",
            "BZD",
            "CAD",
            "CDF",
            "CHE",
            "CHF",
            "CHW",
            "CLF",
            "CLP",
            "CNY",
            "COP",
            "COU",
            "CRC",
            "CUC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EGP",
            "ERN",
            "ETB",
            "EUR",
            "FJD",
            "FKP",
            "GBP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KPW",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MMK",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MXV",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO",
            "NOK",
            "NPR",
            "NZD",
            "OMR",
            "PAB",
            "PEN",
            "PGK",
            "PHP",
            "PKR",
            "PLN",
            "PYG",
            "QAR",
            "RON",
            "RSD",
            "RUB",
            "RWF",
            "SAR",
            "SBD",
            "SCR",
            "SDG",
            "SEK",
            "SGD",
            "SHP",
            "SLL",
            "SOS",
            "SRD",
            "SSP",
            "STD",
            "SVC",
            "SYP",
            "SZL",
            "THB",
            "TJS",
            "TMT",
            "TND",
            "TOP",
            "TRY",
            "TTD",
            "TWD",
            "TZS",
            "UAH",
            "UGX",
            "USD",
            "USN",
            "UYI",
            "UYU",
            "UZS",
            "VEF",
            "VND",
            "VUV",
            "WST",
            "XAF",
            "XAG",
            "XAU",
            "XBA",
            "XBB",
            "XBC",
            "XBD",
            "XCD",
            "XDR",
            "XOF",
            "XPD",
            "XPF",
            "XPT",
            "XSU",
            "XTS",
            "XUA",
            "XXX",
            "YER",
            "ZAR",
            "ZMW",
            "ZWL"
          ],
          "type": "string"
        },
        "supportedCurrencies": {
          "items": {
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYR",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRO",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STD",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UZS",
              "VEF",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XAG",
              "XAU",
              "XBA",
              "XBB",
              "XBC",
              "XBD",
              "XCD",
              "XDR",
              "XOF",
              "XPD",
              "XPF",
              "XPT",
              "XSU",
              "XTS",
              "XUA",
              "XXX",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "CurrentProgramEnrollment": {
      "properties": {
        "currentStatus": {
          "$ref": "#/definitions/EnrollmentStatus"
        },
        "id": {
          "type": "string"
        },
        "program": {
          "$ref": "#/definitions/Program"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "CurrentProgramEnrollment",
        "namespace": "http://www.casenet.com/CurrentProgramEnrollment"
      }
    },
    "CustomerFeature": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "enum": [
            "CM",
            "DM",
            "UM",
            "TRUMOBILE",
            "MEMBER_PORTAL",
            "EMPLOYER_PORTAL",
            "PROVIDER_PORTAL",
            "REPORTING",
            "ANALYTICS",
            "WELLNESS",
            "HCS",
            "GENERIC",
            "AAG",
            "MEDICATION_MANAGEMENT",
            "TCI_CARE_MANAGEMENT",
            "TCI_CARE_MANAGEMENT_BI_MODELING",
            "TCI_TIME_TRACKING",
            "TCI_TIME_TRACKING_BI_MODELING",
            "TCI_UTILIZATION_MANAGEMENT",
            "TCI_UTILIZATION_MANAGEMENT_BI_MODELING"
          ],
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "programs": {
          "items": {
            "$ref": "#/definitions/Program"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DataTypeConfiguration": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "dataTypeName": {
          "enum": [
            "INTEGER",
            "STRING",
            "META_OPTION",
            "BOOLEAN",
            "BOOLEAN_DATE",
            "DATE",
            "DIAGNOSIS",
            "PHONE_NUMBER"
          ],
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DateTimeZone": {
      "properties": {
        "fixed": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DayPartStatistic": {
      "properties": {
        "countOfAttempts": {
          "format": "int64",
          "type": "integer"
        },
        "dayPart": {
          "enum": [
            "MORNING",
            "AFTERNOON",
            "EVENING",
            "NIGHT",
            "WEEKEND"
          ],
          "type": "string",
          "xml": {
            "name": "DayPart",
            "namespace": "http://www.casenet.com/DayPart"
          }
        },
        "disabled": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Decision": {
      "properties": {
        "claimAcceptance": {
          "$ref": "#/definitions/ClaimAcceptance"
        },
        "claimInformation": {
          "type": "string"
        },
        "decisionBy": {
          "$ref": "#/definitions/User"
        },
        "decisionDate": {
          "format": "date-time",
          "type": "string"
        },
        "explanation": {
          "$ref": "#/definitions/OptionValue"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "isCurrent": {
          "type": "boolean"
        },
        "medNecessity": {
          "$ref": "#/definitions/OptionValue"
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "UMStatus",
            "namespace": "http://www.casenet.com/UMStatus"
          }
        },
        "stayLevelMet": {
          "$ref": "#/definitions/OptionValue"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "units": {
          "format": "int32",
          "type": "integer"
        },
        "varianceReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "Decision",
        "namespace": "http://www.casenet.com/Decision"
      }
    },
    "DecisionRequest": {
      "properties": {
        "decisionDate": {
          "format": "date-time",
          "type": "string"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "medNecessityDeterminationOption": {
          "type": "string"
        },
        "status": {
          "enum": [
            "APPROVE",
            "DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "DeterminationRequestStatus",
            "namespace": "http://www.casenet.com/DeterminationRequestStatus"
          }
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "units": {
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "varianceReasonOption": {
          "type": "string"
        }
      },
      "required": [
        "decisionDate",
        "status",
        "units"
      ],
      "type": "object",
      "xml": {
        "name": "DecisionRequest",
        "namespace": "http://www.casenet.com/DecisionRequest"
      }
    },
    "DefinitionVersion": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "currentVersionNumber": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Determination": {
      "properties": {
        "archivedDecisionList": {
          "items": {
            "$ref": "#/definitions/Decision"
          },
          "type": "array"
        },
        "currentDecisionList": {
          "items": {
            "$ref": "#/definitions/Decision"
          },
          "type": "array"
        },
        "dateSentToClaims": {
          "format": "date-time",
          "type": "string"
        },
        "determinationDueDate": {
          "format": "date-time",
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/SimpleAttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "nextReviewDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "readyForClaims": {
          "type": "boolean"
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "UMStatus",
            "namespace": "http://www.casenet.com/UMStatus"
          }
        },
        "trackingNum": {
          "type": "string"
        },
        "unitsToDetermine": {
          "format": "int32",
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "Determination",
        "namespace": "http://www.casenet.com/Determination"
      }
    },
    "DeterminationConfiguration": {
      "properties": {
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "umStatusTypeExplanationMap": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "DeterminationConfiguration",
        "namespace": "http://www.casenet.com/DeterminationConfiguration"
      }
    },
    "DeterminationDueDateHistory": {
      "properties": {
        "determinationDueDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "DeterminationDueDateHistory",
        "namespace": "http://www.casenet.com/DeterminationDueDateHistory"
      }
    },
    "DeterminationDueDateHistoryResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/DeterminationDueDateHistory"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "DeterminationDueDateHistoryResults",
        "namespace": "http://www.casenet.com/DeterminationDueDateHistoryResults"
      }
    },
    "DeterminationDueDateHistorySearchRequest": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/DeterminationDueDateHistorySortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "DeterminationDueDateHistorySearchRequest",
        "namespace": "http://www.casenet.com/DeterminationDueDateHistorySearchRequest"
      }
    },
    "DeterminationDueDateHistorySortField": {
      "properties": {
        "columnType": {
          "enum": [
            "LINE_ITEM_NUMBER",
            "DUE_DATE",
            "UPDATED_DATE"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "DeterminationDueDateHistorySortField",
        "namespace": "http://www.casenet.com/DeterminationDueDateHistorySortField"
      }
    },
    "DeterminationRequest": {
      "properties": {
        "automatedVoid": {
          "default": false,
          "type": "boolean"
        },
        "claimInformation": {
          "maxLength": 264,
          "minLength": 0,
          "type": "string"
        },
        "concurrentReviewNextTask": {
          "$ref": "#/definitions/ConcurrentReviewActionPathRequest"
        },
        "decisions": {
          "items": {
            "$ref": "#/definitions/DecisionRequest"
          },
          "type": "array"
        },
        "explanationOption": {
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "nextTask": {
          "$ref": "#/definitions/ActionPathRequest"
        }
      },
      "required": [
        "decisions",
        "explanationOption"
      ],
      "type": "object",
      "xml": {
        "name": "DeterminationRequest",
        "namespace": "http://www.casenet.com/DeterminationRequest"
      }
    },
    "DiagnosesSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/DiagnosisSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "DiagnosesSearchResults",
        "namespace": "http://www.casenet.com/DiagnosesSearchResults"
      }
    },
    "Diagnosis": {
      "properties": {
        "closed": {
          "type": "boolean"
        },
        "closedBy": {
          "type": "string"
        },
        "closedByUser": {
          "$ref": "#/definitions/User"
        },
        "closedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "diagnosisCode": {
          "$ref": "#/definitions/DiagnosisCode"
        },
        "diagnosisStatusForDisplay": {
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "primaryDiagnosis": {
          "type": "boolean"
        },
        "reportedBy": {
          "type": "string"
        },
        "reportedByUser": {
          "$ref": "#/definitions/User"
        },
        "reportedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "Diagnosis",
        "namespace": "http://www.casenet.com/Diagnosis"
      }
    },
    "DiagnosisCode": {
      "properties": {
        "diagnosisCode": {
          "type": "string"
        },
        "diagnosisCodeType": {
          "enum": [
            "ICD9",
            "ICD10"
          ],
          "type": "string",
          "xml": {
            "name": "DiagnosisCodeType",
            "namespace": "http://www.casenet.com/DiagnosisCodeType"
          }
        },
        "diagnosisName": {
          "type": "string"
        },
        "effectiveDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "terminationDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object",
      "xml": {
        "name": "DiagnosisCode",
        "namespace": "http://www.casenet.com/DiagnosisCode"
      }
    },
    "DiagnosisCodeLite": {
      "properties": {
        "diagnosisCode": {
          "type": "string"
        },
        "diagnosisCodeType": {
          "enum": [
            "ICD9",
            "ICD10"
          ],
          "type": "string",
          "xml": {
            "name": "DiagnosisCodeType",
            "namespace": "http://www.casenet.com/DiagnosisCodeType"
          }
        },
        "diagnosisName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "DiagnosisCodeLite",
        "namespace": "http://www.casenet.com/DiagnosisCodeLite"
      }
    },
    "DiagnosisCodeNaturalId": {
      "properties": {
        "diagnosisCode": {
          "type": "string"
        },
        "diagnosisCodeType": {
          "enum": [
            "ICD9",
            "ICD10"
          ],
          "type": "string",
          "xml": {
            "name": "DiagnosisCodeType",
            "namespace": "http://www.casenet.com/DiagnosisCodeType"
          }
        }
      },
      "required": [
        "diagnosisCode",
        "diagnosisCodeType"
      ],
      "type": "object",
      "xml": {
        "name": "DiagnosisCodeNaturalId",
        "namespace": "http://www.casenet.com/DiagnosisCodeNaturalId"
      }
    },
    "DiagnosisCodeSearchCriteria": {
      "properties": {
        "code": {
          "$ref": "#/definitions/StringCriteria"
        },
        "codeType": {
          "enum": [
            "ICD9",
            "ICD10"
          ],
          "type": "string",
          "xml": {
            "name": "DiagnosisCodeType",
            "namespace": "http://www.casenet.com/DiagnosisCodeType"
          }
        },
        "effectiveOnDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "name": {
          "$ref": "#/definitions/StringCriteria"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/DiagnosisCodeSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "DiagnosisCodeSearchCriteria",
        "namespace": "http://www.casenet.com/DiagnosisCodeSearchCriteria"
      }
    },
    "DiagnosisCodeSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/DiagnosisCode"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "DiagnosisCodeSearchResults",
        "namespace": "http://www.casenet.com/DiagnosisCodeSearchResults"
      }
    },
    "DiagnosisCodeSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "DIAGNOSIS_NAME",
            "DIAGNOSIS_CODE"
          ],
          "type": "string",
          "xml": {
            "name": "DiagnosisCodeSortColumn",
            "namespace": "http://www.casenet.com/DiagnosisCodeSortColumn"
          }
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "DiagnosisCodeSortField",
        "namespace": "http://www.casenet.com/DiagnosisCodeSortField"
      }
    },
    "DiagnosisLite": {
      "properties": {
        "closedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "diagnosisCode": {
          "$ref": "#/definitions/DiagnosisCodeLite"
        },
        "diagnosisStatus": {
          "enum": [
            "OPEN",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "DiagnosisStatus",
            "namespace": "http://www.casenet.com/DiagnosisStatus"
          }
        },
        "id": {
          "type": "string"
        },
        "primaryDiagnosis": {
          "type": "boolean"
        },
        "reportedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "IdentifiableObject",
        "namespace": "http://www.casenet.com/IdentifiableObject"
      }
    },
    "DiagnosisLiteResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/DiagnosisLite"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "DiagnosisSearchCriteria": {
      "properties": {
        "dateFrom": {
          "$ref": "#/definitions/LocalDate"
        },
        "dateTo": {
          "$ref": "#/definitions/LocalDate"
        },
        "diagnosisCodeId": {
          "type": "string"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "includeClosed": {
          "type": "boolean"
        },
        "includeOpen": {
          "type": "boolean"
        },
        "includeVoided": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "primaryOnly": {
          "type": "boolean"
        },
        "reportedBy": {
          "type": "string"
        },
        "reverseChronologicalOrder": {
          "type": "boolean"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "DiagnosisSearchCriteria",
        "namespace": "http://www.casenet.com/DiagnosisSearchCriteria"
      }
    },
    "DiagnosisSearchResult": {
      "properties": {
        "closed": {
          "type": "boolean"
        },
        "closedBy": {
          "type": "string"
        },
        "closedByUser": {
          "$ref": "#/definitions/User"
        },
        "closedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "diagnosisCode": {
          "$ref": "#/definitions/DiagnosisCode"
        },
        "diagnosisStatusForDisplay": {
          "type": "string"
        },
        "displayClosedDate": {
          "type": "string"
        },
        "displayDiagnosisCode": {
          "type": "string"
        },
        "displayDiagnosisName": {
          "type": "string"
        },
        "displayReportedDate": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "primaryDiagnosis": {
          "type": "boolean"
        },
        "reportedBy": {
          "type": "string"
        },
        "reportedByUser": {
          "$ref": "#/definitions/User"
        },
        "reportedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "voidInfoExists": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "DiagnosisSearchResult",
        "namespace": "http://www.casenet.com/DiagnosisSearchResult"
      }
    },
    "DialResponse": {
      "properties": {
        "destinationPhoneNumber": {
          "type": "string"
        },
        "sourcePhoneExtension": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DischargeOrReadmissionResponse": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object"
    },
    "DischargeReadmissionSearchCriteria": {
      "properties": {
        "filter": {
          "enum": [
            "DISCHARGE",
            "READMISSION",
            "ALL"
          ],
          "type": "string"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/DischargeReadmissionSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "DischargeReadmissionSearchCriteria",
        "namespace": "http://www.casenet.com/DischargeReadmissionSearchCriteria"
      }
    },
    "DischargeReadmissionSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/DischargeOrReadmissionResponse"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "DischargeReadmissionSearchResults",
        "namespace": "http://www.casenet.com/DischargeReadmissionSearchResults"
      }
    },
    "DischargeReadmissionSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "CREATED_DATE"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "DischargeReadmissionSortField",
        "namespace": "http://www.casenet.com/DischargeReadmissionSortField"
      }
    },
    "DischargeRequest": {
      "properties": {
        "dischargeDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "dischargeDiagnosisRequest": {
          "$ref": "#/definitions/CreateAuthorizationDiagnosisRequest"
        },
        "dischargeDispositionOption": {
          "type": "string"
        },
        "dischargeStatusOption": {
          "type": "string"
        },
        "noteRequests": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "qualityOfCareDetails": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "qualityOfCareIssue": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "UserOptionEnum",
            "namespace": "http://www.casenet.com/UserOptionEnum"
          }
        },
        "verified": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "DischargeRequest",
        "namespace": "http://www.casenet.com/DischargeRequest"
      }
    },
    "DischargeSummary": {
      "properties": {
        "authorizationId": {
          "type": "string"
        },
        "dischargeDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "dischargeDisposition": {
          "$ref": "#/definitions/OptionValue"
        },
        "id": {
          "type": "string"
        },
        "primaryAxisI": {
          "$ref": "#/definitions/DiagnosisCodeLite"
        },
        "primaryDiagnosis": {
          "$ref": "#/definitions/DiagnosisCodeLite"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "DischargeSummary",
        "namespace": "http://www.casenet.com/DischargeSummary"
      }
    },
    "DiscontinueMedicationRegimenRequest": {
      "properties": {
        "cancelRelatedTasks": {
          "type": "boolean"
        },
        "discontinueAuthorizedByLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "discontinueDate": {
          "format": "date-time",
          "type": "string"
        },
        "discontinueReasonOption": {
          "type": "string"
        },
        "discontinueReasonOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "medicationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "discontinueDate",
        "discontinueReasonOption",
        "medicationVersion"
      ],
      "type": "object"
    },
    "DisplayTypeConfiguration": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "dataTypes": {
          "items": {
            "$ref": "#/definitions/DataTypeConfiguration"
          },
          "type": "array",
          "uniqueItems": true
        },
        "displayTypeName": {
          "enum": [
            "TEXT_FIELD",
            "VERTICAL_RADIO_BUTTONS",
            "HORIZONTAL_RADIO_BUTTONS",
            "LABEL",
            "VERTICAL_CHECKBOXES",
            "VERTICAL_CHECKBOXES_DATES",
            "DROPDOWN_LIST",
            "DATE_FIELD_CALENDAR",
            "PHONE_NUMBER",
            "DIAGNOSIS_FIELD",
            "THREE_COLUMN_RADIO_BUTTONS",
            "THREE_COLUMN_CHECKBOXES",
            "TEXT_AREA",
            "VERTICAL_CHECKBOX_GROUP",
            "LINK"
          ],
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DocumentConfiguration": {
      "properties": {
        "allowedFileExtensions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "documentSourceDefault": {
          "$ref": "#/definitions/OptionValue"
        },
        "documentSourceOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "documentTypeDefault": {
          "$ref": "#/definitions/OptionValue"
        },
        "documentTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "libraryDocumentCategoryOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "maxSizeInMB": {
          "format": "int32",
          "type": "integer"
        },
        "minSizeInMB": {
          "format": "int32",
          "type": "integer"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "voidReasonDefault": {
          "$ref": "#/definitions/OptionValue"
        },
        "voidReasonOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "DocumentConfiguration",
        "namespace": "http://www.casenet.com/DocumentConfiguration"
      }
    },
    "DocumentInfo": {
      "properties": {
        "comment": {
          "type": "string"
        },
        "controlNumber": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "documentFormat": {
          "type": "string"
        },
        "documentSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "documentType": {
          "$ref": "#/definitions/OptionValue"
        },
        "fileContents": {
          "items": {
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        },
        "filename": {
          "type": "string"
        },
        "fullFilename": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "receiptDate": {
          "format": "date-time",
          "type": "string"
        },
        "size": {
          "format": "int32",
          "type": "integer"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object"
    },
    "DocumentInfoRequest": {
      "description": "Metadata",
      "properties": {
        "comment": {
          "maxLength": 200,
          "minLength": 0,
          "type": "string"
        },
        "controlNumber": {
          "maxLength": 40,
          "minLength": 0,
          "type": "string"
        },
        "documentSourceId": {
          "type": "string"
        },
        "documentTypeId": {
          "type": "string"
        },
        "name": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "receiptDate": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "maxLength": 2000,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "documentSourceId",
        "documentTypeId",
        "name"
      ],
      "type": "object",
      "xml": {
        "name": "DocumentInfoRequest",
        "namespace": "http://www.casenet.com/DocumentInfoRequest"
      }
    },
    "DocumentLibrarySearchCriteria": {
      "properties": {
        "categoryOption": {
          "type": "string"
        },
        "comment": {
          "$ref": "#/definitions/StringCriteria"
        },
        "documentName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "filename": {
          "$ref": "#/definitions/StringCriteria"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "licenseFeature": {
          "enum": [
            "CM",
            "DM",
            "UM",
            "TRUMOBILE",
            "MEMBER_PORTAL",
            "EMPLOYER_PORTAL",
            "PROVIDER_PORTAL",
            "REPORTING",
            "ANALYTICS",
            "WELLNESS",
            "HCS",
            "GENERIC",
            "AAG",
            "MEDICATION_MANAGEMENT",
            "TCI_CARE_MANAGEMENT",
            "TCI_CARE_MANAGEMENT_BI_MODELING",
            "TCI_TIME_TRACKING",
            "TCI_TIME_TRACKING_BI_MODELING",
            "TCI_UTILIZATION_MANAGEMENT",
            "TCI_UTILIZATION_MANAGEMENT_BI_MODELING"
          ],
          "type": "string",
          "xml": {
            "name": "CasenetFeature",
            "namespace": "http://www.casenet.com/CasenetFeature"
          }
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/DocumentLibrarySortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "DocumentLibrarySearchCriteria",
        "namespace": "http://www.casenet.com/DocumentLibrarySearchCriteria"
      }
    },
    "DocumentLibrarySearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/LibraryDocumentInfo"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "DocumentLibrarySearchResults",
        "namespace": "http://www.casenet.com/DocumentLibrarySearchResults"
      }
    },
    "DocumentLibrarySortField": {
      "properties": {
        "columnType": {
          "enum": [
            "DOCUMENT_ID",
            "DOCUMENT_NAME",
            "DOCUMENT_DESCRIPTION",
            "FILENAME",
            "CATEGORY"
          ],
          "type": "string",
          "xml": {
            "name": "DocumentLibrarySortColumn",
            "namespace": "http://www.casenet.com/DocumentLibrarySortColumn"
          }
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "DocumentLibrarySortField",
        "namespace": "http://www.casenet.com/DocumentLibrarySortField"
      }
    },
    "DocumentProcessRequest": {
      "properties": {
        "documentIdList": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "DocumentSearchCriteria": {
      "properties": {
        "comment": {
          "$ref": "#/definitions/StringCriteria"
        },
        "documentControlNumber": {
          "$ref": "#/definitions/StringCriteria"
        },
        "documentName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "documentSourceOption": {
          "type": "string"
        },
        "documentTypeOption": {
          "type": "string"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "includeVoided": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "receiptDateFrom": {
          "$ref": "#/definitions/LocalDate"
        },
        "receiptDateTo": {
          "$ref": "#/definitions/LocalDate"
        },
        "reverseChronologicalOrder": {
          "type": "boolean"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/DocumentSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "DocumentSearchResult": {
      "properties": {
        "comment": {
          "type": "string"
        },
        "controlNumber": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "documentFormat": {
          "type": "string"
        },
        "documentSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "documentType": {
          "$ref": "#/definitions/OptionValue"
        },
        "filename": {
          "type": "string"
        },
        "fullFilename": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "receiptDate": {
          "format": "date-time",
          "type": "string"
        },
        "size": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "DocumentSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/DocumentSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "DocumentSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "NAME",
            "DOCUMENT_TYPE",
            "DOCUMENT_SOURCE",
            "RECEIPT_DATE",
            "DOC_URL",
            "DOC_CNTRL_NUM",
            "DOC_COMMENT"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "Drug": {
      "properties": {
        "description": {
          "type": "string"
        },
        "dosage": {
          "type": "string"
        },
        "dosageUnits": {
          "type": "string"
        },
        "doseForm": {
          "type": "string"
        },
        "fullDosage": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "medispanDrugClassId": {
          "type": "string"
        },
        "medispanDrugClassName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nameTypeCode": {
          "enum": [
            "GENERIC",
            "BRANDED_GENERIC",
            "TRADEMARKED"
          ],
          "type": "string"
        },
        "ndc": {
          "type": "string"
        },
        "route": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "Drug",
        "namespace": "http://www.casenet.com/Drug"
      }
    },
    "DrugLite": {
      "properties": {
        "drugDescription": {
          "maxLength": 250,
          "minLength": 0,
          "type": "string"
        },
        "drugId": {
          "type": "string"
        },
        "gpiClassification": {
          "maxLength": 65,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "drugId"
      ],
      "type": "object"
    },
    "DrugSearchCriteria": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "gpiDrugClassification": {
          "type": "string"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "nameCriteria": {
          "$ref": "#/definitions/StringCriteria"
        },
        "ndcCriteria": {
          "$ref": "#/definitions/StringCriteria"
        },
        "searchType": {
          "enum": [
            "DISPENSED_DRUG",
            "DRUG_BASE_NAME",
            "DRUG_CLASS",
            "PACKAGED_DRUG",
            "REFINE_DRUG_NAME",
            "DISPENSED_DRUG_EQUIVALENT",
            "PACKAGED_DRUG_EQUIVALENT"
          ],
          "type": "string"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/DrugSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "DrugSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/Drug"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "DrugSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "NAME",
            "NDC"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "DuplicateCandidate": {
      "properties": {
        "determination": {
          "enum": [
            "NONE",
            "NOT_MATCH",
            "MATCH_NOT_MERGED",
            "MATCH_MERGED"
          ],
          "type": "string"
        },
        "duplicate": {
          "$ref": "#/definitions/Member"
        },
        "score": {
          "format": "int32",
          "type": "integer"
        },
        "target": {
          "$ref": "#/definitions/Member"
        }
      },
      "type": "object"
    },
    "DuplicateCandidateResult": {
      "properties": {
        "duplicate": {
          "$ref": "#/definitions/MemberLite"
        },
        "duplicateCandidateId": {
          "type": "string"
        },
        "score": {
          "format": "int32",
          "type": "integer"
        },
        "target": {
          "$ref": "#/definitions/MemberLite"
        }
      },
      "type": "object"
    },
    "DuplicateCandidateResults": {
      "properties": {
        "duplicateCandidates": {
          "items": {
            "$ref": "#/definitions/DuplicateCandidateResult"
          },
          "type": "array"
        },
        "hasMoreResults": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DuplicateMedication": {
      "properties": {
        "addedDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "frequency": {
          "$ref": "#/definitions/OptionValue"
        },
        "frequencyOther": {
          "type": "string"
        },
        "isClaimMedication": {
          "type": "boolean"
        },
        "lastUpdatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "matchType": {
          "enum": [
            "EXACT_MATCH",
            "EQUIVALENT",
            "SIMILAR"
          ],
          "type": "string"
        },
        "medicationId": {
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/OptionValue"
        },
        "sourceOther": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DuplicateMedicationCriteria": {
      "properties": {
        "drugIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "searchType": {
          "enum": [
            "NDC",
            "DISPENSED_DRUG",
            "DRUG_BASE_NAME"
          ],
          "type": "string"
        }
      },
      "required": [
        "drugIds",
        "searchType"
      ],
      "type": "object"
    },
    "DuplicateMedicationResults": {
      "properties": {
        "searchResults": {
          "additionalProperties": {
            "$ref": "#/definitions/DuplicateMedicationsListWrapper"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "DuplicateMedicationsListWrapper": {
      "properties": {
        "duplicateMedications": {
          "items": {
            "$ref": "#/definitions/DuplicateMedication"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "EditRequestForInformationRequest": {
      "properties": {
        "dateReceived": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "dateReceived"
      ],
      "type": "object",
      "xml": {
        "name": "EditRequestForInformationRequest",
        "namespace": "http://www.casenet.com/EditRequestForInformationRequest"
      }
    },
    "Eligibility": {
      "properties": {
        "carrier": {
          "type": "string"
        },
        "cobInd": {
          "type": "string"
        },
        "countyCaseNumber": {
          "type": "string"
        },
        "coveragePriority": {
          "type": "string"
        },
        "coverageRank": {
          "format": "int32",
          "type": "integer"
        },
        "effectiveDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "electionType": {
          "type": "string"
        },
        "eligibilityCounty": {
          "type": "string"
        },
        "eligibilityRelationship": {
          "type": "string"
        },
        "eligibilityTermReason": {
          "type": "string"
        },
        "eligibilityType": {
          "enum": [
            "Client",
            "Other"
          ],
          "type": "string",
          "xml": {
            "name": "EligibilityType",
            "namespace": "http://www.casenet.com/EligibilityType"
          }
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "groupName": {
          "type": "string"
        },
        "groupNumber": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "medicaidEligiblity": {
          "type": "string"
        },
        "medicareEligibilityType": {
          "type": "string"
        },
        "policyHolderName": {
          "type": "string"
        },
        "policyHolderNum": {
          "type": "string"
        },
        "policyNum": {
          "type": "string"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "program1": {
          "type": "string"
        },
        "ratingCategory": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "statusCode": {
          "type": "string"
        },
        "statusVoided": {
          "type": "boolean"
        },
        "terminationDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "waiver1": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "Eligibility",
        "namespace": "http://www.casenet.com/Eligibility"
      }
    },
    "EligibilityBenefit": {
      "properties": {
        "benefit": {
          "$ref": "#/definitions/Benefit"
        },
        "eligibility": {
          "$ref": "#/definitions/Eligibility"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtensibleObject",
        "namespace": "http://www.casenet.com/ExtensibleObject"
      }
    },
    "EligibilityConfiguration": {
      "properties": {
        "medicaidExtendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "medicareExtendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "EligibilityConfiguration",
        "namespace": "http://www.casenet.com/EligibilityConfiguration"
      }
    },
    "Email": {
      "properties": {
        "emailAddress": {
          "maxLength": 254,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "emailAddress"
      ],
      "type": "object",
      "xml": {
        "name": "Email",
        "namespace": "http://www.casenet.com/Email"
      }
    },
    "EmailInfo": {
      "properties": {
        "address": {
          "maxLength": 254,
          "minLength": 1,
          "type": "string"
        },
        "id": {
          "maxLength": 36,
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "enum": [
            "TO"
          ],
          "type": "string",
          "xml": {
            "name": "EmailType",
            "namespace": "http://www.casenet.com/EmailType"
          }
        }
      },
      "required": [
        "address",
        "id",
        "type"
      ],
      "type": "object",
      "xml": {
        "name": "EmailInfo",
        "namespace": "http://www.casenet.com/EmailInfo"
      }
    },
    "EmailNotificationRequest": {
      "properties": {
        "assignee": {
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "USER",
            "TEAM",
            "QUEUE"
          ],
          "type": "string",
          "xml": {
            "name": "EmailNotificationAssigneeType",
            "namespace": "http://www.casenet.com/EmailNotificationAssigneeType"
          }
        },
        "emailId": {
          "maxLength": 36,
          "minLength": 1,
          "type": "string"
        },
        "emailType": {
          "enum": [
            "TO"
          ],
          "type": "string",
          "xml": {
            "name": "EmailType",
            "namespace": "http://www.casenet.com/EmailType"
          }
        },
        "frequency": {
          "format": "int32",
          "type": "integer"
        },
        "frequencyType": {
          "enum": [
            "MINUTES",
            "HOURS"
          ],
          "type": "string",
          "xml": {
            "name": "FrequencyType",
            "namespace": "http://www.casenet.com/FrequencyType"
          }
        }
      },
      "required": [
        "assignee",
        "assigneeType",
        "emailId",
        "emailType",
        "frequency",
        "frequencyType"
      ],
      "type": "object",
      "xml": {
        "name": "EmailNotificationRequest",
        "namespace": "http://www.casenet.com/EmailNotificationRequest"
      }
    },
    "EmailNotificationResponse": {
      "properties": {
        "assignee": {
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "USER",
            "TEAM",
            "QUEUE"
          ],
          "type": "string",
          "xml": {
            "name": "EmailNotificationAssigneeType",
            "namespace": "http://www.casenet.com/EmailNotificationAssigneeType"
          }
        },
        "email": {
          "$ref": "#/definitions/EmailInfo"
        },
        "frequency": {
          "format": "int32",
          "type": "integer"
        },
        "frequencyType": {
          "enum": [
            "MINUTES",
            "HOURS"
          ],
          "type": "string",
          "xml": {
            "name": "FrequencyType",
            "namespace": "http://www.casenet.com/FrequencyType"
          }
        },
        "id": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "assignee",
        "assigneeType",
        "frequency",
        "frequencyType",
        "id"
      ],
      "type": "object",
      "xml": {
        "name": "EmailNotificationResponse",
        "namespace": "http://www.casenet.com/EmailNotificationResponse"
      }
    },
    "EnclosureBase": {
      "properties": {
        "value": {
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "EnclosureBase",
        "namespace": "http://www.casenet.com/EnclosureBase"
      }
    },
    "EnrollmentRestrictionResponse": {
      "properties": {
        "enrollmentRestrictionType": {
          "enum": [
            "SINGLE",
            "MULTIPLE",
            "ONE_PER_PROGRAM_FAMILY",
            "PROGRAM_DISABLED",
            "PROGRAM_NOT_IN_HIERARCHY",
            "NO_SERVICE_LEVEL_CONFIG"
          ],
          "type": "string",
          "xml": {
            "name": "ProgramEnrollmentRestriction",
            "namespace": "http://www.casenet.com/ProgramEnrollmentRestriction"
          }
        },
        "programEnrollmentId": {
          "type": "string"
        },
        "programFamily": {
          "$ref": "#/definitions/OptionValue"
        },
        "programId": {
          "type": "string"
        },
        "programName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "EnrollmentSource": {
      "properties": {
        "caseCreatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "caseName": {
          "$ref": "#/definitions/OptionValue"
        },
        "caseNameOther": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "cnCaseId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "EnrollmentSource",
        "namespace": "http://www.casenet.com/EnrollmentSource"
      }
    },
    "EnrollmentStatus": {
      "properties": {
        "authorizedBy": {
          "$ref": "#/definitions/User"
        },
        "date": {
          "$ref": "#/definitions/LocalDate"
        },
        "details": {
          "type": "string"
        },
        "engagementLevel": {
          "$ref": "#/definitions/OptionValue"
        },
        "id": {
          "type": "string"
        },
        "reason": {
          "$ref": "#/definitions/OptionValue"
        },
        "reasonOther": {
          "type": "string"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "EnrollmentStatus",
        "namespace": "http://www.casenet.com/EnrollmentStatus"
      }
    },
    "EnrollmentStatusEnrolledFull": {
      "properties": {
        "authorizedBy": {
          "$ref": "#/definitions/User"
        },
        "consecutiveUnsuccessfulTaskAttemptsCounter": {
          "format": "int32",
          "type": "integer"
        },
        "date": {
          "$ref": "#/definitions/LocalDate"
        },
        "details": {
          "type": "string"
        },
        "engagementLevel": {
          "$ref": "#/definitions/OptionValue"
        },
        "enrollmentSource": {
          "$ref": "#/definitions/EnrollmentSource"
        },
        "id": {
          "type": "string"
        },
        "reason": {
          "$ref": "#/definitions/OptionValue"
        },
        "reasonOther": {
          "type": "string"
        },
        "serviceLevel": {
          "$ref": "#/definitions/OptionValue"
        },
        "taskPackageInstances": {
          "items": {
            "$ref": "#/definitions/TaskPackageInstance"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "EnrollmentStatusEnrolled",
        "namespace": "http://www.casenet.com/EnrollmentStatus"
      }
    },
    "EnumClass": {
      "properties": {
        "id": {
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EnvironmentDetails": {
      "properties": {
        "buildInfo": {
          "$ref": "#/definitions/BuildInfo"
        },
        "color": {
          "format": "int32",
          "type": "integer"
        },
        "displayName": {
          "type": "boolean"
        },
        "locale": {
          "type": "string"
        },
        "localizationDateFormat": {
          "enum": [
            "ISO_8601",
            "MONTH_DAY_YEAR",
            "DAY_MONTH_YEAR",
            "YEAR_MONTH_DAY"
          ],
          "type": "string",
          "xml": {
            "name": "LocalizationDateFormat",
            "namespace": "http://www.casenet.com/LocalizationDateFormat"
          }
        },
        "localizationDateSeparator": {
          "type": "string"
        },
        "localizationUse24HourTime": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "productName": {
          "type": "string"
        },
        "sessionTimeoutLength": {
          "format": "int32",
          "type": "integer"
        },
        "ssoTrucareEnabled": {
          "type": "boolean"
        },
        "trucareEventingEnabled": {
          "type": "boolean"
        },
        "trucareVersion": {
          "type": "string"
        }
      },
      "required": [
        "localizationDateFormat",
        "localizationDateSeparator",
        "localizationUse24HourTime",
        "trucareVersion"
      ],
      "type": "object",
      "xml": {
        "name": "EnvironmentDetails",
        "namespace": "http://www.casenet.com/EnvironmentDetails"
      }
    },
    "ErrorLocation": {
      "properties": {
        "screen": {
          "type": "string"
        },
        "tab": {
          "type": "string"
        }
      },
      "required": [
        "screen"
      ],
      "type": "object"
    },
    "ErrorMessage": {
      "properties": {
        "details": {
          "type": "string"
        },
        "errorCode": {
          "type": "string"
        },
        "errorParameterList": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "httpStatusCode": {
          "format": "int32",
          "type": "integer"
        },
        "httpStatusReasonPhrase": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "validationResult": {
          "$ref": "#/definitions/ValidationResult"
        }
      },
      "required": [
        "httpStatusCode",
        "message"
      ],
      "type": "object",
      "xml": {
        "name": "ErrorMessage",
        "namespace": "http://www.casenet.com/ErrorMessage"
      }
    },
    "Exportable": {
      "properties": {
        "childrenWithReadyToExport": {
          "items": {
            "$ref": "#/definitions/Exportable"
          },
          "type": "array"
        },
        "exportEntityDetails": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "metaStatus": {
          "enum": [
            "IN_PROGRESS",
            "PUBLISHED",
            "HIDDEN"
          ],
          "type": "string"
        },
        "pastPublishDate": {
          "type": "boolean"
        },
        "publishDateToday": {
          "type": "boolean"
        },
        "published": {
          "type": "boolean"
        },
        "readyToExportInfo": {
          "$ref": "#/definitions/ReadyToExportInfo"
        },
        "targetPublishDate": {
          "format": "date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExtendedAttributeConfigDto": {
      "properties": {
        "attributeDef": {
          "$ref": "#/definitions/ExtendedFieldDef"
        },
        "defaultDomainValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "required": {
          "type": "boolean"
        },
        "requiredType": {
          "enum": [
            "notEditable",
            "required",
            "optional"
          ],
          "type": "string",
          "xml": {
            "name": "RequiredType",
            "namespace": "http://www.casenet.com/RequiredType"
          }
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtendedAttributeConfigDto",
        "namespace": "http://www.casenet.com/ExtendedAttributeConfigDto"
      }
    },
    "ExtendedAttributesConfiguration": {
      "properties": {
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesConfiguration",
        "namespace": "http://www.casenet.com/ExtendedAttributesConfiguration"
      }
    },
    "ExtendedFieldDef": {
      "properties": {
        "attributeName": {
          "type": "string"
        },
        "attributeType": {
          "enum": [
            "string",
            "number",
            "date",
            "dropdown",
            "lookup",
            "phoneNumber",
            "label",
            "radioButton",
            "text",
            "bool",
            "enumeration"
          ],
          "type": "string",
          "xml": {
            "name": "AttributeType",
            "namespace": "http://www.casenet.com/AttributeType"
          }
        },
        "fieldType": {
          "enum": [
            "manual",
            "feed"
          ],
          "type": "string",
          "xml": {
            "name": "ExtendedFieldType",
            "namespace": "http://www.casenet.com/ExtendedFieldType"
          }
        },
        "id": {
          "type": "string"
        },
        "lookupAttrType": {
          "enum": [
            "DIAGNOSES",
            "PROCEDURES",
            "MEDICATIONS",
            "PROVIDERS",
            "ELIGIBILITIES",
            "LOCATIONS"
          ],
          "type": "string",
          "xml": {
            "name": "LookupAttributeType",
            "namespace": "http://www.casenet.com/LookupAttributeType"
          }
        },
        "optionValueSet": {
          "$ref": "#/definitions/OptionValueSet"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtendedFieldDef",
        "namespace": "http://www.casenet.com/ExtendedFieldDef"
      }
    },
    "ExtendedSearchFieldConfig": {
      "properties": {
        "attributeDef": {
          "$ref": "#/definitions/ExtendedFieldDef"
        },
        "label": {
          "type": "string"
        },
        "memberProviderSearchable": {
          "type": "boolean"
        },
        "taskQueueSearchable": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtendedSearchFieldConfig",
        "namespace": "http://www.casenet.com/ExtendedSearchFieldConfig"
      }
    },
    "ExternalAnswerDefMetadata": {
      "properties": {
        "answerDefinition": {
          "$ref": "#/definitions/AnswerDefinition"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ExternalAssessmentMetadata": {
      "properties": {
        "assessmentMeta": {
          "$ref": "#/definitions/AssessmentMeta"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ExternalLetter": {
      "properties": {
        "authType": {
          "enum": [
            "INPATIENT",
            "SP",
            "RX"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationType",
            "namespace": "http://www.casenet.com/UMAuthorizationType"
          }
        },
        "carePlanName": {
          "type": "string"
        },
        "caseDate": {
          "format": "date-time",
          "type": "string"
        },
        "caseId": {
          "type": "string"
        },
        "caseName": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "caseStatus": {
          "enum": [
            "IN_PROGRESS",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CaseStatusType",
            "namespace": "http://www.casenet.com/CaseStatusType"
          }
        },
        "dateGenerated": {
          "format": "date-time",
          "type": "string"
        },
        "enclosures": {
          "items": {
            "$ref": "#/definitions/ExternalLetterEnclosure"
          },
          "type": "array"
        },
        "eventType": {
          "enum": [
            "MANUAL",
            "CM",
            "CM_PROGRAM_ENROLLMENT",
            "CM_PROGRAM_CLOSURE",
            "UM",
            "TCA_UM",
            "TASK_ATTEMPT"
          ],
          "type": "string",
          "xml": {
            "name": "DistributedCorrespondenceEventType",
            "namespace": "http://www.casenet.com/DistributedCorrespondenceEventType"
          }
        },
        "externalLetterId": {
          "maxLength": 36,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "letterDesc": {
          "type": "string"
        },
        "letterMailingExternals": {
          "items": {
            "$ref": "#/definitions/LetterMailingExternal"
          },
          "type": "array",
          "uniqueItems": true
        },
        "letterName": {
          "type": "string"
        },
        "letterStatus": {
          "enum": [
            "RequestSent",
            "InProgress",
            "Failed",
            "Cancelled",
            "Draft",
            "Locked",
            "Complete"
          ],
          "type": "string",
          "xml": {
            "name": "LetterStatus",
            "namespace": "http://www.casenet.com/LetterStatus"
          }
        },
        "member": {
          "$ref": "#/definitions/Member"
        },
        "optionalRecipientTypes": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "requiredRecipientTypes": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "userNote": {
          "maxLength": 8000,
          "minLength": 0,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExternalLetter",
        "namespace": "http://www.casenet.com/ExternalLetter"
      }
    },
    "ExternalLetterConfiguration": {
      "properties": {
        "externalLetterTemplates": {
          "items": {
            "$ref": "#/definitions/ExternalLetterTemplate"
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "voidConfig": {
          "$ref": "#/definitions/VoidConfig"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExternalLetterConfiguration",
        "namespace": "http://www.casenet.com/ExternalLetterConfiguration"
      }
    },
    "ExternalLetterData": {
      "properties": {
        "eventType": {
          "enum": [
            "MANUAL",
            "CM",
            "CM_PROGRAM_ENROLLMENT",
            "CM_PROGRAM_CLOSURE",
            "UM",
            "TCA_UM",
            "TASK_ATTEMPT"
          ],
          "type": "string",
          "xml": {
            "name": "CorrespondenceEventType",
            "namespace": "http://www.casenet.com/CorrespondenceEventType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "ExternalLetterData",
        "namespace": "http://www.casenet.com/ExternalLetterData"
      }
    },
    "ExternalLetterEnclosure": {
      "properties": {
        "documentCategory": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "documentId": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "documentName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "letterEnclosureId": {
          "maxLength": 36,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExternalLetterEnclosure",
        "namespace": "http://www.casenet.com/ExternalLetterEnclosure"
      }
    },
    "ExternalLetterTemplate": {
      "properties": {
        "allowManual": {
          "type": "boolean"
        },
        "allowTriggered": {
          "type": "boolean"
        },
        "templateDescription": {
          "maxLength": 200,
          "minLength": 0,
          "type": "string"
        },
        "templateId": {
          "maxLength": 36,
          "minLength": 0,
          "type": "string"
        },
        "templateName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExternalLetterTemplate",
        "namespace": "http://www.casenet.com/ExternalLetterTemplate"
      }
    },
    "ExternalLetterTemplateVersion": {
      "properties": {
        "allowManual": {
          "type": "boolean"
        },
        "allowTriggered": {
          "type": "boolean"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "defaultOptionalRecipientTypes": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "defaultRequiredRecipientTypes": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "letterTemplate": {
          "$ref": "#/definitions/LetterTemplate"
        },
        "letterTemplateVersionStatus": {
          "enum": [
            "Published",
            "Draft",
            "Disabled"
          ],
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ExternalMetaOptionMetadata": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "metaOption": {
          "$ref": "#/definitions/MetaOption"
        },
        "obsolete": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ExternalQuestionGroupMetadata": {
      "properties": {
        "assessmentQuestionGroupDefinition": {
          "$ref": "#/definitions/AssessmentQuestionGroupDefinition"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "FaxDocumentSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/InboundFaxDocumentInfo"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "FieldConfigDto": {
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "fieldRequired": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "requiredType": {
          "enum": [
            "notEditable",
            "required",
            "optional"
          ],
          "type": "string",
          "xml": {
            "name": "RequiredType",
            "namespace": "http://www.casenet.com/RequiredType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "FieldConfigDto",
        "namespace": "http://www.casenet.com/FieldConfigDto"
      }
    },
    "FinalizeInfo": {
      "properties": {
        "finalizedBy": {
          "$ref": "#/definitions/User"
        },
        "finalizedOn": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "FinalizeInfo",
        "namespace": "http://www.casenet.com/FinalizeInfo"
      }
    },
    "FollowUp": {
      "properties": {
        "contactScheduledDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "dmeRequired": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "followUpContactScheduled": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "followUpDate": {
          "format": "date-time",
          "type": "string"
        },
        "followUpScheduledFor": {
          "$ref": "#/definitions/OptionValue"
        },
        "homeServicesRequired": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "id": {
          "type": "string"
        },
        "medicationPrescribed": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "memberReferrals": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "notes": {
          "items": {
            "$ref": "#/definitions/NoteInstance"
          },
          "type": "array"
        },
        "phone": {
          "type": "string"
        },
        "transportationConfirmed": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "FollowUp",
        "namespace": "http://www.casenet.com/FollowUp"
      }
    },
    "FollowUpRequest": {
      "properties": {
        "contactScheduledDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "dmeRequired": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "followUpContactScheduled": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "followUpDate": {
          "format": "date-time",
          "type": "string"
        },
        "homeServicesRequired": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "medicationPrescribed": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "memberReferralOptions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "notes": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "phone": {
          "$ref": "#/definitions/Phone"
        },
        "scheduledForOption": {
          "type": "string"
        },
        "transportationConfirmed": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "FollowUpRequest",
        "namespace": "http://www.casenet.com/FollowUpRequest"
      }
    },
    "FormDataBodyPart": {
      "properties": {
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "formDataContentDisposition": {
          "$ref": "#/definitions/FormDataContentDisposition"
        },
        "headers": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mediaType": {
          "properties": {
            "parameters": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "subtype": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "wildcardSubtype": {
              "type": "boolean"
            },
            "wildcardType": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "name": {
          "type": "string"
        },
        "parameterizedHeaders": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            },
            "type": "array"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "type": "object"
        },
        "simple": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FormDataContentDisposition": {
      "properties": {
        "creationDate": {
          "format": "date-time",
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "modificationDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "readDate": {
          "format": "date-time",
          "type": "string"
        },
        "size": {
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FormDataMultiPart": {
      "properties": {
        "bodyParts": {
          "items": {
            "$ref": "#/definitions/BodyPart"
          },
          "type": "array"
        },
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "fields": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/FormDataBodyPart"
            },
            "type": "array"
          },
          "type": "object"
        },
        "headers": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mediaType": {
          "properties": {
            "parameters": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "subtype": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "wildcardSubtype": {
              "type": "boolean"
            },
            "wildcardType": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parameterizedHeaders": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            },
            "type": "array"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "type": "object"
        }
      },
      "type": "object"
    },
    "FurtherReferralEvaluationRequest": {
      "properties": {
        "completionDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        }
      },
      "required": [
        "completionDate",
        "description"
      ],
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "GroupProvider": {
      "properties": {
        "additionalInformation": {
          "type": "string"
        },
        "billServices": {
          "type": "boolean"
        },
        "contactName": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "externalId": {
          "type": "string"
        },
        "fullname": {
          "type": "string"
        },
        "groupAffiliation": {
          "$ref": "#/definitions/GroupProvider"
        },
        "groupId": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "languages": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "manuallyAdded": {
          "type": "boolean"
        },
        "medicaidNumber": {
          "type": "string"
        },
        "medicareNumber": {
          "type": "string"
        },
        "mostRecentlyUpdatedLocation": {
          "$ref": "#/definitions/Location"
        },
        "npi": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "pin": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "providerRating": {
          "type": "string"
        },
        "providerType": {
          "$ref": "#/definitions/OptionValue"
        },
        "providesMedical": {
          "type": "boolean"
        },
        "providesNonMedical": {
          "type": "boolean"
        },
        "sortName": {
          "type": "string"
        },
        "sourceId": {
          "type": "string"
        },
        "specialties": {
          "items": {
            "$ref": "#/definitions/ProviderSpecialty"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "temporary": {
          "type": "boolean"
        },
        "tin": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "upin": {
          "type": "string"
        },
        "validAttributes": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "GroupType": {
      "properties": {
        "groupId": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "GroupType",
        "namespace": "http://www.casenet.com/GroupType"
      }
    },
    "GroupedMedication": {
      "properties": {
        "allergyMedicationReactionExists": {
          "type": "boolean"
        },
        "dateAdded": {
          "format": "date-time",
          "type": "string"
        },
        "groupingName": {
          "type": "string"
        },
        "isRefillDatePastDue": {
          "type": "boolean"
        },
        "lastReviewDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "lastReviewedBy": {
          "$ref": "#/definitions/User"
        },
        "lastUpdatedBy": {
          "$ref": "#/definitions/User"
        },
        "lastUpdatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "medicationKey": {
          "type": "string"
        },
        "medicationSummaryGroupingType": {
          "enum": [
            "NDC",
            "DRUG_NAME",
            "DRUG_BASE_NAME",
            "DRUG_CLASS",
            "DRUG_GROUP",
            "SUPPLEMENT_NAME",
            "SUPPLEMENT_TYPE",
            "SUPPLEMENT_TYPE_OTHER"
          ],
          "type": "string"
        },
        "needsDosingInfo": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "HCSEnrollmentAssignCaseRequest": {
      "properties": {
        "caseId": {
          "$ref": "#/definitions/CaseId"
        }
      },
      "type": "object"
    },
    "HcsEnrollmentClosureConfiguration": {
      "properties": {
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "reasonClosedOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "HcsEnrollmentClosureConfiguration",
        "namespace": "http://www.casenet.com/HcsEnrollmentClosureConfiguration"
      }
    },
    "HcsEnrollmentConfiguration": {
      "properties": {
        "fundingSourceOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "stateClassificationOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "HcsEnrollmentConfiguration",
        "namespace": "http://www.casenet.com/HcsEnrollmentConfiguration"
      }
    },
    "HcsEnrollmentDetailResult": {
      "properties": {
        "fundingSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "id": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "stateClassifications": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "status": {
          "enum": [
            "ACTIVE",
            "CLOSED",
            "HISTORICAL",
            "SCHEDULED",
            "VOIDED"
          ],
          "type": "string"
        },
        "team": {
          "$ref": "#/definitions/TeamInfo"
        }
      },
      "type": "object"
    },
    "HcsEnrollmentOwner": {
      "properties": {
        "fundingSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "team": {
          "$ref": "#/definitions/TeamInfo"
        }
      },
      "type": "object"
    },
    "HcsEnrollmentSummaryResult": {
      "properties": {
        "appliedEligibility": {
          "$ref": "#/definitions/Eligibility"
        },
        "closeReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "closeReasonOther": {
          "type": "string"
        },
        "closedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "cnCaseLite": {
          "$ref": "#/definitions/CnCaseLite"
        },
        "enrollmentDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "enrollmentId": {
          "type": "string"
        },
        "status": {
          "enum": [
            "ACTIVE",
            "CLOSED",
            "HISTORICAL",
            "SCHEDULED",
            "VOIDED"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "HcsEnrollmentTaskPackageResponse": {
      "properties": {
        "defaultTaskPackage": {
          "$ref": "#/definitions/HcsTaskPackageInfo"
        },
        "taskPackages": {
          "items": {
            "$ref": "#/definitions/HcsTaskPackageInfo"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "HcsEnrollmentWithCase": {
      "properties": {
        "caseIdentity": {
          "$ref": "#/definitions/CaseIdentity"
        },
        "waiverEnrollmentId": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "HcsEnrollmentWithCase",
        "namespace": "http://www.casenet.com/HcsEnrollmentWithCase"
      }
    },
    "HcsTaskPackageInfo": {
      "properties": {
        "hasAllowUserToSelect": {
          "type": "boolean"
        },
        "hasAssignedTeam": {
          "type": "boolean"
        },
        "hasDisabledAssignee": {
          "type": "boolean"
        },
        "hasPrimaryCaseOwner": {
          "type": "boolean"
        },
        "taskPackageId": {
          "type": "string"
        },
        "taskPackageName": {
          "type": "string"
        },
        "taskPackageVisibleId": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskPackageInfo",
        "namespace": "http://www.casenet.com/TaskPackageInfo"
      }
    },
    "HcsWaiverEnrollmentDetailResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/HcsEnrollmentDetailResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "HcsWaiverEnrollmentSummarySearchCriteria": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "includeHistorical": {
          "type": "boolean"
        },
        "includeVoided": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/WaiverEnrollmentSummarySearchSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "HcsWaiverEnrollmentSummarySearchResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/HcsEnrollmentSummaryResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "HeaderField": {
      "properties": {
        "headerFieldDetail": {
          "$ref": "#/definitions/HeaderFieldDetail"
        },
        "index": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "enum": [
            "AGE",
            "ALLERGY_ALERTS",
            "BHP_PATH",
            "DOB",
            "GENDER",
            "GROUP",
            "PRIMARY_HEALTH_COACH",
            "IS_LOCKED_IN",
            "IS_OPT_OUT",
            "MARITAL_STATUS",
            "MEDICAID_ID",
            "MEDICARE_ID",
            "MEMBER_ID",
            "MPI",
            "PCP",
            "PRIMARY_LANGUAGE",
            "WAIVER_ENROLLMENT_INFO",
            "WRITTEN_LANGUAGE",
            "ELIGIBLEDATES",
            "IS_ELIGIBLE",
            "PRODUCT_FEATURE",
            "PROGRAMS",
            "EMPLOYER",
            "LOW_INCOME_SUBSIDY_STATUS",
            "BHP_MEMBER_DETAILS",
            "DOCUMENT_TYPE",
            "UDF",
            "MEMBER_ATTRIBUTES"
          ],
          "type": "string",
          "xml": {
            "name": "HeaderFieldName",
            "namespace": "http://www.casenet.com/HeaderFieldName"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "HeaderField",
        "namespace": "http://www.casenet.com/HeaderField"
      }
    },
    "HeaderFieldDetail": {
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "HeaderFieldDetail",
        "namespace": "http://www.casenet.com/HeaderFieldDetail"
      }
    },
    "HeaderFieldList": {
      "properties": {
        "list": {
          "items": {
            "$ref": "#/definitions/HeaderField"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "HeaderFieldList",
        "namespace": "http://www.casenet.com/HeaderFieldList"
      }
    },
    "HttpError": {
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorMessage"
        },
        "message": {
          "type": "string"
        },
        "status": {
          "format": "int32",
          "type": "integer"
        },
        "statusText": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "status",
        "statusText",
        "url"
      ],
      "type": "object"
    },
    "IQConnectReview": {
      "properties": {
        "episodeDay": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "IQConnectReview",
        "namespace": "http://www.casenet.com/IQConnectReview"
      }
    },
    "IdentifiersRequest": {
      "properties": {
        "entitiesIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "entitiesIds"
      ],
      "type": "object"
    },
    "IdentifiersResponse": {
      "properties": {
        "entitiesIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "InNetworkResponse": {
      "properties": {
        "inNetwork": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "Location",
        "namespace": "http://www.casenet.com/InNetworkResponse"
      }
    },
    "InboundFaxDocumentInfo": {
      "properties": {
        "attached": {
          "type": "boolean"
        },
        "comment": {
          "type": "string"
        },
        "controlNumber": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "documentFormat": {
          "type": "string"
        },
        "documentSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "documentType": {
          "$ref": "#/definitions/OptionValue"
        },
        "filename": {
          "type": "string"
        },
        "fullFilename": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "processed": {
          "type": "boolean"
        },
        "receiptDate": {
          "format": "date-time",
          "type": "string"
        },
        "size": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "InboundFaxDocumentInfo",
        "namespace": "http://www.casenet.com/DocumentInfo"
      }
    },
    "InboundFaxQueue": {
      "properties": {
        "id": {
          "type": "string"
        },
        "inboundFaxQueueName": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "IndividualServicePlan": {
      "properties": {
        "authorizations": {
          "items": {
            "$ref": "#/definitions/Artifact"
          },
          "type": "array",
          "uniqueItems": true
        },
        "carePlans": {
          "items": {
            "$ref": "#/definitions/Artifact"
          },
          "type": "array",
          "uniqueItems": true
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "memberCenteredPlans": {
          "items": {
            "$ref": "#/definitions/Artifact"
          },
          "type": "array",
          "uniqueItems": true
        },
        "memberNotes": {
          "items": {
            "$ref": "#/definitions/Artifact"
          },
          "type": "array",
          "uniqueItems": true
        },
        "serviceRequests": {
          "items": {
            "$ref": "#/definitions/Artifact"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "title": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "InformationReviewed": {
      "properties": {
        "id": {
          "type": "string"
        },
        "informationReviewed": {
          "$ref": "#/definitions/OptionValue"
        },
        "informationReviewedOther": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "InformationReviewed",
        "namespace": "http://www.casenet.com/InformationReviewed"
      }
    },
    "InformationReviewedRequest": {
      "properties": {
        "informationReviewedOption": {
          "type": "string"
        },
        "informationReviewedOther": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "InpatientAuthorizationBhpConfiguration": {
      "properties": {
        "allowPrescreenSkip": {
          "type": "boolean"
        },
        "allowRXLineItems": {
          "type": "boolean"
        },
        "allowSPLineItems": {
          "type": "boolean"
        },
        "authorizationTypeDisabled": {
          "type": "boolean"
        },
        "authorizationTypeDisabledMessage": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "behavioralDiagnosisDisabledForBHP": {
          "type": "boolean"
        },
        "behavioralDiagnosisDisabledForBHPMessage": {
          "type": "string"
        },
        "mandatoryPrescreenEnabled": {
          "type": "boolean"
        },
        "medicalDiagnosisDisabledForBHP": {
          "type": "boolean"
        },
        "medicalDiagnosisDisabledForBHPMessage": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "InpatientAuthorizationBhpConfiguration",
        "namespace": "http://www.casenet.com/InpatientAuthorizationBhpConfiguration"
      }
    },
    "InpatientAuthorizationConfiguration": {
      "properties": {
        "authorizationDocumentConfiguration": {
          "$ref": "#/definitions/PortableConfiguration"
        },
        "authorizationHeaderConfiguration": {
          "$ref": "#/definitions/InpatientAuthorizationHeaderConfiguration"
        },
        "authorizationSpecificContactAddressEnabled": {
          "type": "boolean"
        },
        "codesExpirationAction": {
          "enum": [
            "IGNORE",
            "ALLOW_WITH_WARNING",
            "DISALLOW"
          ],
          "type": "string",
          "xml": {
            "name": "CodesEffectiveDateConfiguration",
            "namespace": "http://www.casenet.com/CodesEffectiveDateConfiguration"
          }
        },
        "diagnosisConfiguration": {
          "$ref": "#/definitions/ExtendedAttributesConfiguration"
        },
        "prescreenNoteEnabled": {
          "type": "boolean"
        },
        "prescreenNotesEnabledAuthNotRequired": {
          "type": "boolean"
        },
        "prescreenNotesEnabledAuthRequired": {
          "type": "boolean"
        },
        "proxyProviderIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "requestedDaysWarningThreshold": {
          "format": "int32",
          "type": "integer"
        },
        "requestingProviderConfiguration": {
          "$ref": "#/definitions/ExtendedAttributesConfiguration"
        },
        "servicingFacilityConfiguration": {
          "$ref": "#/definitions/ExtendedAttributesConfiguration"
        },
        "taskActivityValues": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "InpatientAuthorizationConfiguration",
        "namespace": "http://www.casenet.com/InpatientAuthorizationConfiguration"
      }
    },
    "InpatientAuthorizationHeader": {
      "properties": {
        "admissionSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "admissionType": {
          "$ref": "#/definitions/OptionValue"
        },
        "appealed": {
          "type": "boolean"
        },
        "approvedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "authorizationDiagnosis": {
          "$ref": "#/definitions/AuthorizationDiagnosis"
        },
        "authorizationLocks": {
          "items": {
            "$ref": "#/definitions/Lock"
          },
          "type": "array",
          "uniqueItems": true
        },
        "authorizationNum": {
          "type": "string"
        },
        "authorizationState": {
          "enum": [
            "OPEN",
            "OPEN_MODIFIED",
            "OPEN_REVISED",
            "CLOSED",
            "VOID",
            "DISCHARGED",
            "DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationState",
            "namespace": "http://www.casenet.com/UMAuthorizationState"
          }
        },
        "canBeDenied": {
          "type": "boolean"
        },
        "caseId": {
          "type": "string"
        },
        "continuityOfCare": {
          "type": "boolean"
        },
        "courtOrdered": {
          "type": "boolean"
        },
        "dateSentToClaims": {
          "format": "date-time",
          "type": "string"
        },
        "deniedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "dischargeDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "eligibleVerified": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/SimpleAttributeValueObject"
          },
          "type": "object"
        },
        "firstAdmitDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "isOpen": {
          "type": "boolean"
        },
        "lengthOfStay": {
          "format": "int32",
          "type": "integer"
        },
        "levelOfUrgency": {
          "$ref": "#/definitions/OptionValue"
        },
        "locked": {
          "type": "boolean"
        },
        "losNum": {
          "format": "int32",
          "type": "integer"
        },
        "overallPos": {
          "$ref": "#/definitions/OptionValue"
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestMethod": {
          "$ref": "#/definitions/OptionValue"
        },
        "requestSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "requestedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "requestingProvider": {
          "$ref": "#/definitions/RequestingProvider"
        },
        "singleCaseAgreement": {
          "type": "boolean"
        },
        "stateDate": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "UMStatus",
            "namespace": "http://www.casenet.com/UMStatus"
          }
        },
        "targetAdmitDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "targetDischargeDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "trackingNum": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "urgencyRequestedBy": {
          "$ref": "#/definitions/OptionValue"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "InpatientAuthorizationHeader",
        "namespace": "http://www.casenet.com/AuthorizationHeader"
      }
    },
    "InpatientAuthorizationHeaderConfiguration": {
      "properties": {
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "targetDatesRequired": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "InpatientAuthorizationHeaderConfiguration",
        "namespace": "http://www.casenet.com/InpatientAuthorizationHeaderConfiguration"
      }
    },
    "InpatientAuthorizationHeaderRequest": {
      "properties": {
        "admissionSourceOption": {
          "type": "string"
        },
        "admissionTypeOption": {
          "type": "string"
        },
        "continuityOfCare": {
          "type": "boolean"
        },
        "courtOrdered": {
          "type": "boolean"
        },
        "eligibleVerified": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "levelOfUrgencyOption": {
          "type": "string"
        },
        "overallPosOption": {
          "type": "string"
        },
        "ownerUsername": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestMethodOption": {
          "type": "string"
        },
        "requestSourceOption": {
          "type": "string"
        },
        "singleCaseAgreement": {
          "type": "boolean"
        },
        "targetAdmitDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "targetDischargeDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "urgencyRequestedByOption": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "InpatientAuthorizationHeaderRequest",
        "namespace": "http://www.casenet.com/InpatientAuthorizationHeaderRequest"
      }
    },
    "InpatientAuthorizationPrescreenRequest": {
      "properties": {
        "appliedEligibilityProductId": {
          "$ref": "#/definitions/ProductId"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "inNetwork": {
          "type": "boolean"
        },
        "lineItemTypeOption": {
          "type": "string"
        },
        "noteInstanceId": {
          "type": "string"
        },
        "prescreenAuthorizationDiagnosis": {
          "$ref": "#/definitions/PrescreenAuthorizationDiagnosis"
        },
        "procedureCodeId": {
          "$ref": "#/definitions/ProcedureCodeNaturalId"
        },
        "requestSourceOption": {
          "type": "string"
        },
        "serviceTypeOption": {
          "type": "string"
        },
        "servicingFacilityLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "servicingFacilitySpecialtyOption": {
          "type": "string"
        },
        "servicingLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "servicingLocationIdType": {
          "enum": [
            "SERVICING_FACILITY",
            "SERVICING_PROVIDER"
          ],
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "stayLevelOption": {
          "type": "string"
        }
      },
      "required": [
        "stayLevelOption"
      ],
      "type": "object",
      "xml": {
        "name": "InpatientAuthorizationPrescreenRequest",
        "namespace": "http://www.casenet.com/InpatientAuthorizationPrescreenRequest"
      }
    },
    "InpatientAuthorizationPrescreenRequestV2": {
      "properties": {
        "inpatientLineItemPrescreenRequestV2": {
          "$ref": "#/definitions/InpatientLineItemPrescreenRequestV2"
        },
        "prescreenAuthorizationDiagnosis": {
          "$ref": "#/definitions/PrescreenAuthorizationDiagnosis"
        },
        "requestSourceOption": {
          "type": "string"
        },
        "serviceProcedureLineItemPrescreenRequests": {
          "items": {
            "$ref": "#/definitions/ServiceProcedureLineItemPrescreenRequest"
          },
          "type": "array"
        },
        "servicingFacilityLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "servicingFacilitySpecialtyOption": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "InpatientAuthorizationRequest": {
      "properties": {
        "authDiagnosisRequest": {
          "$ref": "#/definitions/CreateCommonAuthorizationDiagnosisRequest"
        },
        "authorizationHeaderRequest": {
          "$ref": "#/definitions/InpatientAuthorizationHeaderRequest"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "dischargeRequest": {
          "$ref": "#/definitions/AuthorizationDischargeRequest"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/CreateLineItemRequest"
          },
          "type": "array"
        },
        "newLineItems": {
          "items": {
            "$ref": "#/definitions/CreateLineItemRequest"
          },
          "type": "array"
        },
        "nextTask": {
          "$ref": "#/definitions/ActionPathRequest"
        },
        "noteRequests": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "preScreenNoteInstanceId": {
          "type": "string"
        },
        "prescreenNoteGroupId": {
          "type": "string"
        },
        "requestingProviderRequest": {
          "$ref": "#/definitions/RequestingProviderRequest"
        },
        "servicingFacilityRequest": {
          "$ref": "#/definitions/ServicingFacilityRequest"
        },
        "trackingNum": {
          "type": "string"
        }
      },
      "required": [
        "lineItems"
      ],
      "type": "object",
      "xml": {
        "name": "InpatientAuthorizationRequest",
        "namespace": "http://www.casenet.com/AuthorizationRequest"
      }
    },
    "InpatientLineItemConfiguration": {
      "properties": {
        "allowDuplicateAuthorizations": {
          "type": "boolean"
        },
        "allowDuplicatesOfDeniedLineItems": {
          "type": "boolean"
        },
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "fieldsCheckForDuplicateAuthorizations": {
          "items": {
            "enum": [
              "PROCEDURE_CODE",
              "SERVICING_PROVIDER",
              "PLACE_OF_SERVICE",
              "PL_CODE",
              "TREATMENT_TYPE",
              "MODIFIER_CODE",
              "SERVICE_TYPE",
              "SERVICING_PROVIDER_SPECIALTY",
              "STAY_LEVEL",
              "PRESCRIBING_PROVIDER"
            ],
            "type": "string",
            "xml": {
              "name": "AuthorizationField",
              "namespace": "http://www.casenet.com/AuthorizationField"
            }
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "procedureCodeRequired": {
          "type": "boolean"
        },
        "requestedDaysWarningThreshold": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "InpatientLineItemConfiguration",
        "namespace": "http://www.casenet.com/InpatientLineItemConfiguration"
      }
    },
    "InpatientLineItemPrescreenRequestV2": {
      "properties": {
        "appliedEligibilityProductId": {
          "$ref": "#/definitions/ProductId"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "inNetwork": {
          "type": "boolean"
        },
        "lineItemTypeOption": {
          "type": "string"
        },
        "procedureCodeId": {
          "$ref": "#/definitions/ProcedureCodeNaturalId"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "stayLevelOption": {
          "type": "string"
        }
      },
      "required": [
        "stayLevelOption"
      ],
      "type": "object"
    },
    "InternalLetterDetails": {
      "properties": {
        "authorization": {
          "$ref": "#/definitions/AuthorizationWithSelectedLineItems"
        },
        "bhpLogo": {
          "$ref": "#/definitions/LetterLogo"
        },
        "carePlan": {
          "$ref": "#/definitions/CarePlanLite"
        },
        "caseIdentity": {
          "$ref": "#/definitions/CaseIdentityExtended"
        },
        "companyGroupLogo": {
          "$ref": "#/definitions/LetterLogo"
        },
        "enclosures": {
          "items": {
            "$ref": "#/definitions/DocumentInfo"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "internalLetterTemplateVersionId": {
          "type": "string"
        },
        "latestMailing": {
          "$ref": "#/definitions/LetterMailingInternal"
        },
        "letterDescription": {
          "type": "string"
        },
        "letterName": {
          "type": "string"
        },
        "licenseType": {
          "enum": [
            "CM",
            "DM",
            "UM",
            "TRUMOBILE",
            "MEMBER_PORTAL",
            "EMPLOYER_PORTAL",
            "PROVIDER_PORTAL",
            "REPORTING",
            "ANALYTICS",
            "WELLNESS",
            "HCS",
            "GENERIC",
            "AAG",
            "MEDICATION_MANAGEMENT",
            "TCI_CARE_MANAGEMENT",
            "TCI_CARE_MANAGEMENT_BI_MODELING",
            "TCI_TIME_TRACKING",
            "TCI_TIME_TRACKING_BI_MODELING",
            "TCI_UTILIZATION_MANAGEMENT",
            "TCI_UTILIZATION_MANAGEMENT_BI_MODELING"
          ],
          "type": "string",
          "xml": {
            "name": "CasenetFeature",
            "namespace": "http://www.casenet.com/CasenetFeature"
          }
        },
        "logoFour": {
          "$ref": "#/definitions/LetterLogo"
        },
        "logoSignature": {
          "$ref": "#/definitions/LetterLogo"
        },
        "logoThree": {
          "$ref": "#/definitions/LetterLogo"
        },
        "programEnrollment": {
          "$ref": "#/definitions/ProgramEnrollmentLite"
        },
        "userNotes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "InternalLetterDetails",
        "namespace": "http://www.casenet.com/InternalLetterDetails"
      }
    },
    "InternalLetterInfo": {
      "properties": {
        "internalLetterId": {
          "type": "string"
        },
        "letterMailingInternalId": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "InternalLetterInfo",
        "namespace": "http://www.casenet.com/InternalLetterInfo"
      }
    },
    "InternalLetterResendRequest": {
      "properties": {
        "letterRecipients": {
          "items": {
            "$ref": "#/definitions/CreateLetterRecipientRequest"
          },
          "type": "array"
        },
        "resendAsDuplicate": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "InternalLetterResendRequest",
        "namespace": "http://www.casenet.com/InternalLetterResendRequest"
      }
    },
    "InternalLetterTemplate": {
      "properties": {
        "templateDescription": {
          "maxLength": 200,
          "minLength": 0,
          "type": "string"
        },
        "templateId": {
          "maxLength": 36,
          "minLength": 0,
          "type": "string"
        },
        "templateName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "templateResourceId": {
          "maxLength": 36,
          "minLength": 0,
          "type": "string"
        },
        "templateVersions": {
          "items": {
            "$ref": "#/definitions/InternalLetterTemplateVersion"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "InternalLetterTemplate",
        "namespace": "http://www.casenet.com/InternalLetterTemplate"
      }
    },
    "InternalLetterTemplateVersion": {
      "properties": {
        "effectiveDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "expirationDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "letterTemplateVersionStatus": {
          "enum": [
            "Published",
            "Draft",
            "Disabled"
          ],
          "type": "string",
          "xml": {
            "name": "LetterTemplateVersionStatus",
            "namespace": "http://www.casenet.com/LetterTemplateVersionStatus"
          }
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "InternalLetterTemplateVersion",
        "namespace": "http://www.casenet.com/InternalLetterTemplateVersion"
      }
    },
    "InternalLetterTemplateVersionDetail": {
      "properties": {
        "bhpLogo": {
          "$ref": "#/definitions/LetterLogo"
        },
        "companyGroupLogo": {
          "$ref": "#/definitions/LetterLogo"
        },
        "dateFormat": {
          "enum": [
            "ISO_8601",
            "MONTH_DAY_YEAR",
            "DAY_MONTH_YEAR",
            "YEAR_MONTH_DAY"
          ],
          "type": "string",
          "xml": {
            "name": "LocalizationDateFormat",
            "namespace": "http://www.casenet.com/LocalizationDateFormat"
          }
        },
        "dateSeparator": {
          "enum": [
            "SLASH",
            "DASH",
            "DOT"
          ],
          "type": "string",
          "xml": {
            "name": "LocalizationDateSeparator",
            "namespace": "http://www.casenet.com/LocalizationDateSeparator"
          }
        },
        "effectiveDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "enclosures": {
          "items": {
            "$ref": "#/definitions/DocumentInfo"
          },
          "type": "array"
        },
        "expirationDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "hideRecipientCountry": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "letterTemplateVersionLite": {
          "$ref": "#/definitions/LetterTemplateVersionLite"
        },
        "letterTemplateVersionStatus": {
          "enum": [
            "Published",
            "Draft",
            "Disabled"
          ],
          "type": "string",
          "xml": {
            "name": "LetterTemplateVersionStatus",
            "namespace": "http://www.casenet.com/LetterTemplateVersionStatus"
          }
        },
        "logoFour": {
          "$ref": "#/definitions/LetterLogo"
        },
        "logoSignature": {
          "$ref": "#/definitions/LetterLogo"
        },
        "logoThree": {
          "$ref": "#/definitions/LetterLogo"
        },
        "use24HrTime": {
          "type": "boolean"
        },
        "userDefinedCorrespondenceTags": {
          "items": {
            "$ref": "#/definitions/UserDefinedCorrespondenceTag"
          },
          "type": "array",
          "uniqueItems": true
        },
        "userNoteInfos": {
          "items": {
            "$ref": "#/definitions/UserNoteInfo"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "InternalLetterTemplateVersionDetail",
        "namespace": "http://www.casenet.com/InternalLetterTemplateVersionDetail"
      }
    },
    "InterqualPsiNote": {
      "properties": {
        "indication": {
          "type": "string"
        },
        "purpose": {
          "type": "string"
        },
        "specialty": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "InterqualPsiNote",
        "namespace": "http://www.casenet.com/InterqualPsiNote"
      }
    },
    "InterqualReview": {
      "properties": {
        "copyrightTxt": {
          "type": "string"
        },
        "currentStatusDesc": {
          "type": "string"
        },
        "dischargeReview": {
          "type": "string"
        },
        "dischargeScreens": {
          "type": "string"
        },
        "initialReview": {
          "type": "string"
        },
        "intensityOfService": {
          "type": "string"
        },
        "interqualCriteriaMet": {
          "type": "string"
        },
        "interqualFinalized": {
          "type": "boolean"
        },
        "interqualSubmitted": {
          "type": "boolean"
        },
        "iqConnectReview": {
          "$ref": "#/definitions/IQConnectReview"
        },
        "ongoingReview": {
          "type": "string"
        },
        "preAdmission": {
          "type": "string"
        },
        "productDesc": {
          "type": "string"
        },
        "psiNote": {
          "$ref": "#/definitions/InterqualPsiNote"
        },
        "recommendedDrugs": {
          "type": "string"
        },
        "recommendedLOC": {
          "type": "string"
        },
        "recommendedServices": {
          "type": "string"
        },
        "reviewCID": {
          "type": "string"
        },
        "reviewSummary": {
          "type": "string"
        },
        "reviewTypeDesc": {
          "type": "string"
        },
        "severityOfIllness": {
          "type": "string"
        },
        "subsetDesc": {
          "type": "string"
        },
        "versionDesc": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "InterqualReview",
        "namespace": "http://www.casenet.com/InterqualReview"
      }
    },
    "InterqualTransitionPlan": {
      "properties": {
        "currentChecklist": {
          "$ref": "#/definitions/InterqualTransitionPlanChecklist"
        },
        "id": {
          "type": "string"
        },
        "interqualTransitionPlanChecklists": {
          "items": {
            "$ref": "#/definitions/InterqualTransitionPlanChecklist"
          },
          "type": "array"
        },
        "transitionPlanId": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "InterqualTransitionPlanChecklist": {
      "properties": {
        "checkListId": {
          "type": "string"
        },
        "checklistXmlMap": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "criteriaExternalXMLInfo": {
          "type": "string"
        },
        "notes": {
          "items": {
            "$ref": "#/definitions/NoteInstance"
          },
          "type": "array",
          "uniqueItems": true
        },
        "source": {
          "$ref": "#/definitions/UMInterqualReviewSource"
        },
        "status": {
          "enum": [
            "IN_PROGRESS",
            "COMPLETE"
          ],
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object"
    },
    "InterqualTransitionPlanChecklistInfo": {
      "properties": {
        "authorizationId": {
          "type": "string"
        },
        "checklist": {
          "$ref": "#/definitions/InterqualTransitionPlanChecklist"
        },
        "id": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "IqConnectConfiguration": {
      "properties": {
        "iqConnectAssertionConsumerUrl": {
          "type": "string"
        },
        "iqConnectEnabled": {
          "type": "boolean"
        },
        "iqConnectPHIEnabled": {
          "type": "boolean"
        },
        "iqConnectSamlProxyEndpoint": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "IqConnectConfiguration",
        "namespace": "http://www.casenet.com/IqConnectConfiguration"
      }
    },
    "IspArtifactDetail": {
      "properties": {
        "accessible": {
          "type": "boolean"
        },
        "action": {
          "enum": [
            "CREATE",
            "EDIT",
            "VIEW"
          ],
          "type": "string",
          "xml": {
            "name": "ScreenActions",
            "namespace": "http://www.casenet.com/ScreenActions"
          }
        },
        "artifactType": {
          "enum": [
            "AUTHORIZATION",
            "CARE_PLAN",
            "MEMBER_CENTERED_PLAN",
            "MEMBER_NOTE",
            "SERVICE_REQUEST",
            "ALLERGY",
            "ASSESSMENT",
            "CASE",
            "COST_SAVING",
            "DIAGNOSIS",
            "ELIGIBILITY_AND_BENEFIT",
            "HCS_ENROLLMENT",
            "INDIVIDUAL_SERVICE_PLAN",
            "MEDICATION",
            "MEMBER",
            "NOTE",
            "PROGRAM_ENROLLMENT",
            "REFERRAL",
            "TIME_TRACKING_SUMMARY"
          ],
          "type": "string"
        },
        "assignableToCase": {
          "type": "boolean"
        },
        "searchable": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "IspArtifactsSearchCriteria": {
      "properties": {
        "artifactType": {
          "enum": [
            "AUTHORIZATION",
            "CARE_PLAN",
            "MEMBER_CENTERED_PLAN",
            "MEMBER_NOTE",
            "SERVICE_REQUEST",
            "ALLERGY",
            "ASSESSMENT",
            "CASE",
            "COST_SAVING",
            "DIAGNOSIS",
            "ELIGIBILITY_AND_BENEFIT",
            "HCS_ENROLLMENT",
            "INDIVIDUAL_SERVICE_PLAN",
            "MEDICATION",
            "MEMBER",
            "NOTE",
            "PROGRAM_ENROLLMENT",
            "REFERRAL",
            "TIME_TRACKING_SUMMARY"
          ],
          "type": "string"
        },
        "caseIdsToFilterOn": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "required": [
        "artifactType"
      ],
      "type": "object"
    },
    "IspBhpSetup": {
      "properties": {
        "ispTitle": {
          "type": "string"
        },
        "searchSpanInDays": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "IspSnapshot": {
      "properties": {
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "printed": {
          "$ref": "#/definitions/DocumentInfo"
        },
        "signed": {
          "$ref": "#/definitions/DocumentInfo"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "KeyMetricConfiguration": {
      "properties": {
        "voidInfoConfig": {
          "$ref": "#/definitions/VoidConfig"
        }
      },
      "type": "object",
      "xml": {
        "name": "KeyMetricConfiguration",
        "namespace": "http://www.casenet.com/KeyMetricConfiguration"
      }
    },
    "KeyMetricDef": {
      "properties": {
        "ageRangeHigh": {
          "format": "int32",
          "type": "integer"
        },
        "ageRangeHighUnit": {
          "$ref": "#/definitions/OptionValue"
        },
        "ageRangeLow": {
          "format": "int32",
          "type": "integer"
        },
        "ageRangeLowUnit": {
          "$ref": "#/definitions/OptionValue"
        },
        "barrierComplianceOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "calculatedNumeric": {
          "$ref": "#/definitions/KeyMetricDefNumeric"
        },
        "defaultBarrierComplianceOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "defaultSourceOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "dropDowns": {
          "items": {
            "$ref": "#/definitions/KeyMetricDefDropDown"
          },
          "type": "array",
          "uniqueItems": true
        },
        "expression": {
          "type": "string"
        },
        "filterAgeRange": {
          "type": "boolean"
        },
        "filterGender": {
          "type": "boolean"
        },
        "genderOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "id": {
          "type": "string"
        },
        "keyMetricGroups": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "keyMetricType": {
          "enum": [
            "OCCURRENCE",
            "DROP_DOWN",
            "SINGLE_NUMERIC",
            "SPLIT_NUMERIC",
            "MULTIPLE_NUMERIC",
            "CALCULATED",
            "COMPOSITE"
          ],
          "type": "string",
          "xml": {
            "name": "KeyMetricType",
            "namespace": "http://www.casenet.com/KeyMetricType"
          }
        },
        "name": {
          "type": "string"
        },
        "numerics": {
          "items": {
            "$ref": "#/definitions/KeyMetricDefNumeric"
          },
          "type": "array",
          "uniqueItems": true
        },
        "parts": {
          "items": {
            "$ref": "#/definitions/KeyMetricDef"
          },
          "type": "array",
          "uniqueItems": true
        },
        "showBarrierCompliance": {
          "type": "boolean"
        },
        "showComments": {
          "type": "boolean"
        },
        "showHedisMeasure": {
          "type": "boolean"
        },
        "showSource": {
          "type": "boolean"
        },
        "sourceOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "KeyMetricDef",
        "namespace": "http://www.casenet.com/KeyMetricDef"
      }
    },
    "KeyMetricDefDropDown": {
      "properties": {
        "dropDownOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "optimalDropDownOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "optional": {
          "type": "boolean"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "KeyMetricDefDropDown",
        "namespace": "http://www.casenet.com/KeyMetricDefDropDown"
      }
    },
    "KeyMetricDefNumeric": {
      "properties": {
        "defaultUnit": {
          "$ref": "#/definitions/KeyMetricDefNumericUnit"
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "optional": {
          "type": "boolean"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "unitGroup": {
          "$ref": "#/definitions/UnitGroup"
        },
        "units": {
          "items": {
            "$ref": "#/definitions/KeyMetricDefNumericUnit"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "KeyMetricDefNumeric",
        "namespace": "http://www.casenet.com/KeyMetricDefNumeric"
      }
    },
    "KeyMetricDefNumericUnit": {
      "properties": {
        "conversionFactor": {
          "type": "number"
        },
        "decimals": {
          "format": "byte",
          "type": "string"
        },
        "defaultInSI": {
          "type": "boolean"
        },
        "digits": {
          "format": "byte",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "matchingIndex": {
          "format": "byte",
          "type": "string"
        },
        "optimalHigh": {
          "type": "number"
        },
        "optimalHighSI": {
          "type": "number"
        },
        "optimalLow": {
          "type": "number"
        },
        "optimalLowSI": {
          "type": "number"
        },
        "unit": {
          "$ref": "#/definitions/OptionValue"
        },
        "unitInSI": {
          "$ref": "#/definitions/OptionValue"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "KeyMetricDefNumericUnit",
        "namespace": "http://www.casenet.com/KeyMetricDefNumericUnit"
      }
    },
    "KeyMetricDropDownRequest": {
      "properties": {
        "dropDownDefId": {
          "type": "string"
        },
        "optimal": {
          "type": "boolean"
        },
        "valueId": {
          "type": "string"
        }
      },
      "required": [
        "dropDownDefId"
      ],
      "type": "object",
      "xml": {
        "name": "KeyMetricDropDownRequest",
        "namespace": "http://www.casenet.com/KeyMetricDropDownRequest"
      }
    },
    "KeyMetricInstance": {
      "properties": {
        "barrierToCompliance": {
          "$ref": "#/definitions/OptionValue"
        },
        "calculatedValue": {
          "$ref": "#/definitions/KeyMetricInstanceNumeric"
        },
        "comments": {
          "type": "string"
        },
        "dropDowns": {
          "items": {
            "$ref": "#/definitions/KeyMetricInstanceDropDown"
          },
          "type": "array"
        },
        "hedisMeasure": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "keyMetricDef": {
          "$ref": "#/definitions/KeyMetricDef"
        },
        "numerics": {
          "items": {
            "$ref": "#/definitions/KeyMetricInstanceNumeric"
          },
          "type": "array"
        },
        "occurredDate": {
          "format": "date-time",
          "type": "string"
        },
        "optimal": {
          "type": "boolean"
        },
        "otherBarrier": {
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/OptionValue"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "KeyMetricInstance",
        "namespace": "http://www.casenet.com/KeyMetricInstance"
      }
    },
    "KeyMetricInstanceDropDown": {
      "properties": {
        "dropDownDef": {
          "$ref": "#/definitions/KeyMetricDefDropDown"
        },
        "id": {
          "type": "string"
        },
        "optimal": {
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/OptionValue"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "KeyMetricInstanceDropDown",
        "namespace": "http://www.casenet.com/KeyMetricInstanceDropDown"
      }
    },
    "KeyMetricInstanceNumeric": {
      "properties": {
        "convertedValue": {
          "format": "double",
          "type": "number"
        },
        "convertedValueUnit": {
          "$ref": "#/definitions/OptionValue"
        },
        "id": {
          "type": "string"
        },
        "numericDef": {
          "$ref": "#/definitions/KeyMetricDefNumeric"
        },
        "optimal": {
          "type": "boolean"
        },
        "unit": {
          "$ref": "#/definitions/OptionValue"
        },
        "value": {
          "type": "number"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "KeyMetricInstanceNumeric",
        "namespace": "http://www.casenet.com/KeyMetricInstanceNumeric"
      }
    },
    "KeyMetricInstanceSearchCriteria": {
      "properties": {
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "includeVoided": {
          "type": "boolean"
        },
        "keyMetricDefinitionId": {
          "type": "string"
        },
        "keyMetricType": {
          "enum": [
            "OCCURRENCE",
            "DROP_DOWN",
            "SINGLE_NUMERIC",
            "SPLIT_NUMERIC",
            "MULTIPLE_NUMERIC",
            "CALCULATED",
            "COMPOSITE"
          ],
          "type": "string",
          "xml": {
            "name": "KeyMetricType",
            "namespace": "http://www.casenet.com/KeyMetricType"
          }
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/KeyMetricInstanceSortField"
          },
          "type": "array"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "KeyMetricInstanceSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "DATE_OCCURED",
            "VOIDED",
            "VALUE"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "KeyMetricInstanceSummaryResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/KeyMetricInstance"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "KeyMetricNumericRequest": {
      "properties": {
        "numericDefId": {
          "type": "string"
        },
        "optimal": {
          "type": "boolean"
        },
        "unitId": {
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      },
      "required": [
        "numericDefId"
      ],
      "type": "object",
      "xml": {
        "name": "KeyMetricNumericRequest",
        "namespace": "http://www.casenet.com/KeyMetricNumericRequest"
      }
    },
    "KeyMetricRequest": {
      "properties": {
        "barrierToComplianceId": {
          "type": "string"
        },
        "calculatedValue": {
          "$ref": "#/definitions/KeyMetricNumericRequest"
        },
        "comments": {
          "type": "string"
        },
        "dropDowns": {
          "items": {
            "$ref": "#/definitions/KeyMetricDropDownRequest"
          },
          "type": "array"
        },
        "hedisMeasure": {
          "type": "boolean"
        },
        "keyMetricDefId": {
          "type": "string"
        },
        "numerics": {
          "items": {
            "$ref": "#/definitions/KeyMetricNumericRequest"
          },
          "type": "array"
        },
        "occurredDate": {
          "format": "date-time",
          "type": "string"
        },
        "optimal": {
          "type": "boolean"
        },
        "otherBarrier": {
          "type": "string"
        },
        "partInstances": {
          "items": {
            "$ref": "#/definitions/KeyMetricRequest"
          },
          "type": "array"
        },
        "sourceId": {
          "type": "string"
        }
      },
      "required": [
        "keyMetricDefId"
      ],
      "type": "object",
      "xml": {
        "name": "KeyMetricRequest",
        "namespace": "http://www.casenet.com/KeyMetricRequest"
      }
    },
    "KeyMetricSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "NAME",
            "TYPE",
            "UPDATEDDATE"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "KeyMetricsSearchConfiguration": {
      "properties": {
        "groupingFieldConfigValues": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "KeyMetricsSearchConfiguration",
        "namespace": "http://www.casenet.com/KeyMetricsSearchConfiguration"
      }
    },
    "KeyMetricsSearchCriteria": {
      "properties": {
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "grouping": {
          "type": "string"
        },
        "includeVoided": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "reverseChronologicalOrder": {
          "type": "boolean"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/KeyMetricSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object",
      "xml": {
        "name": "KeyMetricsSearchCriteria",
        "namespace": "http://www.casenet.com/KeyMetricsSearchCriteria"
      }
    },
    "KeyMetricsSearchResult": {
      "properties": {
        "accessible": {
          "type": "boolean"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "keyMetricDefId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "occurredDate": {
          "format": "date-time",
          "type": "string"
        },
        "resourceName": {
          "type": "string"
        },
        "type": {
          "enum": [
            "OCCURRENCE",
            "DROP_DOWN",
            "SINGLE_NUMERIC",
            "SPLIT_NUMERIC",
            "MULTIPLE_NUMERIC",
            "CALCULATED",
            "COMPOSITE"
          ],
          "type": "string",
          "xml": {
            "name": "KeyMetricType",
            "namespace": "http://www.casenet.com/KeyMetricType"
          }
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "voided": {
          "type": "boolean"
        }
      },
      "required": [
        "createdDate",
        "id",
        "keyMetricDefId",
        "name",
        "occurredDate",
        "resourceName",
        "type",
        "updatedDate"
      ],
      "type": "object",
      "xml": {
        "name": "KeyMetricsSearchResult",
        "namespace": "http://www.casenet.com/KeyMetricsSearchResult"
      }
    },
    "KeyMetricsSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/KeyMetricsSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "KeyMetricsSearchResults",
        "namespace": "http://www.casenet.com/KeyMetricsSearchResults"
      }
    },
    "LetterDelivery": {
      "properties": {
        "deliveryMethod": {
          "enum": [
            "UI",
            "QUEUE",
            "FAX",
            "EMAIL"
          ],
          "type": "string",
          "xml": {
            "name": "DeliveryMethod",
            "namespace": "http://www.casenet.com/DeliveryMethod"
          }
        },
        "status": {
          "enum": [
            "SUCCESS",
            "FAILURE",
            "PENDING"
          ],
          "type": "string",
          "xml": {
            "name": "DeliveryStatus",
            "namespace": "http://www.casenet.com/DeliveryStatus"
          }
        }
      },
      "required": [
        "status"
      ],
      "type": "object",
      "xml": {
        "name": "LetterDelivery",
        "namespace": "http://www.casenet.com/LetterDelivery"
      }
    },
    "LetterLite": {
      "properties": {
        "id": {
          "type": "string"
        },
        "letterMailings": {
          "items": {
            "$ref": "#/definitions/LetterMailing"
          },
          "type": "array",
          "uniqueItems": true
        },
        "letterStatus": {
          "enum": [
            "RequestSent",
            "InProgress",
            "Failed",
            "Cancelled",
            "Draft",
            "Locked",
            "Complete"
          ],
          "type": "string",
          "xml": {
            "name": "LetterStatus",
            "namespace": "http://www.casenet.com/LetterStatus"
          }
        },
        "letterTemplateVersion": {
          "$ref": "#/definitions/LetterTemplateVersionLite"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "LetterLite",
        "namespace": "http://www.casenet.com/LetterLite"
      }
    },
    "LetterLogo": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "LetterLogo",
        "namespace": "http://www.casenet.com/LetterLogo"
      }
    },
    "LetterLogoRequest": {
      "properties": {
        "name": {
          "maxLength": 200,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object",
      "xml": {
        "name": "LetterLogoRequest",
        "namespace": "http://www.casenet.com/LetterLogoRequest"
      }
    },
    "LetterMailing": {
      "properties": {
        "dateSent": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "resendAsDuplicate": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "LetterMailing",
        "namespace": "http://www.casenet.com/LetterMailing"
      }
    },
    "LetterMailingExternal": {
      "properties": {
        "dateSent": {
          "format": "date-time",
          "type": "string"
        },
        "externalUrl": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "letterMailingExternalId": {
          "maxLength": 36,
          "minLength": 0,
          "type": "string"
        },
        "recipients": {
          "items": {
            "$ref": "#/definitions/LetterRecipient"
          },
          "type": "array"
        },
        "status": {
          "enum": [
            "RequestSent",
            "InProgress",
            "Complete",
            "Cancelled",
            "Failed"
          ],
          "type": "string",
          "xml": {
            "name": "ExternalLetterStatus",
            "namespace": "http://www.casenet.com/ExternalLetterStatus"
          }
        },
        "statusMessage": {
          "maxLength": 300,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "status"
      ],
      "type": "object",
      "xml": {
        "name": "LetterMailingExternal",
        "namespace": "http://www.casenet.com/LetterMailingExternal"
      }
    },
    "LetterMailingInternal": {
      "properties": {
        "dateSent": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "recipients": {
          "items": {
            "$ref": "#/definitions/LetterRecipient"
          },
          "type": "array"
        },
        "resendAsDuplicate": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "LetterMailingInternal",
        "namespace": "http://www.casenet.com/LetterMailingInternal"
      }
    },
    "LetterMailingPaginatedResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/AbstractLetterMailing"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "LetterMailingPaginatedResults",
        "namespace": "http://www.casenet.com/LetterMailingPaginatedResults"
      }
    },
    "LetterMailingRequest": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "letterType": {
          "enum": [
            "INTERNAL",
            "EXTERNAL"
          ],
          "type": "string",
          "xml": {
            "name": "LetterType",
            "namespace": "http://www.casenet.com/LetterType"
          }
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "LetterMailingRequest",
        "namespace": "http://www.casenet.com/LetterMailingRequest"
      }
    },
    "LetterRecipient": {
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "deliveries": {
          "items": {
            "$ref": "#/definitions/LetterDelivery"
          },
          "type": "array",
          "uniqueItems": true
        },
        "firstName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "lastName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "middleName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "nameSuffix": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "nameTitle": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "LetterRecipient",
        "namespace": "http://www.casenet.com/LetterRecipient"
      }
    },
    "LetterStatusMessageRequest": {
      "properties": {
        "letterStatusMessage": {
          "maxLength": 300,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object"
    },
    "LetterTemplate": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "currentLetterTemplateVersion": {
          "$ref": "#/definitions/LetterTemplateVersion"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "letterTemplateVersions": {
          "items": {
            "$ref": "#/definitions/LetterTemplateVersion"
          },
          "type": "array"
        },
        "obsolete": {
          "type": "boolean"
        },
        "resource": {
          "$ref": "#/definitions/Resource"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "LetterTemplateVersion": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "letterTemplate": {
          "$ref": "#/definitions/LetterTemplate"
        },
        "letterTemplateVersionStatus": {
          "enum": [
            "Published",
            "Draft",
            "Disabled"
          ],
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "LetterTemplateVersionLite": {
      "properties": {
        "id": {
          "type": "string"
        },
        "letterTemplate": {
          "$ref": "#/definitions/LetterTemplate"
        }
      },
      "type": "object",
      "xml": {
        "name": "LetterTemplateVersionLite",
        "namespace": "http://www.casenet.com/LetterTemplateVersionLite"
      }
    },
    "LibraryDocumentInfo": {
      "properties": {
        "category": {
          "$ref": "#/definitions/OptionValue"
        },
        "comment": {
          "type": "string"
        },
        "controlNumber": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "documentFormat": {
          "type": "string"
        },
        "documentName": {
          "type": "string"
        },
        "documentSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "documentType": {
          "$ref": "#/definitions/OptionValue"
        },
        "expirationDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "filename": {
          "type": "string"
        },
        "fullFilename": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "receiptDate": {
          "format": "date-time",
          "type": "string"
        },
        "size": {
          "format": "int32",
          "type": "integer"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "url": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "LibraryDocumentInfo",
        "namespace": "http://www.casenet.com/DocumentInfo"
      }
    },
    "LineItem": {
      "properties": {
        "advisorReviewRequired": {
          "type": "boolean"
        },
        "appliedEligibility": {
          "$ref": "#/definitions/Eligibility"
        },
        "approvedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "authorizationId": {
          "type": "string"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "breAutoApprovable": {
          "type": "boolean"
        },
        "clinicalReviewRequired": {
          "type": "boolean"
        },
        "deniedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "determination": {
          "$ref": "#/definitions/Determination"
        },
        "determinationDueDate": {
          "format": "date-time",
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/SimpleAttributeValueObject"
          },
          "type": "object"
        },
        "extension": {
          "type": "boolean"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "levelOfUrgency": {
          "$ref": "#/definitions/OptionValue"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        },
        "lineItemType": {
          "$ref": "#/definitions/OptionValue"
        },
        "originalRequestedFromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "originalRequestedToDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "productFeatureExternalIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "recommendedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "serviceType": {
          "$ref": "#/definitions/OptionValue"
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND",
            "NO_DECISION",
            "REVIEWED"
          ],
          "type": "string",
          "xml": {
            "name": "UMLineItemStatus",
            "namespace": "http://www.casenet.com/UMLineItemStatus"
          }
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "urgencyRequestedBy": {
          "$ref": "#/definitions/OptionValue"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "LineItem",
        "namespace": "http://www.casenet.com/LineItem"
      }
    },
    "LineItemClinicalReviewBHPConfiguration": {
      "properties": {
        "ipLineItemBREProcessingEnabled": {
          "type": "boolean"
        },
        "rxLineItemBREProcessingEnabled": {
          "type": "boolean"
        },
        "spLineItemBREProcessingEnabled": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LineItemDeterminationResponse": {
      "properties": {
        "warningMessage": {
          "enum": [
            "AUTOMATED_LETTER_WARNING"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "LineItemDeterminationResponse",
        "namespace": "http://www.casenet.com/LineItemDeterminationResponse"
      }
    },
    "LineItemDuplicateCheckRequest": {
      "properties": {
        "appliedEligibilityProductId": {
          "$ref": "#/definitions/ProductId"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object",
      "xml": {
        "name": "LineItemDuplicateCheckRequest",
        "namespace": "http://www.casenet.com/LineItemDuplicateCheckRequest"
      }
    },
    "LineItemListDuplicateCheckRequest": {
      "properties": {
        "diagnosisType": {
          "enum": [
            "BEHAVIORAL_DSMIV",
            "MEDICAL",
            "BEHAVIORAL_DSM5"
          ],
          "type": "string",
          "xml": {
            "name": "UMDiagnosisType",
            "namespace": "http://www.casenet.com/UMDiagnosisType"
          }
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/LineItemDuplicateCheckRequest"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "LineItemListDuplicateCheckRequest",
        "namespace": "http://www.casenet.com/LineItemListDuplicateCheckRequest"
      }
    },
    "LineItemLite": {
      "properties": {
        "authorizationId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "LineItemLite",
        "namespace": "http://www.casenet.com/LineItemLite"
      }
    },
    "LineItemMedicationInfo": {
      "properties": {
        "drug": {
          "$ref": "#/definitions/Drug"
        },
        "frequency": {
          "$ref": "#/definitions/OptionValue"
        },
        "frequencyOther": {
          "type": "string"
        },
        "medicationCodeId": {
          "type": "string"
        },
        "quantity": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "LineItemMedicationInfo",
        "namespace": "http://www.casenet.com/LineItemMedicationInfo"
      }
    },
    "LineItemMedicationInfoRequest": {
      "properties": {
        "drugId": {
          "type": "string"
        },
        "frequencyOption": {
          "type": "string"
        },
        "frequencyOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "quantity": {
          "format": "int32",
          "maximum": 999,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "drugId",
        "frequencyOption",
        "quantity"
      ],
      "type": "object",
      "xml": {
        "name": "LineItemMedicationInfoRequest",
        "namespace": "http://www.casenet.com/LineItemMedicationInfoRequest"
      }
    },
    "LineItemPaginatedResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/LineItem"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "LineItemRequest": {
      "properties": {
        "appliedEligibilityProductId": {
          "$ref": "#/definitions/ProductId"
        },
        "determination": {
          "$ref": "#/definitions/DeterminationRequest"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "levelOfUrgencyOption": {
          "type": "string"
        },
        "lineItemType": {
          "enum": [
            "IP",
            "SP",
            "RX"
          ],
          "type": "string",
          "xml": {
            "name": "UMLineItemType",
            "namespace": "http://www.casenet.com/UMLineItemType"
          }
        },
        "lineItemTypeOption": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "serviceTypeOption": {
          "type": "string"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "urgencyRequestedByOption": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LineItemReviewSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/AuthorizationLineItemReview"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "LineItemReviewSummary": {
      "properties": {
        "reviewId": {
          "type": "string"
        }
      },
      "required": [
        "reviewId"
      ],
      "type": "object",
      "xml": {
        "name": "LineItemReviewSummary",
        "namespace": "http://www.casenet.com/LineItemReviewSummary"
      }
    },
    "LineItemVoidRequest": {
      "properties": {
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "explanationOption": {
          "type": "string"
        },
        "lineItemVersion": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "authorizationVersion",
        "lineItemVersion"
      ],
      "type": "object",
      "xml": {
        "name": "LineItemVoidRequest",
        "namespace": "http://www.casenet.com/LineItemVoidRequest"
      }
    },
    "LineItemWithAppealStatus": {
      "properties": {
        "appealContextId": {
          "type": "string"
        },
        "authorizationId": {
          "type": "string"
        },
        "hasAdvisorReview": {
          "type": "boolean"
        },
        "hasClinicalReview": {
          "type": "boolean"
        },
        "hasDraftAdvisorReview": {
          "type": "boolean"
        },
        "hasDraftClinicalReview": {
          "type": "boolean"
        },
        "hasNotification": {
          "type": "boolean"
        },
        "hasOutcome": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "LineItemLite",
        "namespace": "http://www.casenet.com/LineItemLite"
      }
    },
    "LinkReferralToCaseRequest": {
      "properties": {
        "caseId": {
          "$ref": "#/definitions/CaseId"
        },
        "nextTask": {
          "$ref": "#/definitions/CommonActionPathRequest"
        }
      },
      "type": "object"
    },
    "LinkedAuthorizationBase": {
      "properties": {
        "authorizationId": {
          "type": "string"
        },
        "authorizationNum": {
          "type": "string"
        },
        "authorizationState": {
          "enum": [
            "OPEN",
            "OPEN_MODIFIED",
            "OPEN_REVISED",
            "CLOSED",
            "VOID",
            "DISCHARGED",
            "DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationState",
            "namespace": "http://www.casenet.com/UMAuthorizationState"
          }
        },
        "diagnosisCode": {
          "type": "string"
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "UMStatus",
            "namespace": "http://www.casenet.com/UMStatus"
          }
        },
        "trackingNum": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "AuthorizationInfo",
        "namespace": "http://www.casenet.com/AuthorizationInfo"
      }
    },
    "LocalDate": {
      "properties": {
        "date": {
          "format": "int32",
          "type": "integer"
        },
        "displayString": {
          "type": "string"
        },
        "future": {
          "type": "boolean"
        },
        "hour": {
          "format": "int32",
          "type": "integer"
        },
        "millisecond": {
          "format": "int32",
          "type": "integer"
        },
        "minute": {
          "format": "int32",
          "type": "integer"
        },
        "month": {
          "format": "int32",
          "type": "integer"
        },
        "past": {
          "type": "boolean"
        },
        "second": {
          "format": "int32",
          "type": "integer"
        },
        "today": {
          "type": "boolean"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "LocalDateTime": {
      "properties": {
        "date": {
          "format": "int32",
          "type": "integer"
        },
        "displayString": {
          "type": "string"
        },
        "future": {
          "type": "boolean"
        },
        "hour": {
          "format": "int32",
          "type": "integer"
        },
        "millisecond": {
          "format": "int32",
          "type": "integer"
        },
        "minute": {
          "format": "int32",
          "type": "integer"
        },
        "month": {
          "format": "int32",
          "type": "integer"
        },
        "past": {
          "type": "boolean"
        },
        "second": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "LocalTime": {
      "properties": {
        "hour": {
          "format": "int32",
          "type": "integer"
        },
        "minute": {
          "format": "int32",
          "type": "integer"
        },
        "nano": {
          "format": "int32",
          "type": "integer"
        },
        "second": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Location": {
      "properties": {
        "acceptingNewPatients": {
          "type": "boolean"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emails": {
          "items": {
            "$ref": "#/definitions/ProviderEmail"
          },
          "type": "array",
          "uniqueItems": true
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "externalId": {
          "type": "string"
        },
        "faxes": {
          "items": {
            "$ref": "#/definitions/ProviderPhoneNumber"
          },
          "type": "array",
          "uniqueItems": true
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "locationType": {
          "type": "string"
        },
        "medicaidNumber": {
          "type": "string"
        },
        "medicareNumber": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "networkLocations": {
          "items": {
            "$ref": "#/definitions/NetworkLocation"
          },
          "type": "array",
          "uniqueItems": true
        },
        "nonFaxNonBlankPhoneNumbers": {
          "items": {
            "$ref": "#/definitions/ProviderPhoneNumber"
          },
          "type": "array",
          "uniqueItems": true
        },
        "npi": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "open24Hours": {
          "type": "boolean"
        },
        "phones": {
          "items": {
            "$ref": "#/definitions/ProviderPhoneNumber"
          },
          "type": "array",
          "uniqueItems": true
        },
        "phonesNoFax": {
          "items": {
            "$ref": "#/definitions/ProviderPhoneNumber"
          },
          "type": "array",
          "uniqueItems": true
        },
        "pin": {
          "type": "string"
        },
        "preferred": {
          "type": "boolean"
        },
        "preferredBillingAddress": {
          "$ref": "#/definitions/ProviderLocationAddress"
        },
        "preferredMailingAddress": {
          "$ref": "#/definitions/ProviderLocationAddress"
        },
        "preferredProviderPhoneNumber": {
          "$ref": "#/definitions/ProviderPhoneNumber"
        },
        "preferredServicingAddress": {
          "$ref": "#/definitions/ProviderLocationAddress"
        },
        "provider": {
          "$ref": "#/definitions/Provider"
        },
        "providerGroup": {
          "$ref": "#/definitions/GroupProvider"
        },
        "providerLocationAddress": {
          "items": {
            "$ref": "#/definitions/ProviderLocationAddress"
          },
          "type": "array",
          "uniqueItems": true
        },
        "providerLocationBillingAddress": {
          "items": {
            "$ref": "#/definitions/ProviderLocationAddress"
          },
          "type": "array",
          "uniqueItems": true
        },
        "providerLocationMailingAddress": {
          "items": {
            "$ref": "#/definitions/ProviderLocationAddress"
          },
          "type": "array",
          "uniqueItems": true
        },
        "providerLocationServicingAddress": {
          "items": {
            "$ref": "#/definitions/ProviderLocationAddress"
          },
          "type": "array",
          "uniqueItems": true
        },
        "servicesProvided": {
          "items": {
            "$ref": "#/definitions/ServiceOffer"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "tin": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "upin": {
          "type": "string"
        },
        "validAttributes": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "LocationAdvancedCriteria": {
      "properties": {
        "city": {
          "$ref": "#/definitions/StringCriteria"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "locationType": {
          "$ref": "#/definitions/StringCriteria"
        },
        "medicaidId": {
          "$ref": "#/definitions/StringCriteria"
        },
        "medicareId": {
          "$ref": "#/definitions/StringCriteria"
        },
        "product": {
          "$ref": "#/definitions/StringCriteria"
        },
        "serviceCode": {
          "$ref": "#/definitions/ProcedureCodeNaturalId"
        },
        "serviceName": {
          "$ref": "#/definitions/StringCriteria"
        }
      },
      "type": "object",
      "xml": {
        "name": "LocationAdvancedCriteria",
        "namespace": "http://www.casenet.com/LocationAdvancedCriteria"
      }
    },
    "LocationBhpConfiguration": {
      "properties": {
        "memberLocationEnabled": {
          "type": "boolean"
        },
        "searchSpanEndDateOffsetInDays": {
          "format": "int32",
          "type": "integer"
        },
        "searchSpanStartDateOffsetInDays": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "LocationCode": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "locationCode": {
          "type": "string"
        },
        "locationName": {
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "LocationId": {
      "properties": {
        "id": {
          "type": "string"
        },
        "locationIdType": {
          "enum": [
            "INTERNAL",
            "EXTERNAL"
          ],
          "type": "string",
          "xml": {
            "name": "LocationIdType",
            "namespace": "http://www.casenet.com/LocationIdType"
          }
        }
      },
      "required": [
        "id",
        "locationIdType"
      ],
      "type": "object",
      "xml": {
        "name": "LocationId",
        "namespace": "http://www.casenet.com/LocationId"
      }
    },
    "LocationLite": {
      "properties": {
        "id": {
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/Provider"
        }
      },
      "type": "object",
      "xml": {
        "name": "LocationLite",
        "namespace": "http://www.casenet.com/LocationLite"
      }
    },
    "LocationSearchCriteria": {
      "properties": {
        "advancedCriteria": {
          "$ref": "#/definitions/LocationAdvancedCriteria"
        },
        "authorizationContext": {
          "type": "boolean"
        },
        "city": {
          "$ref": "#/definitions/StringCriteria"
        },
        "context": {
          "enum": [
            "Member",
            "Provider"
          ],
          "type": "string",
          "xml": {
            "name": "LocationSearchContext",
            "namespace": "http://www.casenet.com/LocationSearchContext"
          }
        },
        "countryCode": {
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "county": {
          "$ref": "#/definitions/StringCriteria"
        },
        "eligibilityProductId": {
          "type": "string"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "groupType": {
          "$ref": "#/definitions/GroupType"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "locationContextDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "locationName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "locationNumber": {
          "$ref": "#/definitions/StringCriteria"
        },
        "medicaidParticipation": {
          "enum": [
            "Participating",
            "Nonparticipating",
            "Either"
          ],
          "type": "string",
          "xml": {
            "name": "Participation",
            "namespace": "http://www.casenet.com/Participation"
          }
        },
        "medicareParticipation": {
          "enum": [
            "Participating",
            "Nonparticipating",
            "Either"
          ],
          "type": "string",
          "xml": {
            "name": "Participation",
            "namespace": "http://www.casenet.com/Participation"
          }
        },
        "memberConstraints": {
          "$ref": "#/definitions/MemberConstraints"
        },
        "networkAffiliation": {
          "enum": [
            "InNetwork",
            "OutOfNetwork",
            "All"
          ],
          "type": "string",
          "xml": {
            "name": "NetworkAffiliation",
            "namespace": "http://www.casenet.com/NetworkAffiliation"
          }
        },
        "npi": {
          "$ref": "#/definitions/StringCriteria"
        },
        "otherCountryName": {
          "type": "string"
        },
        "preferredNetworkId": {
          "$ref": "#/definitions/NetworkId"
        },
        "providerId": {
          "$ref": "#/definitions/ProviderId"
        },
        "serviceOfferId": {
          "type": "string"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/LocationSearchSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "stateOption": {
          "type": "string"
        },
        "stateOther": {
          "type": "string"
        },
        "taxIds": {
          "items": {
            "$ref": "#/definitions/StringCriteria"
          },
          "type": "array"
        },
        "tricareParticipation": {
          "enum": [
            "Participating",
            "Nonparticipating",
            "Either"
          ],
          "type": "string",
          "xml": {
            "name": "Participation",
            "namespace": "http://www.casenet.com/Participation"
          }
        },
        "zipCode": {
          "$ref": "#/definitions/StringCriteria"
        }
      },
      "type": "object",
      "xml": {
        "name": "LocationSearchCriteria",
        "namespace": "http://www.casenet.com/LocationSearchCriteria"
      }
    },
    "LocationSearchResult": {
      "properties": {
        "hasMoreAddresses": {
          "type": "boolean"
        },
        "hasMorePhoneNumbers": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "locationName": {
          "type": "string"
        },
        "locationNumber": {
          "type": "string"
        },
        "medicaidParticipation": {
          "type": "boolean"
        },
        "medicareParticipation": {
          "type": "boolean"
        },
        "networkAffiliation": {
          "enum": [
            "InNetwork",
            "OutOfNetwork",
            "All"
          ],
          "type": "string",
          "xml": {
            "name": "NetworkAffiliation",
            "namespace": "http://www.casenet.com/NetworkAffiliation"
          }
        },
        "npi": {
          "type": "string"
        },
        "phoneNumbers": {
          "items": {
            "$ref": "#/definitions/VersionedPhoneNumber"
          },
          "type": "array"
        },
        "preferredPhoneNumber": {
          "$ref": "#/definitions/VersionedPhoneNumber"
        },
        "servicingAddresses": {
          "items": {
            "$ref": "#/definitions/Address"
          },
          "type": "array"
        },
        "tin": {
          "type": "string"
        },
        "tricareParticipation": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "LocationSearchResult",
        "namespace": "http://www.casenet.com/LocationSearchResult"
      }
    },
    "LocationSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/LocationSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "LocationSearchResults",
        "namespace": "http://www.casenet.com/LocationSearchResults"
      }
    },
    "LocationSearchSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "LOCATION_NAME",
            "TIN",
            "NPI"
          ],
          "type": "string",
          "xml": {
            "name": "LocationSearchSortColumn",
            "namespace": "http://www.casenet.com/LocationSearchSortColumn"
          }
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "LocationSearchSortField",
        "namespace": "http://www.casenet.com/LocationSearchSortField"
      }
    },
    "Lock": {
      "properties": {
        "lockReason": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "lockState": {
          "enum": [
            "LOCKED",
            "UNLOCKED"
          ],
          "type": "string",
          "xml": {
            "name": "LockState",
            "namespace": "http://www.casenet.com/LockState"
          }
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "lockState"
      ],
      "type": "object",
      "xml": {
        "name": "Lock",
        "namespace": "http://www.casenet.com/Lock"
      }
    },
    "LogErrorRequest": {
      "properties": {
        "browserAgent": {
          "type": "string"
        },
        "errorLocation": {
          "$ref": "#/definitions/ErrorLocation"
        },
        "errorMessage": {
          "type": "string"
        },
        "httpError": {
          "$ref": "#/definitions/HttpError"
        },
        "incidentId": {
          "maxLength": 13,
          "minLength": 0,
          "type": "string"
        },
        "reportedByUser": {
          "type": "boolean"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "browserAgent",
        "errorMessage",
        "incidentId",
        "username"
      ],
      "type": "object"
    },
    "LogMessage": {
      "properties": {
        "className": {
          "type": "string"
        },
        "loggerLevel": {
          "enum": [
            "ALL",
            "TRACE",
            "DEBUG",
            "INFO",
            "WARN",
            "ERROR",
            "FATAL",
            "OFF"
          ],
          "type": "string",
          "xml": {
            "name": "LoggerLevel",
            "namespace": "http://www.casenet.com/LoggerLevel"
          }
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "className",
        "loggerLevel",
        "message"
      ],
      "type": "object",
      "xml": {
        "name": "LogMessage",
        "namespace": "http://www.casenet.com/LogMessage"
      }
    },
    "LoggingConfiguration": {
      "properties": {
        "loggingMethod": {
          "enum": [
            "AUTOMATIC",
            "MANUAL"
          ],
          "type": "string"
        },
        "sessionIncidentId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LowIncomeSubsidy": {
      "properties": {
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "lowIncomeSubsidyLevel": {
          "maxLength": 30,
          "minLength": 0,
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "LowIncomeSubsidy",
        "namespace": "http://www.casenet.com/LowIncomeSubsidy"
      }
    },
    "ManualTaskArtifact": {
      "properties": {
        "artifactDefId": {
          "type": "string"
        },
        "instanceId": {
          "type": "string"
        },
        "screenTypeName": {
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ManualTaskArtifact",
        "namespace": "http://www.casenet.com/TaskInstanceLink"
      }
    },
    "ManualTaskArtifactSearchCriteria": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "taskLinkArtifactType": {
          "enum": [
            "INPATIENT",
            "SP",
            "RX",
            "CASE",
            "MEDICATION",
            "ASSESSMENT",
            "CARE_PLAN"
          ],
          "type": "string",
          "xml": {
            "name": "TaskLinkArtifactType",
            "namespace": "http://www.casenet.com/TaskLinkArtifactType"
          }
        }
      },
      "required": [
        "taskLinkArtifactType"
      ],
      "type": "object",
      "xml": {
        "name": "ManualTaskArtifactSearchCriteria",
        "namespace": "http://www.casenet.com/ManualTaskArtifactSearchCriteria"
      }
    },
    "ManualTaskArtifactSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/ManualTaskArtifact"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "ManualTaskArtifactSearchResults",
        "namespace": "http://www.casenet.com/ManualTaskArtifactSearchResults"
      }
    },
    "MediSpanMedication": {
      "properties": {
        "dispensableDrugId": {
          "format": "int32",
          "type": "integer"
        },
        "drugNameId": {
          "format": "int32",
          "type": "integer"
        },
        "gpi": {
          "type": "string"
        },
        "gpiDrugBaseName": {
          "type": "string"
        },
        "gpiDrugClass": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "MediSpanMedication",
        "namespace": "http://www.casenet.com/MediSpanMedication"
      }
    },
    "MedicalRecord": {
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "infoReceivedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "phoneNumber": {
          "type": "string"
        },
        "requestDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "sequence": {
          "$ref": "#/definitions/OptionValue"
        },
        "sourceName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Medication": {
      "properties": {
        "closed": {
          "type": "boolean"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "discontinueAuthorizedBy": {
          "$ref": "#/definitions/Provider"
        },
        "discontinueDate": {
          "format": "date-time",
          "type": "string"
        },
        "discontinueReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "discontinueReasonOther": {
          "type": "string"
        },
        "doseString": {
          "type": "string"
        },
        "drug": {
          "$ref": "#/definitions/Drug"
        },
        "drugDescription": {
          "maxLength": 250,
          "minLength": 0,
          "type": "string"
        },
        "drugEntryType": {
          "type": "string"
        },
        "drugQuantity": {
          "format": "int32",
          "type": "integer"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "frequency": {
          "$ref": "#/definitions/OptionValue"
        },
        "frequencyOther": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isCurrentlyTaking": {
          "type": "boolean"
        },
        "isNewClaimMedication": {
          "type": "boolean"
        },
        "isVoidedByClaim": {
          "type": "boolean"
        },
        "lastReviewedBy": {
          "$ref": "#/definitions/User"
        },
        "lastReviewedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "lastUpdatedBy": {
          "$ref": "#/definitions/User"
        },
        "lastUpdatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "mediSpanMedication": {
          "$ref": "#/definitions/MediSpanMedication"
        },
        "medicationCodeId": {
          "type": "string"
        },
        "medicationPharmacyClaimDetailLite": {
          "$ref": "#/definitions/MedicationPharmacyClaimDetailLite"
        },
        "medicationStatus": {
          "type": "string"
        },
        "memberSupplement": {
          "$ref": "#/definitions/MemberSupplement"
        },
        "name": {
          "type": "string"
        },
        "notes": {
          "items": {
            "$ref": "#/definitions/NoteInstance"
          },
          "type": "array"
        },
        "prescribedDose": {
          "type": "string"
        },
        "prescriber": {
          "$ref": "#/definitions/Provider"
        },
        "prescriberName": {
          "type": "string"
        },
        "procurementMethod": {
          "$ref": "#/definitions/OptionValue"
        },
        "procurementMethodOther": {
          "type": "string"
        },
        "providerLocation": {
          "type": "string"
        },
        "regimenEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "regimenStartDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "reviews": {
          "items": {
            "$ref": "#/definitions/MedicationReview"
          },
          "type": "array"
        },
        "route": {
          "$ref": "#/definitions/OptionValue"
        },
        "routeOtherDescription": {
          "type": "string"
        },
        "routeString": {
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/OptionValue"
        },
        "sourceOther": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "Medication",
        "namespace": "http://www.casenet.com/Medication"
      }
    },
    "MedicationConfiguration": {
      "properties": {
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "medicationPropertyMap": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesConfiguration",
        "namespace": "http://www.casenet.com/ExtendedAttributesConfiguration"
      }
    },
    "MedicationIdRequest": {
      "properties": {
        "medicationId": {
          "type": "string"
        },
        "medicationVersion": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "medicationId",
        "medicationVersion"
      ],
      "type": "object"
    },
    "MedicationPharmacyClaimDetailLite": {
      "properties": {
        "claim": {
          "$ref": "#/definitions/MedicationPharmacyClaimLite"
        },
        "daysSupply": {
          "format": "int32",
          "type": "integer"
        },
        "diagnosisCode": {
          "$ref": "#/definitions/DiagnosisCode"
        },
        "dispensedAsWritten": {
          "type": "string"
        },
        "fillDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "frequency": {
          "$ref": "#/definitions/OptionValue"
        },
        "mailOrderPharmacyIndicator": {
          "type": "boolean"
        },
        "medicationInfo": {
          "type": "string"
        },
        "ndc": {
          "type": "string"
        },
        "newfill": {
          "type": "boolean"
        },
        "numRefillsAuthorized": {
          "format": "int32",
          "type": "integer"
        },
        "numTimesFilled": {
          "format": "int32",
          "type": "integer"
        },
        "prescriber": {
          "$ref": "#/definitions/Location"
        },
        "quantity": {
          "format": "int32",
          "type": "integer"
        },
        "refill": {
          "type": "boolean"
        },
        "rxAppliedToDeductibleAmt": {
          "type": "number"
        },
        "rxCopayAmt": {
          "type": "number"
        },
        "rxDispensingFeeAmt": {
          "type": "number"
        },
        "rxIngredientCostAmt": {
          "type": "number"
        },
        "rxNumber": {
          "type": "string"
        },
        "rxPatientCostAmt": {
          "type": "number"
        },
        "rxPrice": {
          "type": "number"
        },
        "rxSalesTaxAmt": {
          "type": "number"
        },
        "rxWrittenDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object",
      "xml": {
        "name": "MedicationPharmacyClaimDetailLite",
        "namespace": "http://www.casenet.com/MedicationPharmacyClaimDetailLite"
      }
    },
    "MedicationPharmacyClaimLite": {
      "properties": {
        "claimNumber": {
          "type": "string"
        },
        "claimStatus": {
          "$ref": "#/definitions/OptionValue"
        },
        "lowIncomeSubsidyLevel": {
          "type": "string"
        },
        "pharmacy": {
          "$ref": "#/definitions/Location"
        },
        "totalPrice": {
          "type": "number"
        }
      },
      "type": "object",
      "xml": {
        "name": "MedicationPharmacyClaimLite",
        "namespace": "http://www.casenet.com/MedicationPharmacyClaimLite"
      }
    },
    "MedicationPodResult": {
      "properties": {
        "allergyMedicationReactionExists": {
          "type": "boolean"
        },
        "daysSupply": {
          "format": "int32",
          "type": "integer"
        },
        "expectedRefillDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "filledDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "frequency": {
          "type": "string"
        },
        "isRefillDatePastDue": {
          "type": "boolean"
        },
        "isSupplement": {
          "type": "boolean"
        },
        "lastUpdatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "medicationId": {
          "type": "string"
        },
        "medicationName": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MedicationPodResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/MedicationPodResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "MedicationRegimenSearchResult": {
      "properties": {
        "adjustedDose": {
          "type": "string"
        },
        "adjustedRoute": {
          "$ref": "#/definitions/OptionValue"
        },
        "adjustedRouteOther": {
          "type": "string"
        },
        "allergyMedRegimenReactionExists": {
          "type": "boolean"
        },
        "dateAdded": {
          "$ref": "#/definitions/LocalDate"
        },
        "daysSupply": {
          "format": "int32",
          "type": "integer"
        },
        "drugDescription": {
          "type": "string"
        },
        "drugEntryType": {
          "enum": [
            "NDC",
            "DISPENSED_DRUG",
            "DRUG_BASE_NAME"
          ],
          "type": "string"
        },
        "expectedRefillDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "filledDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "frequency": {
          "$ref": "#/definitions/OptionValue"
        },
        "frequencyOther": {
          "type": "string"
        },
        "isCurrentlyTaking": {
          "type": "boolean"
        },
        "isRxClaim": {
          "type": "boolean"
        },
        "lastReviewedBy": {
          "$ref": "#/definitions/User"
        },
        "lastReviewedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "lastUpdatedBy": {
          "$ref": "#/definitions/User"
        },
        "lastUpdatedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "medicationId": {
          "type": "string"
        },
        "medicationName": {
          "type": "string"
        },
        "nextReviewDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "regimenEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "regimenStartDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "source": {
          "$ref": "#/definitions/OptionValue"
        },
        "sourceOther": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "MedicationRegimensSearchCriteria": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "searchParams": {
          "$ref": "#/definitions/MedicationRegimensSearchParam"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/MedicationRegimensSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "MedicationRegimensSearchParam": {
      "properties": {
        "includeVoided": {
          "type": "boolean"
        },
        "medicationKey": {
          "maxLength": 250,
          "minLength": 0,
          "type": "string"
        },
        "medicationName": {
          "maxLength": 250,
          "minLength": 0,
          "type": "string"
        },
        "medicationStatus": {
          "enum": [
            "ALL",
            "OPEN",
            "DISCONTINUED",
            "COMPLETED"
          ],
          "type": "string"
        },
        "reviewDateFrom": {
          "$ref": "#/definitions/LocalDate"
        },
        "reviewDateTo": {
          "$ref": "#/definitions/LocalDate"
        },
        "reviewedBy": {
          "type": "string"
        }
      },
      "required": [
        "medicationKey"
      ],
      "type": "object"
    },
    "MedicationRegimensSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/MedicationRegimenSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "MedicationRegimensSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "MEDICATION_NAME",
            "STATUS",
            "DATE_ADDED",
            "LAST_UPDATED_DATE",
            "REGIMEN_START_DATE",
            "REGIMEN_END_DATE",
            "LAST_REVIEWED_DATE"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "MedicationReview": {
      "properties": {
        "actualDose": {
          "type": "string"
        },
        "adverseEffects": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "adverseEffectsDetails": {
          "type": "string"
        },
        "comments": {
          "type": "string"
        },
        "followUpRequired": {
          "type": "boolean"
        },
        "frequency": {
          "$ref": "#/definitions/OptionValue"
        },
        "frequencyOther": {
          "type": "string"
        },
        "hasAdverseEffects": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "isContactPrescriber": {
          "type": "boolean"
        },
        "isCurrentlyTakingMedication": {
          "type": "boolean"
        },
        "knowsWhy": {
          "type": "boolean"
        },
        "lastMissedDoseDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "memberEducation": {
          "type": "string"
        },
        "missedDoseInLast30Days": {
          "type": "boolean"
        },
        "missedDoseOtherReason": {
          "type": "string"
        },
        "missedDoseReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "nextReviewDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "primaryFactor": {
          "$ref": "#/definitions/OptionValue"
        },
        "quantityOnHand": {
          "type": "string"
        },
        "reviewDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "reviewReason": {
          "type": "string"
        },
        "reviewer": {
          "$ref": "#/definitions/User"
        },
        "takingAsOrdered": {
          "type": "boolean"
        },
        "usageStatus": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "MedicationReview",
        "namespace": "http://www.casenet.com/MedicationReview"
      }
    },
    "MedicationSearchCriteria": {
      "properties": {
        "drugId": {
          "type": "string"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "reviewDateFrom": {
          "$ref": "#/definitions/LocalDate"
        },
        "reviewDateTo": {
          "$ref": "#/definitions/LocalDate"
        },
        "reviewedById": {
          "type": "string"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "status": {
          "enum": [
            "OPEN",
            "DISCONTINUED"
          ],
          "type": "string",
          "xml": {
            "name": "MedicationStatus",
            "namespace": "http://www.casenet.com/MedicationStatus"
          }
        },
        "voided": {
          "enum": [
            "ACTIVE",
            "VOIDED",
            "ALL"
          ],
          "type": "string",
          "xml": {
            "name": "VoidedStatus",
            "namespace": "http://www.casenet.com/VoidedStatus"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "MedicationSearchCriteria",
        "namespace": "http://www.casenet.com/MedicationSearchCriteria"
      }
    },
    "MedicationSearchResult": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "addedDate": {
          "format": "date-time",
          "type": "string"
        },
        "closed": {
          "type": "boolean"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "dateAdded": {
          "format": "date-time",
          "type": "string"
        },
        "dateAddedDisplayString": {
          "type": "string"
        },
        "drug": {
          "$ref": "#/definitions/Drug"
        },
        "frequency": {
          "$ref": "#/definitions/OptionValue"
        },
        "frequencyOther": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastRegimenCreatedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "lastReviewDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "lastReviewer": {
          "$ref": "#/definitions/User"
        },
        "lastReviewerDisplayName": {
          "type": "string"
        },
        "medicationCodeId": {
          "type": "string"
        },
        "medicationName": {
          "type": "string"
        },
        "prescribedDose": {
          "type": "string"
        },
        "prescriber": {
          "$ref": "#/definitions/Provider"
        },
        "procurementMethod": {
          "$ref": "#/definitions/OptionValue"
        },
        "providerLocation": {
          "type": "string"
        },
        "regimenEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "regimenStartDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "route": {
          "$ref": "#/definitions/OptionValue"
        },
        "routeOtherDescription": {
          "type": "string"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        },
        "voidInfoExists": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "MedicationSearchResult",
        "namespace": "http://www.casenet.com/MedicationSearchResult"
      }
    },
    "MedicationSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/MedicationSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "MedicationSearchResults",
        "namespace": "http://www.casenet.com/MedicationSearchResults"
      }
    },
    "MedicationSummarySearchCriteria": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "searchParams": {
          "$ref": "#/definitions/MedicationSummarySearchParam"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/MedicationSummarySortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "MedicationSummarySearchParam": {
      "properties": {
        "includeSupplements": {
          "type": "boolean"
        },
        "includeVoided": {
          "type": "boolean"
        },
        "medicationName": {
          "maxLength": 250,
          "minLength": 0,
          "type": "string"
        },
        "medicationStatus": {
          "enum": [
            "ALL",
            "OPEN",
            "DISCONTINUED",
            "COMPLETED"
          ],
          "type": "string"
        },
        "reviewDateFrom": {
          "$ref": "#/definitions/LocalDate"
        },
        "reviewDateTo": {
          "$ref": "#/definitions/LocalDate"
        },
        "reviewedByUserName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MedicationSummarySearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/GroupedMedication"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "MedicationSummarySortField": {
      "properties": {
        "columnType": {
          "enum": [
            "DATE_ADDED",
            "MEDICATION",
            "STATUS",
            "LAST_REVIEWED_DATE",
            "LAST_UPDATED_DATE",
            "LAST_REVIEWED_BY",
            "LAST_UPDATED_BY"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "MedicationsDonutHoleResult": {
      "properties": {
        "beforeGapMaxAmount": {
          "type": "number"
        },
        "claimsTotalPrice": {
          "type": "number"
        },
        "inGapMaxAmount": {
          "type": "number"
        },
        "remainingBeforeGapAmount": {
          "type": "number"
        },
        "remainingInGapAmount": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "MedispanAllergen": {
      "properties": {
        "medispanAllergenDescription": {
          "type": "string"
        },
        "medispanAllergenId": {
          "type": "string"
        },
        "medispanAllergyCodeType": {
          "enum": [
            "C",
            "M",
            "T"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "MedispanAllergenReactionResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/ReactingMedication"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "MedispanAllergenReactionSearchCriteria": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "medispanAllergenDescription": {
          "maxLength": 50,
          "minLength": 2,
          "type": "string"
        },
        "medispanAllergenId": {
          "maxLength": 10,
          "minLength": 2,
          "type": "string"
        },
        "medispanAllergyCodeType": {
          "enum": [
            "C",
            "M",
            "T"
          ],
          "type": "string"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "medispanAllergenDescription",
        "medispanAllergenId",
        "medispanAllergyCodeType"
      ],
      "type": "object",
      "xml": {
        "name": "SearchCriteria",
        "namespace": "http://www.casenet.com/SearchCriteria"
      }
    },
    "MedispanAllergenSearchCriteria": {
      "properties": {
        "allergenDescriptionCriteria": {
          "$ref": "#/definitions/StringCriteria"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteria",
        "namespace": "http://www.casenet.com/SearchCriteria"
      }
    },
    "MedispanAllergenSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/MedispanAllergen"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "MedispanAllergyReaction": {
      "properties": {
        "allergyId": {
          "type": "string"
        },
        "allergyName": {
          "type": "string"
        },
        "medispanAllergyReactionDetails": {
          "items": {
            "$ref": "#/definitions/MedispanAllergyReactionDetail"
          },
          "type": "array"
        },
        "otherReaction": {
          "type": "string"
        },
        "reaction": {
          "$ref": "#/definitions/OptionValue"
        },
        "severity": {
          "$ref": "#/definitions/OptionValue"
        }
      },
      "type": "object"
    },
    "MedispanAllergyReactionDetail": {
      "properties": {
        "allergyClass": {
          "type": "string"
        },
        "monographId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MedispanDrugReactionResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/ReactingAllergy"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "MedispanDrugReactionSearchCriteria": {
      "properties": {
        "drugLite": {
          "$ref": "#/definitions/DrugLite"
        },
        "entryType": {
          "enum": [
            "NDC",
            "DISPENSED_DRUG",
            "DRUG_BASE_NAME"
          ],
          "type": "string"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "entryType"
      ],
      "type": "object",
      "xml": {
        "name": "SearchCriteria",
        "namespace": "http://www.casenet.com/SearchCriteria"
      }
    },
    "Member": {
      "properties": {
        "addresses": {
          "items": {
            "$ref": "#/definitions/ContactAddress"
          },
          "type": "array",
          "uniqueItems": true
        },
        "age": {
          "format": "int32",
          "type": "integer"
        },
        "ageString": {
          "type": "string"
        },
        "attachments": {
          "items": {
            "$ref": "#/definitions/DocumentInfo"
          },
          "type": "array",
          "uniqueItems": true
        },
        "availability": {
          "items": {
            "$ref": "#/definitions/Availability"
          },
          "type": "array",
          "uniqueItems": true
        },
        "bhpNode": {
          "$ref": "#/definitions/BhpNode"
        },
        "calculatedAgeString": {
          "type": "string"
        },
        "citizenshipStatus": {
          "$ref": "#/definitions/OptionValue"
        },
        "citizenshipStatusOther": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "currentPCP": {
          "$ref": "#/definitions/PCP"
        },
        "dateOfBirth": {
          "format": "date",
          "type": "string"
        },
        "dateOfDeath": {
          "format": "date",
          "type": "string"
        },
        "emails": {
          "items": {
            "$ref": "#/definitions/ContactEmail"
          },
          "type": "array",
          "uniqueItems": true
        },
        "employer": {
          "type": "string"
        },
        "employmentStatus": {
          "type": "string"
        },
        "ethnicity": {
          "$ref": "#/definitions/OptionValue"
        },
        "ethnicityOther": {
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "externalMemberId": {
          "type": "string"
        },
        "familyMgmtId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "gender": {
          "$ref": "#/definitions/OptionValue"
        },
        "groupNumber": {
          "type": "string"
        },
        "hasAllergy": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "lastNameCommaFirstName": {
          "type": "string"
        },
        "lockedInPharmacy": {
          "$ref": "#/definitions/Pharmacy"
        },
        "lockedInStatus": {
          "type": "boolean"
        },
        "manuallyAdded": {
          "type": "boolean"
        },
        "maritalStatus": {
          "$ref": "#/definitions/OptionValue"
        },
        "medicaidId": {
          "type": "string"
        },
        "medicareId": {
          "type": "string"
        },
        "memberDesignee": {
          "$ref": "#/definitions/PersonalContact"
        },
        "memberFullName": {
          "type": "string"
        },
        "memberOffline": {
          "type": "boolean"
        },
        "memberOwnerId": {
          "type": "string"
        },
        "middleInitial": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "mostPreferredActiveAddress": {
          "$ref": "#/definitions/Address"
        },
        "mrn": {
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "optOut": {
          "type": "boolean"
        },
        "organizationContacts": {
          "items": {
            "$ref": "#/definitions/OrganizationContact"
          },
          "type": "array"
        },
        "pcps": {
          "items": {
            "$ref": "#/definitions/PCP"
          },
          "type": "array"
        },
        "personId": {
          "type": "string"
        },
        "personalContacts": {
          "items": {
            "$ref": "#/definitions/PersonalContact"
          },
          "type": "array"
        },
        "phoneNumbers": {
          "items": {
            "$ref": "#/definitions/ContactPhoneNumber"
          },
          "type": "array",
          "uniqueItems": true
        },
        "preferredAddress": {
          "$ref": "#/definitions/Address"
        },
        "preferredName": {
          "type": "string"
        },
        "previousBhpNode": {
          "type": "object"
        },
        "primaryHealthCoach": {
          "$ref": "#/definitions/User"
        },
        "primaryLanguage": {
          "$ref": "#/definitions/OptionValue"
        },
        "primaryLanguageOther": {
          "type": "string"
        },
        "providerContacts": {
          "items": {
            "$ref": "#/definitions/ProviderContact"
          },
          "type": "array"
        },
        "race": {
          "$ref": "#/definitions/OptionValue"
        },
        "raceOther": {
          "type": "string"
        },
        "religion": {
          "$ref": "#/definitions/OptionValue"
        },
        "religionOther": {
          "type": "string"
        },
        "secondaryLanguage": {
          "$ref": "#/definitions/OptionValue"
        },
        "secondaryLanguageOther": {
          "type": "string"
        },
        "specialNeeds": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "specialNeedsOther": {
          "type": "string"
        },
        "ssn": {
          "type": "string"
        },
        "suffix": {
          "type": "string"
        },
        "systemAlert": {
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/DateTimeZone"
        },
        "title": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "userAlert": {
          "type": "string"
        },
        "userOfflineState": {
          "$ref": "#/definitions/UserOfflineState"
        },
        "validAttributes": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "writtenLanguage": {
          "$ref": "#/definitions/OptionValue"
        },
        "writtenLanguageOther": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MemberActivityConfiguration": {
      "properties": {
        "activityStreamRefreshIntervalMinutes": {
          "format": "int32",
          "type": "integer"
        },
        "memberActivityScreenEnabled": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "MemberAdvancedSearchCriteria": {
      "properties": {
        "authorizationNumber": {
          "$ref": "#/definitions/StringCriteria"
        },
        "caseNumber": {
          "$ref": "#/definitions/StringCriteria"
        },
        "eligibilityExtendedFieldValues": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "eligibilityGroupNumber": {
          "$ref": "#/definitions/StringCriteria"
        },
        "employerName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "medicalRecordNumber": {
          "$ref": "#/definitions/StringCriteria"
        },
        "memberExtendedFieldValues": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "memberGroupNumber": {
          "$ref": "#/definitions/StringCriteria"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "phoneNumberCriteria": {
          "$ref": "#/definitions/PhoneNumberCriteria"
        },
        "policyNumber": {
          "$ref": "#/definitions/RestrictedStringCriteria"
        },
        "primaryCaseOwner": {
          "$ref": "#/definitions/StringCriteria"
        },
        "productName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "ssn": {
          "$ref": "#/definitions/RestrictedStringCriteria"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberAdvancedSearchCriteria",
        "namespace": "http://www.casenet.com/MemberAdvancedSearchCriteria"
      }
    },
    "MemberAlertRecord": {
      "properties": {
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "memberAlertType": {
          "enum": [
            "RESTRICTION_OF_PHI",
            "DISABILITY_AUTHORIZATION",
            "DISPUTE"
          ],
          "type": "string",
          "xml": {
            "name": "MemberAlertType",
            "namespace": "http://www.casenet.com/MemberAlertType"
          }
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberAlertRecord",
        "namespace": "http://www.casenet.com/MemberAlertRecord"
      }
    },
    "MemberAlerts": {
      "properties": {
        "id": {
          "type": "string"
        },
        "systemAlert": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "userAlert": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberAlerts",
        "namespace": "http://www.casenet.com/MemberAlerts"
      }
    },
    "MemberAlertsRequest": {
      "properties": {
        "userAlert": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberAlertsRequest",
        "namespace": "http://www.casenet.com/MemberAlertsRequest"
      }
    },
    "MemberAttachAuthorizationSearchCriteria": {
      "properties": {
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "includeDrafts": {
          "type": "boolean"
        },
        "max": {
          "format": "int32",
          "type": "integer"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object"
    },
    "MemberAuthorizationSearchCriteria": {
      "properties": {
        "asc": {
          "type": "boolean"
        },
        "authorizationNumber": {
          "$ref": "#/definitions/StringCriteria"
        },
        "authorizationSearchParam": {
          "$ref": "#/definitions/AuthorizationSearchParam"
        },
        "authorizationTrackingNumber": {
          "type": "string"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "includeClosed": {
          "type": "boolean"
        },
        "includeVoided": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "lockState": {
          "enum": [
            "LOCKED",
            "UNLOCKED"
          ],
          "type": "string",
          "xml": {
            "name": "LockState",
            "namespace": "http://www.casenet.com/LockState"
          }
        },
        "sortField": {
          "enum": [
            "AUTHORIZATION_NUM",
            "FROM_DATE",
            "UPDATED_DATE",
            "END_DATE",
            "STATUS",
            "STATE",
            "INTERNAL_UI_STATE",
            "MEMBER_NAME",
            "MEMBER_EXTERNAL_ID",
            "REQUESTING_PROVIDER",
            "FACILITY_PROVIDER",
            "DIAGNOSIS_CODE",
            "DIAGNOSIS_NAME",
            "DIAGNOSIS_TYPE",
            "CASE",
            "UPDATED_BY"
          ],
          "type": "string",
          "xml": {
            "name": "UMMemberAuthorizationSortField",
            "namespace": "http://www.casenet.com/UMMemberAuthorizationSortField"
          }
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberAuthorizationSearchCriteria",
        "namespace": "http://www.casenet.com/MemberAuthorizationSearchCriteria"
      }
    },
    "MemberAuthorizationSearchResults": {
      "properties": {
        "authorizations": {
          "items": {
            "$ref": "#/definitions/SummaryAuthorization"
          },
          "type": "array",
          "uniqueItems": true
        },
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberAuthorizationSearchResults",
        "namespace": "http://www.casenet.com/MemberAuthorizationSearchResults"
      }
    },
    "MemberBatchRequest": {
      "properties": {
        "maxAssessments": {
          "format": "int32",
          "maximum": 3,
          "minimum": 0,
          "type": "integer"
        },
        "maxAuthorizations": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "maxMedications": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "maxNotes": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "MemberCenteredPlan": {
      "properties": {
        "description": {
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "hasConfidentialNotes": {
          "type": "boolean"
        },
        "mcpId": {
          "type": "string"
        },
        "ownerTeam": {
          "$ref": "#/definitions/TeamInfo"
        },
        "ownerUser": {
          "$ref": "#/definitions/User"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "state": {
          "enum": [
            "DRAFT",
            "OPEN",
            "CLOSED",
            "VOID"
          ],
          "type": "string"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MemberConstraints": {
      "properties": {
        "memberContextDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "memberId": {
          "$ref": "#/definitions/MemberId"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberConstraints",
        "namespace": "http://www.casenet.com/MemberConstraints"
      }
    },
    "MemberContactAddressConfiguration": {
      "properties": {
        "addressTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "addressTypeRequired": {
          "type": "boolean"
        },
        "defaultAddressTypeOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberContactAddressConfiguration",
        "namespace": "http://www.casenet.com/MemberContactAddressConfiguration"
      }
    },
    "MemberContactEmailConfiguration": {
      "properties": {
        "defaultEmailTypeOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "emailTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "emailTypeRequired": {
          "type": "boolean"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberContactEmailConfiguration",
        "namespace": "http://www.casenet.com/MemberContactEmailConfiguration"
      }
    },
    "MemberContactEmailConfiguration2": {
      "properties": {
        "emailTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "emailTypeRequired": {
          "type": "boolean"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "PortableConfiguration",
        "namespace": "http://www.casenet.com/PortableConfiguration"
      }
    },
    "MemberContactInformation": {
      "properties": {
        "contactAddresses": {
          "items": {
            "$ref": "#/definitions/ContactAddress"
          },
          "type": "array",
          "uniqueItems": true
        },
        "contactEmails": {
          "items": {
            "$ref": "#/definitions/ContactEmail"
          },
          "type": "array",
          "uniqueItems": true
        },
        "contactPhoneNumbers": {
          "items": {
            "$ref": "#/definitions/ContactPhoneNumber"
          },
          "type": "array",
          "uniqueItems": true
        },
        "id": {
          "type": "string"
        },
        "optOut": {
          "type": "boolean"
        },
        "privacyAddresses": {
          "items": {
            "$ref": "#/definitions/MemberPrivacyAddress"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberContactInformation",
        "namespace": "http://www.casenet.com/MemberContactInformation"
      }
    },
    "MemberContactPhoneNumberConfiguration": {
      "properties": {
        "defaultPhoneNumberTypeOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "phoneNumberTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "phoneNumberTypeRequired": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberContactPhoneNumberConfiguration",
        "namespace": "http://www.casenet.com/MemberContactPhoneNumberConfiguration"
      }
    },
    "MemberContactTimes": {
      "properties": {
        "availabilities": {
          "items": {
            "$ref": "#/definitions/Availability"
          },
          "type": "array",
          "uniqueItems": true
        },
        "id": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberContactTimes",
        "namespace": "http://www.casenet.com/MemberContactTimes"
      }
    },
    "MemberDashboardConfiguration": {
      "properties": {
        "enabledPods": {
          "items": {
            "$ref": "#/definitions/MemberPod"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "MemberDetails": {
      "properties": {
        "bhpNodeFeedIdFullPath": {
          "type": "string"
        },
        "bhpNodeId": {
          "type": "string"
        },
        "bhpNodeNameFullPath": {
          "type": "string"
        },
        "dateOfBirth": {
          "$ref": "#/definitions/LocalDate"
        },
        "dateOfDeath": {
          "$ref": "#/definitions/LocalDate"
        },
        "employer": {
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "externalMemberId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "gender": {
          "$ref": "#/definitions/OptionValue"
        },
        "groupNumber": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "maritalStatus": {
          "$ref": "#/definitions/OptionValue"
        },
        "medicaidId": {
          "type": "string"
        },
        "medicareId": {
          "type": "string"
        },
        "memberHasDisabilityAuthorization": {
          "type": "boolean"
        },
        "memberHasDispute": {
          "type": "boolean"
        },
        "memberHasOptOut": {
          "type": "boolean"
        },
        "memberHasOptOutReasons": {
          "type": "boolean"
        },
        "memberHasPersonalRepresentative": {
          "type": "boolean"
        },
        "memberHasPrivacyAddress": {
          "type": "boolean"
        },
        "memberHasRestrictionOfPhi": {
          "type": "boolean"
        },
        "middleName": {
          "type": "string"
        },
        "mrn": {
          "type": "string"
        },
        "pcpDefined": {
          "type": "boolean"
        },
        "pcpEmail": {
          "type": "string"
        },
        "pcpFax": {
          "$ref": "#/definitions/PhoneNumberObject"
        },
        "pcpName": {
          "type": "string"
        },
        "pcpPhone": {
          "$ref": "#/definitions/PhoneNumberObject"
        },
        "pcpProviderExternalId": {
          "type": "string"
        },
        "pcpProviderId": {
          "type": "string"
        },
        "pcpProviderNumber": {
          "type": "string"
        },
        "personId": {
          "type": "string"
        },
        "ssn": {
          "type": "string"
        },
        "timeZoneId": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberDetails",
        "namespace": "http://www.casenet.com/MemberDetails"
      }
    },
    "MemberDetailsConfiguration": {
      "properties": {
        "extendedFields": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberDetailsConfiguration",
        "namespace": "http://www.casenet.com/MemberDetailsConfiguration"
      }
    },
    "MemberDetailsLite": {
      "properties": {
        "bhpNodeFeedIdFullPath": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "timeZoneId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MemberDetailsRequest": {
      "properties": {
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberDetailsRequest",
        "namespace": "http://www.casenet.com/MemberDetailsRequest"
      }
    },
    "MemberFeatureServiceItem": {
      "properties": {
        "customerFeature": {
          "$ref": "#/definitions/CustomerFeature"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "externalFeatureServiceDefinitionId": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "specialInstructionsExist": {
          "type": "boolean"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "ACTIVE",
            "FUTURE",
            "HISTORICAL",
            "DISABLED",
            "EXPIRED"
          ],
          "type": "string",
          "xml": {
            "name": "ItemStatus",
            "namespace": "http://www.casenet.com/ItemStatus"
          }
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "externalFeatureServiceDefinitionId",
        "name",
        "specialInstructionsExist",
        "status"
      ],
      "type": "object",
      "xml": {
        "name": "MemberFeatureServiceItem",
        "namespace": "http://www.casenet.com/MemberFeatureServiceItem"
      }
    },
    "MemberFilterGroup": {
      "properties": {
        "bhpNodes": {
          "items": {
            "$ref": "#/definitions/BhpNode"
          },
          "type": "array"
        },
        "bhpNodesToLeaves": {
          "items": {
            "$ref": "#/definitions/BhpNode"
          },
          "type": "array",
          "uniqueItems": true
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "MemberFilterGroupSearchCriteria": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "memberFilterGroupName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/MemberFilterGroupSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "MemberFilterGroupSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/MemberGroupInfoResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "MemberFilterGroupSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "MEMBER_FILTER_GROUP_NAME",
            "MEMBER_FILTER_GROUP_DESCRIPTION"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "MemberGeneralInformation": {
      "properties": {
        "citizenshipStatus": {
          "$ref": "#/definitions/OptionValue"
        },
        "citizenshipStatusOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "ethnicity": {
          "$ref": "#/definitions/OptionValue"
        },
        "ethnicityOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "lockedInPharmacy": {
          "$ref": "#/definitions/Pharmacy"
        },
        "lockedInStatus": {
          "type": "boolean"
        },
        "lowIncomeSubsidy": {
          "$ref": "#/definitions/LowIncomeSubsidy"
        },
        "primaryLanguage": {
          "$ref": "#/definitions/OptionValue"
        },
        "primaryLanguageOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "race": {
          "$ref": "#/definitions/OptionValue"
        },
        "raceOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "religion": {
          "$ref": "#/definitions/OptionValue"
        },
        "religionOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "secondaryLanguage": {
          "$ref": "#/definitions/OptionValue"
        },
        "secondaryLanguageOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "specialNeeds": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "specialNeedsOther": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "writtenLanguage": {
          "$ref": "#/definitions/OptionValue"
        },
        "writtenLanguageOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberGeneralInformation",
        "namespace": "http://www.casenet.com/MemberGeneralInformation"
      }
    },
    "MemberGeneralInformationConfiguration": {
      "properties": {
        "citizenshipStatusOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "citizenshipStatusRequired": {
          "type": "boolean"
        },
        "ethnicityOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "ethnicityRequired": {
          "type": "boolean"
        },
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "primaryLanguageOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "primaryLanguageRequired": {
          "type": "boolean"
        },
        "raceOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "raceRequired": {
          "type": "boolean"
        },
        "religionOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "religionRequired": {
          "type": "boolean"
        },
        "secondaryLanguageOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "secondaryLanguageRequired": {
          "type": "boolean"
        },
        "specialNeedsOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "stateOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "writtenLanguageOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "writtenLanguageRequired": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberGeneralInformationConfiguration",
        "namespace": "http://www.casenet.com/MemberGeneralInformationConfiguration"
      }
    },
    "MemberGroupInfoResult": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MemberHeader": {
      "properties": {
        "age": {
          "$ref": "#/definitions/Age"
        },
        "allergyList": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "bhpNodeFeedIdFullPath": {
          "type": "string"
        },
        "bhpNodeId": {
          "type": "string"
        },
        "bhpPath": {
          "type": "string"
        },
        "configurableBhpFieldSetup": {
          "$ref": "#/definitions/ConfigurableBhpFieldSetup"
        },
        "dateOfBirth": {
          "$ref": "#/definitions/LocalDate"
        },
        "dateOfDeath": {
          "$ref": "#/definitions/LocalDate"
        },
        "dateTakenOffline": {
          "format": "date-time",
          "type": "string"
        },
        "eligibilityEffectiveDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "eligibilityTerminationDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "employer": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "hasAllergy": {
          "type": "boolean"
        },
        "hasOpenCases": {
          "type": "boolean"
        },
        "hcsEnrolled": {
          "type": "boolean"
        },
        "isLockedIn": {
          "type": "string"
        },
        "isManuallyAdded": {
          "type": "string"
        },
        "isOptOut": {
          "type": "string"
        },
        "lowIncomeSubsidy": {
          "$ref": "#/definitions/LowIncomeSubsidy"
        },
        "maritalStatus": {
          "type": "string"
        },
        "medicaidId": {
          "type": "string"
        },
        "medicareId": {
          "type": "string"
        },
        "memberAttributeValues": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "memberDocumentTypeIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "memberHeaderUDFValues": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "memberId": {
          "type": "string"
        },
        "memberIsEligible": {
          "type": "boolean"
        },
        "memberName": {
          "type": "string"
        },
        "offline": {
          "type": "boolean"
        },
        "pcp": {
          "type": "string"
        },
        "pcpProviderExternalId": {
          "type": "string"
        },
        "pcpProviderId": {
          "type": "string"
        },
        "personId": {
          "type": "string"
        },
        "preferredName": {
          "type": "string"
        },
        "primaryCoach": {
          "$ref": "#/definitions/User"
        },
        "primaryLanguage": {
          "type": "string"
        },
        "userOffline": {
          "type": "string"
        },
        "writtenLanguage": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberHeader",
        "namespace": "http://www.casenet.com/MemberHeader"
      }
    },
    "MemberHeaderConfiguration": {
      "properties": {
        "memberHeaderConfigs": {
          "additionalProperties": {
            "$ref": "#/definitions/HeaderFieldList"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberHeaderConfiguration",
        "namespace": "http://www.casenet.com/MemberHeaderConfiguration"
      }
    },
    "MemberId": {
      "properties": {
        "id": {
          "type": "string"
        },
        "memberIdType": {
          "enum": [
            "INTERNAL",
            "EXTERNAL"
          ],
          "type": "string",
          "xml": {
            "name": "MemberIdType",
            "namespace": "http://www.casenet.com/MemberIdType"
          }
        }
      },
      "required": [
        "id",
        "memberIdType"
      ],
      "type": "object",
      "xml": {
        "name": "MemberId",
        "namespace": "http://www.casenet.com/MemberId"
      }
    },
    "MemberList": {
      "properties": {
        "members": {
          "items": {
            "$ref": "#/definitions/MemberListItem"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberList",
        "namespace": "http://www.casenet.com/MemberList"
      }
    },
    "MemberListItem": {
      "properties": {
        "age": {
          "type": "string"
        },
        "ageObject": {
          "$ref": "#/definitions/Age"
        },
        "birthDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "dateOffline": {
          "format": "date-time",
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "externalMemberId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "firstOpen": {
          "format": "date-time",
          "type": "string"
        },
        "gender": {
          "$ref": "#/definitions/OptionValue"
        },
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "lastOpen": {
          "format": "date-time",
          "type": "string"
        },
        "memberAccessible": {
          "type": "boolean"
        },
        "middleName": {
          "type": "string"
        },
        "mpi": {
          "type": "string"
        },
        "offline": {
          "type": "boolean"
        },
        "starred": {
          "type": "boolean"
        },
        "userOffline": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberListItem",
        "namespace": "http://www.casenet.com/MemberListItem"
      }
    },
    "MemberListRequest": {
      "properties": {
        "memberIds": {
          "items": {
            "$ref": "#/definitions/MemberId"
          },
          "type": "array",
          "uniqueItems": true
        },
        "operation": {
          "enum": [
            "ADD",
            "REMOVE"
          ],
          "type": "string",
          "xml": {
            "name": "MemberListOperation",
            "namespace": "http://www.casenet.com/MemberListOperation"
          }
        }
      },
      "required": [
        "memberIds"
      ],
      "type": "object",
      "xml": {
        "name": "MemberListRequest",
        "namespace": "http://www.casenet.com/MemberListRequest"
      }
    },
    "MemberListSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/MemberListItem"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "MemberLite": {
      "properties": {
        "externalMemberId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "memberFullName": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberLite",
        "namespace": "http://www.casenet.com/MemberLite"
      }
    },
    "MemberLiteList": {
      "properties": {
        "members": {
          "items": {
            "$ref": "#/definitions/MemberLite"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberList",
        "namespace": "http://www.casenet.com/MemberLiteList"
      }
    },
    "MemberLocation": {
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "addressVerifiedBy": {
          "type": "string"
        },
        "addressVerifiedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "comments": {
          "type": "string"
        },
        "contactName": {
          "type": "string"
        },
        "email": {
          "$ref": "#/definitions/Email"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "fax": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "id": {
          "type": "string"
        },
        "informationSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "informationSourceOther": {
          "type": "string"
        },
        "levelOfCare": {
          "$ref": "#/definitions/OptionValue"
        },
        "levelOfCareOther": {
          "type": "string"
        },
        "locationName": {
          "type": "string"
        },
        "locationType": {
          "enum": [
            "FACILITY",
            "MEMBER_CONTACT",
            "OTHER"
          ],
          "type": "string"
        },
        "locationTypeOther": {
          "type": "string"
        },
        "memberAtLocationConfirmed": {
          "type": "boolean"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "providerLocationInfo": {
          "$ref": "#/definitions/ProviderLocationInfo"
        },
        "reportedBy": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "Active",
            "Closed",
            "Historical",
            "Scheduled",
            "Voided"
          ],
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtensibleObject",
        "namespace": "http://www.casenet.com/ExtensibleObject"
      }
    },
    "MemberLocationDateRange": {
      "properties": {
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "locationName": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object"
    },
    "MemberLocationSearchCriteria": {
      "properties": {
        "dateOfInterest": {
          "$ref": "#/definitions/LocalDate"
        },
        "dateRangeFrom": {
          "$ref": "#/definitions/LocalDate"
        },
        "dateRangeTo": {
          "$ref": "#/definitions/LocalDate"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "includeVoided": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "searchManuallyTriggered": {
          "type": "boolean"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/MemberLocationSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "MemberLocationSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/MemberLocationSummary"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "MemberLocationSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "LOCATION_NAME",
            "START_DATE",
            "END_DATE",
            "STATUS",
            "MEMBER_AT_LOCATION_CONFIRMED",
            "ADDRESS_VERIFIED_DATE"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "MemberLocationSummary": {
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "addressVerifiedBy": {
          "type": "string"
        },
        "addressVerifiedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "email": {
          "$ref": "#/definitions/Email"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "fax": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "id": {
          "type": "string"
        },
        "locationName": {
          "type": "string"
        },
        "memberAtLocationConfirmed": {
          "type": "boolean"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "Active",
            "Closed",
            "Historical",
            "Scheduled",
            "Voided"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "MemberLocationVerificationRequest": {
      "properties": {
        "verifiedByUser": {
          "type": "string"
        },
        "verifiedDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "required": [
        "verifiedByUser"
      ],
      "type": "object"
    },
    "MemberMedicationAlert": {
      "properties": {
        "interactionList": {
          "items": {
            "$ref": "#/definitions/MemberMedicationInteraction"
          },
          "type": "array"
        },
        "medicationKey": {
          "type": "string"
        },
        "netSeverity": {
          "enum": [
            "MODERATE",
            "MAJOR"
          ],
          "type": "string"
        }
      },
      "required": [
        "medicationKey"
      ],
      "type": "object"
    },
    "MemberMedicationInteraction": {
      "properties": {
        "description": {
          "type": "string"
        },
        "monographId": {
          "type": "string"
        },
        "monographType": {
          "enum": [
            "DRUG",
            "FOOD",
            "ALLERGEN"
          ],
          "type": "string"
        },
        "severity": {
          "enum": [
            "MODERATE",
            "MAJOR"
          ],
          "type": "string"
        },
        "summary": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MemberMpi": {
      "properties": {
        "bhpNodeId": {
          "type": "string"
        },
        "bhpPath": {
          "type": "string"
        },
        "externalMemberId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "memberMPI": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "visible": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberMpi",
        "namespace": "http://www.casenet.com/MemberMpi"
      }
    },
    "MemberNoteRequest": {
      "properties": {
        "documentId": {
          "type": "string"
        },
        "encounterDate": {
          "format": "date-time",
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "noteDefinitionVisibleId": {
          "type": "string"
        },
        "noteLinkRequest": {
          "$ref": "#/definitions/NoteLinkRequest"
        },
        "noteText": {
          "maxLength": 1000000,
          "minLength": 0,
          "type": "string"
        },
        "offlineCreatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "noteDefinitionVisibleId"
      ],
      "type": "object",
      "xml": {
        "name": "MemberNoteRequest",
        "namespace": "http://www.casenet.com/MemberNoteRequest"
      }
    },
    "MemberNotesAssociation": {
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberNotesAssociation",
        "namespace": "http://www.casenet.com/MemberNotesAssociation"
      }
    },
    "MemberOptOutRequest": {
      "properties": {
        "contactOptOut": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberOptOutRequest",
        "namespace": "http://www.casenet.com/MemberOptOutRequest"
      }
    },
    "MemberPcp": {
      "properties": {
        "id": {
          "type": "string"
        },
        "preferredProviderAddress": {
          "$ref": "#/definitions/ProviderLocationAddress"
        },
        "preferredProviderEmail": {
          "$ref": "#/definitions/ProviderEmail"
        },
        "preferredProviderFax": {
          "$ref": "#/definitions/ProviderPhoneNumber"
        },
        "preferredProviderPhone": {
          "$ref": "#/definitions/ProviderPhoneNumber"
        },
        "providerAddresses": {
          "items": {
            "$ref": "#/definitions/ProviderLocationAddress"
          },
          "type": "array",
          "uniqueItems": true
        },
        "providerEmails": {
          "items": {
            "$ref": "#/definitions/ProviderEmail"
          },
          "type": "array",
          "uniqueItems": true
        },
        "providerExternalId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "providerNumber": {
          "type": "string"
        },
        "providerPhones": {
          "items": {
            "$ref": "#/definitions/ProviderPhoneNumber"
          },
          "type": "array",
          "uniqueItems": true
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "MemberPhoneRequest": {
      "properties": {
        "contactPhoneNumberId": {
          "type": "string"
        },
        "memberId": {
          "$ref": "#/definitions/MemberId"
        }
      },
      "required": [
        "contactPhoneNumberId"
      ],
      "type": "object"
    },
    "MemberPod": {
      "properties": {
        "index": {
          "format": "int32",
          "type": "integer"
        },
        "podSize": {
          "enum": [
            "FULL_WIDTH",
            "HALF_WIDTH"
          ],
          "type": "string"
        },
        "podType": {
          "enum": [
            "BANNER",
            "DEMOGRAPHICS",
            "ELIGIBILITY",
            "DIAGNOSIS",
            "ALERTS",
            "ALLERGIES",
            "PROGRAMS",
            "KEY_METRICS",
            "AUTHORIZATIONS",
            "REFERRALS",
            "MEDICATIONS",
            "CARE_OPPORTUNITIES",
            "TIMELINE"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "MemberPrivacyAddress": {
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberPrivacyAddress",
        "namespace": "http://www.casenet.com/MemberPrivacyAddress"
      }
    },
    "MemberPrivacyInformation": {
      "properties": {
        "alertRecords": {
          "items": {
            "$ref": "#/definitions/MemberAlertRecord"
          },
          "type": "array",
          "uniqueItems": true
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "optOutPreferences": {
          "items": {
            "$ref": "#/definitions/OptOutPreference"
          },
          "type": "array",
          "uniqueItems": true
        },
        "personalRepresentative": {
          "$ref": "#/definitions/PersonalRepresentative"
        },
        "privacyAddresses": {
          "items": {
            "$ref": "#/definitions/MemberPrivacyAddress"
          },
          "type": "array",
          "uniqueItems": true
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "vettingQuestions": {
          "items": {
            "$ref": "#/definitions/VettingQuestion"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberPrivacyInformation",
        "namespace": "http://www.casenet.com/MemberPrivacyInformation"
      }
    },
    "MemberProductFeatureItem": {
      "properties": {
        "customerFeatures": {
          "items": {
            "$ref": "#/definitions/CustomerFeature"
          },
          "type": "array",
          "uniqueItems": true
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "externalProductFeatureDefinitionId": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "memberFeatureServiceItems": {
          "items": {
            "$ref": "#/definitions/MemberFeatureServiceItem"
          },
          "type": "array"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "sourceCategory": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "specialInstructionsExist": {
          "type": "boolean"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "ACTIVE",
            "FUTURE",
            "HISTORICAL",
            "DISABLED",
            "EXPIRED"
          ],
          "type": "string",
          "xml": {
            "name": "ItemStatus",
            "namespace": "http://www.casenet.com/ItemStatus"
          }
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "customerFeatures",
        "externalProductFeatureDefinitionId",
        "name",
        "sourceCategory",
        "specialInstructionsExist",
        "status"
      ],
      "type": "object",
      "xml": {
        "name": "MemberProductFeatureItem",
        "namespace": "http://www.casenet.com/MemberProductFeatureItem"
      }
    },
    "MemberProductFeatureSearchCriteria": {
      "properties": {
        "casenetFeatures": {
          "items": {
            "enum": [
              "CM",
              "DM",
              "UM",
              "TRUMOBILE",
              "MEMBER_PORTAL",
              "EMPLOYER_PORTAL",
              "PROVIDER_PORTAL",
              "REPORTING",
              "ANALYTICS",
              "WELLNESS",
              "HCS",
              "GENERIC",
              "AAG",
              "MEDICATION_MANAGEMENT",
              "TCI_CARE_MANAGEMENT",
              "TCI_CARE_MANAGEMENT_BI_MODELING",
              "TCI_TIME_TRACKING",
              "TCI_TIME_TRACKING_BI_MODELING",
              "TCI_UTILIZATION_MANAGEMENT",
              "TCI_UTILIZATION_MANAGEMENT_BI_MODELING"
            ],
            "type": "string",
            "xml": {
              "name": "CasenetFeature",
              "namespace": "http://www.casenet.com/CasenetFeature"
            }
          },
          "type": "array",
          "uniqueItems": true
        },
        "dateOfInterest": {
          "$ref": "#/definitions/LocalDate"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "externalProductFeatureDefinitionId": {
          "type": "string"
        },
        "sortField": {
          "enum": [
            "START_DATE",
            "END_DATE",
            "SOURCE_CATEGORY",
            "CASENET_FEATURES",
            "EXTERNAL_PRODUCT_FEATURE_DEFINITION_ID"
          ],
          "type": "string",
          "xml": {
            "name": "MemberProductFeatureSortField",
            "namespace": "http://www.casenet.com/MemberProductFeatureSortField"
          }
        },
        "sourceCategory": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberProductFeatureSearchCriteria",
        "namespace": "http://www.casenet.com/MemberProductFeatureSearchCriteria"
      }
    },
    "MemberSearchConfiguration": {
      "properties": {
        "configuredColumns": {
          "items": {
            "$ref": "#/definitions/MemberSearchConfiguredColumn"
          },
          "type": "array"
        },
        "countries": {
          "items": {
            "$ref": "#/definitions/Country"
          },
          "type": "array",
          "uniqueItems": true
        },
        "defaultCountryId": {
          "type": "string"
        },
        "displayedColumns": {
          "items": {
            "$ref": "#/definitions/MemberSearchDisplayedColumn"
          },
          "type": "array"
        },
        "eligibilityExtendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "eligibilityExtendedSearchFieldsConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedSearchFieldConfig"
          },
          "type": "array"
        },
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "includeStateAndZip": {
          "type": "boolean"
        },
        "memberExtendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "memberExtendedSearchFieldsConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedSearchFieldConfig"
          },
          "type": "array"
        },
        "memberRequiresBhpNode": {
          "type": "boolean"
        },
        "memberSsnMaskingType": {
          "enum": [
            "NONE",
            "ALL",
            "SHOW_LAST_FOUR_DIGITS"
          ],
          "type": "string",
          "xml": {
            "name": "MemberSsnMaskingType",
            "namespace": "http://www.casenet.com/MemberSsnMaskingType"
          }
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberSearchConfiguration",
        "namespace": "http://www.casenet.com/MemberSearchConfiguration"
      }
    },
    "MemberSearchConfiguredColumn": {
      "properties": {
        "columnName": {
          "enum": [
            "LAST_NAME",
            "FIRST_NAME",
            "MIDDLE_NAME",
            "DATE_OF_BIRTH",
            "GENDER",
            "EXTERNAL_MEMBER_ID",
            "MPI",
            "SSN",
            "MEDICARE_ID",
            "MEDICAID_ID",
            "ELIGIBILITY_GROUP",
            "MEMBER_GROUP",
            "POLICY_NUMBER",
            "PRODUCT",
            "MEMBER_BHP",
            "ELIGIBILITY_DATES"
          ],
          "type": "string",
          "xml": {
            "name": "MemberSearchColumnName",
            "namespace": "http://www.casenet.com/MemberSearchColumnName"
          }
        },
        "displayWithNoAccess": {
          "type": "boolean"
        },
        "obsolete": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberSearchConfiguredColumn",
        "namespace": "http://www.casenet.com/MemberSearchConfiguredColumn"
      }
    },
    "MemberSearchCriteria": {
      "properties": {
        "addressSearchCriteria": {
          "$ref": "#/definitions/AddressSearchCriteria"
        },
        "city": {
          "type": "string"
        },
        "cityString": {
          "type": "string"
        },
        "dob": {
          "$ref": "#/definitions/LocalDate"
        },
        "externalMemberId": {
          "$ref": "#/definitions/StringCriteria"
        },
        "firstName": {
          "type": "string"
        },
        "firstNameString": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "lastName": {
          "type": "string"
        },
        "lastNameString": {
          "type": "string"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "medicaidNumber": {
          "$ref": "#/definitions/StringCriteria"
        },
        "medicareNumber": {
          "$ref": "#/definitions/StringCriteria"
        },
        "memberAdvancedSearchCriteria": {
          "$ref": "#/definitions/MemberAdvancedSearchCriteria"
        },
        "middleName": {
          "type": "string"
        },
        "middleNameString": {
          "type": "string"
        },
        "mpi": {
          "type": "string"
        },
        "mpiString": {
          "type": "string"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/MemberSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberSearchCriteria",
        "namespace": "http://www.casenet.com/MemberSearchCriteria"
      }
    },
    "MemberSearchCriteriaV2": {
      "properties": {
        "addressSearchCriteria": {
          "$ref": "#/definitions/AddressSearchCriteria"
        },
        "city": {
          "$ref": "#/definitions/StringCriteria"
        },
        "cityString": {
          "type": "string"
        },
        "dob": {
          "$ref": "#/definitions/LocalDate"
        },
        "externalMemberId": {
          "$ref": "#/definitions/StringCriteria"
        },
        "firstName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "firstNameString": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "lastName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "lastNameString": {
          "type": "string"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "medicaidNumber": {
          "$ref": "#/definitions/StringCriteria"
        },
        "medicareNumber": {
          "$ref": "#/definitions/StringCriteria"
        },
        "memberAdvancedSearchCriteria": {
          "$ref": "#/definitions/MemberAdvancedSearchCriteria"
        },
        "middleName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "middleNameString": {
          "type": "string"
        },
        "mpi": {
          "$ref": "#/definitions/StringCriteria"
        },
        "mpiString": {
          "type": "string"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/MemberSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "MemberSearchDisplayedColumn": {
      "properties": {
        "columnName": {
          "enum": [
            "LAST_NAME",
            "FIRST_NAME",
            "MIDDLE_NAME",
            "DATE_OF_BIRTH",
            "GENDER",
            "EXTERNAL_MEMBER_ID",
            "MPI",
            "SSN",
            "MEDICARE_ID",
            "MEDICAID_ID",
            "ELIGIBILITY_GROUP",
            "MEMBER_GROUP",
            "POLICY_NUMBER",
            "PRODUCT",
            "MEMBER_BHP",
            "ELIGIBILITY_DATES"
          ],
          "type": "string",
          "xml": {
            "name": "MemberSearchColumnName",
            "namespace": "http://www.casenet.com/MemberSearchColumnName"
          }
        },
        "displayWithNoAccess": {
          "type": "boolean"
        },
        "indexPosition": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberSearchDisplayedColumn",
        "namespace": "http://www.casenet.com/MemberSearchDisplayedColumn"
      }
    },
    "MemberSearchResult": {
      "properties": {
        "authorizationNum": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "dateOfBirth": {
          "$ref": "#/definitions/LocalDate"
        },
        "dateOfDeath": {
          "$ref": "#/definitions/LocalDate"
        },
        "eligibilityEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "eligibilityGroupNumber": {
          "type": "string"
        },
        "eligibilityStartDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "employer": {
          "type": "string"
        },
        "externalMemberId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "gender": {
          "$ref": "#/definitions/OptionValue"
        },
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "medicaidNumber": {
          "type": "string"
        },
        "medicalRecordNumber": {
          "type": "string"
        },
        "medicareNumber": {
          "type": "string"
        },
        "memberBhpPath": {
          "type": "string"
        },
        "memberGroupNumber": {
          "type": "string"
        },
        "memberName": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "mpi": {
          "type": "string"
        },
        "policyNumber": {
          "type": "string"
        },
        "primaryCaseOwner": {
          "type": "string"
        },
        "productName": {
          "type": "string"
        },
        "ssn": {
          "type": "string"
        },
        "userHasBhpAccess": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberSearchResult",
        "namespace": "http://www.casenet.com/MemberSearchResult"
      }
    },
    "MemberSearchResults": {
      "properties": {
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/MemberSearchResult"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberSearchResults",
        "namespace": "http://www.casenet.com/MemberSearchResults"
      }
    },
    "MemberSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "FIRST_NAME",
            "MIDDLE_NAME",
            "LAST_NAME",
            "GENDER",
            "MPI",
            "EXTERNAL_MEMBER_ID",
            "MEDICARE_NUMBER",
            "MEDICAID_NUMBER",
            "DATE_OF_BIRTH",
            "CITY",
            "MRN",
            "GROUP_NUMBER",
            "AUTHORIZATION_NUMBER",
            "CASE_NUMBER",
            "PRIMARY_CASE_OWNER",
            "POLICY_NUMBER",
            "EMPLOYER_NAME",
            "ELIGIBILITY_GROUP_NUMBER",
            "PRODUCT_NAME",
            "SSN",
            "MEMBER_BHP"
          ],
          "type": "string",
          "xml": {
            "name": "MemberSortColumn",
            "namespace": "http://www.casenet.com/MemberSortColumn"
          }
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberSortField",
        "namespace": "http://www.casenet.com/MemberSortField"
      }
    },
    "MemberSummaryAuthorization": {
      "properties": {
        "appealState": {
          "enum": [
            "DRAFT",
            "OPEN",
            "CLOSED",
            "VOID"
          ],
          "type": "string",
          "xml": {
            "name": "AppealState",
            "namespace": "http://www.casenet.com/AppealState"
          }
        },
        "appealed": {
          "type": "boolean"
        },
        "authorizationId": {
          "type": "string"
        },
        "authorizationNum": {
          "type": "string"
        },
        "authorizationType": {
          "enum": [
            "INPATIENT",
            "SP",
            "RX"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationType",
            "namespace": "http://www.casenet.com/UMAuthorizationType"
          }
        },
        "diagnosisType": {
          "enum": [
            "BEHAVIORAL_DSMIV",
            "MEDICAL",
            "BEHAVIORAL_DSM5"
          ],
          "type": "string",
          "xml": {
            "name": "UMDiagnosisType",
            "namespace": "http://www.casenet.com/UMDiagnosisType"
          }
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "multipleServicingPrescribingProviders": {
          "type": "boolean"
        },
        "primaryDiagnosis": {
          "type": "string"
        },
        "requestingProviderName": {
          "type": "string"
        },
        "servicingPrescribingProviderName": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "state": {
          "enum": [
            "OPEN",
            "OPEN_MODIFIED",
            "OPEN_REVISED",
            "CLOSED",
            "VOID",
            "DISCHARGED",
            "DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationState",
            "namespace": "http://www.casenet.com/UMAuthorizationState"
          }
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "UMStatus",
            "namespace": "http://www.casenet.com/UMStatus"
          }
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MemberSummaryAuthorizationSearchResults": {
      "properties": {
        "authorizations": {
          "items": {
            "$ref": "#/definitions/MemberSummaryAuthorization"
          },
          "type": "array",
          "uniqueItems": true
        },
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "MemberSummaryDemographics": {
      "properties": {
        "ageString": {
          "type": "string"
        },
        "bhpNodeText": {
          "type": "string"
        },
        "featuresText": {
          "type": "string"
        },
        "member": {
          "$ref": "#/definitions/Member"
        },
        "pcpText": {
          "type": "string"
        },
        "userDefinedFields": {
          "items": {
            "$ref": "#/definitions/Property"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberSummaryDemographics",
        "namespace": "http://www.casenet.com/MemberSummaryDemographics"
      }
    },
    "MemberSummaryDetails": {
      "properties": {
        "addresses": {
          "items": {
            "$ref": "#/definitions/ContactAddress"
          },
          "type": "array",
          "uniqueItems": true
        },
        "age": {
          "$ref": "#/definitions/Age"
        },
        "bhpNode": {
          "$ref": "#/definitions/BhpNode"
        },
        "citizenshipStatus": {
          "$ref": "#/definitions/OptionValue"
        },
        "citizenshipStatusOther": {
          "type": "string"
        },
        "coverage": {
          "items": {
            "$ref": "#/definitions/Eligibility"
          },
          "type": "array"
        },
        "currentPcp": {
          "$ref": "#/definitions/Pcp"
        },
        "dateOfBirth": {
          "$ref": "#/definitions/LocalDate"
        },
        "dateOfDeath": {
          "$ref": "#/definitions/LocalDate"
        },
        "displayName": {
          "type": "string"
        },
        "emails": {
          "items": {
            "$ref": "#/definitions/ContactEmail"
          },
          "type": "array",
          "uniqueItems": true
        },
        "employer": {
          "type": "string"
        },
        "employmentStatus": {
          "type": "string"
        },
        "ethnicity": {
          "$ref": "#/definitions/OptionValue"
        },
        "ethnicityOther": {
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "externalMemberId": {
          "type": "string"
        },
        "familyMgmtId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "gender": {
          "$ref": "#/definitions/OptionValue"
        },
        "groupNumber": {
          "type": "string"
        },
        "hasAllergy": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "lockedInPharmacy": {
          "$ref": "#/definitions/Pharmacy"
        },
        "lockedInStatus": {
          "type": "boolean"
        },
        "manuallyAdded": {
          "type": "boolean"
        },
        "maritalStatus": {
          "$ref": "#/definitions/OptionValue"
        },
        "medicaidId": {
          "type": "string"
        },
        "medicareId": {
          "type": "string"
        },
        "memberOwnerId": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "mpi": {
          "type": "string"
        },
        "mrn": {
          "type": "string"
        },
        "optOut": {
          "type": "boolean"
        },
        "optOutOther": {
          "type": "string"
        },
        "optOutReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "organizationContacts": {
          "items": {
            "$ref": "#/definitions/OrganizationContact"
          },
          "type": "array"
        },
        "pcpName": {
          "type": "string"
        },
        "pcpProviderExternalId": {
          "type": "string"
        },
        "pcpProviderId": {
          "type": "string"
        },
        "pcps": {
          "items": {
            "$ref": "#/definitions/Pcp"
          },
          "type": "array"
        },
        "personId": {
          "type": "string"
        },
        "personalContacts": {
          "items": {
            "$ref": "#/definitions/PersonalContact"
          },
          "type": "array"
        },
        "phoneNumbers": {
          "items": {
            "$ref": "#/definitions/ContactPhoneNumber"
          },
          "type": "array",
          "uniqueItems": true
        },
        "preferredName": {
          "type": "string"
        },
        "primaryCoach": {
          "$ref": "#/definitions/User"
        },
        "primaryLanguage": {
          "$ref": "#/definitions/OptionValue"
        },
        "primaryLanguageOrPrimaryLanguageOther": {
          "type": "string"
        },
        "primaryLanguageOther": {
          "type": "string"
        },
        "providerContacts": {
          "items": {
            "$ref": "#/definitions/ProviderContact"
          },
          "type": "array"
        },
        "race": {
          "$ref": "#/definitions/OptionValue"
        },
        "raceOther": {
          "type": "string"
        },
        "religion": {
          "$ref": "#/definitions/OptionValue"
        },
        "religionOther": {
          "type": "string"
        },
        "secondaryLanguage": {
          "$ref": "#/definitions/OptionValue"
        },
        "secondaryLanguageOther": {
          "type": "string"
        },
        "specialNeeds": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "specialNeedsOther": {
          "type": "string"
        },
        "ssn": {
          "type": "string"
        },
        "suffix": {
          "type": "string"
        },
        "systemAlert": {
          "type": "string"
        },
        "timeZoneId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "userAlert": {
          "type": "string"
        },
        "userOfflineState": {
          "$ref": "#/definitions/UserOfflineState"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "writtenLanguage": {
          "$ref": "#/definitions/OptionValue"
        },
        "writtenLanguageOrWrittenLanguageOther": {
          "type": "string"
        },
        "writtenLanguageOther": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "Member",
        "namespace": "http://www.casenet.com/Member"
      }
    },
    "MemberSupplement": {
      "properties": {
        "supplementDescription": {
          "type": "string"
        },
        "supplementName": {
          "type": "string"
        },
        "supplementType": {
          "$ref": "#/definitions/OptionValue"
        },
        "supplementTypeOther": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberSupplement",
        "namespace": "http://www.casenet.com/MemberSupplement"
      }
    },
    "MemberTaskDetails": {
      "properties": {
        "assigneeName": {
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "USERS",
            "GROUP_QUEUES",
            "TEAMS"
          ],
          "type": "string",
          "xml": {
            "name": "TaskAssigneeType",
            "namespace": "http://www.casenet.com/TaskAssigneeType"
          }
        },
        "canAddAttempt": {
          "type": "boolean"
        },
        "completedDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "memberDetails": {
          "$ref": "#/definitions/MemberDetailsLite"
        },
        "queueName": {
          "type": "string"
        },
        "reminderDate": {
          "format": "date-time",
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "enum": [
            "OPEN",
            "CLOSED",
            "CANCELLED",
            "OVERDUE",
            "NOT_CREATED"
          ],
          "type": "string",
          "xml": {
            "name": "TaskStatus",
            "namespace": "http://www.casenet.com/TaskStatus"
          }
        },
        "taskActivity": {
          "type": "string"
        },
        "taskId": {
          "format": "int64",
          "type": "integer"
        },
        "taskInstanceLink": {
          "$ref": "#/definitions/TaskInstanceLink"
        },
        "taskLinkArtifactType": {
          "enum": [
            "INPATIENT",
            "SP",
            "RX",
            "CASE",
            "MEDICATION",
            "ASSESSMENT",
            "CARE_PLAN"
          ],
          "type": "string",
          "xml": {
            "name": "TaskLinkArtifactType",
            "namespace": "http://www.casenet.com/TaskLinkArtifactType"
          }
        },
        "taskName": {
          "type": "string"
        },
        "taskPriority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "taskRecurrenceOptions": {
          "$ref": "#/definitions/AbstractTaskRecurrenceOptions"
        },
        "teamName": {
          "type": "string"
        },
        "triggerSource": {
          "$ref": "#/definitions/TaskTriggerSource"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "variablesMap": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "workflowTask": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskDetails",
        "namespace": "http://www.casenet.com/TaskDetails"
      }
    },
    "MemberTaskSearchCriteria": {
      "properties": {
        "cancelledStatus": {
          "type": "boolean"
        },
        "closedStatus": {
          "type": "boolean"
        },
        "dueDateFrom": {
          "format": "date-time",
          "type": "string"
        },
        "dueDateTo": {
          "format": "date-time",
          "type": "string"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "openStatus": {
          "type": "boolean"
        },
        "overdueStatus": {
          "type": "boolean"
        },
        "reminderDateFrom": {
          "format": "date-time",
          "type": "string"
        },
        "reminderDateTo": {
          "format": "date-time",
          "type": "string"
        },
        "reverseChronologicalOrder": {
          "type": "boolean"
        },
        "sortByStartDate": {
          "type": "boolean"
        },
        "startDateFrom": {
          "format": "date-time",
          "type": "string"
        },
        "startDateTo": {
          "format": "date-time",
          "type": "string"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "taskPriority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "teamName": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberTaskSearchCriteria",
        "namespace": "http://www.casenet.com/MemberTaskSearchCriteria"
      }
    },
    "MemberTaskSearchResult": {
      "properties": {
        "activity": {
          "type": "string"
        },
        "actorId": {
          "type": "string"
        },
        "bhpPath": {
          "type": "string"
        },
        "cancelledStatus": {
          "type": "boolean"
        },
        "closeImplication": {
          "type": "string"
        },
        "closedStatus": {
          "type": "boolean"
        },
        "completedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "hasComments": {
          "type": "boolean"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "instanceId": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "openStatus": {
          "type": "boolean"
        },
        "overdueStatus": {
          "type": "boolean"
        },
        "pooledActorsId": {
          "type": "string"
        },
        "priority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "reminderDate": {
          "format": "date-time",
          "type": "string"
        },
        "screenTypeName": {
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "teamName": {
          "type": "string"
        },
        "triggerSource": {
          "$ref": "#/definitions/TaskTriggerSource"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberTaskSearchResult",
        "namespace": "http://www.casenet.com/MemberTaskSearchResult"
      }
    },
    "MemberTaskSearchResults": {
      "properties": {
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tasks": {
          "items": {
            "$ref": "#/definitions/MemberTaskSearchResult"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberTaskSearchResults",
        "namespace": "http://www.casenet.com/MemberTaskSearchResults"
      }
    },
    "MenuConfiguration": {
      "properties": {
        "permittedScreenNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "MenuConfiguration",
        "namespace": "http://www.casenet.com/MenuConfiguration"
      }
    },
    "MergeHistoryEvent": {
      "properties": {
        "externalId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "mergeDate": {
          "format": "date-time",
          "type": "string"
        },
        "mergedBy": {
          "$ref": "#/definitions/User"
        },
        "middleName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MessageBodyWorkers": {
      "type": "object"
    },
    "MessageTriggerBhpSetup": {
      "properties": {
        "associateWithMember": {
          "type": "boolean"
        },
        "boardMessageRecipient": {
          "enum": [
            "CASE_OWNER"
          ],
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "program": {
          "$ref": "#/definitions/Program"
        },
        "triggerType": {
          "enum": [
            "CASE_OWNERSHIP_CHANGE"
          ],
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "urgentMessage": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "MetaOption": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "detail": {
          "type": "string"
        },
        "externalMetaOptionMetadata": {
          "$ref": "#/definitions/ExternalMetaOptionMetadata"
        },
        "id": {
          "type": "string"
        },
        "isMutuallyExclusive": {
          "type": "boolean"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "source": {
          "enum": [
            "MCG",
            "TRUCARE"
          ],
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "MetaOptionGroup": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "metaOptionSet": {
          "items": {
            "$ref": "#/definitions/MetaOption"
          },
          "type": "array",
          "uniqueItems": true
        },
        "obsolete": {
          "type": "boolean"
        },
        "optionGroupName": {
          "type": "string"
        },
        "source": {
          "enum": [
            "MCG",
            "TRUCARE"
          ],
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "MissedCancelledAppointmentInfo": {
      "properties": {
        "eventCancelled": {
          "type": "boolean"
        },
        "memberCancelled": {
          "type": "boolean"
        },
        "missedOrCancelledReasonOption": {
          "$ref": "#/definitions/OptionValue"
        }
      },
      "type": "object",
      "xml": {
        "name": "MissedCancelledAppointmentInfo",
        "namespace": "http://www.casenet.com/MissedCancelledAppointmentInfo"
      }
    },
    "ModifiedProcedureCodeNaturalId": {
      "properties": {
        "modifierCodeNaturalIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "procedureCode": {
          "type": "string"
        },
        "procedureCodeType": {
          "enum": [
            "CPT",
            "ICD9",
            "HCPCS",
            "REVENUE",
            "ICD10",
            "EXTENDED"
          ],
          "type": "string",
          "xml": {
            "name": "ProcedureCodeType",
            "namespace": "http://www.casenet.com/ProcedureCodeType"
          }
        }
      },
      "required": [
        "procedureCode",
        "procedureCodeType"
      ],
      "type": "object",
      "xml": {
        "name": "ModifiedProcedureCodeNaturalId",
        "namespace": "http://www.casenet.com/ModifiedProcedureCodeNaturalId"
      }
    },
    "ModifierCode": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "effectiveDate": {
          "format": "date",
          "type": "string"
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "modifierCode": {
          "type": "string"
        },
        "modifierName": {
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "terminationDate": {
          "format": "date",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Money": {
      "properties": {
        "currency": {
          "enum": [
            "UAE Dirham",
            "Afghani",
            "Lek",
            "Armenian Dram",
            "Netherlands Antillean Guilder",
            "Kwanza",
            "Argentine Peso",
            "Australian Dollar",
            "Aruban Florin",
            "Azerbaijanian Manat",
            "Convertible Mark",
            "Barbados Dollar",
            "Taka",
            "Bulgarian Lev",
            "Bahraini Dinar",
            "Burundi Franc",
            "Bermudian Dollar",
            "Brunei Dollar",
            "Boliviano",
            "Mvdol",
            "Brazilian Real",
            "Bahamian Dollar",
            "Ngultrum",
            "Pula",
            "Belarussian Ruble",
            "Belize Dollar",
            "Canadian Dollar",
            "Congolese Franc",
            "WIR Euro",
            "Swiss Franc",
            "WIR Franc",
            "Unidad de Fomento",
            "Chilean Peso",
            "Yuan Renminbi",
            "Colombian Peso",
            "Unidad de Valor Real",
            "Costa Rican Colon",
            "Peso Convertible",
            "Cuban Peso",
            "Cabo Verde Escudo",
            "Czech Koruna",
            "Djibouti Franc",
            "Danish Krone",
            "Dominican Peso",
            "Algerian Dinar",
            "Egyptian Pound",
            "Nakfa",
            "Ethiopian Birr",
            "Euro",
            "Fiji Dollar",
            "Falkland Islands Pound",
            "Pound Sterling",
            "Lari",
            "Ghana Cedi",
            "Gibraltar Pound",
            "Dalasi",
            "Guinea Franc",
            "Quetzal",
            "Guyana Dollar",
            "Hong Kong Dollar",
            "Lempira",
            "Kuna",
            "Gourde",
            "Forint",
            "Rupiah",
            "New Israeli Sheqel",
            "Indian Rupee",
            "Iraqi Dinar",
            "Iranian Rial",
            "Iceland Krona",
            "Jamaican Dollar",
            "Jordanian Dinar",
            "Yen",
            "Kenyan Shilling",
            "Som",
            "Riel",
            "Comoro Franc",
            "North Korean Won",
            "Won",
            "Kuwaiti Dinar",
            "Cayman Islands Dollar",
            "Tenge",
            "Kip",
            "Lebanese Pound",
            "Sri Lanka Rupee",
            "Liberian Dollar",
            "Loti",
            "Libyan Dinar",
            "Moroccan Dirham",
            "Moldovan Leu",
            "Malagasy Ariary",
            "Denar",
            "Kyat",
            "Tugrik",
            "Pataca",
            "Ouguiya",
            "Mauritius Rupee",
            "Rufiyaa",
            "Kwacha",
            "Mexican Peso",
            "Mexican Unidad de Inversion",
            "Malaysian Ringgit",
            "Mozambique Metical",
            "Namibia Dollar",
            "Naira",
            "Cordoba Oro",
            "Norwegian Krone",
            "Nepalese Rupee",
            "New Zealand Dollar",
            "Rial Omani",
            "Balboa",
            "Nuevo Sol",
            "Kina",
            "Philippine Peso",
            "Pakistan Rupee",
            "Zloty",
            "Guarani",
            "Qatari Rial",
            "Romanian Leu",
            "Serbian Dinar",
            "Russian Ruble",
            "Rwanda Franc",
            "Saudi Riyal",
            "Solomon Islands Dollar",
            "Seychelles Rupee",
            "Sudanese Pound",
            "Swedish Krona",
            "Singapore Dollar",
            "Saint Helena Pound",
            "Leone",
            "Somali Shilling",
            "Surinam Dollar",
            "South Sudanese Pound",
            "Dobra",
            "El Salvador Colon",
            "Syrian Pound",
            "Lilangeni",
            "Baht",
            "Somoni",
            "Turkmenistan New Manat",
            "Tunisian Dinar",
            "Pa’anga",
            "Turkish Lira",
            "Trinidad and Tobago Dollar",
            "New Taiwan Dollar",
            "Tanzanian Shilling",
            "Hryvnia",
            "Uganda Shilling",
            "US Dollar",
            "US Dollar (Next day)",
            "Uruguay Peso en Unidades Indexadas",
            "Peso Uruguayo",
            "Uzbekistan Sum",
            "Bolivar",
            "Dong",
            "Vatu",
            "Tala",
            "CFA Franc BEAC",
            "Silver",
            "Gold",
            "Bond Markets Unit European Composite Unit",
            "Bond Markets Unit European Monetary Unit",
            "Bond Markets Unit European Unit of Account 9",
            "Bond Markets Unit European Unit of Account 17",
            "East Caribbean Dollar",
            "Special Drawing Right",
            "CFA Franc BCEAO",
            "Palladium",
            "CFP Franc",
            "Platinum",
            "Sucre",
            "Codes specifically reserved for testing purposes",
            "ADB Unit of Account",
            "No currency",
            "Yemeni Rial",
            "Rand",
            "Zambian Kwacha",
            "Zimbabwe Dollar"
          ],
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "MonographRequest": {
      "properties": {
        "drugDescription": {
          "maxLength": 250,
          "minLength": 0,
          "type": "string"
        },
        "interactingItemDescription": {
          "maxLength": 250,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object"
    },
    "MultiLineItemDeterminationRequest": {
      "properties": {
        "additionalLineItems": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "claimInformation": {
          "maxLength": 264,
          "minLength": 0,
          "type": "string"
        },
        "concurrentReviewNextTask": {
          "$ref": "#/definitions/ConcurrentReviewActionPathRequest"
        },
        "decision": {
          "$ref": "#/definitions/DecisionRequest"
        },
        "decisions": {
          "items": {
            "$ref": "#/definitions/DecisionRequest"
          },
          "type": "array"
        },
        "explanationOption": {
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "nextTask": {
          "$ref": "#/definitions/ActionPathRequest"
        },
        "selectedLineItem": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "additionalLineItems",
        "explanationOption",
        "selectedLineItem"
      ],
      "type": "object",
      "xml": {
        "name": "MultiLineItemDeterminationRequest",
        "namespace": "http://www.casenet.com/MultiLineItemDeterminationRequest"
      }
    },
    "MultiPart": {
      "properties": {
        "bodyParts": {
          "items": {
            "$ref": "#/definitions/BodyPart"
          },
          "type": "array"
        },
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "headers": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mediaType": {
          "properties": {
            "parameters": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "subtype": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "wildcardSubtype": {
              "type": "boolean"
            },
            "wildcardType": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parameterizedHeaders": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            },
            "type": "array"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "type": "object"
        }
      },
      "type": "object"
    },
    "Network": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "networkLocations": {
          "items": {
            "$ref": "#/definitions/NetworkLocation"
          },
          "type": "array",
          "uniqueItems": true
        },
        "networkNetworkSets": {
          "items": {
            "$ref": "#/definitions/NetworkNetworkSet"
          },
          "type": "array",
          "uniqueItems": true
        },
        "obsolete": {
          "type": "boolean"
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "NetworkId": {
      "properties": {
        "id": {
          "type": "string"
        },
        "networkIdType": {
          "enum": [
            "INTERNAL",
            "EXTERNAL"
          ],
          "type": "string",
          "xml": {
            "name": "NetworkIdType",
            "namespace": "http://www.casenet.com/NetworkIdType"
          }
        }
      },
      "required": [
        "id",
        "networkIdType"
      ],
      "type": "object",
      "xml": {
        "name": "NetworkId",
        "namespace": "http://www.casenet.com/NetworkId"
      }
    },
    "NetworkLocation": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "medicaidParticipant": {
          "type": "boolean"
        },
        "medicareParticipant": {
          "type": "boolean"
        },
        "network": {
          "$ref": "#/definitions/Network"
        },
        "obsolete": {
          "type": "boolean"
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "tricareParticipant": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "NetworkNetworkSet": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "network": {
          "$ref": "#/definitions/Network"
        },
        "networkSet": {
          "$ref": "#/definitions/NetworkSet"
        },
        "obsolete": {
          "type": "boolean"
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "NetworkSet": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "networkNetworkSets": {
          "items": {
            "$ref": "#/definitions/NetworkNetworkSet"
          },
          "type": "array",
          "uniqueItems": true
        },
        "obsolete": {
          "type": "boolean"
        },
        "productNetworkSets": {
          "items": {
            "$ref": "#/definitions/ProductNetworkSet"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "NewNoteResponse": {
      "properties": {
        "associatedArtifactVersion": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "IdentifiableObject",
        "namespace": "http://www.casenet.com/IdentifiableObject"
      }
    },
    "NextTaskAssignee": {
      "type": "object"
    },
    "NextTaskConfigurationResponse": {
      "properties": {
        "defaultTaskType": {
          "type": "string"
        },
        "taskTypes": {
          "items": {
            "$ref": "#/definitions/TaskTypeConfiguration"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "NextTaskConfigurationResponse",
        "namespace": "http://www.casenet.com/NextTaskConfigurationResponse"
      }
    },
    "NextTaskConfigurationResponseV2": {
      "properties": {
        "nextTaskConfigurations": {
          "items": {
            "$ref": "#/definitions/AbstractNextTaskConfiguration"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "NoteComment": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "narrative": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "NoteComment",
        "namespace": "http://www.casenet.com/NoteComment"
      }
    },
    "NoteCommentRequest": {
      "properties": {
        "narrative": {
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "offlineCreatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "narrative"
      ],
      "type": "object",
      "xml": {
        "name": "NoteCommentRequest",
        "namespace": "http://www.casenet.com/NoteCommentRequest"
      }
    },
    "NoteDefinition": {
      "properties": {
        "atttributeDefs": {
          "items": {
            "$ref": "#/definitions/NoteFieldDef"
          },
          "type": "array"
        },
        "bodyRequired": {
          "type": "boolean"
        },
        "childrenWithReadyToExport": {
          "items": {
            "$ref": "#/definitions/Exportable"
          },
          "type": "array"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "definitionEditable": {
          "type": "boolean"
        },
        "definitionVersion": {
          "$ref": "#/definitions/DefinitionVersion"
        },
        "definitionVersionNumber": {
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "exportEntityDetails": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instanceCopyable": {
          "type": "boolean"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "lineage": {
          "$ref": "#/definitions/SimpleLineage"
        },
        "metaStatus": {
          "enum": [
            "IN_PROGRESS",
            "PUBLISHED",
            "HIDDEN"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "noteDefinitionTypes": {
          "items": {
            "enum": [
              "AUTH",
              "APPEAL",
              "ASSESSMENT",
              "ASSESSMENT_SUMMARY",
              "CASE",
              "CAREPLAN",
              "COST_SAVINGS",
              "TRANSITION_PLAN",
              "FOLLOWUP",
              "INDIVIDUAL_SERVICE_PLAN",
              "MCP",
              "MEMBER",
              "MEMBER_DEFINED_OUTCOME",
              "MANUAL_QUALITY_MEASURES",
              "PRESCREEN_DATA_IP",
              "PRESCREEN_DATA_SP",
              "PRESCREEN_DATA_RX",
              "PROBLEM",
              "QUESTION_GROUP",
              "QUALITY_MEASURES",
              "TRANSPORTATION",
              "SERVICE_REQUEST",
              "TASK_ATTEMPT",
              "TEAM_APPROACH",
              "UM_APPEAL",
              "IDENTITY_VERIFICATION",
              "AAG",
              "MEDICATION"
            ],
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "obsolete": {
          "type": "boolean"
        },
        "pastPublishDate": {
          "type": "boolean"
        },
        "publishComment": {
          "type": "string"
        },
        "publishDateToday": {
          "type": "boolean"
        },
        "publishable": {
          "$ref": "#/definitions/Publishable"
        },
        "published": {
          "type": "boolean"
        },
        "readyToExportInfo": {
          "$ref": "#/definitions/ReadyToExportInfo"
        },
        "resource": {
          "$ref": "#/definitions/Resource"
        },
        "resourceVersion": {
          "$ref": "#/definitions/ResourceVersion"
        },
        "targetPublishDate": {
          "format": "date",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "userCreatable": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "visibleId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "NoteDefinitionLite": {
      "properties": {
        "description": {
          "type": "string"
        },
        "displayString": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "visibleId": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "NoteDefinitionLite",
        "namespace": "http://www.casenet.com/NoteDefinitionLite"
      }
    },
    "NoteFieldDef": {
      "properties": {
        "attributeName": {
          "type": "string"
        },
        "attributeType": {
          "enum": [
            "string",
            "number",
            "date",
            "dropdown",
            "bool",
            "enumeration",
            "lookup",
            "phoneNumber",
            "label",
            "radioButton",
            "text"
          ],
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "enumClass": {
          "$ref": "#/definitions/EnumClass"
        },
        "enumClassValid": {
          "type": "boolean"
        },
        "enumValues": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "isMandatory": {
          "type": "boolean"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "lookupAttrType": {
          "enum": [
            "DIAGNOSES",
            "PROCEDURES",
            "MEDICATIONS",
            "PROVIDERS",
            "BHP_NODES",
            "PRODUCTS",
            "PROGRAMS",
            "ASSESSMENT_METAS",
            "LOCATION_CODES",
            "ELIGIBILITIES",
            "LOCATIONS",
            "PRODUCT_FEATURE",
            "FEATURE_SERVICE",
            "TASK_ATTEMPT_BEHAVIOR"
          ],
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "optionValueSet": {
          "$ref": "#/definitions/OptionValueSet"
        },
        "optionValueSetValid": {
          "type": "boolean"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "NoteInstance": {
      "properties": {
        "associatedNoteInstanceIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "attachments": {
          "items": {
            "$ref": "#/definitions/DocumentInfo"
          },
          "type": "array",
          "uniqueItems": true
        },
        "baseNoteInstanceLink": {
          "$ref": "#/definitions/BaseNoteLink"
        },
        "canAddComment": {
          "type": "boolean"
        },
        "comments": {
          "items": {
            "$ref": "#/definitions/NoteComment"
          },
          "type": "array"
        },
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "encounterDate": {
          "format": "date-time",
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "noteDef": {
          "$ref": "#/definitions/NoteDefinition"
        },
        "noteDefType": {
          "enum": [
            "AAG",
            "AUTH",
            "APPEAL",
            "ASSESSMENT",
            "ASSESSMENT_SUMMARY",
            "CASE",
            "CAREPLAN",
            "COST_SAVINGS",
            "TRANSITION_PLAN",
            "FOLLOWUP",
            "INDIVIDUAL_SERVICE_PLAN",
            "MCP",
            "MEMBER",
            "MEMBER_DEFINED_OUTCOME",
            "MANUAL_QUALITY_MEASURES",
            "PROBLEM",
            "QUESTION_GROUP",
            "QUALITY_MEASURES",
            "TRANSPORTATION",
            "SERVICE_REQUEST",
            "TASK_ATTEMPT",
            "TEAM_APPROACH",
            "UM_APPEAL",
            "IDENTITY_VERIFICATION",
            "PRESCREEN_DATA_IP",
            "PRESCREEN_DATA_SP",
            "PRESCREEN_DATA_RX",
            "MEDICATION"
          ],
          "type": "string",
          "xml": {
            "name": "NoteDefinitionTypeEnum",
            "namespace": "http://www.casenet.com/NoteDefinitionTypeEnum"
          }
        },
        "noteText": {
          "type": "string"
        },
        "prescreenNoteGroupId": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "NoteInstance",
        "namespace": "http://www.casenet.com/NoteInstance"
      }
    },
    "NoteLinkRequest": {
      "properties": {
        "associationId": {
          "type": "string"
        },
        "memberNotesAssociationType": {
          "enum": [
            "CASE",
            "AUTH"
          ],
          "type": "string",
          "xml": {
            "name": "MemberNotesAssociationType",
            "namespace": "http://www.casenet.com/MemberNotesAssociationType"
          }
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "NoteLinkRequest",
        "namespace": "http://www.casenet.com/NoteLinkRequest"
      }
    },
    "NoteRequest": {
      "properties": {
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "noteDefinitionVisibleId": {
          "type": "string"
        },
        "noteText": {
          "maxLength": 1000000,
          "minLength": 0,
          "type": "string"
        },
        "offlineCreatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "noteDefinitionVisibleId"
      ],
      "type": "object",
      "xml": {
        "name": "NoteRequest",
        "namespace": "http://www.casenet.com/NoteRequest"
      }
    },
    "NoteRestrictedUsersRequest": {
      "properties": {
        "restrictedUsernames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "NoteSearchCriteria": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "searchParams": {
          "$ref": "#/definitions/NotesSearchParam"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/NoteSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "NoteSearchCriteria",
        "namespace": "http://www.casenet.com/NoteSearchCriteria"
      }
    },
    "NoteSearchResult": {
      "properties": {
        "contactNameLabel": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByUser": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "encounterDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "encounterDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "hasAssociatedNotes": {
          "type": "boolean"
        },
        "hasAttachments": {
          "type": "boolean"
        },
        "hasComments": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "noteDefInstanceCopyable": {
          "type": "boolean"
        },
        "noteDefName": {
          "type": "string"
        },
        "noteDefType": {
          "enum": [
            "AAG",
            "AUTH",
            "APPEAL",
            "ASSESSMENT",
            "ASSESSMENT_SUMMARY",
            "CASE",
            "CAREPLAN",
            "COST_SAVINGS",
            "TRANSITION_PLAN",
            "FOLLOWUP",
            "INDIVIDUAL_SERVICE_PLAN",
            "MCP",
            "MEMBER",
            "MEMBER_DEFINED_OUTCOME",
            "MANUAL_QUALITY_MEASURES",
            "PROBLEM",
            "QUESTION_GROUP",
            "QUALITY_MEASURES",
            "TRANSPORTATION",
            "SERVICE_REQUEST",
            "TASK_ATTEMPT",
            "TEAM_APPROACH",
            "UM_APPEAL",
            "IDENTITY_VERIFICATION",
            "PRESCREEN_DATA_IP",
            "PRESCREEN_DATA_SP",
            "PRESCREEN_DATA_RX",
            "MEDICATION"
          ],
          "type": "string",
          "xml": {
            "name": "NoteDefinitionTypeEnum",
            "namespace": "http://www.casenet.com/NoteDefinitionTypeEnum"
          }
        },
        "noteDefVisibleId": {
          "type": "string"
        },
        "noteDefinitionStatus": {
          "enum": [
            "IN_PROGRESS",
            "PUBLISHED",
            "HIDDEN"
          ],
          "type": "string"
        },
        "noteText": {
          "type": "string"
        },
        "prescreenNoteGroupId": {
          "type": "string"
        },
        "voidInfoExists": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "NoteSearchResult",
        "namespace": "http://www.casenet.com/NoteSearchResult"
      }
    },
    "NoteSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/NoteSearchResult"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "NoteSearchResults",
        "namespace": "http://www.casenet.com/NoteSearchResults"
      }
    },
    "NoteSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "NOTE_DEFINITION_NAME",
            "ENCOUNTER_DATE",
            "CREATED_DATE",
            "CREATED_USER_FIRST_NAME",
            "CREATED_USER_LAST_NAME",
            "STATUS",
            "CONTACT_NAME",
            "NOTE_TEXT"
          ],
          "type": "string",
          "xml": {
            "name": "NoteSortColumn",
            "namespace": "http://www.casenet.com/NoteSortColumn"
          }
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "required": [
        "columnType"
      ],
      "type": "object",
      "xml": {
        "name": "NoteSortField",
        "namespace": "http://www.casenet.com/NoteSortField"
      }
    },
    "NoteSourceArtifactLink": {
      "type": "object"
    },
    "NotesSearchConfiguration": {
      "properties": {
        "authOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "caseOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "contactReasonOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "createdByOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "noteDefOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "NotesSearchConfiguration",
        "namespace": "http://www.casenet.com/NotesSearchConfiguration"
      }
    },
    "NotesSearchParam": {
      "properties": {
        "authId": {
          "type": "string"
        },
        "caseId": {
          "type": "string"
        },
        "caseLabel": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "contactReasonId": {
          "type": "string"
        },
        "contactReasonLabel": {
          "type": "string"
        },
        "createdById": {
          "type": "string"
        },
        "filterOnEncounterDate": {
          "type": "boolean"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "noteDefId": {
          "type": "string"
        },
        "reverseChronologicalOrder": {
          "type": "boolean"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "voidedStatus": {
          "enum": [
            "ACTIVE",
            "VOIDED",
            "ALL"
          ],
          "type": "string",
          "xml": {
            "name": "VoidedStatus",
            "namespace": "http://www.casenet.com/VoidedStatus"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "NotesSearchParam",
        "namespace": "http://www.casenet.com/NotesSearchParam"
      }
    },
    "NotificationLineItem": {
      "properties": {
        "id": {
          "type": "string"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "NotificationLineItem",
        "namespace": "http://www.casenet.com/NotificationLineItem"
      }
    },
    "NotificationMember": {
      "properties": {
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "NotificationMember",
        "namespace": "http://www.casenet.com/NotificationMember"
      }
    },
    "OOPExpense": {
      "properties": {
        "category": {
          "type": "string"
        },
        "coInsurance": {
          "$ref": "#/definitions/Money"
        },
        "deductible": {
          "$ref": "#/definitions/Money"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "maxOOP": {
          "$ref": "#/definitions/Money"
        },
        "usedAsOf": {
          "format": "date-time",
          "type": "string"
        },
        "usedOOP": {
          "$ref": "#/definitions/Money"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtensibleObject",
        "namespace": "http://www.casenet.com/ExtensibleObject"
      }
    },
    "Objective": {
      "properties": {
        "actions": {
          "items": {
            "$ref": "#/definitions/Action"
          },
          "type": "array"
        },
        "category": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "closeDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "closeReason": {
          "type": "string"
        },
        "closeReasonOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "comments": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastUpdated": {
          "format": "date-time",
          "type": "string"
        },
        "longTerm": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "objectiveDefinitionId": {
          "type": "string"
        },
        "objectiveOutcomes": {
          "items": {
            "$ref": "#/definitions/ObjectiveOutcome"
          },
          "type": "array"
        },
        "origin": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        },
        "priorityOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "progress": {
          "format": "int32",
          "type": "integer"
        },
        "readinessToChange": {
          "type": "string"
        },
        "readinessToChangeOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "reason": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "OPEN",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CarePlanElementStatus",
            "namespace": "http://www.casenet.com/CarePlanElementStatus"
          }
        },
        "targetDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "type": {
          "type": "string"
        },
        "typeOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "Objective",
        "namespace": "http://www.casenet.com/Objective"
      }
    },
    "ObjectiveDefinition": {
      "properties": {
        "actionDefinitions": {
          "items": {
            "$ref": "#/definitions/ActionDefinition"
          },
          "type": "array"
        },
        "category": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "custom": {
          "type": "boolean"
        },
        "definitionId": {
          "type": "string"
        },
        "definitionName": {
          "type": "string"
        },
        "definitionVisibleId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "readyToExport": {
          "type": "boolean"
        },
        "source": {
          "enum": [
            "MCG",
            "TRUCARE"
          ],
          "type": "string",
          "xml": {
            "name": "AssessmentSource",
            "namespace": "http://www.casenet.com/AssessmentSource"
          }
        },
        "status": {
          "enum": [
            "IN_PROGRESS",
            "PUBLISHED",
            "HIDDEN"
          ],
          "type": "string"
        },
        "targetPublishDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "type": {
          "$ref": "#/definitions/OptionValue"
        }
      },
      "type": "object"
    },
    "ObjectiveDefinitionSearchCriteria": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "metaStatus": {
          "enum": [
            "IN_PROGRESS",
            "PUBLISHED",
            "HIDDEN"
          ],
          "type": "string"
        },
        "objectiveCategory": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "objectiveDefinitionName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "objectiveDefinitionVisibleId": {
          "$ref": "#/definitions/StringCriteria"
        },
        "objectiveType": {
          "type": "string"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/ObjectiveDefinitionSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "ObjectiveDefinitionSearchResult": {
      "properties": {
        "custom": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "objectiveCategory": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "objectiveDefinitionId": {
          "type": "string"
        },
        "objectiveDefinitionName": {
          "type": "string"
        },
        "objectiveDefinitionVisibleId": {
          "type": "string"
        },
        "objectiveType": {
          "$ref": "#/definitions/OptionValue"
        },
        "source": {
          "enum": [
            "MCG",
            "TRUCARE"
          ],
          "type": "string",
          "xml": {
            "name": "AssessmentSource",
            "namespace": "http://www.casenet.com/AssessmentSource"
          }
        }
      },
      "type": "object"
    },
    "ObjectiveDefinitionSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/ObjectiveDefinitionSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "ObjectiveDefinitionSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "OBJECTIVE_DEFINITION_NAME",
            "OBJECTIVE_DEFINITION_VISIBLE_ID",
            "OBJECTIVE_CATEGORY",
            "CUSTOM"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "ObjectiveOutcome": {
      "properties": {
        "addedOnDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "enum": [
            "PREVENTATIVE_TREATMENT_ORDERED",
            "AVOIDED_UNNECESSARY_MODIFICATION_OF_TREATMENT",
            "DISCONTINUED_INAPPROPRIATE",
            "AVOIDED_DUPLICATE_TREATMENT",
            "TREATMENT_PLAN_ALIGNED",
            "REDUCED_MEDICATIONS",
            "SIMPLIFIED_DOSING_SCHEDULE",
            "ELIMINATED_DUPLICATE_THERAPY",
            "ELIMINATED_ADVERSE_DRUG_REACTIONS",
            "INCORRECT_DOSING_CORRECTED",
            "ELIMINATED_AGE_INAPPROPRIATE_MEDICATIONS",
            "MOVED_TO_ALTERNATE_ENVIRONMENT",
            "INCREASED_SUPERVISION",
            "MAXIMIZED_INDEPENDENT_FUNCTION_CARE",
            "REFERRED_TO_APPROPRIATE_PROVIDER",
            "ENHANCED_COMMUNICATION",
            "PCP_AWARE_OF_PLAN",
            "SIMPLIFIED_TREATMENT_REGIMEN",
            "ESTABLISHED_TEAM_QUARTERBACK",
            "BEHAVIORAL_HEALTH_PROVIDERS_AWARE_OF_PLAN",
            "COORDINATION_WITH_BEHAVIORAL_HEALTH_PROVIDERS",
            "PHYSICAL_HEALTH",
            "SPIRITUAL_BELIEFS",
            "SOCIAL_INCLUSION",
            "SELF_ESTEEM",
            "RELAXATION",
            "IMPROVED_INTERPERSONAL_RELATIONSHIPS",
            "ADEQUATE_SUPPORT",
            "PERSONAL_DEVELOPMENT",
            "SELF_EFFICACY",
            "PAIN_MANAGEMENT",
            "RETURN_TO_WORK",
            "SAFE_HOUSING",
            "ACCESS_TO_COMMUNITY_RESOURCES",
            "ACCESS_TO_FINANCIAL_RESOURCES",
            "ACCESS_TO_SUPPORT_GROUPS",
            "RESPITE_PLAN_FOR_CAREGIVERS",
            "LIFE_PLANNING_ESTABLISHED",
            "AMBULATION",
            "GROOMING",
            "MEAL_PREPARATION",
            "MAXIMIZED_INDEPENDENT_FUNCTION_CAPABILITIES",
            "ADAPTIVE_DEVICES_OBTAINED",
            "INCREASED_KNOWLEDGE",
            "PROBLEM_SOLVING_SKILLS",
            "TREATMENT_PLAN_PARTICIPATION",
            "KNOWLEDGE_OF_PREVENTATIVE_CARE",
            "ABILITY_TO_MANAGE_TREATMENT_REGIME",
            "ABILITY_TO_MANAGE_SELF_CARE_PROCEDURES",
            "NAVIGATION_OF_HEALTH_CARE_SYSTEM",
            "MEDICATION",
            "DIET",
            "MONITORING_CLINICAL_VALUES",
            "ROUTINE_EXAMS",
            "WEIGHT_REDUCTION",
            "ROUTINE_PHYSICAL_ACTIVITY",
            "HEALTHFUL_EATING_PLAN",
            "SMOKING_CESSATION",
            "ALCOHOL_INTAKE_MODERATION",
            "ELIMINATED_INAPPROPRIATE_DRUG_USE",
            "STRESS_REDUCTION",
            "ALCOHOL_ABSTENTION",
            "ILLEGAL_DRUG_ABSTENTION",
            "BP",
            "HBA1C",
            "BLOOD_SUGAR",
            "LIPID_PROFILE",
            "LEAD_LEVEL",
            "PEF",
            "DECREASED_RESCUE_INHALER_USE",
            "SKIN_INTEGRITY",
            "DAYS_OUT_OF_WORK",
            "REDUCTION_OF_BEHAVIORAL_HEALTH_SYMPTOMS",
            "DECREASE_OF_ED_VISITS",
            "REPEAT_HOSPITALIZATIONS_DECREASE_FOR_SAME_DIAGNOSIS",
            "OTHER"
          ],
          "type": "string",
          "xml": {
            "name": "ObjectiveOutcomeDescription",
            "namespace": "http://www.casenet.com/ObjectiveOutcomeDescription"
          }
        },
        "detail": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "enum": [
            "TREATMENT_NEGOTIATED",
            "POLY_PHARMACY_REDUCTION",
            "CARE_LEVEL_CHANGE",
            "INCREASED_COMMUNICATION",
            "QUALITY_OF_LIFE_IMPROVEMENT",
            "SOCIAL_MANAGEMENT",
            "FUNCTIONAL_CAPABILITIES_IMPROVEMENT",
            "INCREASED_SELF_MANAGEMENT",
            "IMPROVED_TREATMENT_ADHERENCE",
            "POSITIVE_LIFESTYLE_CHANGE",
            "CLINICAL_IMPROVEMENT",
            "APPROPRIATE_ED_SERVICES_UTILIZATION",
            "REPEAT_HOSPITALIZATIONS_REDUCTION"
          ],
          "type": "string",
          "xml": {
            "name": "ObjectiveOutcomeType",
            "namespace": "http://www.casenet.com/ObjectiveOutcomeType"
          }
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ObjectiveOutcome",
        "namespace": "http://www.casenet.com/ObjectiveOutcome"
      }
    },
    "ObjectiveOutcomeSummary": {
      "properties": {
        "addedOnDate": {
          "format": "date-time",
          "type": "string"
        },
        "carePlanId": {
          "type": "string"
        },
        "carePlanName": {
          "type": "string"
        },
        "description": {
          "enum": [
            "PREVENTATIVE_TREATMENT_ORDERED",
            "AVOIDED_UNNECESSARY_MODIFICATION_OF_TREATMENT",
            "DISCONTINUED_INAPPROPRIATE",
            "AVOIDED_DUPLICATE_TREATMENT",
            "TREATMENT_PLAN_ALIGNED",
            "REDUCED_MEDICATIONS",
            "SIMPLIFIED_DOSING_SCHEDULE",
            "ELIMINATED_DUPLICATE_THERAPY",
            "ELIMINATED_ADVERSE_DRUG_REACTIONS",
            "INCORRECT_DOSING_CORRECTED",
            "ELIMINATED_AGE_INAPPROPRIATE_MEDICATIONS",
            "MOVED_TO_ALTERNATE_ENVIRONMENT",
            "INCREASED_SUPERVISION",
            "MAXIMIZED_INDEPENDENT_FUNCTION_CARE",
            "REFERRED_TO_APPROPRIATE_PROVIDER",
            "ENHANCED_COMMUNICATION",
            "PCP_AWARE_OF_PLAN",
            "SIMPLIFIED_TREATMENT_REGIMEN",
            "ESTABLISHED_TEAM_QUARTERBACK",
            "BEHAVIORAL_HEALTH_PROVIDERS_AWARE_OF_PLAN",
            "COORDINATION_WITH_BEHAVIORAL_HEALTH_PROVIDERS",
            "PHYSICAL_HEALTH",
            "SPIRITUAL_BELIEFS",
            "SOCIAL_INCLUSION",
            "SELF_ESTEEM",
            "RELAXATION",
            "IMPROVED_INTERPERSONAL_RELATIONSHIPS",
            "ADEQUATE_SUPPORT",
            "PERSONAL_DEVELOPMENT",
            "SELF_EFFICACY",
            "PAIN_MANAGEMENT",
            "RETURN_TO_WORK",
            "SAFE_HOUSING",
            "ACCESS_TO_COMMUNITY_RESOURCES",
            "ACCESS_TO_FINANCIAL_RESOURCES",
            "ACCESS_TO_SUPPORT_GROUPS",
            "RESPITE_PLAN_FOR_CAREGIVERS",
            "LIFE_PLANNING_ESTABLISHED",
            "AMBULATION",
            "GROOMING",
            "MEAL_PREPARATION",
            "MAXIMIZED_INDEPENDENT_FUNCTION_CAPABILITIES",
            "ADAPTIVE_DEVICES_OBTAINED",
            "INCREASED_KNOWLEDGE",
            "PROBLEM_SOLVING_SKILLS",
            "TREATMENT_PLAN_PARTICIPATION",
            "KNOWLEDGE_OF_PREVENTATIVE_CARE",
            "ABILITY_TO_MANAGE_TREATMENT_REGIME",
            "ABILITY_TO_MANAGE_SELF_CARE_PROCEDURES",
            "NAVIGATION_OF_HEALTH_CARE_SYSTEM",
            "MEDICATION",
            "DIET",
            "MONITORING_CLINICAL_VALUES",
            "ROUTINE_EXAMS",
            "WEIGHT_REDUCTION",
            "ROUTINE_PHYSICAL_ACTIVITY",
            "HEALTHFUL_EATING_PLAN",
            "SMOKING_CESSATION",
            "ALCOHOL_INTAKE_MODERATION",
            "ELIMINATED_INAPPROPRIATE_DRUG_USE",
            "STRESS_REDUCTION",
            "ALCOHOL_ABSTENTION",
            "ILLEGAL_DRUG_ABSTENTION",
            "BP",
            "HBA1C",
            "BLOOD_SUGAR",
            "LIPID_PROFILE",
            "LEAD_LEVEL",
            "PEF",
            "DECREASED_RESCUE_INHALER_USE",
            "SKIN_INTEGRITY",
            "DAYS_OUT_OF_WORK",
            "REDUCTION_OF_BEHAVIORAL_HEALTH_SYMPTOMS",
            "DECREASE_OF_ED_VISITS",
            "REPEAT_HOSPITALIZATIONS_DECREASE_FOR_SAME_DIAGNOSIS",
            "OTHER"
          ],
          "type": "string",
          "xml": {
            "name": "ObjectiveOutcomeDescription",
            "namespace": "http://www.casenet.com/ObjectiveOutcomeDescription"
          }
        },
        "detail": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isCustomRelatedCarePlan": {
          "type": "boolean"
        },
        "objectiveId": {
          "type": "string"
        },
        "objectiveName": {
          "type": "string"
        },
        "relatedCarePlanDefinitionId": {
          "type": "string"
        },
        "relatedCarePlanStatus": {
          "enum": [
            "IN_PROGRESS",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CarePlanStatusType",
            "namespace": "http://www.casenet.com/CarePlanStatusType"
          }
        },
        "type": {
          "enum": [
            "TREATMENT_NEGOTIATED",
            "POLY_PHARMACY_REDUCTION",
            "CARE_LEVEL_CHANGE",
            "INCREASED_COMMUNICATION",
            "QUALITY_OF_LIFE_IMPROVEMENT",
            "SOCIAL_MANAGEMENT",
            "FUNCTIONAL_CAPABILITIES_IMPROVEMENT",
            "INCREASED_SELF_MANAGEMENT",
            "IMPROVED_TREATMENT_ADHERENCE",
            "POSITIVE_LIFESTYLE_CHANGE",
            "CLINICAL_IMPROVEMENT",
            "APPROPRIATE_ED_SERVICES_UTILIZATION",
            "REPEAT_HOSPITALIZATIONS_REDUCTION"
          ],
          "type": "string",
          "xml": {
            "name": "ObjectiveOutcomeType",
            "namespace": "http://www.casenet.com/ObjectiveOutcomeType"
          }
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ObjectiveOutcome",
        "namespace": "http://www.casenet.com/ObjectiveOutcome"
      }
    },
    "OfflineMetadata": {
      "properties": {
        "maximumMembersOffline": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "OfflineMetadata",
        "namespace": "http://www.casenet.com/OfflineMetadata"
      }
    },
    "OptOutPreference": {
      "properties": {
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "externalId": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "optOutOther": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "optOutReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "OptOutPreference",
        "namespace": "http://www.casenet.com/OptOutPreference"
      }
    },
    "OptOutPreferenceConfiguration": {
      "properties": {
        "optOutReasonOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "OptOutPreferenceConfiguration",
        "namespace": "http://www.casenet.com/OptOutPreferenceConfiguration"
      }
    },
    "OptionGroupFieldConfig": {
      "properties": {
        "defaultOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "fieldName": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "optionValues": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "required": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "OptionGroupFieldConfig",
        "namespace": "http://www.casenet.com/OptionGroupFieldConfig"
      }
    },
    "OptionValue": {
      "properties": {
        "disabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object",
      "xml": {
        "name": "OptionValue",
        "namespace": "http://www.casenet.com/OptionValue"
      }
    },
    "OptionValueListWrapper": {
      "properties": {
        "optionValues": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "OptionValueSet": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "options": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "optionsWithDisabled": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "valueSetName": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OrganizationContact": {
      "properties": {
        "addresses": {
          "items": {
            "$ref": "#/definitions/ContactAddress"
          },
          "type": "array",
          "uniqueItems": true
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "emails": {
          "items": {
            "$ref": "#/definitions/ContactEmail"
          },
          "type": "array",
          "uniqueItems": true
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "manuallyAdded": {
          "type": "boolean"
        },
        "middleName": {
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "organization": {
          "type": "string"
        },
        "phoneNumbers": {
          "items": {
            "$ref": "#/definitions/ContactPhoneNumber"
          },
          "type": "array",
          "uniqueItems": true
        },
        "preferredContact": {
          "type": "boolean"
        },
        "preferredName": {
          "type": "string"
        },
        "releaseDate": {
          "format": "date",
          "type": "string"
        },
        "releaseInformation": {
          "type": "boolean"
        },
        "releaseMethod": {
          "$ref": "#/definitions/OptionValue"
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OrganizationContactConfiguration": {
      "properties": {
        "addressTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "addressTypeRequired": {
          "type": "boolean"
        },
        "defaultAddressTypeOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "defaultEmailTypeOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "defaultPhoneNumberTypeOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "defaultReleaseMethodOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "emailTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "emailTypeRequired": {
          "type": "boolean"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "phoneNumberTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "phoneNumberTypeRequired": {
          "type": "boolean"
        },
        "releaseMethodOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "releaseMethodRequired": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "OrganizationContactConfiguration",
        "namespace": "http://www.casenet.com/OrganizationContactConfiguration"
      }
    },
    "PCP": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "effectiveDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "provider": {
          "$ref": "#/definitions/Provider"
        },
        "terminationDate": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ParameterizedHeader": {
      "properties": {
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Pcp": {
      "properties": {
        "effectiveDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/Provider"
        },
        "terminationDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "Pcp",
        "namespace": "http://www.casenet.com/Pcp"
      }
    },
    "PersonalContact": {
      "properties": {
        "addresses": {
          "items": {
            "$ref": "#/definitions/ContactAddress"
          },
          "type": "array",
          "uniqueItems": true
        },
        "contactType": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "designee": {
          "type": "boolean"
        },
        "designeeDate": {
          "format": "date",
          "type": "string"
        },
        "designeeMethod": {
          "type": "string"
        },
        "emails": {
          "items": {
            "$ref": "#/definitions/ContactEmail"
          },
          "type": "array",
          "uniqueItems": true
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "manuallyAdded": {
          "type": "boolean"
        },
        "medicalHomeTeamMember": {
          "type": "boolean"
        },
        "member": {
          "$ref": "#/definitions/Member"
        },
        "middleInitial": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "organization": {
          "type": "string"
        },
        "phoneNumbers": {
          "items": {
            "$ref": "#/definitions/ContactPhoneNumber"
          },
          "type": "array",
          "uniqueItems": true
        },
        "preferredContact": {
          "type": "boolean"
        },
        "preferredName": {
          "type": "string"
        },
        "relationship": {
          "$ref": "#/definitions/OptionValue"
        },
        "relationshipOther": {
          "type": "string"
        },
        "releaseDate": {
          "format": "date",
          "type": "string"
        },
        "releaseInformation": {
          "type": "boolean"
        },
        "releaseMethod": {
          "$ref": "#/definitions/OptionValue"
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "suffix": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "validAttributes": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PersonalContactConfiguration": {
      "properties": {
        "addressTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "addressTypeRequired": {
          "type": "boolean"
        },
        "defaultAddressTypeOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "defaultEmailTypeOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "defaultPhoneNumberTypeOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "defaultRelationshipOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "defaultReleaseMethodOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "designeeMethodOptions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "emailTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "emailTypeRequired": {
          "type": "boolean"
        },
        "extendedFields": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "phoneNumberTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "phoneNumberTypeRequired": {
          "type": "boolean"
        },
        "relationshipOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "relationshipRequired": {
          "type": "boolean"
        },
        "releaseMethodOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "releaseMethodRequired": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "PersonalContactConfiguration",
        "namespace": "http://www.casenet.com/PersonalContactConfiguration"
      }
    },
    "PersonalRepresentative": {
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phoneNumber": {
          "$ref": "#/definitions/VersionedPhoneNumber"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "verbalLanguage": {
          "$ref": "#/definitions/OptionValue"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "vettingQuestions": {
          "items": {
            "$ref": "#/definitions/VettingQuestion"
          },
          "type": "array",
          "uniqueItems": true
        },
        "writtenLanguage": {
          "$ref": "#/definitions/OptionValue"
        }
      },
      "type": "object",
      "xml": {
        "name": "PersonalRepresentative",
        "namespace": "http://www.casenet.com/PersonalRepresentative"
      }
    },
    "PersonalRepresentativeLite": {
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phoneNumber": {
          "$ref": "#/definitions/VersionedPhoneNumber"
        }
      },
      "type": "object",
      "xml": {
        "name": "PersonalRepresentativeLite",
        "namespace": "http://www.casenet.com/PersonalRepresentativeLite"
      }
    },
    "Pharmacy": {
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "lockedInName": {
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PharmacyRequest": {
      "properties": {
        "address": {
          "$ref": "#/definitions/CreateAddressRequest"
        },
        "externalId": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "pharmacyName": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "pharmacyName"
      ],
      "type": "object",
      "xml": {
        "name": "PharmacyRequest",
        "namespace": "http://www.casenet.com/PharmacyRequest"
      }
    },
    "Phone": {
      "properties": {
        "phoneNumber": {
          "maxLength": 10,
          "minLength": 10,
          "pattern": "[0-9]{10}",
          "type": "string"
        }
      },
      "required": [
        "phoneNumber"
      ],
      "type": "object",
      "xml": {
        "name": "Phone",
        "namespace": "http://www.casenet.com/Phone"
      }
    },
    "PhoneAndExt": {
      "properties": {
        "phoneExtension": {
          "maxLength": 7,
          "minLength": 0,
          "pattern": "^[0-9]*$",
          "type": "string"
        },
        "phoneNumber": {
          "maxLength": 10,
          "minLength": 10,
          "pattern": "[0-9]{10}",
          "type": "string"
        }
      },
      "required": [
        "phoneNumber"
      ],
      "type": "object",
      "xml": {
        "name": "PhoneAndExt",
        "namespace": "http://www.casenet.com/PhoneAndExt"
      }
    },
    "PhoneAndExtension": {
      "properties": {
        "country": {
          "$ref": "#/definitions/Country"
        },
        "phoneCountryCode": {
          "type": "string"
        },
        "phoneExtension": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "PhoneAndExtension",
        "namespace": "http://www.casenet.com/PhoneAndExtension"
      }
    },
    "PhoneConfiguration": {
      "properties": {
        "country": {
          "$ref": "#/definitions/Country"
        },
        "maxCharsPhoneNumber": {
          "format": "int32",
          "type": "integer"
        },
        "minCharsPhoneNumber": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "PhoneConfiguration",
        "namespace": "http://www.casenet.com/PhoneConfiguration"
      }
    },
    "PhoneNotification": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "id": {
          "type": "string"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/NotificationLineItem"
          },
          "type": "array"
        },
        "member": {
          "$ref": "#/definitions/NotificationMember"
        },
        "notificationDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "notifyByPhoneDate": {
          "format": "date-time",
          "type": "string"
        },
        "notifyByPhoneNote": {
          "type": "string"
        },
        "requestingProvider": {
          "$ref": "#/definitions/AuthorizationLocation"
        },
        "servicingFacility": {
          "$ref": "#/definitions/AuthorizationLocation"
        },
        "servicingProvider": {
          "$ref": "#/definitions/AuthorizationLocation"
        }
      },
      "type": "object",
      "xml": {
        "name": "PhoneNotification",
        "namespace": "http://www.casenet.com/PhoneNotification"
      }
    },
    "PhoneNotificationDetails": {
      "properties": {
        "phoneDate": {
          "format": "date-time",
          "type": "string"
        },
        "phoneNote": {
          "type": "string"
        },
        "phoneRecipient": {
          "$ref": "#/definitions/PhoneRecipient"
        }
      },
      "required": [
        "phoneDate"
      ],
      "type": "object"
    },
    "PhoneNumber": {
      "properties": {
        "alpha2Code": {
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "formattedPhoneNumber": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "phoneCountryCode": {
          "maxLength": 3,
          "minLength": 0,
          "pattern": "^[0-9]*$",
          "type": "string"
        },
        "phoneExtension": {
          "maxLength": 7,
          "minLength": 0,
          "pattern": "^[0-9]*$",
          "type": "string"
        },
        "phoneExtensionString": {
          "type": "string"
        },
        "phoneNumber": {
          "pattern": "^[0-9]+$",
          "type": "string"
        },
        "phoneNumberString": {
          "type": "string"
        }
      },
      "required": [
        "alpha2Code",
        "phoneNumber"
      ],
      "type": "object",
      "xml": {
        "name": "PhoneNumber",
        "namespace": "http://www.casenet.com/PhoneNumber"
      }
    },
    "PhoneNumberCriteria": {
      "properties": {
        "alpha2Code": {
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "phoneCountryCode": {
          "maxLength": 3,
          "minLength": 0,
          "pattern": "^[0-9]*$",
          "type": "string"
        },
        "phoneExtension": {
          "$ref": "#/definitions/RestrictedStringCriteria"
        },
        "phoneExtensionString": {
          "type": "string"
        },
        "phoneNumber": {
          "$ref": "#/definitions/RestrictedStringCriteria"
        },
        "phoneNumberString": {
          "type": "string"
        }
      },
      "required": [
        "alpha2Code"
      ],
      "type": "object",
      "xml": {
        "name": "PhoneNumberCriteria",
        "namespace": "http://www.casenet.com/PhoneNumberCriteria"
      }
    },
    "PhoneNumberObject": {
      "properties": {
        "country": {
          "$ref": "#/definitions/Country"
        },
        "id": {
          "type": "string"
        },
        "phoneCountryCode": {
          "type": "string"
        },
        "phoneExtension": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "PhoneNumberObject",
        "namespace": "http://www.casenet.com/PhoneNumberObject"
      }
    },
    "PhoneRecipient": {
      "properties": {
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "recipientType": {
          "enum": [
            "member",
            "provider",
            "serviceProvider",
            "externalContact",
            "personalContact",
            "providerContact",
            "organizationContact",
            "pcp"
          ],
          "type": "string"
        }
      },
      "required": [
        "firstName",
        "id",
        "recipientType"
      ],
      "type": "object"
    },
    "PortableConfiguration": {
      "properties": {
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "PortableConfiguration",
        "namespace": "http://www.casenet.com/PortableConfiguration"
      }
    },
    "PortalAuthorizationSearchAuthorization": {
      "properties": {
        "authorizationId": {
          "type": "string"
        },
        "authorizationIndex": {
          "format": "int32",
          "type": "integer"
        },
        "authorizationNum": {
          "type": "string"
        },
        "authorizationType": {
          "type": "string"
        },
        "determinationStatus": {
          "type": "string"
        },
        "diagnosisType": {
          "type": "string"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "externalMemberId": {
          "type": "string"
        },
        "internalMemberId": {
          "type": "string"
        },
        "isOpen": {
          "type": "boolean"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/PortalAuthorizationSearchLineItem"
          },
          "type": "array"
        },
        "memberName": {
          "type": "string"
        },
        "primaryDiagnosisCode": {
          "type": "string"
        },
        "requestingProvider": {
          "type": "string"
        },
        "servicingFacility": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "state": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "unitCountRequested": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "PortalAuthorizationSearchAuthorization",
        "namespace": "http://www.casenet.com/PortalAuthorizationSearchAuthorization"
      }
    },
    "PortalAuthorizationSearchCriteria": {
      "properties": {
        "asc": {
          "type": "boolean"
        },
        "authorizationNumber": {
          "type": "string"
        },
        "authorizationType": {
          "enum": [
            "INPATIENT",
            "SP",
            "RX"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationType",
            "namespace": "http://www.casenet.com/UMAuthorizationType"
          }
        },
        "diagnosisType": {
          "enum": [
            "BEHAVIORAL_DSMIV",
            "MEDICAL",
            "BEHAVIORAL_DSM5"
          ],
          "type": "string",
          "xml": {
            "name": "UMDiagnosisType",
            "namespace": "http://www.casenet.com/UMDiagnosisType"
          }
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "includeClosed": {
          "type": "boolean"
        },
        "ipSrvType": {
          "type": "string"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "memberIds": {
          "items": {
            "$ref": "#/definitions/MemberId"
          },
          "type": "array",
          "uniqueItems": true
        },
        "sortField": {
          "enum": [
            "AUTHORIZATION_NUM",
            "FROM_DATE",
            "UPDATED_DATE",
            "END_DATE",
            "STATUS",
            "STATE",
            "MEMBER_NAME",
            "MEMBER_EXTERNAL_ID",
            "REQUESTING_PROVIDER",
            "FACILITY_PROVIDER",
            "DIAGNOSIS_CODE",
            "DIAGNOSIS_NAME"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationSortField",
            "namespace": "http://www.casenet.com/UMAuthorizationSortField"
          }
        },
        "spSrvType": {
          "type": "string"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "userSubmittedOnly": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "PortalAuthorizationSearchCriteria",
        "namespace": "http://www.casenet.com/PortalAuthorizationSearchCriteria"
      }
    },
    "PortalAuthorizationSearchLineItem": {
      "properties": {
        "authorizationId": {
          "type": "string"
        },
        "determinationStatus": {
          "type": "string"
        },
        "diagnosisName": {
          "type": "string"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "lengthOfStay": {
          "format": "int32",
          "type": "integer"
        },
        "lineItemId": {
          "type": "string"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        },
        "lineItemType": {
          "type": "string"
        },
        "procedureCode": {
          "type": "string"
        },
        "procedureName": {
          "type": "string"
        },
        "requestedDays": {
          "format": "int32",
          "type": "integer"
        },
        "requestedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "serviceType": {
          "type": "string"
        },
        "servicingProvider": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "type": "string"
        },
        "stayLevel": {
          "type": "string"
        },
        "unitCountApproved": {
          "format": "int32",
          "type": "integer"
        },
        "unitCountDenied": {
          "format": "int32",
          "type": "integer"
        },
        "unitCountDetermined": {
          "format": "int32",
          "type": "integer"
        },
        "unitCountRequested": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "PortalAuthorizationSearchLineItem",
        "namespace": "http://www.casenet.com/PortalAuthorizationSearchLineItem"
      }
    },
    "PortalAuthorizationSearchResults": {
      "properties": {
        "authorizations": {
          "items": {
            "$ref": "#/definitions/PortalAuthorizationSearchAuthorization"
          },
          "type": "array",
          "uniqueItems": true
        },
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "PortalAuthorizationSearchResults",
        "namespace": "http://www.casenet.com/PortalAuthorizationSearchResults"
      }
    },
    "PortalProviderSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "providerLocationIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "providers": {
          "items": {
            "$ref": "#/definitions/ProviderSearchResult"
          },
          "type": "array"
        },
        "selectedProviderLocationIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PortalProviderSearchResults",
        "namespace": "http://www.casenet.com/PortalProviderSearchResults"
      }
    },
    "PortalServiceRequestSearchCriteria": {
      "properties": {
        "asc": {
          "type": "boolean"
        },
        "authorizationNumber": {
          "type": "string"
        },
        "authorizationType": {
          "enum": [
            "INPATIENT",
            "SP",
            "RX"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationType",
            "namespace": "http://www.casenet.com/UMAuthorizationType"
          }
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "includeClosed": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "memberIds": {
          "items": {
            "$ref": "#/definitions/MemberId"
          },
          "type": "array",
          "uniqueItems": true
        },
        "sortField": {
          "enum": [
            "ACKNOWLEDGE",
            "AUTHORIZATION_NUM",
            "FROM_DATE",
            "UPDATED_DATE",
            "END_DATE",
            "STATUS",
            "STATE",
            "MEMBER_NAME",
            "MEMBER_EXTERNAL_ID",
            "REQUESTING_PROVIDER",
            "FACILITY_PROVIDER",
            "DIAGNOSIS_CODE",
            "DIAGNOSIS_NAME"
          ],
          "type": "string",
          "xml": {
            "name": "SRAuthorizationSortField",
            "namespace": "http://www.casenet.com/SRAuthorizationSortField"
          }
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "userSubmittedOnly": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "PortalServiceRequestSearchCriteria",
        "namespace": "http://www.casenet.com/PortalServiceRequestSearchCriteria"
      }
    },
    "PortalServiceRequestSearchLineItem": {
      "properties": {
        "acknowledged": {
          "type": "boolean"
        },
        "determinationStatus": {
          "type": "string"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "lineItemId": {
          "type": "string"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        },
        "lineItemType": {
          "type": "string"
        },
        "modifierInfo": {
          "type": "string"
        },
        "quantityUnits": {
          "enum": [
            "UNITS",
            "VISITS",
            "HOURS",
            "QUARTER_HOURS"
          ],
          "type": "string",
          "xml": {
            "name": "ServiceQuantityUnitType",
            "namespace": "http://www.casenet.com/ServiceQuantityUnitType"
          }
        },
        "serviceInfo": {
          "type": "string"
        },
        "serviceOfferName": {
          "type": "string"
        },
        "serviceRequestDecisions": {
          "items": {
            "$ref": "#/definitions/PortalServiceRequestSearchLineItemSRDecision"
          },
          "type": "array"
        },
        "serviceRequestId": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "totalCalculatedQuantity": {
          "format": "double",
          "type": "number"
        },
        "totalQuantity": {
          "format": "double",
          "type": "number"
        },
        "voidAuthorizedBy": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "PortalServiceRequestSearchLineItem",
        "namespace": "http://www.casenet.com/PortalServiceRequestSearchLineItem"
      }
    },
    "PortalServiceRequestSearchLineItemSRDecision": {
      "properties": {
        "decisionQuantity": {
          "type": "number"
        },
        "lineItemId": {
          "type": "string"
        },
        "serviceRequestDecisionStatusType": {
          "enum": [
            "APPROVE",
            "DENY",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "ServiceRequestDecisionStatusType",
            "namespace": "http://www.casenet.com/ServiceRequestDecisionStatusType"
          }
        },
        "serviceRequestId": {
          "type": "string"
        },
        "srDecisionId": {
          "type": "string"
        },
        "srDeterminationId": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "PortalServiceRequestSearchLineItemSRDecision",
        "namespace": "http://www.casenet.com/PortalServiceRequestSearchLineItemSRDecision"
      }
    },
    "PortalServiceRequestSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "serviceRequests": {
          "items": {
            "$ref": "#/definitions/PortalServiceRequestSearchServiceRequest"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object",
      "xml": {
        "name": "PortalServiceRequestSearchResults",
        "namespace": "http://www.casenet.com/PortalServiceRequestSearchResults"
      }
    },
    "PortalServiceRequestSearchServiceRequest": {
      "properties": {
        "closeDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "determinationStatus": {
          "type": "string"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "externalMemberId": {
          "type": "string"
        },
        "internalMemberId": {
          "type": "string"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/PortalServiceRequestSearchLineItem"
          },
          "type": "array"
        },
        "memberFullName": {
          "type": "string"
        },
        "referenceNumber": {
          "type": "string"
        },
        "serviceRequestId": {
          "type": "string"
        },
        "serviceRequestIndex": {
          "format": "int32",
          "type": "integer"
        },
        "servicingProviderName": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "state": {
          "enum": [
            "DRAFT",
            "OPEN",
            "CLOSED",
            "VOID"
          ],
          "type": "string",
          "xml": {
            "name": "ServiceRequestState",
            "namespace": "http://www.casenet.com/ServiceRequestState"
          }
        },
        "status": {
          "$ref": "#/definitions/ServiceRequestStatus"
        }
      },
      "type": "object",
      "xml": {
        "name": "PortalServiceRequestSearchServiceRequest",
        "namespace": "http://www.casenet.com/PortalServiceRequestSearchServiceRequest"
      }
    },
    "PrescreenAuthorizationDiagnosis": {
      "properties": {
        "primaryAdmittingDiagnosisId": {
          "$ref": "#/definitions/DiagnosisCodeNaturalId"
        }
      },
      "type": "object",
      "xml": {
        "name": "PrescreenAuthorizationDiagnosis",
        "namespace": "http://www.casenet.com/PrescreenAuthorizationDiagnosis"
      }
    },
    "PrescreenNoteRequest": {
      "properties": {
        "noteRequests": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "noteRequests"
      ],
      "type": "object"
    },
    "PrescreenProcedureCodeRequest": {
      "properties": {
        "procedureCodeId": {
          "$ref": "#/definitions/ProcedureCodeNaturalId"
        },
        "requestedUnits": {
          "format": "int32",
          "maximum": 999999999,
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "requestedUnits"
      ],
      "type": "object"
    },
    "Problem": {
      "properties": {
        "category": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "closeReason": {
          "type": "string"
        },
        "closeReasonOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "comments": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastReviewed": {
          "$ref": "#/definitions/LocalDate"
        },
        "lastUpdated": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "objectives": {
          "items": {
            "$ref": "#/definitions/Objective"
          },
          "type": "array"
        },
        "origin": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        },
        "priorityOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "problemDefinitionId": {
          "type": "string"
        },
        "readinessToChange": {
          "type": "string"
        },
        "readinessToChangeOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "reason": {
          "type": "string"
        },
        "resolvedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "source": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "OPEN",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CarePlanElementStatus",
            "namespace": "http://www.casenet.com/CarePlanElementStatus"
          }
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "Problem",
        "namespace": "http://www.casenet.com/Problem"
      }
    },
    "ProblemDefinition": {
      "properties": {
        "actionDefinitions": {
          "items": {
            "$ref": "#/definitions/ActionDefinition"
          },
          "type": "array"
        },
        "category": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "custom": {
          "type": "boolean"
        },
        "definitionId": {
          "type": "string"
        },
        "definitionName": {
          "type": "string"
        },
        "definitionVisibleId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "objectiveDefinitions": {
          "items": {
            "$ref": "#/definitions/ObjectiveDefinition"
          },
          "type": "array"
        },
        "readyToExport": {
          "type": "boolean"
        },
        "source": {
          "enum": [
            "MCG",
            "TRUCARE"
          ],
          "type": "string",
          "xml": {
            "name": "AssessmentSource",
            "namespace": "http://www.casenet.com/AssessmentSource"
          }
        },
        "status": {
          "enum": [
            "IN_PROGRESS",
            "PUBLISHED",
            "HIDDEN"
          ],
          "type": "string"
        },
        "targetPublishDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object"
    },
    "ProblemDefinitionSearchCriteria": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "licenseFeature": {
          "enum": [
            "CM",
            "DM",
            "UM",
            "TRUMOBILE",
            "MEMBER_PORTAL",
            "EMPLOYER_PORTAL",
            "PROVIDER_PORTAL",
            "REPORTING",
            "ANALYTICS",
            "WELLNESS",
            "HCS",
            "GENERIC",
            "AAG",
            "MEDICATION_MANAGEMENT",
            "TCI_CARE_MANAGEMENT",
            "TCI_CARE_MANAGEMENT_BI_MODELING",
            "TCI_TIME_TRACKING",
            "TCI_TIME_TRACKING_BI_MODELING",
            "TCI_UTILIZATION_MANAGEMENT",
            "TCI_UTILIZATION_MANAGEMENT_BI_MODELING"
          ],
          "type": "string",
          "xml": {
            "name": "CasenetFeature",
            "namespace": "http://www.casenet.com/CasenetFeature"
          }
        },
        "metaStatus": {
          "enum": [
            "IN_PROGRESS",
            "PUBLISHED",
            "HIDDEN"
          ],
          "type": "string"
        },
        "problemCategory": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "problemDefinitionName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "problemDefinitionVisibleId": {
          "$ref": "#/definitions/StringCriteria"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/ProblemDefinitionSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "ProblemDefinitionSearchResult": {
      "properties": {
        "custom": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "problemCategory": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "problemDefinitionId": {
          "type": "string"
        },
        "problemDefinitionName": {
          "type": "string"
        },
        "problemDefinitionVisibleId": {
          "type": "string"
        },
        "source": {
          "enum": [
            "MCG",
            "TRUCARE"
          ],
          "type": "string",
          "xml": {
            "name": "AssessmentSource",
            "namespace": "http://www.casenet.com/AssessmentSource"
          }
        }
      },
      "type": "object"
    },
    "ProblemDefinitionSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/ProblemDefinitionSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "ProblemDefinitionSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "PROBLEM_DEFINITION_NAME",
            "PROBLEM_DEFINITION_VISIBLE_ID",
            "PROBLEM_CATEGORY",
            "CUSTOM",
            "SOURCE"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "Procedure": {
      "properties": {
        "id": {
          "type": "string"
        },
        "modifierCodes": {
          "items": {
            "$ref": "#/definitions/ModifierCode"
          },
          "type": "array",
          "uniqueItems": true
        },
        "procedureCode": {
          "$ref": "#/definitions/ProcedureCode"
        }
      },
      "type": "object",
      "xml": {
        "name": "Procedure",
        "namespace": "http://www.casenet.com/Procedure"
      }
    },
    "ProcedureCode": {
      "properties": {
        "effectiveDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "procedureCode": {
          "type": "string"
        },
        "procedureCodeType": {
          "enum": [
            "CPT",
            "ICD9",
            "HCPCS",
            "REVENUE",
            "ICD10",
            "EXTENDED"
          ],
          "type": "string",
          "xml": {
            "name": "ProcedureCodeType",
            "namespace": "http://www.casenet.com/ProcedureCodeType"
          }
        },
        "procedureDescription": {
          "type": "string"
        },
        "procedureName": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "terminationDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProcedureCode",
        "namespace": "http://www.casenet.com/ProcedureCode"
      }
    },
    "ProcedureCodeDescriptionOtherLanguage": {
      "properties": {
        "language": {
          "$ref": "#/definitions/OptionValue"
        },
        "procedureDescription": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProcedureCodeDescriptions": {
      "properties": {
        "defaultProcedureDescription": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "otherLanguageDescriptions": {
          "items": {
            "$ref": "#/definitions/ProcedureCodeDescriptionOtherLanguage"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "ProcedureCodeNaturalId": {
      "properties": {
        "procedureCode": {
          "type": "string"
        },
        "procedureCodeType": {
          "enum": [
            "CPT",
            "ICD9",
            "HCPCS",
            "REVENUE",
            "ICD10",
            "EXTENDED"
          ],
          "type": "string",
          "xml": {
            "name": "ProcedureCodeType",
            "namespace": "http://www.casenet.com/ProcedureCodeType"
          }
        }
      },
      "required": [
        "procedureCode",
        "procedureCodeType"
      ],
      "type": "object",
      "xml": {
        "name": "ProcedureCodeNaturalId",
        "namespace": "http://www.casenet.com/ProcedureCodeNaturalId"
      }
    },
    "ProcedureCodePaginatedSearchResult": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/ProcedureCode"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProcedureCodePaginatedSearchResult",
        "namespace": "http://www.casenet.com/ProcedureCodePaginatedSearchResult"
      }
    },
    "ProcedureCodeSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "PROCEDURE_NAME",
            "PROCEDURE_CODE"
          ],
          "type": "string",
          "xml": {
            "name": "ProcedureCodeSortColumn",
            "namespace": "http://www.casenet.com/ProcedureCodeSortColumn"
          }
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "ProcedureCodeSortField",
        "namespace": "http://www.casenet.com/ProcedureCodeSortField"
      }
    },
    "ProcedureCodesSearchCriteria": {
      "properties": {
        "code": {
          "$ref": "#/definitions/StringCriteria"
        },
        "effectiveOnDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "languageOption": {
          "type": "string"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "name": {
          "$ref": "#/definitions/StringCriteria"
        },
        "procedureCodeType": {
          "enum": [
            "CPT",
            "ICD9",
            "HCPCS",
            "REVENUE",
            "ICD10",
            "EXTENDED"
          ],
          "type": "string",
          "xml": {
            "name": "ProcedureCodeType",
            "namespace": "http://www.casenet.com/ProcedureCodeType"
          }
        },
        "serviceOfferProviderId": {
          "type": "string"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/ProcedureCodeSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProcedureCodesSearchCriteria",
        "namespace": "http://www.casenet.com/ProcedureCodesSearchCriteria"
      }
    },
    "Product": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "externalProductId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "productCategory": {
          "$ref": "#/definitions/ProductCategory"
        },
        "productContractYear": {
          "type": "string"
        },
        "productName": {
          "type": "string"
        },
        "productNetworkSets": {
          "items": {
            "$ref": "#/definitions/ProductNetworkSet"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProductCategory": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "productCategoryCode": {
          "type": "string"
        },
        "productCategoryDesc": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProductFeatureBhpConfiguration": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "maximumProductFeaturesToDisplay": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProductFeatureBhpConfiguration",
        "namespace": "http://www.casenet.com/ProductFeatureBhpConfiguration"
      }
    },
    "ProductFeatureId": {
      "properties": {
        "externalProductFeatureId": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "externalProductFeatureId",
        "name"
      ],
      "type": "object",
      "xml": {
        "name": "ProductFeatureId",
        "namespace": "http://www.casenet.com/ProductFeatureId"
      }
    },
    "ProductFeatureSearchCriteria": {
      "properties": {
        "asc": {
          "type": "boolean"
        },
        "casenetFeatures": {
          "items": {
            "enum": [
              "CM",
              "DM",
              "UM",
              "TRUMOBILE",
              "MEMBER_PORTAL",
              "EMPLOYER_PORTAL",
              "PROVIDER_PORTAL",
              "REPORTING",
              "ANALYTICS",
              "WELLNESS",
              "HCS",
              "GENERIC",
              "AAG",
              "MEDICATION_MANAGEMENT",
              "TCI_CARE_MANAGEMENT",
              "TCI_CARE_MANAGEMENT_BI_MODELING",
              "TCI_TIME_TRACKING",
              "TCI_TIME_TRACKING_BI_MODELING",
              "TCI_UTILIZATION_MANAGEMENT",
              "TCI_UTILIZATION_MANAGEMENT_BI_MODELING"
            ],
            "type": "string",
            "xml": {
              "name": "CasenetFeature",
              "namespace": "http://www.casenet.com/CasenetFeature"
            }
          },
          "type": "array",
          "uniqueItems": true
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "featureType": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "NEITHER",
            "BOTH"
          ],
          "type": "string",
          "xml": {
            "name": "FeatureType",
            "namespace": "http://www.casenet.com/FeatureType"
          }
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "required": [
        "casenetFeatures"
      ],
      "type": "object",
      "xml": {
        "name": "ProductFeatureSearchCriteria",
        "namespace": "http://www.casenet.com/ProductFeatureSearchCriteria"
      }
    },
    "ProductId": {
      "properties": {
        "id": {
          "type": "string"
        },
        "productIdType": {
          "enum": [
            "NAME",
            "EXTERNAL_ID",
            "INTERNAL"
          ],
          "type": "string",
          "xml": {
            "name": "ProductIdType",
            "namespace": "http://www.casenet.com/ProductIdType"
          }
        }
      },
      "required": [
        "id",
        "productIdType"
      ],
      "type": "object",
      "xml": {
        "name": "ProductId",
        "namespace": "http://www.casenet.com/ProductId"
      }
    },
    "ProductNetworkSet": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "networkSet": {
          "$ref": "#/definitions/NetworkSet"
        },
        "obsolete": {
          "type": "boolean"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Program": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "feature": {
          "$ref": "#/definitions/CustomerFeature"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "programFamily": {
          "$ref": "#/definitions/OptionValue"
        },
        "programServiceLevelConfigs": {
          "items": {
            "$ref": "#/definitions/ProgramServiceLevelConfig"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProgramCaseAssociationRequest": {
      "properties": {
        "caseId": {
          "$ref": "#/definitions/CaseId"
        },
        "programEnrollmentVersion": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "programEnrollmentVersion"
      ],
      "type": "object"
    },
    "ProgramEnrollment": {
      "properties": {
        "assessmentSource": {
          "type": "boolean"
        },
        "cnCaseId": {
          "type": "string"
        },
        "currentStatus": {
          "$ref": "#/definitions/EnrollmentStatus"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "enrollmentSource": {
          "$ref": "#/definitions/EnrollmentSource"
        },
        "id": {
          "type": "string"
        },
        "program": {
          "$ref": "#/definitions/Program"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "statuses": {
          "items": {
            "$ref": "#/definitions/EnrollmentStatus"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProgramEnrollment",
        "namespace": "http://www.casenet.com/ProgramEnrollment"
      }
    },
    "ProgramEnrollmentConfiguration": {
      "properties": {
        "availablePrograms": {
          "items": {
            "$ref": "#/definitions/Program"
          },
          "type": "array"
        },
        "enrollmentRestrictionType": {
          "enum": [
            "SINGLE",
            "MULTIPLE",
            "ONE_PER_PROGRAM_FAMILY",
            "PROGRAM_DISABLED",
            "PROGRAM_NOT_IN_HIERARCHY",
            "NO_SERVICE_LEVEL_CONFIG"
          ],
          "type": "string",
          "xml": {
            "name": "ProgramEnrollmentRestriction",
            "namespace": "http://www.casenet.com/ProgramEnrollmentRestriction"
          }
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "programServiceLevelTaskPackagesMap": {
          "additionalProperties": {
            "$ref": "#/definitions/ServiceLevelAndTaskPackagesListWrapper"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProgramEnrollmentConfiguration",
        "namespace": "http://www.casenet.com/ProgramEnrollmentConfiguration"
      }
    },
    "ProgramEnrollmentLite": {
      "properties": {
        "id": {
          "type": "string"
        },
        "programId": {
          "type": "string"
        },
        "programName": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProgramEnrollmentLite",
        "namespace": "http://www.casenet.com/ProgramEnrollmentLite"
      }
    },
    "ProgramEnrollmentResponse": {
      "properties": {
        "programEnrollmentId": {
          "type": "string"
        },
        "warningMessageKey": {
          "type": "string"
        },
        "warningMessageParameters": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ProgramEnrollmentSearchResponse": {
      "properties": {
        "caseName": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "cnCase": {
          "$ref": "#/definitions/CnCaseLite"
        },
        "currentStatus": {
          "$ref": "#/definitions/EnrollmentStatus"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "engagementLevel": {
          "$ref": "#/definitions/OptionValue"
        },
        "enrollmentSource": {
          "$ref": "#/definitions/EnrollmentSource"
        },
        "program": {
          "$ref": "#/definitions/ProgramEnrollmentLite"
        },
        "serviceLevel": {
          "$ref": "#/definitions/OptionValue"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object"
    },
    "ProgramEnrollmentSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/ProgramEnrollmentSearchResponse"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "ProgramFull": {
      "properties": {
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "feature": {
          "$ref": "#/definitions/CustomerFeature"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "programFamily": {
          "$ref": "#/definitions/OptionValue"
        },
        "programServiceLevelConfigs": {
          "items": {
            "$ref": "#/definitions/ProgramServiceLevelConfig"
          },
          "type": "array",
          "uniqueItems": true
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "ProgramServiceLevelBhpConfiguration": {
      "properties": {
        "allowMultipleOpenTaskPackages": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "serviceLevelContactsConfigs": {
          "items": {
            "$ref": "#/definitions/ServiceLevelContactsConfig"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object",
      "xml": {
        "name": "IdentifiableObject",
        "namespace": "http://www.casenet.com/IdentifiableObject"
      }
    },
    "ProgramServiceLevelConfig": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "serviceLevel": {
          "$ref": "#/definitions/OptionValue"
        },
        "specializations": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "taskPackages": {
          "items": {
            "$ref": "#/definitions/TaskPackage"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProgramTaskDefinitionLite": {
      "properties": {
        "activity": {
          "$ref": "#/definitions/OptionValue"
        },
        "activityOther": {
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "ALLOW_USER_TO_SELECT",
            "ASSIGNED_TEAM",
            "CURRENT_USER",
            "PRIMARY_CASE_OWNER",
            "QUEUE",
            "TEAM",
            "USER"
          ],
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/OptionValue"
        },
        "description": {
          "type": "string"
        },
        "dueDateOffset": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "priority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "taskAssignee": {
          "$ref": "#/definitions/TaskAssigneeResponse"
        },
        "taskDefinitionType": {
          "enum": [
            "TASK_DEFINITION",
            "APPOINTMENT",
            "ASSESSMENT",
            "CARE_PLAN_CREATE",
            "CARE_PLAN_REVIEW",
            "MEDICATION_REVIEW"
          ],
          "type": "string",
          "xml": {
            "name": "TaskDefinitionType",
            "namespace": "http://www.casenet.com/TaskDefinitionType"
          }
        },
        "visibleId": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "IdentifiableObject",
        "namespace": "http://www.casenet.com/IdentifiableObject"
      }
    },
    "ProgramTaskDetails": {
      "properties": {
        "assigneeName": {
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "USERS",
            "GROUP_QUEUES",
            "TEAMS"
          ],
          "type": "string",
          "xml": {
            "name": "TaskAssigneeType",
            "namespace": "http://www.casenet.com/TaskAssigneeType"
          }
        },
        "completedDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "queueName": {
          "type": "string"
        },
        "reminderDate": {
          "format": "date-time",
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "enum": [
            "OPEN",
            "CLOSED",
            "CANCELLED",
            "OVERDUE",
            "NOT_CREATED"
          ],
          "type": "string",
          "xml": {
            "name": "TaskStatus",
            "namespace": "http://www.casenet.com/TaskStatus"
          }
        },
        "taskActivity": {
          "type": "string"
        },
        "taskDefinitionType": {
          "enum": [
            "TASK_DEFINITION",
            "APPOINTMENT",
            "ASSESSMENT",
            "CARE_PLAN_CREATE",
            "CARE_PLAN_REVIEW",
            "MEDICATION_REVIEW"
          ],
          "type": "string",
          "xml": {
            "name": "TaskDefinitionType",
            "namespace": "http://www.casenet.com/TaskDefinitionType"
          }
        },
        "taskId": {
          "format": "int64",
          "type": "integer"
        },
        "taskInstanceLink": {
          "$ref": "#/definitions/TaskInstanceLink"
        },
        "taskLinkArtifactType": {
          "enum": [
            "INPATIENT",
            "SP",
            "RX",
            "CASE",
            "MEDICATION",
            "ASSESSMENT",
            "CARE_PLAN"
          ],
          "type": "string",
          "xml": {
            "name": "TaskLinkArtifactType",
            "namespace": "http://www.casenet.com/TaskLinkArtifactType"
          }
        },
        "taskName": {
          "type": "string"
        },
        "taskPriority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "taskRecurrenceOptions": {
          "$ref": "#/definitions/AbstractTaskRecurrenceOptions"
        },
        "teamName": {
          "type": "string"
        },
        "triggerSource": {
          "$ref": "#/definitions/TaskTriggerSource"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "variablesMap": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "workflowTask": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskDetails",
        "namespace": "http://www.casenet.com/TaskDetails"
      }
    },
    "ProgramTriggerableDefinition": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "engagementLevel": {
          "$ref": "#/definitions/OptionValue"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "programServiceLevelConfig": {
          "$ref": "#/definitions/ProgramServiceLevelConfig"
        },
        "serviceLevel": {
          "$ref": "#/definitions/OptionValue"
        },
        "serviceLevelsConfigured": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "triggeredProgram": {
          "$ref": "#/definitions/Program"
        },
        "triggeredTaskPackage": {
          "$ref": "#/definitions/TaskPackage"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Property": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "Property",
        "namespace": "http://www.casenet.com/Property"
      }
    },
    "Provider": {
      "properties": {
        "additionalInformation": {
          "type": "string"
        },
        "billServices": {
          "type": "boolean"
        },
        "contactName": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "externalId": {
          "type": "string"
        },
        "fullname": {
          "type": "string"
        },
        "groupAffiliation": {
          "$ref": "#/definitions/GroupProvider"
        },
        "id": {
          "type": "string"
        },
        "languages": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "locations": {
          "items": {
            "$ref": "#/definitions/Location"
          },
          "type": "array",
          "uniqueItems": true
        },
        "manuallyAdded": {
          "type": "boolean"
        },
        "medicaidNumber": {
          "type": "string"
        },
        "medicareNumber": {
          "type": "string"
        },
        "mostRecentlyUpdatedLocation": {
          "$ref": "#/definitions/Location"
        },
        "npi": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "pin": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "providerRating": {
          "type": "string"
        },
        "providerType": {
          "$ref": "#/definitions/OptionValue"
        },
        "providesMedical": {
          "type": "boolean"
        },
        "providesNonMedical": {
          "type": "boolean"
        },
        "sortName": {
          "type": "string"
        },
        "sourceId": {
          "type": "string"
        },
        "specialties": {
          "items": {
            "$ref": "#/definitions/ProviderSpecialty"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "temporary": {
          "type": "boolean"
        },
        "tin": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "upin": {
          "type": "string"
        },
        "validAttributes": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProviderAddress": {
      "properties": {
        "addressLine1": {
          "type": "string"
        },
        "addressLine2": {
          "type": "string"
        },
        "addressLine3": {
          "type": "string"
        },
        "canada": {
          "type": "boolean"
        },
        "canadaWithNullCountry": {
          "type": "boolean"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "countryEntity": {
          "$ref": "#/definitions/Country"
        },
        "county": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        },
        "obsolete": {
          "type": "boolean"
        },
        "other": {
          "type": "boolean"
        },
        "state": {
          "$ref": "#/definitions/OptionValue"
        },
        "stateText": {
          "type": "string"
        },
        "undeliverable": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "us": {
          "type": "boolean"
        },
        "uswithNullCountry": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "zipCode": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProviderContact": {
      "properties": {
        "addresses": {
          "items": {
            "$ref": "#/definitions/ContactAddress"
          },
          "type": "array",
          "uniqueItems": true
        },
        "contactName": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "emails": {
          "items": {
            "$ref": "#/definitions/ContactEmail"
          },
          "type": "array",
          "uniqueItems": true
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "facilityName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "manuallyAdded": {
          "type": "boolean"
        },
        "medicaidNumber": {
          "type": "string"
        },
        "medicareNumber": {
          "type": "string"
        },
        "member": {
          "$ref": "#/definitions/Member"
        },
        "npi": {
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "phoneNumbers": {
          "items": {
            "$ref": "#/definitions/ContactPhoneNumber"
          },
          "type": "array",
          "uniqueItems": true
        },
        "providerContactName": {
          "type": "string"
        },
        "providerNumber": {
          "type": "string"
        },
        "providerType": {
          "$ref": "#/definitions/OptionValue"
        },
        "releaseDate": {
          "format": "date",
          "type": "string"
        },
        "releaseInformation": {
          "type": "boolean"
        },
        "releaseMethod": {
          "$ref": "#/definitions/OptionValue"
        },
        "specialties": {
          "items": {
            "$ref": "#/definitions/ProviderContactSpecialty"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "tin": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProviderContactConfiguration": {
      "properties": {
        "addressTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "addressTypeRequired": {
          "type": "boolean"
        },
        "defaultAddressTypeOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "defaultEmailTypeOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "defaultPhoneNumberTypeOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "defaultReleaseMethodOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "emailTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "emailTypeRequired": {
          "type": "boolean"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "phoneNumberTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "phoneNumberTypeRequired": {
          "type": "boolean"
        },
        "providerTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "releaseMethodOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "releaseMethodRequired": {
          "type": "boolean"
        },
        "specialtyOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProviderContactConfiguration",
        "namespace": "http://www.casenet.com/ProviderContactConfiguration"
      }
    },
    "ProviderContactSpecialty": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "effectiveDate": {
          "format": "date",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "specialtyOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "terminationDate": {
          "format": "date",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProviderDetailsResult": {
      "properties": {
        "contactName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "npi": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "providerCategory": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "specialties": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "tin": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProviderDetailsResult",
        "namespace": "http://www.casenet.com/ProviderDetailsResult"
      }
    },
    "ProviderDetailsResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/ProviderDetailsResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProviderDetailsResults",
        "namespace": "http://www.casenet.com/ProviderDetailsResults"
      }
    },
    "ProviderEmail": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "email": {
          "$ref": "#/definitions/Email"
        },
        "emailType": {
          "$ref": "#/definitions/OptionValue"
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "preferred": {
          "type": "boolean"
        },
        "preferredEmail": {
          "type": "boolean"
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProviderId": {
      "properties": {
        "id": {
          "type": "string"
        },
        "providerIdType": {
          "enum": [
            "INTERNAL",
            "EXTERNAL",
            "NUMBER"
          ],
          "type": "string",
          "xml": {
            "name": "ProviderIdType",
            "namespace": "http://www.casenet.com/ProviderIdType"
          }
        }
      },
      "required": [
        "id",
        "providerIdType"
      ],
      "type": "object",
      "xml": {
        "name": "ProviderId",
        "namespace": "http://www.casenet.com/ProviderId"
      }
    },
    "ProviderLite": {
      "properties": {
        "externalId": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProviderLite",
        "namespace": "http://www.casenet.com/ProviderLite"
      }
    },
    "ProviderLocationAddress": {
      "properties": {
        "address": {
          "$ref": "#/definitions/ProviderAddress"
        },
        "addressType": {
          "enum": [
            "BILLING",
            "MAILING",
            "SERVICING"
          ],
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "optionValueAddressType": {
          "$ref": "#/definitions/OptionValue"
        },
        "preferred": {
          "type": "boolean"
        },
        "preferredAddress": {
          "type": "boolean"
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProviderLocationAdvancedCriteria": {
      "properties": {
        "city": {
          "$ref": "#/definitions/StringCriteria"
        },
        "locationType": {
          "$ref": "#/definitions/StringCriteria"
        },
        "medicaidId": {
          "$ref": "#/definitions/StringCriteria"
        },
        "medicareId": {
          "$ref": "#/definitions/StringCriteria"
        },
        "product": {
          "$ref": "#/definitions/StringCriteria"
        },
        "serviceCode": {
          "$ref": "#/definitions/ProcedureCodeNaturalId"
        },
        "serviceName": {
          "$ref": "#/definitions/StringCriteria"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProviderLocationAdvancedCriteria",
        "namespace": "http://www.casenet.com/ProviderLocationAdvancedCriteria"
      }
    },
    "ProviderLocationInfo": {
      "properties": {
        "copiedFromFacility": {
          "type": "boolean"
        },
        "npi": {
          "type": "string"
        },
        "providerNumber": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProviderLocationSearchCriteria": {
      "properties": {
        "advancedCriteria": {
          "$ref": "#/definitions/ProviderLocationAdvancedCriteria"
        },
        "authorizationContext": {
          "type": "boolean"
        },
        "city": {
          "$ref": "#/definitions/StringCriteria"
        },
        "context": {
          "enum": [
            "Member",
            "Provider"
          ],
          "type": "string",
          "xml": {
            "name": "LocationSearchContext",
            "namespace": "http://www.casenet.com/LocationSearchContext"
          }
        },
        "countryCode": {
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "county": {
          "$ref": "#/definitions/StringCriteria"
        },
        "eligibilityProductId": {
          "type": "string"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "groupType": {
          "$ref": "#/definitions/GroupType"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "locationContextDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "locationName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "locationNumber": {
          "$ref": "#/definitions/StringCriteria"
        },
        "medicaidParticipation": {
          "enum": [
            "Participating",
            "Nonparticipating",
            "Either"
          ],
          "type": "string",
          "xml": {
            "name": "Participation",
            "namespace": "http://www.casenet.com/Participation"
          }
        },
        "medicareParticipation": {
          "enum": [
            "Participating",
            "Nonparticipating",
            "Either"
          ],
          "type": "string",
          "xml": {
            "name": "Participation",
            "namespace": "http://www.casenet.com/Participation"
          }
        },
        "memberConstraints": {
          "$ref": "#/definitions/MemberConstraints"
        },
        "networkAffiliation": {
          "enum": [
            "InNetwork",
            "OutOfNetwork",
            "All"
          ],
          "type": "string",
          "xml": {
            "name": "NetworkAffiliation",
            "namespace": "http://www.casenet.com/NetworkAffiliation"
          }
        },
        "npi": {
          "$ref": "#/definitions/StringCriteria"
        },
        "otherCountryName": {
          "type": "string"
        },
        "preferredNetworkId": {
          "$ref": "#/definitions/NetworkId"
        },
        "providerId": {
          "$ref": "#/definitions/ProviderId"
        },
        "serviceOfferId": {
          "type": "string"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/LocationSearchSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "stateOption": {
          "type": "string"
        },
        "stateOther": {
          "type": "string"
        },
        "taxIds": {
          "items": {
            "$ref": "#/definitions/StringCriteria"
          },
          "type": "array"
        },
        "tricareParticipation": {
          "enum": [
            "Participating",
            "Nonparticipating",
            "Either"
          ],
          "type": "string",
          "xml": {
            "name": "Participation",
            "namespace": "http://www.casenet.com/Participation"
          }
        },
        "zipCode": {
          "$ref": "#/definitions/StringCriteria"
        }
      },
      "type": "object",
      "xml": {
        "name": "AbstractProviderLocationSearchCriteria",
        "namespace": "http://www.casenet.com/AbstractProviderLocationSearchCriteria"
      }
    },
    "ProviderPhoneNumber": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isFax": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "nonFaxNonBlankPhoneNumber": {
          "type": "boolean"
        },
        "obsolete": {
          "type": "boolean"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "phoneType": {
          "$ref": "#/definitions/OptionValue"
        },
        "preferred": {
          "type": "boolean"
        },
        "preferredPhone": {
          "type": "boolean"
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProviderProduct": {
      "properties": {
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "medicaidParticipant": {
          "type": "boolean"
        },
        "medicareParticipant": {
          "type": "boolean"
        },
        "networkName": {
          "type": "string"
        },
        "networkSetName": {
          "type": "string"
        },
        "productName": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProviderProduct",
        "namespace": "http://www.casenet.com/ProviderProduct"
      }
    },
    "ProviderProductSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "products": {
          "items": {
            "$ref": "#/definitions/ProviderProduct"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProviderProductSearchResults",
        "namespace": "http://www.casenet.com/ProviderProductSearchResults"
      }
    },
    "ProviderSearchConfiguration": {
      "properties": {
        "defaultCountry": {
          "$ref": "#/definitions/Country"
        },
        "defaultCountryStates": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "facilityProviderExtendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "individualProviderExtendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "medicaidLocation": {
          "enum": [
            "LOCATION",
            "PROVIDER",
            "EITHER"
          ],
          "type": "string",
          "xml": {
            "name": "ProviderLocationType",
            "namespace": "http://www.casenet.com/ProviderLocationType"
          }
        },
        "medicaidParticipationFilterEnabled": {
          "type": "boolean"
        },
        "medicareLocation": {
          "enum": [
            "LOCATION",
            "PROVIDER",
            "EITHER"
          ],
          "type": "string",
          "xml": {
            "name": "ProviderLocationType",
            "namespace": "http://www.casenet.com/ProviderLocationType"
          }
        },
        "medicareParticipationFilterEnabled": {
          "type": "boolean"
        },
        "npiLocation": {
          "enum": [
            "LOCATION",
            "PROVIDER",
            "EITHER"
          ],
          "type": "string",
          "xml": {
            "name": "ProviderLocationType",
            "namespace": "http://www.casenet.com/ProviderLocationType"
          }
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "productMandatoryForNetworkParticipation": {
          "type": "boolean"
        },
        "providerDefaultSearch": {
          "enum": [
            "SIMPLE",
            "ADVANCED"
          ],
          "type": "string",
          "xml": {
            "name": "ProviderDefaultSearchType",
            "namespace": "http://www.casenet.com/ProviderDefaultSearchType"
          }
        },
        "providerExtendedSearchFieldsConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedSearchFieldConfig"
          },
          "type": "array"
        },
        "quickSearchNetworkAffiliation": {
          "enum": [
            "InNetwork",
            "OutOfNetwork",
            "All"
          ],
          "type": "string",
          "xml": {
            "name": "NetworkAffiliation",
            "namespace": "http://www.casenet.com/NetworkAffiliation"
          }
        },
        "simpleSearchAttributes": {
          "items": {
            "$ref": "#/definitions/SimpleSearchAttributeConfiguration"
          },
          "type": "array"
        },
        "tinLocation": {
          "enum": [
            "LOCATION",
            "PROVIDER",
            "EITHER"
          ],
          "type": "string",
          "xml": {
            "name": "ProviderLocationType",
            "namespace": "http://www.casenet.com/ProviderLocationType"
          }
        },
        "tricareParticipationFilterEnabled": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProviderSearchConfiguration",
        "namespace": "http://www.casenet.com/ProviderSearchConfiguration"
      }
    },
    "ProviderSearchCriteria": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "searchParams": {
          "$ref": "#/definitions/ProviderSearchParam"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/ProviderSearchSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProviderSearchCriteria",
        "namespace": "http://www.casenet.com/ProviderSearchCriteria"
      }
    },
    "ProviderSearchParam": {
      "properties": {
        "advancedCriteria": {
          "$ref": "#/definitions/AdvancedCriteria"
        },
        "authorizationContext": {
          "type": "boolean"
        },
        "city": {
          "$ref": "#/definitions/StringCriteria"
        },
        "context": {
          "enum": [
            "Member",
            "Provider"
          ],
          "type": "string",
          "xml": {
            "name": "LocationSearchContext",
            "namespace": "http://www.casenet.com/LocationSearchContext"
          }
        },
        "countryCode": {
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "county": {
          "$ref": "#/definitions/StringCriteria"
        },
        "eligibilityProductId": {
          "type": "string"
        },
        "groupType": {
          "$ref": "#/definitions/GroupType"
        },
        "locationName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "medicaidParticipation": {
          "enum": [
            "Participating",
            "Nonparticipating",
            "Either"
          ],
          "type": "string",
          "xml": {
            "name": "Participation",
            "namespace": "http://www.casenet.com/Participation"
          }
        },
        "medicareParticipation": {
          "enum": [
            "Participating",
            "Nonparticipating",
            "Either"
          ],
          "type": "string",
          "xml": {
            "name": "Participation",
            "namespace": "http://www.casenet.com/Participation"
          }
        },
        "memberConstraints": {
          "$ref": "#/definitions/MemberConstraints"
        },
        "networkAffiliation": {
          "enum": [
            "InNetwork",
            "OutOfNetwork",
            "All"
          ],
          "type": "string",
          "xml": {
            "name": "NetworkAffiliation",
            "namespace": "http://www.casenet.com/NetworkAffiliation"
          }
        },
        "npi": {
          "$ref": "#/definitions/StringCriteria"
        },
        "otherCountryName": {
          "type": "string"
        },
        "preferredNetworkId": {
          "$ref": "#/definitions/NetworkId"
        },
        "providerContextDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "providerId": {
          "$ref": "#/definitions/ProviderId"
        },
        "providerName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "providerNumber": {
          "$ref": "#/definitions/StringCriteria"
        },
        "providesMedical": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "providesNonMedical": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "specialtyOption": {
          "type": "string"
        },
        "stateOption": {
          "type": "string"
        },
        "stateOther": {
          "type": "string"
        },
        "taxIds": {
          "items": {
            "$ref": "#/definitions/StringCriteria"
          },
          "type": "array"
        },
        "tricareParticipation": {
          "enum": [
            "Participating",
            "Nonparticipating",
            "Either"
          ],
          "type": "string",
          "xml": {
            "name": "Participation",
            "namespace": "http://www.casenet.com/Participation"
          }
        },
        "zipCode": {
          "$ref": "#/definitions/StringCriteria"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProviderSearchParam",
        "namespace": "http://www.casenet.com/ProviderSearchParam"
      }
    },
    "ProviderSearchResult": {
      "properties": {
        "inNetwork": {
          "type": "boolean"
        },
        "location": {
          "$ref": "#/definitions/Location"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProviderSearchResult",
        "namespace": "http://www.casenet.com/ProviderSearchResult"
      }
    },
    "ProviderSearchResults": {
      "properties": {
        "hasMoreResults": {
          "type": "boolean"
        },
        "providers": {
          "items": {
            "$ref": "#/definitions/ProviderSearchResult"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "ProviderSearchResults",
        "namespace": "http://www.casenet.com/ProviderSearchResults"
      }
    },
    "ProviderSearchSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "PROVIDER_NAME",
            "PROVIDER_NUMBER"
          ],
          "type": "string",
          "xml": {
            "name": "ProviderSearchSortColumn",
            "namespace": "http://www.casenet.com/ProviderSearchSortColumn"
          }
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "ProviderSearchSortField",
        "namespace": "http://www.casenet.com/ProviderSearchSortField"
      }
    },
    "ProviderSpecialty": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "effectiveDate": {
          "format": "date",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "specialtyOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "terminationDate": {
          "format": "date",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Publishable": {
      "properties": {
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "metaStatus": {
          "enum": [
            "IN_PROGRESS",
            "PUBLISHED",
            "HIDDEN"
          ],
          "type": "string"
        },
        "pastPublishDate": {
          "type": "boolean"
        },
        "publishDateToday": {
          "type": "boolean"
        },
        "published": {
          "type": "boolean"
        },
        "targetPublishDate": {
          "format": "date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "QIAdvisorReview": {
      "properties": {
        "advisorReviewNotes": {
          "type": "string"
        },
        "advisorReviewNotesDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "advisorSeverity": {
          "$ref": "#/definitions/OptionValue"
        },
        "attachments": {
          "items": {
            "$ref": "#/definitions/SimpleDocumentInfo"
          },
          "type": "array",
          "uniqueItems": true
        },
        "reviewerName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "QIOutcome": {
      "properties": {
        "attachments": {
          "items": {
            "$ref": "#/definitions/SimpleDocumentInfo"
          },
          "type": "array",
          "uniqueItems": true
        },
        "correctiveActionPlan": {
          "type": "boolean"
        },
        "correctiveActionPlanComments": {
          "type": "string"
        },
        "correctiveActionPlanDateCompleted": {
          "$ref": "#/definitions/LocalDate"
        },
        "correctiveActionPlanDateReferred": {
          "$ref": "#/definitions/LocalDate"
        },
        "finalSeverity": {
          "$ref": "#/definitions/OptionValue"
        },
        "finalSeverityAssignedBy": {
          "type": "string"
        },
        "followUpAction": {
          "type": "boolean"
        },
        "followUpActionComments": {
          "type": "string"
        },
        "followUpActionDateCompleted": {
          "$ref": "#/definitions/LocalDate"
        },
        "followUpActionDateReferred": {
          "$ref": "#/definitions/LocalDate"
        },
        "other": {
          "type": "boolean"
        },
        "otherComments": {
          "type": "string"
        },
        "otherDateCompleted": {
          "$ref": "#/definitions/LocalDate"
        },
        "otherDateReferred": {
          "$ref": "#/definitions/LocalDate"
        },
        "outcomeNotes": {
          "type": "string"
        },
        "peerReviewCommittee": {
          "type": "boolean"
        },
        "peerReviewCommitteeComments": {
          "type": "string"
        },
        "peerReviewCommitteeDateCompleted": {
          "$ref": "#/definitions/LocalDate"
        },
        "peerReviewCommitteeDateReferred": {
          "$ref": "#/definitions/LocalDate"
        },
        "qiOutcomeCompletedBy": {
          "$ref": "#/definitions/User"
        },
        "resolutionLetterSentDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "trackAndTrend": {
          "type": "boolean"
        },
        "trackAndTrendComments": {
          "type": "string"
        },
        "trackAndTrendDateCompleted": {
          "$ref": "#/definitions/LocalDate"
        },
        "trackAndTrendDateReferred": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object"
    },
    "QIReview": {
      "properties": {
        "attachments": {
          "items": {
            "$ref": "#/definitions/SimpleDocumentInfo"
          },
          "type": "array",
          "uniqueItems": true
        },
        "clinicalSummaryNotes": {
          "type": "string"
        },
        "completionDueDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "informationReviewed": {
          "type": "string"
        },
        "medicalRecordRequests": {
          "items": {
            "$ref": "#/definitions/MedicalRecord"
          },
          "type": "array"
        },
        "preliminarySeverity": {
          "$ref": "#/definitions/OptionValue"
        },
        "preliminarySeverityAssignedBy": {
          "$ref": "#/definitions/User"
        },
        "reviewer": {
          "$ref": "#/definitions/User"
        },
        "reviewerDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "reviewerNotes": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "QualityIncident": {
      "properties": {
        "additionalDetails": {
          "type": "string"
        },
        "attachments": {
          "items": {
            "$ref": "#/definitions/SimpleDocumentInfo"
          },
          "type": "array",
          "uniqueItems": true
        },
        "benefitCategory": {
          "$ref": "#/definitions/OptionValue"
        },
        "closedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "incidentDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "incidentLocation": {
          "$ref": "#/definitions/OptionValue"
        },
        "incidentLocationOther": {
          "type": "string"
        },
        "incidentNumber": {
          "type": "string"
        },
        "incidentOwner": {
          "$ref": "#/definitions/User"
        },
        "incidentSubType": {
          "enum": [
            "PCP",
            "BH_ALLIED_HEALTH_PROFESSIONAL",
            "BH_PSYCHIATRIST",
            "BH_RESIDENTIAL",
            "DME",
            "HOME_HEALTH",
            "HOSPITAL",
            "NURSING_HOME",
            "OTHER",
            "OTHER_ANCILLARY",
            "SPECIALIST",
            "EXCESSIVE_PHONE_WAIT",
            "COMPLAINT_PROCEDURES",
            "CULTURAL_COMPETENCY_ISSUE",
            "DISSATISFACTION_WITH_CM",
            "DISSATISFACTION_WITH_UM_PROCESS",
            "FAILURE_TO_PROVIDE_REFERRALS",
            "LANGUAGE_BARRIER",
            "MARKETING",
            "PROBLEM_GETTING_CARE_AUTHORIZED",
            "RUDE_UNPROFESSIONAL_STAFF",
            "DISSATISFIED_WITH_PROVIDER",
            "PROVIDER_TERMED",
            "RUDE_UNPROFESSIONAL_OFFICE_STAFF",
            "RUDE_UNPROFESSIONAL_PROVIDER",
            "TELEPHONE_RESPONSIVENESS",
            "ADVANCE_DIRECTIVES",
            "DELAY_IN_SERVICE",
            "DISCRIMINATION",
            "EXCESSIVE_WAIT_TIME",
            "EXPLOITATION_OF_MEMBER",
            "MEMBER_CHOICE",
            "MEMBER_REFUSED_TX",
            "OTHER_R_R",
            "PHYSICAL_CHEMICAL_RESTRAINTS",
            "PRIVACY_CONFIDENTIALITY",
            "RESPECT",
            "RIGHT_TO_RECEIVE_INFORMATION",
            "REFUSAL_TO_PROVIDE_CARE",
            "STAFFING_ISSUES_PROVIDER",
            "FOURTH_DEGREE_PERINEAL_LAC",
            "AIR_EMBOLISM",
            "ALLERGIC_ADVERSE_REACTION",
            "CARDIAC_ARREST",
            "NEURO_IMPAIRMENT_NEW",
            "NOSOCOMIAL_INFECTION",
            "REINTUBATION_OR_GT_3_ATTEMPTS",
            "RESPIRATORY_ARREST",
            "SKIN_INTEGRITY_PRESSURE_ULCER",
            "TRANSFUSION_REACTION",
            "ULCER",
            "VASC_IMPAIRMENT_NEW",
            "VENTILATOR",
            "ANESTHESIA_COMPLICATIONS",
            "DAY_OP_SURGERY_TO_IP_ADMIT",
            "DEEP_VEIN_THROMBOSIS_FOLLOWING_ORTHO_SURG",
            "HEMORRHAGE",
            "LACERATIONS_PERFORATION_TEAR",
            "LOSS_OF_BODY_PART_NEW",
            "OTHER_COMPLICATIONS_OF_SURGERY_OR_VAGINAL_DELIVERY",
            "POST_OP_INFECTION",
            "REMOVAL_INJ_ORGAN_NEW",
            "RETAINED_FOREIGN_BODY",
            "RUPTURED_APPENDIX",
            "RUPTURED_UTERUS",
            "SURGICAL_SITE_INFECTION_FOLLOWING_BARIATRIC_SURGERY",
            "SURGICAL_SITE_INFECTION_FOLLOWING_CABG",
            "SURGICAL_SITE_INFECTION_FOLLOWING_ORTHO_PROCEDURE",
            "WOUND_DEHISCENCE",
            "NEWBORN_ADMIT_W_IN_30_DAYS",
            "READMISSION_W_IN_1_WEEK_SAME_DX",
            "READMISSION_W_IN_30_DAYS_SAME_SIMILAR_DX",
            "READMISSION_W_IN_6_MONTHS",
            "UNPLANNED_RETURN_TO_SURGERY_OR_DELIVERY_ROOM",
            "FETAL_DEMISE",
            "SUICIDE",
            "UNEXPECTED_DEATH_WHILE_IP",
            "UNEXPECTED_DEATH_WHILE_OP",
            "ADMISSION_W_72_HRS_OF_ED",
            "COMPLICATIONS",
            "COORDINATION_OF_CARE",
            "DELAYED_DX",
            "DELAYED_TX",
            "DISSATISFIED_WITH_CARE",
            "DRUG_REACTION",
            "HYGIENE",
            "INAPPROPRIATE_PROCEDURE",
            "INAPPROPRIATE_RESTRAINT",
            "INAPPROPRIATE_TREATMENT",
            "INCREASED_UNEXPECTED_EXT_LOS",
            "INEFFECTIVE_BELOW_STANDARDS_OF_MEDICAL_CARE",
            "INEFFECTIVE_DISCHARGE_PLANNING",
            "LACK_OF_PROVIDER_FOLLOW_UP",
            "MEDICATION_ISSUE_ERROR_OMISSION_ETC",
            "MISSED_DIAGNOSIS",
            "OBSTETRICAL_COMPLICATIONS",
            "OP_PROCEDURE_TO_IP_ADMIT",
            "POST_PROCEDURE_COMPLICATION_PLAN",
            "POTENTIAL_PREMATURE_DISCHARGE",
            "QUESTIONABLE_CARE",
            "REFERRALS_NOT_REQUESTED_ORDERED",
            "REFUSAL_TO_TREAT",
            "UNPLANNED_TRANSFER_IN_LOC",
            "UNPLANNED_TRANSFER_TO_ICU",
            "WRONG_DIAGNOSIS",
            "ABUSE_BY_CAREGIVER",
            "COMMUNITY_COMPLAINT_DISTURBANCE_THEFT_ETC",
            "DOCUMENTATION",
            "ENVIRONMENTAL_SAFETY",
            "EQUIPMENT_SUPPLIES",
            "FALL",
            "INJURY_OTHER_THAN_FALL",
            "LEFT_AMA",
            "MBR_REFUSED_TO_TX_OR_SERVICES",
            "NEGLECT",
            "PHYSICAL_MISCONDUCT",
            "PROVIDER_CONTRACT_COMPLIANCE",
            "SEXUAL_MISCONDUCT",
            "ELOPEMENT",
            "HOMICIDE",
            "HOMICIDE_ATTEMPT",
            "INAPPROPRIATE_INTERPERSONAL_INTERACTIONS",
            "OTHER_1",
            "OTHER_2",
            "SUICIDE_OP",
            "SUICIDE_IP",
            "SUICIDE_ATTEMPT_OP",
            "SUICIDE_ATTEMPT_IP",
            "ANGINA",
            "ASTHMA",
            "BACTERIAL_PNEUMONIA",
            "BREAST_CANCER",
            "CERVICAL_CANCER",
            "CHF",
            "COPD",
            "DEHYDRATION",
            "DIABETIC_COMPLICATIONS",
            "HYPERTENSION",
            "LEAD_INPATIENT_ADMISSION",
            "PERFORATED_RUPTURED_APPENDIX",
            "UTI",
            "BLOOD_INCOMPATIBILITY",
            "CATHETER_ASSOCIATED_UTI",
            "HYPOGLYCEMIC_COMA",
            "NONKETOTIC_HYPEROSMOLAR_COMA",
            "PRESSURE_ULCER_STAGE_III_IV",
            "SECONDARY_DIABETES_W_KETOACIDOSIS",
            "SECONDARY_DIABETES_W_HYPEROSMOLARITY",
            "VASCULAR_CATHETER_ASSOCIATED_INFECTION"
          ],
          "type": "string"
        },
        "incidentType": {
          "enum": [
            "ACCESS_TO_PROVIDERS",
            "AFTERHOURS_ACCESS",
            "APPOINTMENT_AVAILABILITY",
            "CAR_SEAT_PROBLEMS",
            "CULTURAL_BARRIER",
            "DELAYS_IN_SERVICE",
            "LANGUAGE_BARRIER",
            "PHARMACY_ACCESSIBILITY",
            "PROVIDER_NO_LONGER_ACCEPTING_MBRS",
            "PROVIDER_REFUSAL_TO_TREAT_MEMBER",
            "TRANSPORTATION",
            "TRANSPORTATION_SOURCE_REFUSALS",
            "PROVIDER_BILLING_MEMBER",
            "CO_PAY_ISSUES",
            "COB_ISSUE",
            "CLAIMS_PAYMENT_PROCESSING",
            "ELIGIBILITY_ENROLLMENT_ISSUES",
            "COMPLAINT_RE_HEALTH_PLAN_AS",
            "COMPLAINT_RE_PROVIDER_AS",
            "PHYSICAL_APPEARANCE",
            "ADEQUACY_OF_EXAM_ROOM",
            "ADEQUACY_OF_WAITING_ROOM",
            "EXCESSIVE_WAIT_TIME",
            "OFFICE_QUALITY_CONTROLS",
            "PHYSICAL_ACCESSIBILITY",
            "COMPLAINT_RE_HEALTH_PLAN_MRR",
            "COMPLAINT_RE_PROVIDER_MRR",
            "SERVICES_NOT_PROVIDED",
            "LICENSURE_CERTIFICATION_ETC",
            "ADVERSE_MEDICAL_EVENT",
            "ADVERSE_SURGICAL_EVENT",
            "READMISSION",
            "UNEXPECTED_DEATH",
            "MEDICAL_CARE_BELOW_STANDARD",
            "SAFETY_RISK_MANAGEMENT",
            "ADVERSE_BEHAV_HEALTH_INCIDENT",
            "ADMISSIONS_FOR",
            "HOSPITAL_ACQUIRED_CONDITIONS"
          ],
          "type": "string"
        },
        "openDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "planNotifiedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "referralDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "referralSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "referredBy": {
          "enum": [
            "CM",
            "FACILITY",
            "MEMBER",
            "PROVIDER",
            "UM"
          ],
          "type": "string"
        },
        "referredByDetails": {
          "type": "string"
        },
        "relatedAuthorization": {
          "type": "string"
        },
        "relatedFacility": {
          "type": "string"
        },
        "relatedFacilityId": {
          "type": "string"
        },
        "relatedProvider": {
          "type": "string"
        },
        "relatedProviderId": {
          "type": "string"
        },
        "reportingCategory": {
          "enum": [
            "ACCESS_AVAILABILITY",
            "ATTITUDE_AND_SERVICE",
            "BILLING",
            "FRAUD",
            "MEMBER_R_R",
            "OFFICE_SITE_QUALITY",
            "POTENTIAL_PREVENT_HEALTH_INCIDENT",
            "QUALITY_OF_CARE"
          ],
          "type": "string"
        },
        "subTypeOther": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object"
    },
    "QualityIncidentOutcome": {
      "properties": {
        "qiOutcome": {
          "$ref": "#/definitions/QIOutcome"
        },
        "qualityIncident": {
          "$ref": "#/definitions/QualityIncident"
        },
        "qualityIncidentAdvisorReview": {
          "$ref": "#/definitions/QIAdvisorReview"
        },
        "qualityIncidentReview": {
          "$ref": "#/definitions/QIReview"
        }
      },
      "type": "object"
    },
    "QualityIncidentSummary": {
      "properties": {
        "attachments": {
          "items": {
            "$ref": "#/definitions/SimpleDocumentInfo"
          },
          "type": "array",
          "uniqueItems": true
        },
        "closedDate": {
          "format": "date-time",
          "type": "string"
        },
        "incidentDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "incidentId": {
          "type": "string"
        },
        "incidentNumber": {
          "type": "string"
        },
        "reportingCategory": {
          "enum": [
            "ACCESS_AVAILABILITY",
            "ATTITUDE_AND_SERVICE",
            "BILLING",
            "FRAUD",
            "MEMBER_R_R",
            "OFFICE_SITE_QUALITY",
            "POTENTIAL_PREVENT_HEALTH_INCIDENT",
            "QUALITY_OF_CARE"
          ],
          "type": "string"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object"
    },
    "QuestionDefinition": {
      "properties": {
        "answerDefinitions": {
          "items": {
            "$ref": "#/definitions/AnswerDefinition"
          },
          "type": "array"
        },
        "childrenWithReadyToExport": {
          "items": {
            "$ref": "#/definitions/Exportable"
          },
          "type": "array"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "definitionVersion": {
          "$ref": "#/definitions/DefinitionVersion"
        },
        "definitionVersionNumber": {
          "format": "int32",
          "type": "integer"
        },
        "draft": {
          "type": "boolean"
        },
        "exportEntityDetails": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "lineage": {
          "$ref": "#/definitions/SimpleLineage"
        },
        "metaStatus": {
          "enum": [
            "IN_PROGRESS",
            "PUBLISHED",
            "HIDDEN"
          ],
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "pastPublishDate": {
          "type": "boolean"
        },
        "publishComment": {
          "type": "string"
        },
        "publishDateToday": {
          "type": "boolean"
        },
        "published": {
          "type": "boolean"
        },
        "questionText": {
          "type": "string"
        },
        "readyToExport": {
          "type": "boolean"
        },
        "readyToExportInfo": {
          "$ref": "#/definitions/ReadyToExportInfo"
        },
        "source": {
          "enum": [
            "MCG",
            "TRUCARE"
          ],
          "type": "string"
        },
        "suggestRequired": {
          "type": "boolean"
        },
        "targetPublishDate": {
          "format": "date",
          "type": "string"
        },
        "toolTip": {
          "type": "string"
        },
        "updateAvailable": {
          "enum": [
            "NO_UPDATE",
            "UPDATE_AVAILABLE",
            "UPDATE_APPLIED",
            "UPDATE_APPLIED_WITH_NEW_VERSION"
          ],
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "visibleId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "QuestionGroupDefinition": {
      "properties": {
        "childrenWithReadyToExport": {
          "items": {
            "$ref": "#/definitions/Exportable"
          },
          "type": "array"
        },
        "conditionalAssessmentArtifactType": {
          "enum": [
            "MEDICATION"
          ],
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "definitionVersion": {
          "$ref": "#/definitions/DefinitionVersion"
        },
        "definitionVersionNumber": {
          "format": "int32",
          "type": "integer"
        },
        "draft": {
          "type": "boolean"
        },
        "exportEntityDetails": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "lineage": {
          "$ref": "#/definitions/SimpleLineage"
        },
        "metaStatus": {
          "enum": [
            "IN_PROGRESS",
            "PUBLISHED",
            "HIDDEN"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "pastPublishDate": {
          "type": "boolean"
        },
        "publishComment": {
          "type": "string"
        },
        "publishDateToday": {
          "type": "boolean"
        },
        "published": {
          "type": "boolean"
        },
        "questionDefinitions": {
          "items": {
            "$ref": "#/definitions/QuestionDefinition"
          },
          "type": "array"
        },
        "readyToExport": {
          "type": "boolean"
        },
        "readyToExportInfo": {
          "$ref": "#/definitions/ReadyToExportInfo"
        },
        "repeatForArtifactBasedCondition": {
          "type": "boolean"
        },
        "source": {
          "enum": [
            "MCG",
            "TRUCARE"
          ],
          "type": "string"
        },
        "targetPublishDate": {
          "format": "date",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "visibleId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "QuestionGroupLite": {
      "properties": {
        "conditionalAssessmentArtifactType": {
          "enum": [
            "MEDICATION"
          ],
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "repeatForArtifactBasedCondition": {
          "type": "boolean"
        },
        "visibleId": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "QuestionGroupLite",
        "namespace": "http://www.casenet.com/QuestionGroupLite"
      }
    },
    "QuestionGroupResult": {
      "properties": {
        "assessmentQuestionGroupId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "notes": {
          "items": {
            "$ref": "#/definitions/NoteInstance"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "QuestionGroupResult",
        "namespace": "http://www.casenet.com/QuestionGroupResult"
      }
    },
    "QuestionGroupResultDto": {
      "properties": {
        "assessmentQuestionGroupId": {
          "type": "string"
        },
        "notes": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "assessmentQuestionGroupId",
        "notes"
      ],
      "type": "object",
      "xml": {
        "name": "QuestionGroupResultDto",
        "namespace": "http://www.casenet.com/QuestionGroupResultDto"
      }
    },
    "Queue": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "resource": {
          "$ref": "#/definitions/Resource"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "QueueSearchCriteria": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "label": {
          "$ref": "#/definitions/StringCriteria"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "name": {
          "$ref": "#/definitions/StringCriteria"
        },
        "queueId": {
          "type": "string"
        },
        "queuePermission": {
          "enum": [
            "ASSIGNABLE",
            "CLAIMABLE",
            "VIEWABLE"
          ],
          "type": "string",
          "xml": {
            "name": "QueuePermission",
            "namespace": "http://www.casenet.com/QueuePermission"
          }
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/QueueSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "QueueSearchCriteria",
        "namespace": "http://www.casenet.com/QueueSearchCriteria"
      }
    },
    "QueueSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/Queue"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "QueueSearchResults",
        "namespace": "http://www.casenet.com/QueueSearchResults"
      }
    },
    "QueueSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "NAME",
            "DESCRIPTION",
            "ID",
            "LABEL"
          ],
          "type": "string",
          "xml": {
            "name": "QueueSortColumn",
            "namespace": "http://www.casenet.com/QueueSortColumn"
          }
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "QueueSortField",
        "namespace": "http://www.casenet.com/QueueSortField"
      }
    },
    "QueueStatistic": {
      "properties": {
        "numberOfTasks": {
          "format": "int32",
          "type": "integer"
        },
        "queue": {
          "$ref": "#/definitions/Queue"
        }
      },
      "type": "object"
    },
    "QueueStatistics": {
      "properties": {
        "numberOfNotIncludedTasks": {
          "format": "int64",
          "type": "integer"
        },
        "queueStatistics": {
          "items": {
            "$ref": "#/definitions/QueueStatistic"
          },
          "type": "array"
        },
        "totalNumberOfTasks": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "QueueTaskBrowserConfiguration": {
      "properties": {
        "allPrograms": {
          "type": "boolean"
        },
        "availableTaskBrowserAttributes": {
          "items": {
            "$ref": "#/definitions/TaskBrowserAttribute"
          },
          "type": "array"
        },
        "licenseFeature": {
          "$ref": "#/definitions/CustomerFeature"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "program": {
          "$ref": "#/definitions/QueueTaskBrowserProgram"
        },
        "queue": {
          "$ref": "#/definitions/Queue"
        },
        "taskBrowserAttributes": {
          "items": {
            "$ref": "#/definitions/TaskBrowserAttribute"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "QueueTaskBrowserConfiguration",
        "namespace": "http://www.casenet.com/QueueTaskBrowserConfiguration"
      }
    },
    "QueueTaskBrowserProgram": {
      "properties": {
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "programFamily": {
          "$ref": "#/definitions/OptionValue"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "QueueTaskBrowserProgram",
        "namespace": "http://www.casenet.com/QueueTaskBrowserProgram"
      }
    },
    "ReAssignOwnershipRequest": {
      "properties": {
        "artifactIds": {
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array"
        },
        "artifactType": {
          "enum": [
            "AUTHORIZATION",
            "CAREPLAN",
            "CASE",
            "QUALITYINCIDENT",
            "TASK"
          ],
          "type": "string"
        },
        "ownerUserName": {
          "type": "string"
        }
      },
      "required": [
        "artifactIds",
        "artifactType",
        "ownerUserName"
      ],
      "type": "object"
    },
    "ReactingAllergy": {
      "properties": {
        "description": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReactingMedication": {
      "properties": {
        "description": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReadmissionRequest": {
      "properties": {
        "readmitDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "readmitNotes": {
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "readmitReasonOption": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ReadmissionRequest",
        "namespace": "http://www.casenet.com/ReadmissionRequest"
      }
    },
    "ReadyToExportInfo": {
      "properties": {
        "authorizedBy": {
          "$ref": "#/definitions/User"
        },
        "editable": {
          "type": "boolean"
        },
        "readyToExport": {
          "type": "boolean"
        },
        "readyToExportDt": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RecommendedAssessmentMetaTaskInfo": {
      "properties": {
        "assessmentMetaId": {
          "type": "string"
        },
        "assessmentMetaName": {
          "type": "string"
        },
        "assignee": {
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "ALLOW_USER_TO_SELECT",
            "ASSIGNED_TEAM",
            "CURRENT_USER",
            "PRIMARY_CASE_OWNER",
            "QUEUE",
            "TEAM",
            "USER"
          ],
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "taskPriority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        }
      },
      "type": "object"
    },
    "ReenrollProgramEnrollmentRequest": {
      "properties": {
        "authorizedByUsername": {
          "type": "string"
        },
        "details": {
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "engagementLevelOption": {
          "type": "string"
        },
        "firstSessionTaskPackageVisibleId": {
          "type": "string"
        },
        "reenrollDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "reenrollReasonOption": {
          "type": "string"
        },
        "reenrollReasonOther": {
          "type": "string"
        },
        "serviceLevelOption": {
          "type": "string"
        }
      },
      "required": [
        "authorizedByUsername"
      ],
      "type": "object",
      "xml": {
        "name": "ReenrollProgramEnrollmentRequest",
        "namespace": "http://www.casenet.com/ReenrollProgramEnrollmentRequest"
      }
    },
    "Referral": {
      "properties": {
        "caseLite": {
          "$ref": "#/definitions/CnCaseLite"
        },
        "decisionAssignee": {
          "$ref": "#/definitions/Assignee"
        },
        "enterDecisionNow": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "finalDecision": {
          "$ref": "#/definitions/ReferralFinalDecision"
        },
        "firstName": {
          "type": "string"
        },
        "furtherEvaluationAssignee": {
          "$ref": "#/definitions/Assignee"
        },
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "otherReasonDescription": {
          "type": "string"
        },
        "otherReferralSource": {
          "type": "string"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneAndExtension"
        },
        "reasonsForReferral": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "referralComments": {
          "type": "string"
        },
        "referralSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "sourceDescription": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "enterDecisionNow",
        "requestDate"
      ],
      "type": "object",
      "xml": {
        "name": "Referral",
        "namespace": "http://www.casenet.com/Referral"
      }
    },
    "Referral2": {
      "properties": {
        "caseLite": {
          "$ref": "#/definitions/CnCaseLite"
        },
        "decisionAssignee": {
          "$ref": "#/definitions/Assignee"
        },
        "enterDecisionNow": {
          "type": "boolean"
        },
        "finalDecision": {
          "$ref": "#/definitions/ReferralFinalDecision"
        },
        "firstName": {
          "type": "string"
        },
        "furtherEvaluationAssignee": {
          "$ref": "#/definitions/Assignee"
        },
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "otherReasonDescription": {
          "type": "string"
        },
        "otherReferralSource": {
          "type": "string"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneAndExtension"
        },
        "reasonsForReferral": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "referralComments": {
          "type": "string"
        },
        "referralDeterminationExtendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "referralSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "referralSourceInformationExtendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "sourceDescription": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "enterDecisionNow",
        "requestDate"
      ],
      "type": "object",
      "xml": {
        "name": "Referral2",
        "namespace": "http://www.casenet.com/Referral2"
      }
    },
    "ReferralConfiguration": {
      "properties": {
        "declinedReasonLabel": {
          "type": "string"
        },
        "declinedReasonOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "reasonsForReferralFieldLabel": {
          "type": "string"
        },
        "reasonsForReferralOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "reasonsForReferralRequired": {
          "type": "boolean"
        },
        "referralSourceFieldLabel": {
          "type": "string"
        },
        "referralSourceOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "referralSourceRequired": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "ReferralConfiguration",
        "namespace": "http://www.casenet.com/ReferralConfiguration"
      }
    },
    "ReferralConfiguration3": {
      "properties": {
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "referralDeterminationExtendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "referralSourceInformationExtendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "ReferralConfiguration3",
        "namespace": "http://www.casenet.com/ReferralConfiguration3"
      }
    },
    "ReferralDraftFinalDecisionRequest": {
      "properties": {
        "declineReasonOption": {
          "type": "string"
        },
        "declineReasonOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "determinationDate": {
          "format": "date-time",
          "type": "string"
        },
        "referralAction": {
          "enum": [
            "MEETS_CRITERIA",
            "DOES_NOT_MEET_CRITERIA",
            "ASSIGN_TO_ANOTHER"
          ],
          "type": "string",
          "xml": {
            "name": "ReferralAction",
            "namespace": "http://www.casenet.com/ReferralAction"
          }
        },
        "screeningNotes": {
          "maxLength": 1500,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ReferralDraftFinalDecisionRequest",
        "namespace": "http://www.casenet.com/ReferralDraftFinalDecisionRequest"
      }
    },
    "ReferralFinalDecision": {
      "properties": {
        "declineReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "declineReasonOther": {
          "type": "string"
        },
        "determinationDate": {
          "format": "date-time",
          "type": "string"
        },
        "determinationUser": {
          "$ref": "#/definitions/User"
        },
        "determinationUserId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "memberAccepted": {
          "type": "boolean"
        },
        "otherEvaluationCompleteDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "otherEvaluationDescription": {
          "type": "string"
        },
        "referralAction": {
          "enum": [
            "MEETS_CRITERIA",
            "DOES_NOT_MEET_CRITERIA",
            "ASSIGN_TO_ANOTHER"
          ],
          "type": "string",
          "xml": {
            "name": "ReferralAction",
            "namespace": "http://www.casenet.com/ReferralAction"
          }
        },
        "screeningNotes": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "determinationDate"
      ],
      "type": "object",
      "xml": {
        "name": "ReferralFinalDecision",
        "namespace": "http://www.casenet.com/ReferralFinalDecision"
      }
    },
    "ReferralFinalDecisionRequest": {
      "properties": {
        "declineReasonOptionValueId": {
          "type": "string"
        },
        "declineReasonOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "determinationDate": {
          "format": "date-time",
          "type": "string"
        },
        "referralAction": {
          "enum": [
            "MEETS_CRITERIA",
            "DOES_NOT_MEET_CRITERIA",
            "ASSIGN_TO_ANOTHER"
          ],
          "type": "string",
          "xml": {
            "name": "ReferralAction",
            "namespace": "http://www.casenet.com/ReferralAction"
          }
        },
        "screeningNotes": {
          "maxLength": 1500,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "determinationDate",
        "referralAction"
      ],
      "type": "object",
      "xml": {
        "name": "ReferralFinalDecisionRequest",
        "namespace": "http://www.casenet.com/ReferralFinalDecisionRequest"
      }
    },
    "ReferralFinalDecisionRequest2": {
      "properties": {
        "declineReasonOption": {
          "type": "string"
        },
        "declineReasonOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "determinationDate": {
          "format": "date-time",
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "referralAction": {
          "enum": [
            "MEETS_CRITERIA",
            "DOES_NOT_MEET_CRITERIA",
            "ASSIGN_TO_ANOTHER"
          ],
          "type": "string",
          "xml": {
            "name": "ReferralAction",
            "namespace": "http://www.casenet.com/ReferralAction"
          }
        },
        "screeningNotes": {
          "maxLength": 1500,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "determinationDate",
        "referralAction"
      ],
      "type": "object",
      "xml": {
        "name": "ReferralFinalDecisionRequest2",
        "namespace": "http://www.casenet.com/ReferralFinalDecisionRequest2"
      }
    },
    "ReferralFinalDecisionRequest3": {
      "properties": {
        "declineReasonOption": {
          "type": "string"
        },
        "declineReasonOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "determinationDate": {
          "format": "date-time",
          "type": "string"
        },
        "referralAction": {
          "enum": [
            "MEETS_CRITERIA",
            "DOES_NOT_MEET_CRITERIA",
            "ASSIGN_TO_ANOTHER"
          ],
          "type": "string",
          "xml": {
            "name": "ReferralAction",
            "namespace": "http://www.casenet.com/ReferralAction"
          }
        },
        "screeningNotes": {
          "maxLength": 1500,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "determinationDate",
        "referralAction"
      ],
      "type": "object",
      "xml": {
        "name": "ReferralFinalDecisionRequest3",
        "namespace": "http://www.casenet.com/ReferralFinalDecisionRequest3"
      }
    },
    "ReferralLite": {
      "properties": {
        "caseLite": {
          "$ref": "#/definitions/CnCaseLite"
        },
        "id": {
          "type": "string"
        },
        "isDraft": {
          "type": "boolean"
        },
        "otherReferralSource": {
          "type": "string"
        },
        "referralAction": {
          "enum": [
            "MEETS_CRITERIA",
            "DOES_NOT_MEET_CRITERIA",
            "ASSIGN_TO_ANOTHER"
          ],
          "type": "string",
          "xml": {
            "name": "ReferralAction",
            "namespace": "http://www.casenet.com/ReferralAction"
          }
        },
        "referralSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "requestDate"
      ],
      "type": "object",
      "xml": {
        "name": "ReferralLite",
        "namespace": "http://www.casenet.com/ReferralLite"
      }
    },
    "ReferralLiteSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/ReferralLite"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "ReferralLiteSearchResults",
        "namespace": "http://www.casenet.com/ReferralLiteSearchResults"
      }
    },
    "ReferralNotificationDetails": {
      "properties": {
        "id": {
          "type": "string"
        },
        "letterDetails": {
          "$ref": "#/definitions/InternalLetterDetails"
        },
        "phoneNotificationDetails": {
          "$ref": "#/definitions/PhoneNotificationDetails"
        },
        "referralId": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "referralId"
      ],
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "ReferralResponseLite": {
      "properties": {
        "referralId": {
          "type": "string"
        },
        "taskId": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ReferralResponseLite",
        "namespace": "http://www.casenet.com/ReferralResponseLite"
      }
    },
    "ReinstateProgramEnrollmentRequest": {
      "properties": {
        "authorizedByUsername": {
          "type": "string"
        },
        "details": {
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "engagementLevelOption": {
          "type": "string"
        },
        "reinstateReasonOption": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "required": [
        "authorizedByUsername"
      ],
      "type": "object",
      "xml": {
        "name": "ReinstateProgramEnrollmentRequest",
        "namespace": "http://www.casenet.com/ReinstateProgramEnrollmentRequest"
      }
    },
    "RelatedAssessment": {
      "properties": {
        "assessmentMetaId": {
          "type": "string"
        },
        "assessmentMetaVisibleId": {
          "type": "string"
        },
        "completedBy": {
          "$ref": "#/definitions/User"
        },
        "completedDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "mcgCustom": {
          "type": "boolean"
        },
        "mcgVersion": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "source": {
          "enum": [
            "MCG",
            "TRUCARE"
          ],
          "type": "string",
          "xml": {
            "name": "AssessmentSource",
            "namespace": "http://www.casenet.com/AssessmentSource"
          }
        },
        "statusType": {
          "enum": [
            "IN_PROGRESS",
            "COMPLETE",
            "VOID"
          ],
          "type": "string"
        },
        "type": {
          "enum": [
            "INITIAL",
            "GENERAL",
            "SPECIALTY"
          ],
          "type": "string",
          "xml": {
            "name": "AssessmentType",
            "namespace": "http://www.casenet.com/AssessmentType"
          }
        }
      },
      "type": "object"
    },
    "RelatedTask": {
      "properties": {
        "assignedTo": {
          "type": "string"
        },
        "assignee": {
          "$ref": "#/definitions/TaskAssigneeResponse"
        },
        "assigneeType": {
          "enum": [
            "ALLOW_USER_TO_SELECT",
            "ASSIGNED_TEAM",
            "CURRENT_USER",
            "PRIMARY_CASE_OWNER",
            "QUEUE",
            "TEAM",
            "USER"
          ],
          "type": "string"
        },
        "closeDate": {
          "format": "date-time",
          "type": "string"
        },
        "createTaskonSubmit": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "priority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "enum": [
            "OPEN",
            "CLOSED",
            "CANCELLED",
            "OVERDUE",
            "NOT_CREATED"
          ],
          "type": "string",
          "xml": {
            "name": "TaskStatus",
            "namespace": "http://www.casenet.com/TaskStatus"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "RelatedTask",
        "namespace": "http://www.casenet.com/RelatedTask"
      }
    },
    "RelatedTaskRequest": {
      "properties": {
        "assignedType": {
          "enum": [
            "ALLOW_USER_TO_SELECT",
            "ASSIGNED_TEAM",
            "CURRENT_USER",
            "PRIMARY_CASE_OWNER",
            "QUEUE",
            "TEAM",
            "USER"
          ],
          "type": "string"
        },
        "createTaskOnSubmit": {
          "type": "boolean"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "taskAssignee": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "taskPriority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        }
      },
      "type": "object"
    },
    "Relationship": {
      "properties": {
        "otherMember": {
          "$ref": "#/definitions/MemberLite"
        },
        "otherMemberAge": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "Relationship",
        "namespace": "http://www.casenet.com/Relationship"
      }
    },
    "RemoveActionRequest": {
      "properties": {
        "id": {
          "type": "string"
        },
        "parentObjectiveId": {
          "type": "string"
        },
        "parentProblemId": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "version"
      ],
      "type": "object"
    },
    "RemoveAuthorizationDiagnosis": {
      "properties": {
        "diagnosisCodeIdSet": {
          "items": {
            "$ref": "#/definitions/AuthorizationDiagnosisCode"
          },
          "type": "array",
          "uniqueItems": true
        },
        "primaryAdmittingDiagnosisId": {
          "$ref": "#/definitions/AuthorizationDiagnosisCode"
        }
      },
      "type": "object",
      "xml": {
        "name": "RemoveAuthorizationDiagnosis",
        "namespace": "http://www.casenet.com/RemoveAuthorizationDiagnosis"
      }
    },
    "RemoveObjectiveOutcomeRequest": {
      "properties": {
        "id": {
          "type": "string"
        },
        "parentObjectiveId": {
          "type": "string"
        },
        "parentProblemId": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "parentObjectiveId",
        "version"
      ],
      "type": "object"
    },
    "RemoveObjectiveRequest": {
      "properties": {
        "id": {
          "type": "string"
        },
        "parentProblemId": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "version"
      ],
      "type": "object"
    },
    "RemoveProblemRequest": {
      "properties": {
        "id": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "version"
      ],
      "type": "object"
    },
    "ReopenCarePlanRequest": {
      "properties": {
        "details": {
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "reopenReasonOption": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReopenCaseRequest": {
      "properties": {
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "statusChangeAuthorizedByOther": {
          "type": "string"
        },
        "statusChangeAuthorizedByUserName": {
          "type": "string"
        },
        "statusChangeDetail": {
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "statusChangeReasonOption": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "ReopenHcsWaiverEnrollmentRequest": {
      "properties": {
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "taskAssigneeRequest": {
          "$ref": "#/definitions/TaskAssigneeRequest"
        },
        "taskPackageId": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "ReopenProgramTaskPackageRequest": {
      "properties": {
        "programEnrollmentStatusId": {
          "type": "string"
        },
        "programEnrollmentStatusVersion": {
          "format": "int32",
          "type": "integer"
        },
        "taskPackageInstanceId": {
          "type": "string"
        },
        "taskPackageInstanceVersion": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "programEnrollmentStatusId",
        "programEnrollmentStatusVersion",
        "taskPackageInstanceId",
        "taskPackageInstanceVersion"
      ],
      "type": "object"
    },
    "RequestForInformation": {
      "properties": {
        "attempts": {
          "items": {
            "$ref": "#/definitions/RequestForInformationAttempt"
          },
          "type": "array",
          "uniqueItems": true
        },
        "dateReceived": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "requestForInformationSystemType": {
          "enum": [
            "LINE_ITEM"
          ],
          "type": "string",
          "xml": {
            "name": "RequestForInformationSystemType",
            "namespace": "http://www.casenet.com/RequestForInformationSystemType"
          }
        },
        "requestType": {
          "$ref": "#/definitions/OptionValue"
        },
        "requestedForIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "RequestForInformation",
        "namespace": "http://www.casenet.com/RequestForInformation"
      }
    },
    "RequestForInformationAttempt": {
      "properties": {
        "additionalInfoRequested": {
          "type": "string"
        },
        "attemptNumber": {
          "format": "int32",
          "type": "integer"
        },
        "attemptedBy": {
          "$ref": "#/definitions/User"
        },
        "attemptingProviderName": {
          "type": "string"
        },
        "dateAttempted": {
          "format": "date-time",
          "type": "string"
        },
        "faxNumber": {
          "type": "string"
        },
        "faxNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "id": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "phoneNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "RequestForInformationAttempt",
        "namespace": "http://www.casenet.com/RequestForInformationAttempt"
      }
    },
    "RequestForInformationConfiguration": {
      "properties": {
        "defaultDescription": {
          "type": "string"
        },
        "defaultOffset": {
          "format": "int32",
          "type": "integer"
        },
        "defaultPriority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "defaultQueueAssignee": {
          "$ref": "#/definitions/Queue"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "RequestForInformationConfiguration",
        "namespace": "http://www.casenet.com/RequestForInformationConfiguration"
      }
    },
    "RequestForInformationRequest": {
      "properties": {
        "dateOfAttempt": {
          "format": "date-time",
          "type": "string"
        },
        "dateReceived": {
          "format": "date-time",
          "type": "string"
        },
        "faxNumber": {
          "$ref": "#/definitions/Phone"
        },
        "faxNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "informationRequested": {
          "maxLength": 4000,
          "minLength": 1,
          "type": "string"
        },
        "nextTask": {
          "$ref": "#/definitions/CommonActionPathRequest"
        },
        "phoneNumber": {
          "$ref": "#/definitions/Phone"
        },
        "phoneNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "provider": {
          "maxLength": 250,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "informationRequested"
      ],
      "type": "object",
      "xml": {
        "name": "RequestForInformationRequest",
        "namespace": "http://www.casenet.com/RequestForInformationRequest"
      }
    },
    "RequestingProvider": {
      "properties": {
        "authSpecificContactAddress": {
          "$ref": "#/definitions/Address"
        },
        "authSpecificContactFax": {
          "type": "string"
        },
        "authSpecificContactFaxI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "authSpecificContactName": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "authSpecificContactPhone": {
          "type": "string"
        },
        "authSpecificContactPhoneExtension": {
          "type": "string"
        },
        "authSpecificContactPhoneI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/SimpleAttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "inNetwork": {
          "type": "boolean"
        },
        "requestingProvider": {
          "$ref": "#/definitions/AuthorizationLocation"
        },
        "requestingProviderPhoneNumber": {
          "$ref": "#/definitions/PhoneAndExtension"
        },
        "requestingProviderPhoneNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "requestingProviderSpecialty": {
          "$ref": "#/definitions/OptionValue"
        },
        "requestingProviderSpecialtyEffectiveDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "requestingProviderSpecialtyTerminationDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "useAuthSpecificContactAddressForCorrespondence": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "RequestingProvider",
        "namespace": "http://www.casenet.com/RequestingProvider"
      }
    },
    "RequestingProviderRequest": {
      "properties": {
        "authSpecificContactAddress": {
          "$ref": "#/definitions/CreateAddressRequest"
        },
        "authSpecificContactFax": {
          "$ref": "#/definitions/Phone"
        },
        "authSpecificContactFaxI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "authSpecificContactName": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "authSpecificContactPhone": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "authSpecificContactPhoneI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "requestingProviderLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "requestingProviderPhoneNumber": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "requestingProviderPhoneNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "requestingProviderSpecialtyOption": {
          "type": "string"
        },
        "useAuthSpecificContactAddressForCorrespondence": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "RequestingProviderRequest",
        "namespace": "http://www.casenet.com/RequestingProviderRequest"
      }
    },
    "ResolveDuplicateCandidateRequest": {
      "properties": {
        "determination": {
          "enum": [
            "NONE",
            "NOT_MATCH",
            "MATCH_NOT_MERGED",
            "MATCH_MERGED"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Resource": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "customerFeatures": {
          "items": {
            "$ref": "#/definitions/CustomerFeature"
          },
          "type": "array",
          "uniqueItems": true
        },
        "hcsResource": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "programs": {
          "items": {
            "$ref": "#/definitions/Program"
          },
          "type": "array",
          "uniqueItems": true
        },
        "type": {
          "enum": [
            "Screen",
            "Queue",
            "Assessment",
            "LetterTemplate",
            "Careplan",
            "Problem",
            "NoteDefinition",
            "KeyMetric",
            "CostSavings",
            "Task"
          ],
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ResourceLink": {
      "properties": {
        "label": {
          "type": "string"
        },
        "menuId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ResourceVersion": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "customerFeatures": {
          "items": {
            "$ref": "#/definitions/CustomerFeature"
          },
          "type": "array",
          "uniqueItems": true
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "programs": {
          "items": {
            "$ref": "#/definitions/Program"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RestrictedStringCriteria": {
      "properties": {
        "matchType": {
          "enum": [
            "BEGINS_WITH",
            "EQUALS"
          ],
          "type": "string",
          "xml": {
            "name": "RestrictedStringMatchType",
            "namespace": "http://www.casenet.com/RestrictedStringMatchType"
          }
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "RestrictedStringCriteria",
        "namespace": "http://www.casenet.com/RestrictedStringCriteria"
      }
    },
    "ReviewerRequest": {
      "type": "object",
      "xml": {
        "name": "ReviewerRequest",
        "namespace": "http://www.casenet.com/ReviewerRequest"
      }
    },
    "RiskIndicatorHistory": {
      "properties": {
        "acuityLevel": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "conditionList": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "indicatorDate": {
          "format": "date-time",
          "type": "string"
        },
        "riskCategory": {
          "$ref": "#/definitions/OptionValue"
        },
        "riskCategoryOption": {
          "type": "string"
        },
        "riskIndicatorCode": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "riskIndicatorName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "riskStatus": {
          "enum": [
            "OPEN",
            "INACTIVE",
            "CLOSED",
            "REOPENED"
          ],
          "type": "string",
          "xml": {
            "name": "RiskIndicatorStatusType",
            "namespace": "http://www.casenet.com/RiskIndicatorStatusType"
          }
        },
        "riskValue": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "riskValueType": {
          "enum": [
            "STRING",
            "INTEGER",
            "DECIMAL",
            "PERCENTAGE"
          ],
          "type": "string",
          "xml": {
            "name": "RiskIndicatorValueType",
            "namespace": "http://www.casenet.com/RiskIndicatorValueType"
          }
        },
        "source": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "statusDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "indicatorDate",
        "riskIndicatorCode"
      ],
      "type": "object",
      "xml": {
        "name": "RiskIndicatorHistory",
        "namespace": "http://www.casenet.com/RiskIndicatorHistory"
      }
    },
    "RiskIndicatorHistoryResponse": {
      "properties": {
        "riskIndicatorHistoryList": {
          "items": {
            "$ref": "#/definitions/RiskIndicatorHistory"
          },
          "type": "array"
        },
        "riskIndicatorResponse": {
          "$ref": "#/definitions/RiskIndicatorResponse"
        }
      },
      "type": "object",
      "xml": {
        "name": "RiskIndicatorHistoryResponse",
        "namespace": "http://www.casenet.com/RiskIndicatorHistoryResponse"
      }
    },
    "RiskIndicatorHistorySearchCriteria": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/RiskIndicatorSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "RiskIndicatorHistorySearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "riskIndicatorResponse": {
          "$ref": "#/definitions/RiskIndicatorResponse"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/RiskIndicatorHistory"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "RiskIndicatorRequest": {
      "properties": {
        "acuityLevel": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "conditionList": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "indicatorDate": {
          "format": "date-time",
          "type": "string"
        },
        "riskCategoryOption": {
          "type": "string"
        },
        "riskIndicatorCode": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "riskIndicatorName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "riskStatus": {
          "enum": [
            "OPEN",
            "INACTIVE",
            "CLOSED",
            "REOPENED"
          ],
          "type": "string",
          "xml": {
            "name": "RiskIndicatorStatusType",
            "namespace": "http://www.casenet.com/RiskIndicatorStatusType"
          }
        },
        "riskValue": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "riskValueType": {
          "enum": [
            "STRING",
            "INTEGER",
            "DECIMAL",
            "PERCENTAGE"
          ],
          "type": "string",
          "xml": {
            "name": "RiskIndicatorValueType",
            "namespace": "http://www.casenet.com/RiskIndicatorValueType"
          }
        },
        "source": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "statusDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "indicatorDate",
        "riskCategoryOption",
        "riskIndicatorCode",
        "riskIndicatorName"
      ],
      "type": "object",
      "xml": {
        "name": "RiskIndicatorRequest",
        "namespace": "http://www.casenet.com/RiskIndicatorRequest"
      }
    },
    "RiskIndicatorResponse": {
      "properties": {
        "acuityLevel": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "conditionList": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "indicatorDate": {
          "format": "date-time",
          "type": "string"
        },
        "riskCategory": {
          "$ref": "#/definitions/OptionValue"
        },
        "riskCategoryOption": {
          "type": "string"
        },
        "riskIndicatorCode": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "riskIndicatorName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "riskStatus": {
          "enum": [
            "OPEN",
            "INACTIVE",
            "CLOSED",
            "REOPENED"
          ],
          "type": "string",
          "xml": {
            "name": "RiskIndicatorStatusType",
            "namespace": "http://www.casenet.com/RiskIndicatorStatusType"
          }
        },
        "riskValue": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "riskValueType": {
          "enum": [
            "STRING",
            "INTEGER",
            "DECIMAL",
            "PERCENTAGE"
          ],
          "type": "string",
          "xml": {
            "name": "RiskIndicatorValueType",
            "namespace": "http://www.casenet.com/RiskIndicatorValueType"
          }
        },
        "source": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "statusDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "indicatorDate",
        "riskIndicatorCode"
      ],
      "type": "object",
      "xml": {
        "name": "RiskIndicatorResponse",
        "namespace": "http://www.casenet.com/RiskIndicatorResponse"
      }
    },
    "RiskIndicatorSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "RISK_INDICATOR",
            "CATEGORY",
            "RISK_INDICATOR_NAME",
            "CONDITION",
            "ACUITY_RISK",
            "RISK_INDICATOR_VAL",
            "RISK_INDICATOR_DATE",
            "SOURCE",
            "STATUS",
            "STATUS_DATE"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "RxAuthorizationBhpConfiguration": {
      "properties": {
        "allowPrescreenSkip": {
          "type": "boolean"
        },
        "authorizationTypeDisabled": {
          "type": "boolean"
        },
        "authorizationTypeDisabledMessage": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "behavioralDiagnosisDisabledForBHP": {
          "type": "boolean"
        },
        "behavioralDiagnosisDisabledForBHPMessage": {
          "type": "string"
        },
        "mandatoryPrescreenEnabled": {
          "type": "boolean"
        },
        "medicalDiagnosisDisabledForBHP": {
          "type": "boolean"
        },
        "medicalDiagnosisDisabledForBHPMessage": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "RxAuthorizationBhpConfiguration",
        "namespace": "http://www.casenet.com/RxAuthorizationBhpConfiguration"
      }
    },
    "RxAuthorizationConfiguration": {
      "properties": {
        "authorizationDocumentConfiguration": {
          "$ref": "#/definitions/PortableConfiguration"
        },
        "authorizationHeaderConfiguration": {
          "$ref": "#/definitions/ExtendedAttributesConfiguration"
        },
        "authorizationSpecificContactAddressEnabled": {
          "type": "boolean"
        },
        "codesExpirationAction": {
          "enum": [
            "IGNORE",
            "ALLOW_WITH_WARNING",
            "DISALLOW"
          ],
          "type": "string",
          "xml": {
            "name": "CodesEffectiveDateConfiguration",
            "namespace": "http://www.casenet.com/CodesEffectiveDateConfiguration"
          }
        },
        "diagnosisConfiguration": {
          "$ref": "#/definitions/ExtendedAttributesConfiguration"
        },
        "documentSources": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "documentTypes": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "frequencies": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "levelOfUrgencies": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "levelOfUrgencyRequired": {
          "type": "boolean"
        },
        "methodRequired": {
          "type": "boolean"
        },
        "methods": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "oonReasons": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "placeOfServices": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "prescreenNoteEnabled": {
          "type": "boolean"
        },
        "prescreenNotesEnabledAuthNotRequired": {
          "type": "boolean"
        },
        "prescreenNotesEnabledAuthRequired": {
          "type": "boolean"
        },
        "proxyProviderIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "requestingProviderConfiguration": {
          "$ref": "#/definitions/ExtendedAttributesConfiguration"
        },
        "serviceTypes": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "sourceRequired": {
          "type": "boolean"
        },
        "sources": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "taskActivityValues": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "urgencyRequestedByRequired": {
          "type": "boolean"
        },
        "urgencyRequesters": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "RxAuthorizationConfiguration",
        "namespace": "http://www.casenet.com/RxAuthorizationConfiguration"
      }
    },
    "RxAuthorizationHeader": {
      "properties": {
        "appealed": {
          "type": "boolean"
        },
        "approvedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "authorizationDiagnosis": {
          "$ref": "#/definitions/AuthorizationDiagnosis"
        },
        "authorizationLocks": {
          "items": {
            "$ref": "#/definitions/Lock"
          },
          "type": "array",
          "uniqueItems": true
        },
        "authorizationNum": {
          "type": "string"
        },
        "authorizationState": {
          "enum": [
            "OPEN",
            "OPEN_MODIFIED",
            "OPEN_REVISED",
            "CLOSED",
            "VOID",
            "DISCHARGED",
            "DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationState",
            "namespace": "http://www.casenet.com/UMAuthorizationState"
          }
        },
        "canBeDenied": {
          "type": "boolean"
        },
        "caseId": {
          "type": "string"
        },
        "continuityOfCare": {
          "type": "boolean"
        },
        "courtOrdered": {
          "type": "boolean"
        },
        "dateSentToClaims": {
          "format": "date-time",
          "type": "string"
        },
        "deniedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "eligibleVerified": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/SimpleAttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "isOpen": {
          "type": "boolean"
        },
        "levelOfUrgency": {
          "$ref": "#/definitions/OptionValue"
        },
        "locked": {
          "type": "boolean"
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestMethod": {
          "$ref": "#/definitions/OptionValue"
        },
        "requestSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "requestedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "requestingProvider": {
          "$ref": "#/definitions/RequestingProvider"
        },
        "singleCaseAgreement": {
          "type": "boolean"
        },
        "stateDate": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "UMStatus",
            "namespace": "http://www.casenet.com/UMStatus"
          }
        },
        "trackingNum": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "urgencyRequestedBy": {
          "$ref": "#/definitions/OptionValue"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "RxAuthorizationHeader",
        "namespace": "http://www.casenet.com/AuthorizationHeader"
      }
    },
    "RxAuthorizationHeaderRequest": {
      "properties": {
        "continuityOfCare": {
          "type": "boolean"
        },
        "courtOrdered": {
          "type": "boolean"
        },
        "eligibleVerified": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "levelOfUrgencyOption": {
          "type": "string"
        },
        "ownerUsername": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestMethodOption": {
          "type": "string"
        },
        "requestSourceOption": {
          "type": "string"
        },
        "singleCaseAgreement": {
          "type": "boolean"
        },
        "urgencyRequestedByOption": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "RxAuthorizationHeaderRequest",
        "namespace": "http://www.casenet.com/RxAuthorizationHeaderRequest"
      }
    },
    "RxAuthorizationPrescreenRequest": {
      "properties": {
        "appliedEligibilityProductId": {
          "$ref": "#/definitions/ProductId"
        },
        "drugQuantity": {
          "format": "int32",
          "maximum": 999,
          "minimum": 1,
          "type": "integer"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "inNetwork": {
          "type": "boolean"
        },
        "lineItemTypeOption": {
          "type": "string"
        },
        "medicationCodeId": {
          "type": "string"
        },
        "noteInstanceId": {
          "type": "string"
        },
        "prescreenAuthorizationDiagnosis": {
          "$ref": "#/definitions/PrescreenAuthorizationDiagnosis"
        },
        "requestSourceOption": {
          "type": "string"
        },
        "servicingLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "servicingLocationIdType": {
          "enum": [
            "SERVICING_FACILITY",
            "SERVICING_PROVIDER"
          ],
          "type": "string"
        },
        "servicingProviderLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "servicingProviderSpecialtyOption": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "required": [
        "medicationCodeId"
      ],
      "type": "object",
      "xml": {
        "name": "RxAuthorizationPrescreenRequest",
        "namespace": "http://www.casenet.com/RxAuthorizationPrescreenRequest"
      }
    },
    "RxAuthorizationRequest": {
      "properties": {
        "authDiagnosisRequest": {
          "$ref": "#/definitions/CreateCommonAuthorizationDiagnosisRequest"
        },
        "authorizationHeaderRequest": {
          "$ref": "#/definitions/RxAuthorizationHeaderRequest"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/CreateRxLineItemRequest"
          },
          "type": "array"
        },
        "newLineItems": {
          "items": {
            "$ref": "#/definitions/CreateLineItemRequest"
          },
          "type": "array"
        },
        "nextTask": {
          "$ref": "#/definitions/ActionPathRequest"
        },
        "noteRequests": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "preScreenNoteInstanceId": {
          "type": "string"
        },
        "prescreenNoteGroupId": {
          "type": "string"
        },
        "requestingProviderRequest": {
          "$ref": "#/definitions/RequestingProviderRequest"
        },
        "trackingNum": {
          "type": "string"
        }
      },
      "required": [
        "lineItems"
      ],
      "type": "object",
      "xml": {
        "name": "RxAuthorizationRequest",
        "namespace": "http://www.casenet.com/AuthorizationRequest"
      }
    },
    "RxDTO": {
      "properties": {
        "coPay": {
          "$ref": "#/definitions/Money"
        },
        "coverage": {
          "type": "boolean"
        },
        "deductible": {
          "$ref": "#/definitions/Money"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtensibleObject",
        "namespace": "http://www.casenet.com/ExtensibleObject"
      }
    },
    "RxLineItem": {
      "properties": {
        "advisorReviewRequired": {
          "type": "boolean"
        },
        "appliedEligibility": {
          "$ref": "#/definitions/Eligibility"
        },
        "approvedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "authSpecificContactAddress": {
          "$ref": "#/definitions/Address"
        },
        "authSpecificContactFax": {
          "type": "string"
        },
        "authSpecificContactFaxI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "authSpecificContactName": {
          "type": "string"
        },
        "authSpecificContactPhone": {
          "$ref": "#/definitions/PhoneNumberObject"
        },
        "authSpecificContactPhoneI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "authorizationId": {
          "type": "string"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "breAutoApprovable": {
          "type": "boolean"
        },
        "clinicalReviewRequired": {
          "type": "boolean"
        },
        "deniedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "determination": {
          "$ref": "#/definitions/Determination"
        },
        "determinationDueDate": {
          "format": "date-time",
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/SimpleAttributeValueObject"
          },
          "type": "object"
        },
        "extension": {
          "type": "boolean"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "inFormulary": {
          "type": "boolean"
        },
        "inNetwork": {
          "type": "boolean"
        },
        "levelOfUrgency": {
          "$ref": "#/definitions/OptionValue"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        },
        "lineItemType": {
          "$ref": "#/definitions/OptionValue"
        },
        "oonReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "originalRequestedFromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "originalRequestedToDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "pharmacyProgram": {
          "type": "string"
        },
        "placeOfService": {
          "$ref": "#/definitions/OptionValue"
        },
        "prescribingProviderPhoneNumber": {
          "$ref": "#/definitions/PhoneAndExtension"
        },
        "prescribingProviderPhoneNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "productFeatureExternalIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "recommendedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "serviceType": {
          "$ref": "#/definitions/OptionValue"
        },
        "servicingProvider": {
          "$ref": "#/definitions/AuthorizationLocation"
        },
        "servicingProviderSpecialty": {
          "$ref": "#/definitions/OptionValue"
        },
        "servicingProviderType": {
          "type": "string"
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND",
            "NO_DECISION",
            "REVIEWED"
          ],
          "type": "string",
          "xml": {
            "name": "UMLineItemStatus",
            "namespace": "http://www.casenet.com/UMLineItemStatus"
          }
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "umLineItemMedicationInfo": {
          "$ref": "#/definitions/LineItemMedicationInfo"
        },
        "unitsToDetermine": {
          "format": "int32",
          "type": "integer"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "urgencyRequestedBy": {
          "$ref": "#/definitions/OptionValue"
        },
        "useAuthSpecificContactAddressForCorrespondence": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "RxLineItem",
        "namespace": "http://www.casenet.com/LineItem"
      }
    },
    "RxLineItemConfiguration": {
      "properties": {
        "allowDuplicateAuthorizations": {
          "type": "boolean"
        },
        "allowDuplicatesOfDeniedLineItems": {
          "type": "boolean"
        },
        "authorizationSpecificContactAddressEnabled": {
          "type": "boolean"
        },
        "canResubmitUndeterminedLineItemsToRulesEngine": {
          "type": "boolean"
        },
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "fieldsCheckForDuplicateAuthorizations": {
          "items": {
            "enum": [
              "PROCEDURE_CODE",
              "SERVICING_PROVIDER",
              "PLACE_OF_SERVICE",
              "PL_CODE",
              "TREATMENT_TYPE",
              "MODIFIER_CODE",
              "SERVICE_TYPE",
              "SERVICING_PROVIDER_SPECIALTY",
              "STAY_LEVEL",
              "PRESCRIBING_PROVIDER"
            ],
            "type": "string",
            "xml": {
              "name": "AuthorizationField",
              "namespace": "http://www.casenet.com/AuthorizationField"
            }
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "proxyProviderIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "RxLineItemConfiguration",
        "namespace": "http://www.casenet.com/RxLineItemConfiguration"
      }
    },
    "SPLineItemDuplicateAuthConfiguration": {
      "properties": {
        "allowDuplicateAuthorizations": {
          "type": "boolean"
        },
        "allowDuplicatesOfDeniedLineItems": {
          "type": "boolean"
        },
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "fieldsCheckForDuplicateAuthorizations": {
          "items": {
            "enum": [
              "PROCEDURE_CODE",
              "SERVICING_PROVIDER",
              "PLACE_OF_SERVICE",
              "PL_CODE",
              "TREATMENT_TYPE",
              "MODIFIER_CODE",
              "SERVICE_TYPE",
              "SERVICING_PROVIDER_SPECIALTY",
              "STAY_LEVEL",
              "PRESCRIBING_PROVIDER"
            ],
            "type": "string",
            "xml": {
              "name": "AuthorizationField",
              "namespace": "http://www.casenet.com/AuthorizationField"
            }
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "SPLineItemDuplicateAuthConfiguration",
        "namespace": "http://www.casenet.com/SPLineItemDuplicateAuthConfiguration"
      }
    },
    "SPLineItemMedicationInfo": {
      "properties": {
        "drug": {
          "$ref": "#/definitions/Drug"
        },
        "frequency": {
          "$ref": "#/definitions/OptionValue"
        },
        "frequencyOther": {
          "type": "string"
        },
        "medicationCodeId": {
          "type": "string"
        },
        "prescribedDose": {
          "type": "string"
        },
        "quantity": {
          "format": "int32",
          "type": "integer"
        },
        "route": {
          "$ref": "#/definitions/OptionValue"
        },
        "routeOther": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "SPLineItemMedicationInfo",
        "namespace": "http://www.casenet.com/SPLineItemMedicationInfo"
      }
    },
    "SPLineItemMedicationInfoRequest": {
      "properties": {
        "drugId": {
          "type": "string"
        },
        "frequencyOption": {
          "type": "string"
        },
        "frequencyOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "prescribedDose": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "quantity": {
          "format": "int32",
          "maximum": 999,
          "minimum": 1,
          "type": "integer"
        },
        "routeOption": {
          "type": "string"
        },
        "routeOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "drugId",
        "frequencyOption",
        "quantity"
      ],
      "type": "object",
      "xml": {
        "name": "SPLineItemMedicationInfoRequest",
        "namespace": "http://www.casenet.com/SPLineItemMedicationInfoRequest"
      }
    },
    "SRLineItemAck": {
      "properties": {
        "acknowledged": {
          "type": "boolean"
        },
        "acknowledgedBy": {
          "$ref": "#/definitions/User"
        },
        "acknowledgedDate": {
          "format": "date-time",
          "type": "string"
        },
        "unacknowledgedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SRProcedure": {
      "properties": {
        "id": {
          "type": "string"
        },
        "modifierCodes": {
          "items": {
            "$ref": "#/definitions/ModifierCode"
          },
          "type": "array",
          "uniqueItems": true
        },
        "procedureCode": {
          "$ref": "#/definitions/ProcedureCode"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SRProcedure",
        "namespace": "http://www.casenet.com/SRProcedure"
      }
    },
    "SamlRequest": {
      "properties": {
        "userFirstName": {
          "type": "string"
        },
        "userGroupIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "userLastName": {
          "type": "string"
        },
        "userType": {
          "enum": [
            "TRUCARE",
            "PROVIDER_PORTAL",
            "API",
            "MOBILE",
            "SYSTEM"
          ],
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SamlResponse": {
      "properties": {
        "samlResponse": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "SamlResponse",
        "namespace": "http://www.casenet.com/SamlResponse"
      }
    },
    "SaveCarePlanResponse": {
      "properties": {
        "carePlanId": {
          "type": "string"
        },
        "carePlanTaskId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SaveReferralDraftRequest": {
      "properties": {
        "firstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "lastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "nextTask": {
          "$ref": "#/definitions/CommonActionPathRequest"
        },
        "otherReasonDescription": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "otherReferralSource": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "reasonsForReferralOption": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "referralComments": {
          "maxLength": 1500,
          "minLength": 0,
          "type": "string"
        },
        "referralDeterminationExtendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "referralFinalDecisionRequest": {
          "$ref": "#/definitions/ReferralDraftFinalDecisionRequest"
        },
        "referralSourceInformationExtendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "referralSourceOption": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "sourceDescription": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "referralSourceOption",
        "requestDate"
      ],
      "type": "object",
      "xml": {
        "name": "SaveReferralDraftRequest",
        "namespace": "http://www.casenet.com/SaveReferralDraftRequest"
      }
    },
    "ScreenConfigDto": {
      "properties": {
        "screenName": {
          "type": "string"
        },
        "sections": {
          "additionalProperties": {
            "$ref": "#/definitions/SectionConfigDto"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "ScreenConfigDto",
        "namespace": "http://www.casenet.com/ScreenConfigDto"
      }
    },
    "ScreenParametersDTO": {
      "properties": {
        "artifactDefId": {
          "type": "string"
        },
        "instanceId": {
          "type": "string"
        },
        "screenType": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ScreenParametersDTO",
        "namespace": "http://www.casenet.com/ScreenParametersDTO"
      }
    },
    "SectionConfigDto": {
      "properties": {
        "extendedFields": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "fields": {
          "additionalProperties": {
            "$ref": "#/definitions/FieldConfigDto"
          },
          "type": "object"
        },
        "sectionName": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "SectionConfigDto",
        "namespace": "http://www.casenet.com/SectionConfigDto"
      }
    },
    "SelectedMedication": {
      "properties": {
        "daysSupply": {
          "format": "int32",
          "type": "integer"
        },
        "drugDescription": {
          "type": "string"
        },
        "drugQuantity": {
          "format": "int32",
          "type": "integer"
        },
        "expectedRefillDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "filledDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "frequency": {
          "$ref": "#/definitions/OptionValue"
        },
        "frequencyOther": {
          "type": "string"
        },
        "lastUpdatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "medicationId": {
          "type": "string"
        },
        "medicationStatus": {
          "enum": [
            "OPEN",
            "DISCONTINUED",
            "VOIDED",
            "COMPLETED"
          ],
          "type": "string"
        },
        "pharmacy": {
          "$ref": "#/definitions/Location"
        },
        "prescribedDose": {
          "type": "string"
        },
        "prescriber": {
          "$ref": "#/definitions/Provider"
        },
        "regimenEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "regimenStartDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "route": {
          "$ref": "#/definitions/OptionValue"
        },
        "routeOtherDescription": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Service": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "manuallyAdded": {
          "type": "boolean"
        },
        "obsolete": {
          "type": "boolean"
        },
        "serviceDescription": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ServiceInformation": {
      "properties": {
        "operation": {
          "type": "string"
        },
        "paramList": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "source": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceInformation",
        "namespace": "http://www.casenet.com/ServiceInformation"
      }
    },
    "ServiceLevelAndTaskPackages": {
      "properties": {
        "initialTaskPackages": {
          "items": {
            "$ref": "#/definitions/TaskPackageInfo"
          },
          "type": "array"
        },
        "serviceLevel": {
          "$ref": "#/definitions/OptionValue"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceLevelAndTaskPackages",
        "namespace": "http://www.casenet.com/ServiceLevelAndTaskPackages"
      }
    },
    "ServiceLevelAndTaskPackagesListWrapper": {
      "properties": {
        "serviceLevelTaskPackagesList": {
          "items": {
            "$ref": "#/definitions/ServiceLevelAndTaskPackages"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceLevelAndTaskPackagesListWrapper",
        "namespace": "http://www.casenet.com/ServiceLevelAndTaskPackagesListWrapper"
      }
    },
    "ServiceLevelContactsConfig": {
      "properties": {
        "id": {
          "type": "string"
        },
        "numberOfAllowedContacts": {
          "format": "int32",
          "type": "integer"
        },
        "serviceLevel": {
          "$ref": "#/definitions/OptionValue"
        },
        "serviceLevelTaskPackageConfigs": {
          "items": {
            "$ref": "#/definitions/ServiceLevelTaskPackageConfig"
          },
          "type": "array",
          "uniqueItems": true
        },
        "serviceLimit": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "IdentifiableObject",
        "namespace": "http://www.casenet.com/IdentifiableObject"
      }
    },
    "ServiceLevelTaskPackageConfig": {
      "properties": {
        "id": {
          "type": "string"
        },
        "initialEnrollmentOption": {
          "type": "boolean"
        },
        "maxConsecutiveUnsuccessfulAttemptsAllowed": {
          "format": "int32",
          "type": "integer"
        },
        "maxInstances": {
          "format": "int32",
          "type": "integer"
        },
        "nextTaskPackageIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "taskPackage": {
          "$ref": "#/definitions/TaskPackage"
        }
      },
      "type": "object",
      "xml": {
        "name": "IdentifiableObject",
        "namespace": "http://www.casenet.com/IdentifiableObject"
      }
    },
    "ServiceOffer": {
      "properties": {
        "additionalInformation": {
          "type": "string"
        },
        "contactName": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "endDate": {
          "format": "date",
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "locations": {
          "items": {
            "$ref": "#/definitions/Location"
          },
          "type": "array",
          "uniqueItems": true
        },
        "manuallyAdded": {
          "type": "boolean"
        },
        "obsolete": {
          "type": "boolean"
        },
        "provider": {
          "$ref": "#/definitions/Provider"
        },
        "rate": {
          "$ref": "#/definitions/Money"
        },
        "rateUnit": {
          "$ref": "#/definitions/OptionValue"
        },
        "service": {
          "$ref": "#/definitions/Service"
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ServiceOfferSearchCriteria": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "languageOptionValue": {
          "type": "string"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "procedureCode": {
          "type": "string"
        },
        "serviceCodeId": {
          "type": "string"
        },
        "serviceDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "serviceName": {
          "type": "string"
        },
        "serviceNameCriteria": {
          "$ref": "#/definitions/StringCriteria"
        },
        "serviceProviderId": {
          "type": "string"
        },
        "serviceProviderName": {
          "type": "string"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "stateOptionValue": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceOfferSearchCriteria",
        "namespace": "http://www.casenet.com/ServiceOfferSearchCriteria"
      }
    },
    "ServiceOfferSearchResult": {
      "properties": {
        "additionalInformation": {
          "type": "string"
        },
        "contactName": {
          "type": "string"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "phoneNumber": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "rate": {
          "$ref": "#/definitions/Money"
        },
        "rateUnit": {
          "$ref": "#/definitions/OptionValue"
        },
        "serviceCode": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        },
        "serviceOfferId": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceOfferSearchResult",
        "namespace": "http://www.casenet.com/ServiceOfferSearchResult"
      }
    },
    "ServiceOfferSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/ServiceOfferSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceOfferSearchResults",
        "namespace": "http://www.casenet.com/ServiceOfferSearchResults"
      }
    },
    "ServiceOffersByLocationPaginatedSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/ServiceOffersByLocationResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceOffersByLocationPaginatedSearchResults",
        "namespace": "http://www.casenet.com/ServiceOffersByLocationPaginatedSearchResults"
      }
    },
    "ServiceOffersByLocationResult": {
      "properties": {
        "additionalInformation": {
          "type": "string"
        },
        "contactName": {
          "type": "string"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "rate": {
          "$ref": "#/definitions/Money"
        },
        "rateUnit": {
          "$ref": "#/definitions/OptionValue"
        },
        "serviceCode": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        },
        "serviceOfferId": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceOffersByLocationResult",
        "namespace": "http://www.casenet.com/ServiceOffersByLocationResult"
      }
    },
    "ServiceOffersByLocationSearchRequest": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "locationId": {
          "type": "string"
        },
        "locationIdType": {
          "enum": [
            "INTERNAL",
            "EXTERNAL"
          ],
          "type": "string",
          "xml": {
            "name": "LocationIdType",
            "namespace": "http://www.casenet.com/LocationIdType"
          }
        },
        "onlyInNetwork": {
          "type": "boolean"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/ServiceOffersByLocationSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "locationId"
      ],
      "type": "object",
      "xml": {
        "name": "ServiceOffersByLocationSearchRequest",
        "namespace": "http://www.casenet.com/ServiceOffersByLocationSearchRequest"
      }
    },
    "ServiceOffersByLocationSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "SERVICE_OFFER_ID",
            "SERVICE_NAME",
            "SERVICE_CODE",
            "CONTACT_NAME",
            "RATE_VALUE",
            "RATE_CURRENCY",
            "START_DATE",
            "END_DATE",
            "ADDITIONAL_INFORMATION"
          ],
          "type": "string",
          "xml": {
            "name": "ServiceOffersByLocationColumn",
            "namespace": "http://www.casenet.com/ServiceOffersByLocationColumn"
          }
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceOffersByLocationSortField",
        "namespace": "http://www.casenet.com/ServiceOffersByLocationSortField"
      }
    },
    "ServiceProcedureAuthorizationBhpConfiguration": {
      "properties": {
        "allowPrescreenSkip": {
          "type": "boolean"
        },
        "authorizationTypeDisabled": {
          "type": "boolean"
        },
        "authorizationTypeDisabledMessage": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "behavioralDiagnosisDisabledForBHP": {
          "type": "boolean"
        },
        "behavioralDiagnosisDisabledForBHPMessage": {
          "type": "string"
        },
        "mandatoryPrescreenEnabled": {
          "type": "boolean"
        },
        "medicalDiagnosisDisabledForBHP": {
          "type": "boolean"
        },
        "medicalDiagnosisDisabledForBHPMessage": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceProcedureAuthorizationBhpConfiguration",
        "namespace": "http://www.casenet.com/ServiceProcedureAuthorizationBhpConfiguration"
      }
    },
    "ServiceProcedureAuthorizationConfiguration": {
      "properties": {
        "authorizationDocumentConfiguration": {
          "$ref": "#/definitions/PortableConfiguration"
        },
        "authorizationHeaderConfiguration": {
          "$ref": "#/definitions/ExtendedAttributesConfiguration"
        },
        "authorizationSpecificContactAddressEnabled": {
          "type": "boolean"
        },
        "codesExpirationAction": {
          "enum": [
            "IGNORE",
            "ALLOW_WITH_WARNING",
            "DISALLOW"
          ],
          "type": "string",
          "xml": {
            "name": "CodesEffectiveDateConfiguration",
            "namespace": "http://www.casenet.com/CodesEffectiveDateConfiguration"
          }
        },
        "diagnosisConfiguration": {
          "$ref": "#/definitions/ExtendedAttributesConfiguration"
        },
        "prescreenNoteEnabled": {
          "type": "boolean"
        },
        "prescreenNotesEnabledAuthNotRequired": {
          "type": "boolean"
        },
        "prescreenNotesEnabledAuthRequired": {
          "type": "boolean"
        },
        "proxyProviderIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "requestedUnitsWarningThreshold": {
          "format": "int32",
          "type": "integer"
        },
        "requestingProviderConfiguration": {
          "$ref": "#/definitions/ExtendedAttributesConfiguration"
        },
        "taskActivityValues": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceProcedureAuthorizationConfiguration",
        "namespace": "http://www.casenet.com/ServiceProcedureAuthorizationConfiguration"
      }
    },
    "ServiceProcedureAuthorizationHeader": {
      "properties": {
        "appealed": {
          "type": "boolean"
        },
        "approvedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "authorizationDiagnosis": {
          "$ref": "#/definitions/AuthorizationDiagnosis"
        },
        "authorizationLocks": {
          "items": {
            "$ref": "#/definitions/Lock"
          },
          "type": "array",
          "uniqueItems": true
        },
        "authorizationNum": {
          "type": "string"
        },
        "authorizationState": {
          "enum": [
            "OPEN",
            "OPEN_MODIFIED",
            "OPEN_REVISED",
            "CLOSED",
            "VOID",
            "DISCHARGED",
            "DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationState",
            "namespace": "http://www.casenet.com/UMAuthorizationState"
          }
        },
        "canBeDenied": {
          "type": "boolean"
        },
        "caseId": {
          "type": "string"
        },
        "continuityOfCare": {
          "type": "boolean"
        },
        "courtOrdered": {
          "type": "boolean"
        },
        "dateSentToClaims": {
          "format": "date-time",
          "type": "string"
        },
        "deniedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "eligibleVerified": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/SimpleAttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "isOpen": {
          "type": "boolean"
        },
        "levelOfUrgency": {
          "$ref": "#/definitions/OptionValue"
        },
        "locked": {
          "type": "boolean"
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestMethod": {
          "$ref": "#/definitions/OptionValue"
        },
        "requestSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "requestedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "requestingProvider": {
          "$ref": "#/definitions/RequestingProvider"
        },
        "singleCaseAgreement": {
          "type": "boolean"
        },
        "stateDate": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "UMStatus",
            "namespace": "http://www.casenet.com/UMStatus"
          }
        },
        "trackingNum": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "urgencyRequestedBy": {
          "$ref": "#/definitions/OptionValue"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceProcedureAuthorizationHeader",
        "namespace": "http://www.casenet.com/AuthorizationHeader"
      }
    },
    "ServiceProcedureAuthorizationHeaderRequest": {
      "properties": {
        "continuityOfCare": {
          "type": "boolean"
        },
        "courtOrdered": {
          "type": "boolean"
        },
        "eligibleVerified": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "levelOfUrgencyOption": {
          "type": "string"
        },
        "ownerUsername": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestMethodOption": {
          "type": "string"
        },
        "requestSourceOption": {
          "type": "string"
        },
        "singleCaseAgreement": {
          "type": "boolean"
        },
        "urgencyRequestedByOption": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceProcedureAuthorizationHeaderRequest",
        "namespace": "http://www.casenet.com/ServiceProcedureAuthorizationHeaderRequest"
      }
    },
    "ServiceProcedureAuthorizationPrescreenRequest": {
      "properties": {
        "appliedEligibilityProductId": {
          "$ref": "#/definitions/ProductId"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "inNetwork": {
          "type": "boolean"
        },
        "lineItemTypeOption": {
          "type": "string"
        },
        "noteInstanceId": {
          "type": "string"
        },
        "placeOfServiceOption": {
          "type": "string"
        },
        "prescreenAuthorizationDiagnosis": {
          "$ref": "#/definitions/PrescreenAuthorizationDiagnosis"
        },
        "procedureCodeId": {
          "$ref": "#/definitions/ProcedureCodeNaturalId"
        },
        "requestSourceOption": {
          "type": "string"
        },
        "requestedUnits": {
          "format": "int32",
          "maximum": 999999999,
          "minimum": 0,
          "type": "integer"
        },
        "serviceTypeOption": {
          "type": "string"
        },
        "servicingLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "servicingLocationIdType": {
          "enum": [
            "SERVICING_FACILITY",
            "SERVICING_PROVIDER"
          ],
          "type": "string"
        },
        "servicingProviderLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "servicingProviderSpecialtyOption": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "required": [
        "placeOfServiceOption",
        "requestedUnits",
        "serviceTypeOption"
      ],
      "type": "object",
      "xml": {
        "name": "ServiceProcedureAuthorizationPrescreenRequest",
        "namespace": "http://www.casenet.com/ServiceProcedureAuthorizationPrescreenRequest"
      }
    },
    "ServiceProcedureAuthorizationPrescreenRequestV2": {
      "properties": {
        "prescreenAuthorizationDiagnosis": {
          "$ref": "#/definitions/PrescreenAuthorizationDiagnosis"
        },
        "requestSourceOption": {
          "type": "string"
        },
        "serviceProcedureLineItemRequests": {
          "items": {
            "$ref": "#/definitions/ServiceProcedureLineItemPrescreenRequest"
          },
          "type": "array"
        }
      },
      "required": [
        "serviceProcedureLineItemRequests"
      ],
      "type": "object"
    },
    "ServiceProcedureAuthorizationRequest": {
      "properties": {
        "authDiagnosisRequest": {
          "$ref": "#/definitions/CreateCommonAuthorizationDiagnosisRequest"
        },
        "authorizationHeaderRequest": {
          "$ref": "#/definitions/ServiceProcedureAuthorizationHeaderRequest"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/CreateServiceProcedureLineItemRequest"
          },
          "type": "array"
        },
        "newLineItems": {
          "items": {
            "$ref": "#/definitions/CreateLineItemRequest"
          },
          "type": "array"
        },
        "nextTask": {
          "$ref": "#/definitions/ActionPathRequest"
        },
        "noteRequests": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "preScreenNoteInstanceId": {
          "type": "string"
        },
        "prescreenNoteGroupId": {
          "type": "string"
        },
        "requestingProviderRequest": {
          "$ref": "#/definitions/RequestingProviderRequest"
        },
        "trackingNum": {
          "type": "string"
        }
      },
      "required": [
        "lineItems"
      ],
      "type": "object",
      "xml": {
        "name": "ServiceProcedureAuthorizationRequest",
        "namespace": "http://www.casenet.com/AuthorizationRequest"
      }
    },
    "ServiceProcedureDefinition": {
      "properties": {
        "adjustedRouteOptions": {
          "$ref": "#/definitions/TailoredOptionValues"
        },
        "adjustedRoutes": {
          "items": {
            "$ref": "#/definitions/ServiceProcedureDefinitionAdjustedRoute"
          },
          "type": "array",
          "uniqueItems": true
        },
        "bhpNode": {
          "$ref": "#/definitions/BhpNode"
        },
        "clinicalReviewRequested": {
          "type": "boolean"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "defaultLocationCode": {
          "$ref": "#/definitions/LocationCode"
        },
        "defaultModifierCode": {
          "$ref": "#/definitions/ModifierCode"
        },
        "defaultOptionsInAvailableOptions": {
          "type": "boolean"
        },
        "defaultPlCode": {
          "$ref": "#/definitions/OptionValue"
        },
        "defaultPlaceOfService": {
          "$ref": "#/definitions/OptionValue"
        },
        "defaultTreatmentType": {
          "$ref": "#/definitions/OptionValue"
        },
        "defaultUnitType": {
          "$ref": "#/definitions/OptionValue"
        },
        "diagnosisType": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "BEHAVIORAL_DSM5"
          ],
          "type": "string"
        },
        "displayAdjustedDose": {
          "type": "boolean"
        },
        "displayAdjustedRoute": {
          "type": "boolean"
        },
        "displayMedicationSearch": {
          "type": "boolean"
        },
        "displayedCollectionsEmpty": {
          "type": "boolean"
        },
        "guidelines": {
          "type": "string"
        },
        "hideThisServiceType": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "locationCodes": {
          "items": {
            "$ref": "#/definitions/LocationCode"
          },
          "type": "array",
          "uniqueItems": true
        },
        "medicationSearchRequired": {
          "type": "boolean"
        },
        "modifierCodes": {
          "items": {
            "$ref": "#/definitions/ModifierCode"
          },
          "type": "array",
          "uniqueItems": true
        },
        "obsolete": {
          "type": "boolean"
        },
        "plCodeOptions": {
          "$ref": "#/definitions/TailoredOptionValues"
        },
        "placeOfServiceOptions": {
          "$ref": "#/definitions/TailoredOptionValues"
        },
        "serviceType": {
          "$ref": "#/definitions/OptionValue"
        },
        "showAuthBy": {
          "type": "boolean"
        },
        "showLocationCode": {
          "type": "boolean"
        },
        "showModifierCode": {
          "type": "boolean"
        },
        "showPlCode": {
          "type": "boolean"
        },
        "showTreatmentType": {
          "type": "boolean"
        },
        "treatmentTypeOptions": {
          "$ref": "#/definitions/TailoredOptionValues"
        },
        "treatmentTypeRequired": {
          "type": "boolean"
        },
        "unitTypeOptions": {
          "$ref": "#/definitions/TailoredOptionValues"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ServiceProcedureDefinitionAdjustedRoute": {
      "properties": {
        "adjustedRoute": {
          "$ref": "#/definitions/OptionValue"
        },
        "defaultAdjustedRoute": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "serviceProcedureDefinition": {
          "$ref": "#/definitions/ServiceProcedureDefinition"
        }
      },
      "type": "object"
    },
    "ServiceProcedureLineItem": {
      "properties": {
        "advisorReviewRequired": {
          "type": "boolean"
        },
        "appliedEligibility": {
          "$ref": "#/definitions/Eligibility"
        },
        "approvedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "authBy": {
          "enum": [
            "GROUP",
            "SPECIALTY",
            "PROVIDER",
            "PROCEDURE_CODE"
          ],
          "type": "string",
          "xml": {
            "name": "AuthorizedByType",
            "namespace": "http://www.casenet.com/AuthorizedByType"
          }
        },
        "authSpecificContactAddress": {
          "$ref": "#/definitions/Address"
        },
        "authSpecificContactFax": {
          "type": "string"
        },
        "authSpecificContactFaxI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "authSpecificContactName": {
          "type": "string"
        },
        "authSpecificContactPhone": {
          "$ref": "#/definitions/PhoneNumberObject"
        },
        "authSpecificContactPhoneI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "authorizationId": {
          "type": "string"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "breAutoApprovable": {
          "type": "boolean"
        },
        "clinicalReviewRequired": {
          "type": "boolean"
        },
        "deniedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "determination": {
          "$ref": "#/definitions/Determination"
        },
        "determinationDueDate": {
          "format": "date-time",
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/SimpleAttributeValueObject"
          },
          "type": "object"
        },
        "extension": {
          "type": "boolean"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "guidelines": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "inNetwork": {
          "type": "boolean"
        },
        "levelOfUrgency": {
          "$ref": "#/definitions/OptionValue"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        },
        "lineItemType": {
          "$ref": "#/definitions/OptionValue"
        },
        "locationCode": {
          "$ref": "#/definitions/LocationCode"
        },
        "oonReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "originalRequestedFromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "originalRequestedToDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "originalRequestedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "plCode": {
          "$ref": "#/definitions/OptionValue"
        },
        "placeOfService": {
          "$ref": "#/definitions/OptionValue"
        },
        "primaryProcedure": {
          "$ref": "#/definitions/Procedure"
        },
        "procedures": {
          "items": {
            "$ref": "#/definitions/Procedure"
          },
          "type": "array",
          "uniqueItems": true
        },
        "productFeatureExternalIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "recommendedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestedUnits": {
          "format": "int32",
          "type": "integer"
        },
        "serviceType": {
          "$ref": "#/definitions/OptionValue"
        },
        "servicingProvider": {
          "$ref": "#/definitions/AuthorizationLocation"
        },
        "servicingProviderPhoneNumber": {
          "$ref": "#/definitions/PhoneAndExtension"
        },
        "servicingProviderPhoneNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "servicingProviderSpecialty": {
          "$ref": "#/definitions/OptionValue"
        },
        "servicingProviderType": {
          "type": "string"
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND",
            "NO_DECISION",
            "REVIEWED"
          ],
          "type": "string",
          "xml": {
            "name": "UMLineItemStatus",
            "namespace": "http://www.casenet.com/UMLineItemStatus"
          }
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "treatmentType": {
          "$ref": "#/definitions/OptionValue"
        },
        "umLineItemMedicationInfo": {
          "$ref": "#/definitions/SPLineItemMedicationInfo"
        },
        "unitType": {
          "$ref": "#/definitions/OptionValue"
        },
        "unitsToDetermine": {
          "format": "int32",
          "type": "integer"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "urgencyRequestedBy": {
          "$ref": "#/definitions/OptionValue"
        },
        "useAuthSpecificContactAddressForCorrespondence": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceProcedureLineItem",
        "namespace": "http://www.casenet.com/LineItem"
      }
    },
    "ServiceProcedureLineItemConfiguration": {
      "properties": {
        "allowDuplicateAuthorizations": {
          "type": "boolean"
        },
        "allowDuplicatesOfDeniedLineItems": {
          "type": "boolean"
        },
        "authorizationSpecificContactAddressEnabled": {
          "type": "boolean"
        },
        "canResubmitUndeterminedLineItemsToRulesEngine": {
          "type": "boolean"
        },
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "fieldsCheckForDuplicateAuthorizations": {
          "items": {
            "enum": [
              "PROCEDURE_CODE",
              "SERVICING_PROVIDER",
              "PLACE_OF_SERVICE",
              "PL_CODE",
              "TREATMENT_TYPE",
              "MODIFIER_CODE",
              "SERVICE_TYPE",
              "SERVICING_PROVIDER_SPECIALTY",
              "STAY_LEVEL",
              "PRESCRIBING_PROVIDER"
            ],
            "type": "string",
            "xml": {
              "name": "AuthorizationField",
              "namespace": "http://www.casenet.com/AuthorizationField"
            }
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "proxyProviderIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "requestedUnitsWarningThreshold": {
          "format": "int32",
          "type": "integer"
        },
        "serviceProcedureDefinition": {
          "$ref": "#/definitions/ServiceProcedureDefinition"
        },
        "serviceTypeOption": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceProcedureLineItemConfiguration",
        "namespace": "http://www.casenet.com/ServiceProcedureLineItemConfiguration"
      }
    },
    "ServiceProcedureLineItemPrescreenRequest": {
      "properties": {
        "appliedEligibilityProductId": {
          "$ref": "#/definitions/ProductId"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "inNetwork": {
          "type": "boolean"
        },
        "lineItemTypeOption": {
          "type": "string"
        },
        "placeOfServiceOption": {
          "type": "string"
        },
        "procedureCodes": {
          "items": {
            "$ref": "#/definitions/PrescreenProcedureCodeRequest"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array"
        },
        "serviceTypeOption": {
          "type": "string"
        },
        "servicingLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "servicingLocationIdType": {
          "enum": [
            "SERVICING_FACILITY",
            "SERVICING_PROVIDER"
          ],
          "type": "string"
        },
        "servicingProviderLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "servicingProviderSpecialtyId": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "required": [
        "placeOfServiceOption",
        "procedureCodes",
        "serviceTypeOption"
      ],
      "type": "object"
    },
    "ServiceQuantity": {
      "properties": {
        "everySoMany": {
          "format": "int32",
          "type": "integer"
        },
        "everySoManyUnits": {
          "enum": [
            "DAYS",
            "WEEKS",
            "MONTHS",
            "YEARS"
          ],
          "type": "string",
          "xml": {
            "name": "ServiceQuantityPeriodUnitType",
            "namespace": "http://www.casenet.com/ServiceQuantityPeriodUnitType"
          }
        },
        "forAPeriodOf": {
          "format": "int32",
          "type": "integer"
        },
        "forAPeriodOfUnitType": {
          "enum": [
            "DAYS",
            "WEEKS",
            "MONTHS",
            "YEARS"
          ],
          "type": "string",
          "xml": {
            "name": "ServiceQuantityPeriodUnitType",
            "namespace": "http://www.casenet.com/ServiceQuantityPeriodUnitType"
          }
        },
        "id": {
          "type": "string"
        },
        "specificDaysOfWeek": {
          "format": "int32",
          "type": "integer"
        },
        "times": {
          "format": "int32",
          "type": "integer"
        },
        "totalCalculatedQuantity": {
          "format": "double",
          "type": "number"
        },
        "totalQuantity": {
          "format": "double",
          "type": "number"
        },
        "totalQuantityUnits": {
          "enum": [
            "UNITS",
            "VISITS",
            "HOURS",
            "QUARTER_HOURS"
          ],
          "type": "string",
          "xml": {
            "name": "ServiceQuantityUnitType",
            "namespace": "http://www.casenet.com/ServiceQuantityUnitType"
          }
        },
        "unitQuantity": {
          "format": "double",
          "type": "number"
        },
        "unitQuantityUnits": {
          "enum": [
            "UNITS",
            "VISITS",
            "HOURS",
            "QUARTER_HOURS"
          ],
          "type": "string",
          "xml": {
            "name": "ServiceQuantityUnitType",
            "namespace": "http://www.casenet.com/ServiceQuantityUnitType"
          }
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceQuantity",
        "namespace": "http://www.casenet.com/ServiceQuantity"
      }
    },
    "ServiceRequest": {
      "properties": {
        "appliedWaiverEnrollment": {
          "$ref": "#/definitions/OptionValue"
        },
        "approaches": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "closeDate": {
          "format": "date-time",
          "type": "string"
        },
        "cnCase": {
          "$ref": "#/definitions/CnCaseLite"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "feedback": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "fundingSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "id": {
          "type": "string"
        },
        "lineItemList": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mcp": {
          "type": "string"
        },
        "memberDirected": {
          "type": "boolean"
        },
        "nextTaskCreated": {
          "type": "boolean"
        },
        "notes": {
          "items": {
            "$ref": "#/definitions/NoteInstance"
          },
          "type": "array",
          "uniqueItems": true
        },
        "ownerTeam": {
          "$ref": "#/definitions/TeamInfo"
        },
        "ownerUser": {
          "$ref": "#/definitions/User"
        },
        "referenceNumber": {
          "type": "string"
        },
        "reviewer": {
          "$ref": "#/definitions/User"
        },
        "sequenceId": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/ServiceRequestStatus"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceRequest",
        "namespace": "http://www.casenet.com/ServiceRequest"
      }
    },
    "ServiceRequestActionPath": {
      "properties": {
        "actionPathActivity": {
          "enum": [
            "SR_DETERMINATION_TASK",
            "SR_NOTIFICATION_TASK"
          ],
          "type": "string"
        },
        "assignedTo": {
          "$ref": "#/definitions/Assignee"
        },
        "description": {
          "maxLength": 2048,
          "minLength": 0,
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "priority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "selectedLineItems": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "useRuleOutputs": {
          "type": "boolean"
        }
      },
      "required": [
        "actionPathActivity",
        "useRuleOutputs"
      ],
      "type": "object",
      "xml": {
        "name": "AbstractActionPathRequest",
        "namespace": "http://www.casenet.com/AbstractActionPathRequest"
      }
    },
    "ServiceRequestAssignee": {
      "properties": {
        "assigneeId": {
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "USER",
            "TEAM"
          ],
          "type": "string",
          "xml": {
            "name": "ServiceRequestAssigneeType",
            "namespace": "http://www.casenet.com/ServiceRequestAssigneeType"
          }
        }
      },
      "required": [
        "assigneeId",
        "assigneeType"
      ],
      "type": "object",
      "xml": {
        "name": "ServiceRequestAssignee",
        "namespace": "http://www.casenet.com/ServiceRequestAssignee"
      }
    },
    "ServiceRequestBHPConfiguration": {
      "properties": {
        "hcsFeatureAvailableToMember": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceRequestBHPConfiguration",
        "namespace": "http://www.casenet.com/ServiceRequestBHPConfiguration"
      }
    },
    "ServiceRequestConfiguration": {
      "properties": {
        "codesExpirationAction": {
          "enum": [
            "IGNORE",
            "ALLOW_WITH_WARNING",
            "DISALLOW"
          ],
          "type": "string",
          "xml": {
            "name": "CodesEffectiveDateConfiguration",
            "namespace": "http://www.casenet.com/CodesEffectiveDateConfiguration"
          }
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "serviceRequestAuthorizationRequestedQuantityThreshold": {
          "format": "int32",
          "type": "integer"
        },
        "serviceRequestHeaderConfiguration": {
          "$ref": "#/definitions/ServiceRequestHeaderConfiguration"
        },
        "serviceRequestLineItemConfiguration": {
          "$ref": "#/definitions/ServiceRequestLineItemConfiguration"
        },
        "serviceRequestLineItemRequestedQuantityThreshold": {
          "format": "int32",
          "type": "integer"
        },
        "voidConfig": {
          "$ref": "#/definitions/VoidConfig"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceRequestConfiguration",
        "namespace": "http://www.casenet.com/ServiceRequestConfiguration"
      }
    },
    "ServiceRequestDecision": {
      "properties": {
        "dateSentToClaims": {
          "format": "date-time",
          "type": "string"
        },
        "decisionQuantity": {
          "type": "number"
        },
        "id": {
          "type": "string"
        },
        "serviceRequestDecisionStatusType": {
          "enum": [
            "APPROVE",
            "DENY",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "ServiceRequestDecisionStatusType",
            "namespace": "http://www.casenet.com/ServiceRequestDecisionStatusType"
          }
        },
        "varianceReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceRequestDecision",
        "namespace": "http://www.casenet.com/ServiceRequestDecision"
      }
    },
    "ServiceRequestDetermination": {
      "properties": {
        "claimInformation": {
          "type": "string"
        },
        "dateSentToClaims": {
          "format": "date-time",
          "type": "string"
        },
        "determinationBy": {
          "$ref": "#/definitions/User"
        },
        "determinationDate": {
          "format": "date-time",
          "type": "string"
        },
        "explanation": {
          "$ref": "#/definitions/OptionValue"
        },
        "id": {
          "type": "string"
        },
        "readyForClaims": {
          "type": "boolean"
        },
        "serviceQuantity": {
          "$ref": "#/definitions/ServiceQuantity"
        },
        "serviceRequestDecisions": {
          "items": {
            "$ref": "#/definitions/ServiceRequestDecision"
          },
          "type": "array"
        },
        "serviceRequestStatus": {
          "$ref": "#/definitions/ServiceRequestStatus"
        },
        "trackingNumber": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceRequestDetermination",
        "namespace": "http://www.casenet.com/ServiceRequestDetermination"
      }
    },
    "ServiceRequestDeterminationRequest": {
      "properties": {
        "claimInformation": {
          "maxLength": 264,
          "minLength": 0,
          "type": "string"
        },
        "determinationDate": {
          "format": "date-time",
          "type": "string"
        },
        "explanationOption": {
          "type": "string"
        },
        "serviceQuantity": {
          "$ref": "#/definitions/ServiceQuantity"
        },
        "serviceRequestDecisions": {
          "items": {
            "$ref": "#/definitions/ServiceRequestDecision"
          },
          "type": "array"
        },
        "serviceRequestStatus": {
          "$ref": "#/definitions/ServiceRequestStatus"
        }
      },
      "type": "object"
    },
    "ServiceRequestDuplicateCheckRequest": {
      "properties": {
        "serviceRequestDuplicateLineItemCheckRequests": {
          "items": {
            "$ref": "#/definitions/ServiceRequestDuplicateLineItemCheckRequest"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServiceRequestDuplicateLineItemCheckRequest": {
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "appliedEligibilityId": {
          "type": "string"
        },
        "details": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "negotiateUnitRate": {
          "format": "double",
          "type": "number"
        },
        "overrideCost": {
          "format": "double",
          "type": "number"
        },
        "requestDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "serviceLocationTypeOptionId": {
          "type": "string"
        },
        "serviceOfferRequest": {
          "$ref": "#/definitions/ServiceRequestServiceOfferRequest"
        },
        "serviceQuantityRequest": {
          "$ref": "#/definitions/BaseServiceRequestServiceQuantityRequest"
        },
        "serviceRequestLineItemDeterminationRequest": {
          "$ref": "#/definitions/ServiceRequestLineItemDeterminationRequest"
        },
        "serviceRequestProcedureRequest": {
          "$ref": "#/definitions/ServiceRequestSRProcedureRequest"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "endDate",
        "startDate"
      ],
      "type": "object",
      "xml": {
        "name": "BaseServiceRequestLineItemRequest",
        "namespace": "http://www.casenet.com/BaseServiceRequestLineItemRequest"
      }
    },
    "ServiceRequestDuplicationCheckResult": {
      "properties": {
        "referenceNumber": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServiceRequestGlobalSearchRequest": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "referenceNumber": {
          "$ref": "#/definitions/StringCriteria"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/ServiceRequestSearchSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "ServiceRequestGlobalSearchResult": {
      "properties": {
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "referenceNumber": {
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "state": {
          "enum": [
            "DRAFT",
            "OPEN",
            "CLOSED",
            "VOID"
          ],
          "type": "string",
          "xml": {
            "name": "ServiceRequestState",
            "namespace": "http://www.casenet.com/ServiceRequestState"
          }
        },
        "status": {
          "$ref": "#/definitions/ServiceRequestStatus"
        }
      },
      "type": "object"
    },
    "ServiceRequestGlobalSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/ServiceRequestGlobalSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "ServiceRequestHeader": {
      "properties": {
        "closeDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isOpen": {
          "type": "boolean"
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "ownerTeam": {
          "$ref": "#/definitions/TeamInfo"
        },
        "referenceNumber": {
          "type": "string"
        },
        "state": {
          "enum": [
            "DRAFT",
            "OPEN",
            "CLOSED",
            "VOID"
          ],
          "type": "string",
          "xml": {
            "name": "ServiceRequestState",
            "namespace": "http://www.casenet.com/ServiceRequestState"
          }
        },
        "status": {
          "$ref": "#/definitions/ServiceRequestStatus"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceRequestHeader",
        "namespace": "http://www.casenet.com/ServiceRequestHeader"
      }
    },
    "ServiceRequestHeaderConfiguration": {
      "properties": {
        "documentSourceFieldLabel": {
          "type": "string"
        },
        "documentSourceRequired": {
          "type": "boolean"
        },
        "documentSources": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "documentTypeFieldLabel": {
          "type": "string"
        },
        "documentTypeRequired": {
          "type": "boolean"
        },
        "documentTypes": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "extendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "fundingSourceFieldLabel": {
          "type": "string"
        },
        "fundingSourceRequired": {
          "type": "boolean"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "serviceRequestFundingSources": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "serviceRequestStatuses": {
          "items": {
            "$ref": "#/definitions/ServiceRequestStatus"
          },
          "type": "array"
        },
        "voidReasonFieldLabel": {
          "type": "string"
        },
        "voidReasonFieldRequired": {
          "type": "boolean"
        },
        "voidReasons": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceRequestHeaderConfiguration",
        "namespace": "http://www.casenet.com/ServiceRequestHeaderConfiguration"
      }
    },
    "ServiceRequestHeaderRequest": {
      "properties": {
        "assignee": {
          "$ref": "#/definitions/ServiceRequestAssignee"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "fundingSourceId": {
          "type": "string"
        },
        "memberDirected": {
          "type": "boolean"
        },
        "serviceRequestStatusId": {
          "type": "string"
        },
        "waiverTypeOption": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceRequestHeaderRequest",
        "namespace": "http://www.casenet.com/ServiceRequestHeaderRequest"
      }
    },
    "ServiceRequestLineItem": {
      "properties": {
        "acknowledgements": {
          "items": {
            "$ref": "#/definitions/SRLineItemAck"
          },
          "type": "array"
        },
        "appliedEligibility": {
          "$ref": "#/definitions/Eligibility"
        },
        "authorizationId": {
          "type": "string"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "costOverride": {
          "$ref": "#/definitions/Money"
        },
        "currentDetermination": {
          "$ref": "#/definitions/ServiceRequestDetermination"
        },
        "details": {
          "type": "string"
        },
        "determinationDueDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "estimatedCost": {
          "$ref": "#/definitions/Money"
        },
        "extension": {
          "type": "boolean"
        },
        "fromDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        },
        "negotiatedUnitRate": {
          "$ref": "#/definitions/Money"
        },
        "originalRequestedFromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "originalRequestedToDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "procedure": {
          "$ref": "#/definitions/SRProcedure"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "serviceLocation": {
          "$ref": "#/definitions/Address"
        },
        "serviceLocationType": {
          "$ref": "#/definitions/OptionValue"
        },
        "serviceOffer": {
          "$ref": "#/definitions/ServiceOffer"
        },
        "serviceOfferLocation": {
          "$ref": "#/definitions/Location"
        },
        "serviceQuantity": {
          "$ref": "#/definitions/ServiceQuantity"
        },
        "toDate": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceRequestLineItem",
        "namespace": "http://www.casenet.com/ServiceRequestLineItem"
      }
    },
    "ServiceRequestLineItemConfiguration": {
      "properties": {
        "allowDuplicateServiceRequests": {
          "type": "boolean"
        },
        "allowDuplicatesOfDeniedLineItems": {
          "type": "boolean"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "serviceLocationFieldLabel": {
          "type": "string"
        },
        "serviceLocationRequired": {
          "type": "boolean"
        },
        "serviceRequestServiceLocations": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "serviceRequestStateFieldLabel": {
          "type": "string"
        },
        "serviceRequestStates": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceRequestLineItemConfiguration",
        "namespace": "http://www.casenet.com/ServiceRequestLineItemConfiguration"
      }
    },
    "ServiceRequestLineItemDeterminationRequest": {
      "properties": {
        "claimInformation": {
          "type": "string"
        },
        "determinationBy": {
          "$ref": "#/definitions/User"
        },
        "serviceRequestStatus": {
          "$ref": "#/definitions/ServiceRequestStatus"
        }
      },
      "required": [
        "claimInformation"
      ],
      "type": "object",
      "xml": {
        "name": "ServiceRequestLineItemDeterminationRequest",
        "namespace": "http://www.casenet.com/ServiceRequestLineItemDeterminationRequest"
      }
    },
    "ServiceRequestLineItemLite": {
      "properties": {
        "fromDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "serviceRequestProvider": {
          "$ref": "#/definitions/Provider"
        },
        "toDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "ServiceRequestLite": {
      "properties": {
        "id": {
          "type": "string"
        },
        "memberDirected": {
          "type": "boolean"
        },
        "ownerTeam": {
          "$ref": "#/definitions/TeamInfo"
        },
        "ownerUser": {
          "$ref": "#/definitions/User"
        },
        "referenceNumber": {
          "type": "string"
        },
        "serviceRequestLineItemLites": {
          "items": {
            "$ref": "#/definitions/ServiceRequestLineItemLite"
          },
          "type": "array"
        },
        "state": {
          "enum": [
            "DRAFT",
            "OPEN",
            "CLOSED",
            "VOID"
          ],
          "type": "string",
          "xml": {
            "name": "ServiceRequestState",
            "namespace": "http://www.casenet.com/ServiceRequestState"
          }
        },
        "status": {
          "$ref": "#/definitions/ServiceRequestStatus"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "ServiceRequestNotification": {
      "properties": {
        "correspondenceNotifications": {
          "items": {
            "$ref": "#/definitions/CorrespondenceNotification"
          },
          "type": "array"
        },
        "phoneNotifications": {
          "items": {
            "$ref": "#/definitions/PhoneNotification"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServiceRequestRequest": {
      "properties": {
        "lineItemRequests": {
          "items": {
            "$ref": "#/definitions/CreateServiceRequestLineItemRequest"
          },
          "type": "array"
        },
        "serviceRequestHeaderRequest": {
          "$ref": "#/definitions/ServiceRequestHeaderRequest"
        }
      },
      "required": [
        "lineItemRequests"
      ],
      "type": "object",
      "xml": {
        "name": "ServiceRequestRequest",
        "namespace": "http://www.casenet.com/ServiceRequestRequest"
      }
    },
    "ServiceRequestSRProcedureRequest": {
      "properties": {
        "modifierCodeIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "serviceCodeId": {
          "type": "string"
        }
      },
      "required": [
        "serviceCodeId"
      ],
      "type": "object",
      "xml": {
        "name": "ServiceRequestSRProcedureRequest",
        "namespace": "http://www.casenet.com/ServiceRequestSRProcedureRequest"
      }
    },
    "ServiceRequestSearchCriteria": {
      "properties": {
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "includeVoided": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "mcp": {
          "enum": [
            "ALL",
            "HAS_MCP",
            "NO_MCP"
          ],
          "type": "string"
        },
        "procedureCode": {
          "type": "string"
        },
        "referenceNumber": {
          "$ref": "#/definitions/StringCriteria"
        },
        "reverseChronologicalOrder": {
          "type": "boolean"
        },
        "servicingProviderId": {
          "type": "string"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/ServiceRequestSearchSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "state": {
          "enum": [
            "DRAFT",
            "OPEN",
            "CLOSED",
            "VOID"
          ],
          "type": "string",
          "xml": {
            "name": "ServiceRequestState",
            "namespace": "http://www.casenet.com/ServiceRequestState"
          }
        },
        "status": {
          "$ref": "#/definitions/ServiceRequestStatus"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "ServiceRequestSearchResult": {
      "properties": {
        "caseName": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "cnCase": {
          "$ref": "#/definitions/CnCase"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "hasAttachments": {
          "type": "boolean"
        },
        "hasNotifications": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/ServiceRequestLineItem"
          },
          "type": "array"
        },
        "mcp": {
          "enum": [
            "ALL",
            "HAS_MCP",
            "NO_MCP"
          ],
          "type": "string"
        },
        "memberDirected": {
          "type": "boolean"
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "providerName": {
          "type": "string"
        },
        "referenceNumber": {
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "state": {
          "enum": [
            "DRAFT",
            "OPEN",
            "CLOSED",
            "VOID"
          ],
          "type": "string",
          "xml": {
            "name": "ServiceRequestState",
            "namespace": "http://www.casenet.com/ServiceRequestState"
          }
        },
        "status": {
          "$ref": "#/definitions/ServiceRequestStatus"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfoExists": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "ServiceRequestSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/ServiceRequestSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "ServiceRequestSearchSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "REFERENCE_NUMBER",
            "START_DATE",
            "END_DATE",
            "PROVIDER_NAME",
            "USER_NAME",
            "MEMBER_DIRECTED",
            "STATUS",
            "STATE",
            "CASE_NUMBER",
            "CASE_NAME"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "ServiceRequestServiceOfferRequest": {
      "properties": {
        "serviceOfferId": {
          "type": "string"
        },
        "serviceOfferLocationId": {
          "type": "string"
        }
      },
      "required": [
        "serviceOfferId",
        "serviceOfferLocationId"
      ],
      "type": "object",
      "xml": {
        "name": "ServiceRequestServiceOfferRequest",
        "namespace": "http://www.casenet.com/ServiceRequestServiceOfferRequest"
      }
    },
    "ServiceRequestStatus": {
      "properties": {
        "id": {
          "type": "string"
        },
        "statusLabel": {
          "type": "string"
        },
        "statusValue": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServiceRequestStatus",
        "namespace": "http://www.casenet.com/ServiceRequestStatus"
      }
    },
    "ServicingFacility": {
      "properties": {
        "authSpecificContactAddress": {
          "$ref": "#/definitions/Address"
        },
        "authSpecificContactFax": {
          "type": "string"
        },
        "authSpecificContactFaxI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "authSpecificContactName": {
          "type": "string"
        },
        "authSpecificContactPhone": {
          "type": "string"
        },
        "authSpecificContactPhoneExtension": {
          "type": "string"
        },
        "authSpecificContactPhoneI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/SimpleAttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "inNetwork": {
          "type": "boolean"
        },
        "outOfNetworkReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "servicingFacility": {
          "$ref": "#/definitions/AuthorizationLocation"
        },
        "servicingFacilityPhoneNumber": {
          "$ref": "#/definitions/PhoneAndExtension"
        },
        "servicingFacilityPhoneNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "servicingFacilitySpecialty": {
          "$ref": "#/definitions/OptionValue"
        },
        "useAuthSpecificContactAddressForCorrespondence": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServicingFacility",
        "namespace": "http://www.casenet.com/ServicingFacility"
      }
    },
    "ServicingFacilityRequest": {
      "properties": {
        "authSpecificContactAddress": {
          "$ref": "#/definitions/CreateAddressRequest"
        },
        "authSpecificContactFax": {
          "$ref": "#/definitions/Phone"
        },
        "authSpecificContactFaxI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "authSpecificContactName": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "authSpecificContactPhone": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "authSpecificContactPhoneI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "oonReasonOption": {
          "type": "string"
        },
        "servicingFacilityLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "servicingFacilityPhoneNumber": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "servicingFacilityPhoneNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "servicingFacilitySpecialtyOption": {
          "type": "string"
        },
        "useAuthSpecificContactAddressForCorrespondence": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "ServicingFacilityRequest",
        "namespace": "http://www.casenet.com/ServicingFacilityRequest"
      }
    },
    "SetOfNonScreenActions": {
      "properties": {
        "actions": {
          "items": {
            "enum": [
              "CREATE",
              "EDIT",
              "VIEW",
              "CLAIM",
              "ASSIGN"
            ],
            "type": "string",
            "xml": {
              "name": "NonScreenActions",
              "namespace": "http://www.casenet.com/NonScreenActions"
            }
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object",
      "xml": {
        "name": "SetOfNonScreenActions",
        "namespace": "http://www.casenet.com/SetOfNonScreenActions"
      }
    },
    "SetOfScreenActions": {
      "properties": {
        "actions": {
          "items": {
            "enum": [
              "CREATE",
              "EDIT",
              "VIEW"
            ],
            "type": "string",
            "xml": {
              "name": "ScreenActions",
              "namespace": "http://www.casenet.com/ScreenActions"
            }
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object",
      "xml": {
        "name": "SetOfScreenActions",
        "namespace": "http://www.casenet.com/SetOfScreenActions"
      }
    },
    "SimpleAttributeValueObject": {
      "properties": {
        "value": {
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "SimpleAttributeValue",
        "namespace": "http://www.casenet.com/SimpleAttributeValue"
      }
    },
    "SimpleContactsSummary": {
      "properties": {
        "organizationContacts": {
          "items": {
            "$ref": "#/definitions/OrganizationContact"
          },
          "type": "array"
        },
        "personalContacts": {
          "items": {
            "$ref": "#/definitions/PersonalContact"
          },
          "type": "array"
        },
        "personalRepresentative": {
          "$ref": "#/definitions/PersonalRepresentativeLite"
        },
        "providerContacts": {
          "items": {
            "$ref": "#/definitions/ProviderContact"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "SimpleContactsSummary",
        "namespace": "http://www.casenet.com/SimpleContactsSummary"
      }
    },
    "SimpleDocumentInfo": {
      "properties": {
        "comment": {
          "type": "string"
        },
        "controlNumber": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "documentFormat": {
          "type": "string"
        },
        "documentSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "documentType": {
          "$ref": "#/definitions/OptionValue"
        },
        "filename": {
          "type": "string"
        },
        "fullFilename": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "receiptDate": {
          "format": "date-time",
          "type": "string"
        },
        "size": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object",
      "xml": {
        "name": "SimpleDocumentInfo",
        "namespace": "http://www.casenet.com/DocumentInfo"
      }
    },
    "SimpleDrug": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "SimpleDrug",
        "namespace": "http://www.casenet.com/SimpleDrug"
      }
    },
    "SimpleLineage": {
      "properties": {
        "definitionVersion": {
          "$ref": "#/definitions/DefinitionVersion"
        },
        "definitionVersionNumber": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SimpleSearchAttributeConfiguration": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "index": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "enum": [
            "CITY",
            "LOCATION_NAME",
            "NPI",
            "TIN",
            "PROVIDER_ID",
            "PROVIDER_NAME",
            "SPECIALTY",
            "STATE"
          ],
          "type": "string",
          "xml": {
            "name": "SimpleSearchAttributeFieldName",
            "namespace": "http://www.casenet.com/SimpleSearchAttributeFieldName"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SimpleSearchAttributeConfiguration",
        "namespace": "http://www.casenet.com/SimpleSearchAttributeConfiguration"
      }
    },
    "SourceClientResourceRequest": {
      "properties": {
        "client": {
          "enum": [
            "HTML5",
            "FLEX",
            "PROAUTH",
            "API"
          ],
          "type": "string"
        },
        "sourceClientActivity": {
          "enum": [
            "Login",
            "Logout"
          ],
          "type": "string"
        }
      },
      "required": [
        "sourceClientActivity"
      ],
      "type": "object"
    },
    "SpecialInstructions": {
      "properties": {
        "text": {
          "type": "string"
        },
        "url": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "SpecialInstructions",
        "namespace": "http://www.casenet.com/SpecialInstructions"
      }
    },
    "SplitPdfRequest": {
      "properties": {
        "filename": {
          "type": "string"
        },
        "pageNumbers": {
          "type": "string"
        }
      },
      "required": [
        "filename",
        "pageNumbers"
      ],
      "type": "object"
    },
    "StartProgramTaskPackageRequest": {
      "properties": {
        "programEnrollmentStatusId": {
          "type": "string"
        },
        "programEnrollmentStatusVersion": {
          "format": "int32",
          "type": "integer"
        },
        "taskPackageId": {
          "type": "string"
        }
      },
      "required": [
        "programEnrollmentStatusId",
        "programEnrollmentStatusVersion",
        "taskPackageId"
      ],
      "type": "object"
    },
    "StringCriteria": {
      "properties": {
        "matchType": {
          "enum": [
            "BEGINS_WITH",
            "CONTAINS",
            "EQUALS"
          ],
          "type": "string",
          "xml": {
            "name": "StringMatchType",
            "namespace": "http://www.casenet.com/StringMatchType"
          }
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "StringCriteria",
        "namespace": "http://www.casenet.com/StringCriteria"
      }
    },
    "SubmitCarePlanResponse": {
      "properties": {
        "actionClosedTasks": {
          "items": {
            "$ref": "#/definitions/ActionTask"
          },
          "type": "array"
        },
        "actionTriggeredArtifacts": {
          "items": {
            "$ref": "#/definitions/ActionTriggeredArtifact"
          },
          "type": "array"
        },
        "carePlanId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SubmitReferralRequest": {
      "properties": {
        "enterDecisionNow": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "firstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "lastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "nextTask": {
          "$ref": "#/definitions/CommonActionPathRequest"
        },
        "otherReasonDescription": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "otherReferralSource": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "reasonsForReferralOptionValueIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "referralComments": {
          "maxLength": 1500,
          "minLength": 0,
          "type": "string"
        },
        "referralFinalDecisionRequest": {
          "$ref": "#/definitions/ReferralFinalDecisionRequest"
        },
        "referralSourceOptionValueId": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "sourceDescription": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "enterDecisionNow",
        "referralSourceOptionValueId",
        "requestDate"
      ],
      "type": "object",
      "xml": {
        "name": "SubmitReferralRequest",
        "namespace": "http://www.casenet.com/SubmitReferralRequest"
      }
    },
    "SubmitReferralRequest2": {
      "properties": {
        "firstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "lastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "nextTask": {
          "$ref": "#/definitions/CommonActionPathRequest"
        },
        "otherReasonDescription": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "otherReferralSource": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "reasonsForReferralOption": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "referralComments": {
          "maxLength": 1500,
          "minLength": 0,
          "type": "string"
        },
        "referralDeterminationExtendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "referralFinalDecisionRequest": {
          "$ref": "#/definitions/ReferralFinalDecisionRequest3"
        },
        "referralSourceInformationExtendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "referralSourceOption": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "sourceDescription": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "referralSourceOption",
        "requestDate"
      ],
      "type": "object",
      "xml": {
        "name": "SubmitReferralRequest2",
        "namespace": "http://www.casenet.com/SubmitReferralRequest2"
      }
    },
    "SummaryAuthorization": {
      "properties": {
        "appealState": {
          "enum": [
            "DRAFT",
            "OPEN",
            "CLOSED",
            "VOID"
          ],
          "type": "string",
          "xml": {
            "name": "AppealState",
            "namespace": "http://www.casenet.com/AppealState"
          }
        },
        "appealed": {
          "type": "boolean"
        },
        "authEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "authStartDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "authTrackingNumber": {
          "type": "string"
        },
        "authorizationNum": {
          "type": "string"
        },
        "caseId": {
          "type": "string"
        },
        "caseName": {
          "$ref": "#/definitions/OptionValue"
        },
        "caseNameOther": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "diagnosisType": {
          "enum": [
            "BEHAVIORAL_DSMIV",
            "MEDICAL",
            "BEHAVIORAL_DSM5"
          ],
          "type": "string",
          "xml": {
            "name": "UMDiagnosisType",
            "namespace": "http://www.casenet.com/UMDiagnosisType"
          }
        },
        "externalMemberId": {
          "type": "string"
        },
        "hasDischarges": {
          "type": "boolean"
        },
        "hasNonVoidedAttachments": {
          "type": "boolean"
        },
        "hasOpenManualTasks": {
          "type": "boolean"
        },
        "hasReadmits": {
          "type": "boolean"
        },
        "hasUnvoidedNotifications": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "internalMemberId": {
          "type": "string"
        },
        "internalUIState": {
          "enum": [
            "OPEN",
            "OPEN_MODIFIED",
            "OPEN_REVISED",
            "CLOSED",
            "VOID",
            "DISCHARGED",
            "DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationState",
            "namespace": "http://www.casenet.com/UMAuthorizationState"
          }
        },
        "interqualEpisodeId": {
          "type": "string"
        },
        "isOpen": {
          "type": "boolean"
        },
        "lastUpdatedBy": {
          "$ref": "#/definitions/User"
        },
        "lockState": {
          "enum": [
            "LOCKED",
            "UNLOCKED"
          ],
          "type": "string",
          "xml": {
            "name": "LockState",
            "namespace": "http://www.casenet.com/LockState"
          }
        },
        "lockedByUser": {
          "$ref": "#/definitions/User"
        },
        "lockedSinceDate": {
          "format": "date-time",
          "type": "string"
        },
        "memberDateOfBirth": {
          "$ref": "#/definitions/LocalDate"
        },
        "memberName": {
          "type": "string"
        },
        "primaryDiagnosisCode": {
          "$ref": "#/definitions/DiagnosisCode"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestingProviderExternalLocationId": {
          "type": "string"
        },
        "requestingProviderInternalLocationId": {
          "type": "string"
        },
        "requestingProviderName": {
          "type": "string"
        },
        "state": {
          "enum": [
            "OPEN",
            "OPEN_MODIFIED",
            "OPEN_REVISED",
            "CLOSED",
            "VOID",
            "DISCHARGED",
            "DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationState",
            "namespace": "http://www.casenet.com/UMAuthorizationState"
          }
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "UMStatus",
            "namespace": "http://www.casenet.com/UMStatus"
          }
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SummaryAuthorization",
        "namespace": "http://www.casenet.com/SummaryAuthorization"
      }
    },
    "SummaryInpatientAuthorization": {
      "properties": {
        "admitDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "appealState": {
          "enum": [
            "DRAFT",
            "OPEN",
            "CLOSED",
            "VOID"
          ],
          "type": "string",
          "xml": {
            "name": "AppealState",
            "namespace": "http://www.casenet.com/AppealState"
          }
        },
        "appealed": {
          "type": "boolean"
        },
        "authEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "authStartDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "authTrackingNumber": {
          "type": "string"
        },
        "authorizationNum": {
          "type": "string"
        },
        "caseId": {
          "type": "string"
        },
        "caseName": {
          "$ref": "#/definitions/OptionValue"
        },
        "caseNameOther": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "diagnosisType": {
          "enum": [
            "BEHAVIORAL_DSMIV",
            "MEDICAL",
            "BEHAVIORAL_DSM5"
          ],
          "type": "string",
          "xml": {
            "name": "UMDiagnosisType",
            "namespace": "http://www.casenet.com/UMDiagnosisType"
          }
        },
        "dischargeDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "externalMemberId": {
          "type": "string"
        },
        "hasDischarges": {
          "type": "boolean"
        },
        "hasNonVoidedAttachments": {
          "type": "boolean"
        },
        "hasOpenManualTasks": {
          "type": "boolean"
        },
        "hasReadmits": {
          "type": "boolean"
        },
        "hasUnvoidedNotifications": {
          "type": "boolean"
        },
        "hasUnvoidedReadmission": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "internalMemberId": {
          "type": "string"
        },
        "internalUIState": {
          "enum": [
            "OPEN",
            "OPEN_MODIFIED",
            "OPEN_REVISED",
            "CLOSED",
            "VOID",
            "DISCHARGED",
            "DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationState",
            "namespace": "http://www.casenet.com/UMAuthorizationState"
          }
        },
        "interqualEpisodeId": {
          "type": "string"
        },
        "ipLineItemSet": {
          "items": {
            "$ref": "#/definitions/SummaryLineItem"
          },
          "type": "array",
          "uniqueItems": true
        },
        "isOpen": {
          "type": "boolean"
        },
        "lastUpdatedBy": {
          "$ref": "#/definitions/User"
        },
        "lockState": {
          "enum": [
            "LOCKED",
            "UNLOCKED"
          ],
          "type": "string",
          "xml": {
            "name": "LockState",
            "namespace": "http://www.casenet.com/LockState"
          }
        },
        "lockedByUser": {
          "$ref": "#/definitions/User"
        },
        "lockedSinceDate": {
          "format": "date-time",
          "type": "string"
        },
        "memberDateOfBirth": {
          "$ref": "#/definitions/LocalDate"
        },
        "memberName": {
          "type": "string"
        },
        "primaryDiagnosisCode": {
          "$ref": "#/definitions/DiagnosisCode"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestingProviderExternalLocationId": {
          "type": "string"
        },
        "requestingProviderInternalLocationId": {
          "type": "string"
        },
        "requestingProviderName": {
          "type": "string"
        },
        "servicingFacilityExternalLocationId": {
          "type": "string"
        },
        "servicingFacilityInternalLocationId": {
          "type": "string"
        },
        "servicingFacilityName": {
          "type": "string"
        },
        "state": {
          "enum": [
            "OPEN",
            "OPEN_MODIFIED",
            "OPEN_REVISED",
            "CLOSED",
            "VOID",
            "DISCHARGED",
            "DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationState",
            "namespace": "http://www.casenet.com/UMAuthorizationState"
          }
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "UMStatus",
            "namespace": "http://www.casenet.com/UMStatus"
          }
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SummaryInpatientAuthorization",
        "namespace": "http://www.casenet.com/SummaryInpatientAuthorization"
      }
    },
    "SummaryLineItem": {
      "properties": {
        "advisorReviewEditable": {
          "enum": [
            "NO_ACCESS",
            "DRAFT_EDITABLE",
            "NO_DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "ReviewEditableState",
            "namespace": "http://www.casenet.com/ReviewEditableState"
          }
        },
        "advisorReviewsCount": {
          "format": "int32",
          "type": "integer"
        },
        "appliedEligibilityProductExternalId": {
          "type": "string"
        },
        "appliedEligibilityProductName": {
          "type": "string"
        },
        "authorizationId": {
          "type": "string"
        },
        "clinicalReviewEditable": {
          "enum": [
            "NO_ACCESS",
            "DRAFT_EDITABLE",
            "NO_DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "ReviewEditableState",
            "namespace": "http://www.casenet.com/ReviewEditableState"
          }
        },
        "clinicalReviewsCount": {
          "format": "int32",
          "type": "integer"
        },
        "determinationExists": {
          "type": "boolean"
        },
        "determinedEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "determinedStartDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "isAuthContainsMultiTypeLineItems": {
          "type": "boolean"
        },
        "lineItemEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        },
        "lineItemStartDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "lineItemTypeDisplayed": {
          "type": "boolean"
        },
        "primaryProcedureCode": {
          "$ref": "#/definitions/ProcedureCode"
        },
        "requestForInformationExists": {
          "type": "boolean"
        },
        "serviceType": {
          "$ref": "#/definitions/OptionValue"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND",
            "NO_DECISION",
            "REVIEWED"
          ],
          "type": "string",
          "xml": {
            "name": "UMLineItemStatus",
            "namespace": "http://www.casenet.com/UMLineItemStatus"
          }
        },
        "unitCountApproved": {
          "format": "int32",
          "type": "integer"
        },
        "unitCountDenied": {
          "format": "int32",
          "type": "integer"
        },
        "unitCountDetermined": {
          "format": "int32",
          "type": "integer"
        },
        "unitCountRequested": {
          "format": "int32",
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SummaryLineItem",
        "namespace": "http://www.casenet.com/SummaryLineItem"
      }
    },
    "SummaryRxAuthorization": {
      "properties": {
        "appealState": {
          "enum": [
            "DRAFT",
            "OPEN",
            "CLOSED",
            "VOID"
          ],
          "type": "string",
          "xml": {
            "name": "AppealState",
            "namespace": "http://www.casenet.com/AppealState"
          }
        },
        "appealed": {
          "type": "boolean"
        },
        "authEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "authStartDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "authTrackingNumber": {
          "type": "string"
        },
        "authorizationNum": {
          "type": "string"
        },
        "caseId": {
          "type": "string"
        },
        "caseName": {
          "$ref": "#/definitions/OptionValue"
        },
        "caseNameOther": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "diagnosisType": {
          "enum": [
            "BEHAVIORAL_DSMIV",
            "MEDICAL",
            "BEHAVIORAL_DSM5"
          ],
          "type": "string",
          "xml": {
            "name": "UMDiagnosisType",
            "namespace": "http://www.casenet.com/UMDiagnosisType"
          }
        },
        "externalMemberId": {
          "type": "string"
        },
        "hasDischarges": {
          "type": "boolean"
        },
        "hasNonVoidedAttachments": {
          "type": "boolean"
        },
        "hasOpenManualTasks": {
          "type": "boolean"
        },
        "hasReadmits": {
          "type": "boolean"
        },
        "hasUnvoidedNotifications": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "internalMemberId": {
          "type": "string"
        },
        "internalUIState": {
          "enum": [
            "OPEN",
            "OPEN_MODIFIED",
            "OPEN_REVISED",
            "CLOSED",
            "VOID",
            "DISCHARGED",
            "DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationState",
            "namespace": "http://www.casenet.com/UMAuthorizationState"
          }
        },
        "interqualEpisodeId": {
          "type": "string"
        },
        "isOpen": {
          "type": "boolean"
        },
        "lastUpdatedBy": {
          "$ref": "#/definitions/User"
        },
        "lockState": {
          "enum": [
            "LOCKED",
            "UNLOCKED"
          ],
          "type": "string",
          "xml": {
            "name": "LockState",
            "namespace": "http://www.casenet.com/LockState"
          }
        },
        "lockedByUser": {
          "$ref": "#/definitions/User"
        },
        "lockedSinceDate": {
          "format": "date-time",
          "type": "string"
        },
        "memberDateOfBirth": {
          "$ref": "#/definitions/LocalDate"
        },
        "memberName": {
          "type": "string"
        },
        "primaryDiagnosisCode": {
          "$ref": "#/definitions/DiagnosisCode"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestingProviderExternalLocationId": {
          "type": "string"
        },
        "requestingProviderInternalLocationId": {
          "type": "string"
        },
        "requestingProviderName": {
          "type": "string"
        },
        "rxLineItemSet": {
          "items": {
            "$ref": "#/definitions/SummaryRxLineItem"
          },
          "type": "array",
          "uniqueItems": true
        },
        "state": {
          "enum": [
            "OPEN",
            "OPEN_MODIFIED",
            "OPEN_REVISED",
            "CLOSED",
            "VOID",
            "DISCHARGED",
            "DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationState",
            "namespace": "http://www.casenet.com/UMAuthorizationState"
          }
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "UMStatus",
            "namespace": "http://www.casenet.com/UMStatus"
          }
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SummaryRxAuthorization",
        "namespace": "http://www.casenet.com/SummaryRxAuthorization"
      }
    },
    "SummaryRxLineItem": {
      "properties": {
        "advisorReviewEditable": {
          "enum": [
            "NO_ACCESS",
            "DRAFT_EDITABLE",
            "NO_DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "ReviewEditableState",
            "namespace": "http://www.casenet.com/ReviewEditableState"
          }
        },
        "advisorReviewsCount": {
          "format": "int32",
          "type": "integer"
        },
        "appliedEligibilityProductExternalId": {
          "type": "string"
        },
        "appliedEligibilityProductName": {
          "type": "string"
        },
        "authorizationId": {
          "type": "string"
        },
        "clinicalReviewEditable": {
          "enum": [
            "NO_ACCESS",
            "DRAFT_EDITABLE",
            "NO_DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "ReviewEditableState",
            "namespace": "http://www.casenet.com/ReviewEditableState"
          }
        },
        "clinicalReviewsCount": {
          "format": "int32",
          "type": "integer"
        },
        "determinationExists": {
          "type": "boolean"
        },
        "determinedEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "determinedStartDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "drugCode": {
          "type": "string"
        },
        "drugName": {
          "type": "string"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "isAuthContainsMultiTypeLineItems": {
          "type": "boolean"
        },
        "lineItemEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        },
        "lineItemStartDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "lineItemTypeDisplayed": {
          "type": "boolean"
        },
        "prescribingProviderExternalLocationId": {
          "type": "string"
        },
        "prescribingProviderInternalLocationId": {
          "type": "string"
        },
        "prescribingProviderName": {
          "type": "string"
        },
        "primaryProcedureCode": {
          "$ref": "#/definitions/ProcedureCode"
        },
        "requestForInformationExists": {
          "type": "boolean"
        },
        "route": {
          "type": "string"
        },
        "serviceType": {
          "$ref": "#/definitions/OptionValue"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND",
            "NO_DECISION",
            "REVIEWED"
          ],
          "type": "string",
          "xml": {
            "name": "UMLineItemStatus",
            "namespace": "http://www.casenet.com/UMLineItemStatus"
          }
        },
        "unitCountApproved": {
          "format": "int32",
          "type": "integer"
        },
        "unitCountDenied": {
          "format": "int32",
          "type": "integer"
        },
        "unitCountDetermined": {
          "format": "int32",
          "type": "integer"
        },
        "unitCountRequested": {
          "format": "int32",
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SummaryRxLineItem",
        "namespace": "http://www.casenet.com/SummaryRxLineItem"
      }
    },
    "SummaryServiceProcedureAuthorization": {
      "properties": {
        "appealState": {
          "enum": [
            "DRAFT",
            "OPEN",
            "CLOSED",
            "VOID"
          ],
          "type": "string",
          "xml": {
            "name": "AppealState",
            "namespace": "http://www.casenet.com/AppealState"
          }
        },
        "appealed": {
          "type": "boolean"
        },
        "authEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "authStartDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "authTrackingNumber": {
          "type": "string"
        },
        "authorizationNum": {
          "type": "string"
        },
        "caseId": {
          "type": "string"
        },
        "caseName": {
          "$ref": "#/definitions/OptionValue"
        },
        "caseNameOther": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "diagnosisType": {
          "enum": [
            "BEHAVIORAL_DSMIV",
            "MEDICAL",
            "BEHAVIORAL_DSM5"
          ],
          "type": "string",
          "xml": {
            "name": "UMDiagnosisType",
            "namespace": "http://www.casenet.com/UMDiagnosisType"
          }
        },
        "externalMemberId": {
          "type": "string"
        },
        "hasDischarges": {
          "type": "boolean"
        },
        "hasNonVoidedAttachments": {
          "type": "boolean"
        },
        "hasOpenManualTasks": {
          "type": "boolean"
        },
        "hasReadmits": {
          "type": "boolean"
        },
        "hasUnvoidedNotifications": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "internalMemberId": {
          "type": "string"
        },
        "internalUIState": {
          "enum": [
            "OPEN",
            "OPEN_MODIFIED",
            "OPEN_REVISED",
            "CLOSED",
            "VOID",
            "DISCHARGED",
            "DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationState",
            "namespace": "http://www.casenet.com/UMAuthorizationState"
          }
        },
        "interqualEpisodeId": {
          "type": "string"
        },
        "isOpen": {
          "type": "boolean"
        },
        "lastUpdatedBy": {
          "$ref": "#/definitions/User"
        },
        "lockState": {
          "enum": [
            "LOCKED",
            "UNLOCKED"
          ],
          "type": "string",
          "xml": {
            "name": "LockState",
            "namespace": "http://www.casenet.com/LockState"
          }
        },
        "lockedByUser": {
          "$ref": "#/definitions/User"
        },
        "lockedSinceDate": {
          "format": "date-time",
          "type": "string"
        },
        "memberDateOfBirth": {
          "$ref": "#/definitions/LocalDate"
        },
        "memberName": {
          "type": "string"
        },
        "primaryDiagnosisCode": {
          "$ref": "#/definitions/DiagnosisCode"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestingProviderExternalLocationId": {
          "type": "string"
        },
        "requestingProviderInternalLocationId": {
          "type": "string"
        },
        "requestingProviderName": {
          "type": "string"
        },
        "spLineItemSet": {
          "items": {
            "$ref": "#/definitions/SummaryServiceProcedureLineItem"
          },
          "type": "array",
          "uniqueItems": true
        },
        "state": {
          "enum": [
            "OPEN",
            "OPEN_MODIFIED",
            "OPEN_REVISED",
            "CLOSED",
            "VOID",
            "DISCHARGED",
            "DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationState",
            "namespace": "http://www.casenet.com/UMAuthorizationState"
          }
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "UMStatus",
            "namespace": "http://www.casenet.com/UMStatus"
          }
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SummaryServiceProcedureAuthorization",
        "namespace": "http://www.casenet.com/SummaryServiceProcedureAuthorization"
      }
    },
    "SummaryServiceProcedureLineItem": {
      "properties": {
        "advisorReviewEditable": {
          "enum": [
            "NO_ACCESS",
            "DRAFT_EDITABLE",
            "NO_DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "ReviewEditableState",
            "namespace": "http://www.casenet.com/ReviewEditableState"
          }
        },
        "advisorReviewsCount": {
          "format": "int32",
          "type": "integer"
        },
        "appliedEligibilityProductExternalId": {
          "type": "string"
        },
        "appliedEligibilityProductName": {
          "type": "string"
        },
        "authorizationId": {
          "type": "string"
        },
        "clinicalReviewEditable": {
          "enum": [
            "NO_ACCESS",
            "DRAFT_EDITABLE",
            "NO_DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "ReviewEditableState",
            "namespace": "http://www.casenet.com/ReviewEditableState"
          }
        },
        "clinicalReviewsCount": {
          "format": "int32",
          "type": "integer"
        },
        "determinationExists": {
          "type": "boolean"
        },
        "determinedEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "determinedStartDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "isAuthContainsMultiTypeLineItems": {
          "type": "boolean"
        },
        "lineItemEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        },
        "lineItemStartDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "lineItemTypeDisplayed": {
          "type": "boolean"
        },
        "primaryProcedureCode": {
          "$ref": "#/definitions/ProcedureCode"
        },
        "requestForInformationExists": {
          "type": "boolean"
        },
        "serviceType": {
          "$ref": "#/definitions/OptionValue"
        },
        "servicingProviderExternalLocationId": {
          "type": "string"
        },
        "servicingProviderInternalLocationId": {
          "type": "string"
        },
        "servicingProviderName": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND",
            "NO_DECISION",
            "REVIEWED"
          ],
          "type": "string",
          "xml": {
            "name": "UMLineItemStatus",
            "namespace": "http://www.casenet.com/UMLineItemStatus"
          }
        },
        "unitCountApproved": {
          "format": "int32",
          "type": "integer"
        },
        "unitCountDenied": {
          "format": "int32",
          "type": "integer"
        },
        "unitCountDetermined": {
          "format": "int32",
          "type": "integer"
        },
        "unitCountRequested": {
          "format": "int32",
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "SummaryServiceProcedureLineItem",
        "namespace": "http://www.casenet.com/SummaryServiceProcedureLineItem"
      }
    },
    "SystemActor": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "username"
      ],
      "type": "object"
    },
    "SystemMessage": {
      "properties": {
        "beginDate": {
          "format": "date-time",
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SystemMessageResponse": {
      "properties": {
        "systemMessage": {
          "$ref": "#/definitions/SystemMessage"
        }
      },
      "type": "object"
    },
    "TailoredAagDefinitionField": {
      "properties": {
        "availableOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "defaultModifierCode": {
          "$ref": "#/definitions/ModifierCode"
        },
        "defaultOption": {
          "$ref": "#/definitions/OptionValue"
        },
        "fieldDisplayed": {
          "type": "boolean"
        },
        "fieldRequired": {
          "type": "boolean"
        },
        "modifierCodes": {
          "items": {
            "$ref": "#/definitions/ModifierCode"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object",
      "xml": {
        "name": "TailoredAagDefinitionField",
        "namespace": "http://www.casenet.com/TailoredAagDefinitionField"
      }
    },
    "TailoredOptionValues": {
      "properties": {
        "availableOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "defaultOption": {
          "$ref": "#/definitions/OptionValue"
        }
      },
      "type": "object"
    },
    "TaskAssignee": {
      "properties": {
        "assigneeName": {
          "type": "string"
        },
        "assigneeType": {
          "type": "string"
        }
      },
      "required": [
        "assigneeName",
        "assigneeType"
      ],
      "type": "object",
      "xml": {
        "name": "TaskAssignee",
        "namespace": "http://www.casenet.com/TaskAssignee"
      }
    },
    "TaskAssigneeRequest": {
      "properties": {
        "assigneeName": {
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "USERS",
            "GROUP_QUEUES",
            "TEAMS"
          ],
          "type": "string",
          "xml": {
            "name": "TaskAssigneeType",
            "namespace": "http://www.casenet.com/TaskAssigneeType"
          }
        }
      },
      "required": [
        "assigneeName",
        "assigneeType"
      ],
      "type": "object"
    },
    "TaskAssigneeResponse": {
      "type": "object",
      "xml": {
        "name": "TaskAssigneeResponse",
        "namespace": "http://www.casenet.com/TaskAssigneeResponse"
      }
    },
    "TaskAttempt": {
      "properties": {
        "campaignType": {
          "$ref": "#/definitions/OptionValue"
        },
        "comments": {
          "items": {
            "$ref": "#/definitions/TaskAttemptComment"
          },
          "type": "array"
        },
        "contactName": {
          "type": "string"
        },
        "contactOutcome": {
          "$ref": "#/definitions/OptionValue"
        },
        "contactReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "contactReasonOther": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "noteCategory": {
          "enum": [
            "ADMIN",
            "INBOUND",
            "OUTBOUND"
          ],
          "type": "string",
          "xml": {
            "name": "NoteCategory",
            "namespace": "http://www.casenet.com/NoteCategory"
          }
        },
        "noteText": {
          "type": "string"
        },
        "noteVoidInfo": {
          "$ref": "#/definitions/VoidInfo"
        },
        "taskAttemptBehavior": {
          "$ref": "#/definitions/TaskAttemptBehavior"
        },
        "timeOfDay": {
          "enum": [
            "MORNING",
            "AFTERNOON",
            "EVENING",
            "NIGHT",
            "WEEKEND"
          ],
          "type": "string",
          "xml": {
            "name": "DayPart",
            "namespace": "http://www.casenet.com/DayPart"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskAttempt",
        "namespace": "http://www.casenet.com/TaskAttempt"
      }
    },
    "TaskAttemptBehavior": {
      "properties": {
        "attemptBehaviorName": {
          "type": "string"
        },
        "behaviorType": {
          "enum": [
            "inbound",
            "outbound",
            "admin"
          ],
          "type": "string",
          "xml": {
            "name": "TaskBehaviorType",
            "namespace": "http://www.casenet.com/TaskBehaviorType"
          }
        },
        "disabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskAttemptBehavior",
        "namespace": "http://www.casenet.com/TaskAttemptBehavior"
      }
    },
    "TaskAttemptComment": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskAttemptComment",
        "namespace": "http://www.casenet.com/TaskAttemptComment"
      }
    },
    "TaskAttemptCriterion": {
      "properties": {
        "dayPart": {
          "enum": [
            "MORNING",
            "AFTERNOON",
            "EVENING",
            "NIGHT",
            "WEEKEND",
            "TOTAL"
          ],
          "type": "string"
        },
        "operator": {
          "enum": [
            "LESS_THAN",
            "MORE_THAN",
            "EQUAL"
          ],
          "type": "string"
        },
        "value": {
          "format": "int32",
          "maximum": 99999,
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "dayPart",
        "operator",
        "value"
      ],
      "type": "object"
    },
    "TaskAttemptRequest": {
      "properties": {
        "attemptBehaviorName": {
          "type": "string"
        },
        "attemptDate": {
          "format": "date-time",
          "type": "string"
        },
        "campaignTypeOption": {
          "type": "string"
        },
        "noteRequest": {
          "$ref": "#/definitions/AbstractNoteRequest"
        }
      },
      "required": [
        "attemptBehaviorName"
      ],
      "type": "object",
      "xml": {
        "name": "TaskAttemptRequest",
        "namespace": "http://www.casenet.com/TaskAttemptRequest"
      }
    },
    "TaskAttemptResponse": {
      "properties": {
        "attemptsPerTimeOfDay": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "type": "object"
        },
        "taskAttemptList": {
          "items": {
            "$ref": "#/definitions/TaskAttempt"
          },
          "type": "array"
        },
        "totalAttempts": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskAttemptResponse",
        "namespace": "http://www.casenet.com/TaskAttemptResponse"
      }
    },
    "TaskAttemptsBhpSetup": {
      "properties": {
        "closeTask": {
          "type": "boolean"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "maxNumberOfTaskAttempts": {
          "format": "int32",
          "type": "integer"
        },
        "obsolete": {
          "type": "boolean"
        },
        "sendCorrespondence": {
          "$ref": "#/definitions/LetterTemplate"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TaskBrowserAttribute": {
      "properties": {
        "defaultAttribute": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "index": {
          "format": "int32",
          "type": "integer"
        },
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "system": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskBrowserAttribute",
        "namespace": "http://www.casenet.com/TaskBrowserAttribute"
      }
    },
    "TaskBrowserConfiguration": {
      "properties": {
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "taskBrowserAttributes": {
          "items": {
            "$ref": "#/definitions/TaskBrowserAttribute"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskBrowserConfiguration",
        "namespace": "http://www.casenet.com/TaskBrowserConfiguration"
      }
    },
    "TaskComment": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "dateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "narrative": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskComment",
        "namespace": "http://www.casenet.com/TaskComment"
      }
    },
    "TaskCommentRequest": {
      "properties": {
        "narrative": {
          "maxLength": 8000,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "narrative"
      ],
      "type": "object",
      "xml": {
        "name": "TaskCommentRequest",
        "namespace": "http://www.casenet.com/TaskCommentRequest"
      }
    },
    "TaskConfiguration": {
      "properties": {
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "taskConfigurationTimeIntervals": {
          "items": {
            "$ref": "#/definitions/TaskConfigurationTimeInterval"
          },
          "type": "array"
        },
        "taskQueueAutoRefreshInterval": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskConfiguration",
        "namespace": "http://www.casenet.com/TaskConfiguration"
      }
    },
    "TaskConfigurationTimeInterval": {
      "properties": {
        "durationMinute": {
          "format": "int32",
          "type": "integer"
        },
        "enabled": {
          "type": "boolean"
        },
        "startTime": {
          "$ref": "#/definitions/LocalTime"
        },
        "type": {
          "enum": [
            "MORNING",
            "AFTERNOON",
            "EVENING",
            "NIGHT",
            "WEEKEND"
          ],
          "type": "string",
          "xml": {
            "name": "DayPart",
            "namespace": "http://www.casenet.com/DayPart"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskConfigurationTimeInterval",
        "namespace": "http://www.casenet.com/TaskConfigurationTimeInterval"
      }
    },
    "TaskDTO": {
      "properties": {
        "activity": {
          "type": "string"
        },
        "assignedTo": {
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instanceId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "priority": {
          "format": "int32",
          "type": "integer"
        },
        "screenParameters": {
          "$ref": "#/definitions/ScreenParametersDTO"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskDTO",
        "namespace": "http://www.casenet.com/TaskDTO"
      }
    },
    "TaskDefinition": {
      "properties": {
        "activity": {
          "$ref": "#/definitions/OptionValue"
        },
        "activityOther": {
          "maxLength": 250,
          "minLength": 0,
          "type": "string"
        },
        "assignee": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "ALLOW_USER_TO_SELECT",
            "ASSIGNED_TEAM",
            "CURRENT_USER",
            "PRIMARY_CASE_OWNER",
            "QUEUE",
            "TEAM",
            "USER"
          ],
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/OptionValue"
        },
        "childrenWithReadyToExport": {
          "items": {
            "$ref": "#/definitions/Exportable"
          },
          "type": "array"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "dueDateOffset": {
          "format": "int32",
          "type": "integer"
        },
        "exportEntityDetails": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "metaStatus": {
          "enum": [
            "IN_PROGRESS",
            "PUBLISHED",
            "HIDDEN"
          ],
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "pastPublishDate": {
          "type": "boolean"
        },
        "priority": {
          "enum": [
            "HIGH",
            "NORMAL",
            "LOW"
          ],
          "type": "string"
        },
        "publishDateToday": {
          "type": "boolean"
        },
        "published": {
          "type": "boolean"
        },
        "readyToExport": {
          "type": "boolean"
        },
        "readyToExportInfo": {
          "$ref": "#/definitions/ReadyToExportInfo"
        },
        "resource": {
          "$ref": "#/definitions/Resource"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "targetPublishDate": {
          "format": "date",
          "type": "string"
        },
        "taskDefinitionType": {
          "enum": [
            "TASK_DEFINITION",
            "APPOINTMENT",
            "ASSESSMENT",
            "CARE_PLAN_CREATE",
            "CARE_PLAN_REVIEW",
            "MEDICATION_REVIEW"
          ],
          "type": "string"
        },
        "triggerSectionId": {
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "visibleId": {
          "maxLength": 250,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object"
    },
    "TaskDefinitionLite": {
      "properties": {
        "activity": {
          "$ref": "#/definitions/OptionValue"
        },
        "activityOther": {
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "ALLOW_USER_TO_SELECT",
            "ASSIGNED_TEAM",
            "CURRENT_USER",
            "PRIMARY_CASE_OWNER",
            "QUEUE",
            "TEAM",
            "USER"
          ],
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/OptionValue"
        },
        "description": {
          "type": "string"
        },
        "dueDateOffset": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "priority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "taskAssignee": {
          "$ref": "#/definitions/TaskAssigneeResponse"
        },
        "visibleId": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "IdentifiableObject",
        "namespace": "http://www.casenet.com/IdentifiableObject"
      }
    },
    "TaskDefinitionRequest": {
      "properties": {
        "assignedType": {
          "enum": [
            "ALLOW_USER_TO_SELECT",
            "ASSIGNED_TEAM",
            "CURRENT_USER",
            "PRIMARY_CASE_OWNER",
            "QUEUE",
            "TEAM",
            "USER"
          ],
          "type": "string"
        },
        "dueDateOffset": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "taskAssignee": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "taskPriority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        }
      },
      "required": [
        "assignedType",
        "dueDateOffset",
        "taskPriority"
      ],
      "type": "object"
    },
    "TaskDetails": {
      "properties": {
        "assigneeName": {
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "USERS",
            "GROUP_QUEUES",
            "TEAMS"
          ],
          "type": "string",
          "xml": {
            "name": "TaskAssigneeType",
            "namespace": "http://www.casenet.com/TaskAssigneeType"
          }
        },
        "completedDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "queueName": {
          "type": "string"
        },
        "reminderDate": {
          "format": "date-time",
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "enum": [
            "OPEN",
            "CLOSED",
            "CANCELLED",
            "OVERDUE",
            "NOT_CREATED"
          ],
          "type": "string",
          "xml": {
            "name": "TaskStatus",
            "namespace": "http://www.casenet.com/TaskStatus"
          }
        },
        "taskActivity": {
          "type": "string"
        },
        "taskId": {
          "format": "int64",
          "type": "integer"
        },
        "taskInstanceLink": {
          "$ref": "#/definitions/TaskInstanceLink"
        },
        "taskLinkArtifactType": {
          "enum": [
            "INPATIENT",
            "SP",
            "RX",
            "CASE",
            "MEDICATION",
            "ASSESSMENT",
            "CARE_PLAN"
          ],
          "type": "string",
          "xml": {
            "name": "TaskLinkArtifactType",
            "namespace": "http://www.casenet.com/TaskLinkArtifactType"
          }
        },
        "taskName": {
          "type": "string"
        },
        "taskPriority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "taskRecurrenceOptions": {
          "$ref": "#/definitions/AbstractTaskRecurrenceOptions"
        },
        "teamName": {
          "type": "string"
        },
        "triggerSource": {
          "$ref": "#/definitions/TaskTriggerSource"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "variablesMap": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "workflowTask": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskDetails",
        "namespace": "http://www.casenet.com/TaskDetails"
      }
    },
    "TaskFieldsInResponse": {
      "properties": {
        "authorizationNumber": {
          "type": "boolean"
        },
        "caseName": {
          "type": "boolean"
        },
        "caseNumber": {
          "type": "boolean"
        },
        "servicingFacility": {
          "type": "boolean"
        },
        "servicingFacilityLocation": {
          "type": "boolean"
        },
        "servicingFacilityPhoneNumber": {
          "type": "boolean"
        },
        "servicingRxProvider": {
          "type": "boolean"
        },
        "servicingRxProviderLocation": {
          "type": "boolean"
        },
        "servicingRxProviderPhoneNumber": {
          "type": "boolean"
        },
        "taskAttemptCount": {
          "type": "boolean"
        },
        "triggerSource": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TaskInstanceLink": {
      "properties": {
        "artifactDefId": {
          "type": "string"
        },
        "instanceId": {
          "type": "string"
        },
        "screenTypeName": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskInstanceLink",
        "namespace": "http://www.casenet.com/TaskInstanceLink"
      }
    },
    "TaskInstanceLinkRequest": {
      "type": "object",
      "xml": {
        "name": "TaskInstanceLinkRequest",
        "namespace": "http://www.casenet.com/TaskInstanceLinkRequest"
      }
    },
    "TaskLite": {
      "properties": {
        "assigneeName": {
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "USERS",
            "GROUP_QUEUES",
            "TEAMS"
          ],
          "type": "string",
          "xml": {
            "name": "TaskAssigneeType",
            "namespace": "http://www.casenet.com/TaskAssigneeType"
          }
        },
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TaskLogSearchCriteria": {
      "properties": {
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskLogSearchCriteria",
        "namespace": "http://www.casenet.com/TaskLogSearchCriteria"
      }
    },
    "TaskLogSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/AbstractTaskLog"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskLogSearchResults",
        "namespace": "http://www.casenet.com/TaskLogSearchResults"
      }
    },
    "TaskMetricsResponse": {
      "properties": {
        "dueTodayCount": {
          "format": "int32",
          "type": "integer"
        },
        "overdueCount": {
          "format": "int32",
          "type": "integer"
        },
        "reminderTodayCount": {
          "format": "int32",
          "type": "integer"
        },
        "startThisWeekCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TaskPackage": {
      "properties": {
        "category": {
          "enum": [
            "GENERIC",
            "HCS_ENROLLMENT_CREATE",
            "HCS_ENROLLMENT_EDIT",
            "HCS_ENROLLMENT_CLOSE",
            "HCS_ENROLLMENT_VOID"
          ],
          "type": "string"
        },
        "childrenWithReadyToExport": {
          "items": {
            "$ref": "#/definitions/Exportable"
          },
          "type": "array"
        },
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "exportEntityDetails": {
          "type": "string"
        },
        "finalTaskDefinition": {
          "$ref": "#/definitions/TaskDefinition"
        },
        "hasAllowUserToSelect": {
          "type": "boolean"
        },
        "hasAssignedTeam": {
          "type": "boolean"
        },
        "hasDisabledAssignee": {
          "type": "boolean"
        },
        "hasPrimaryCaseOwner": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "metaStatus": {
          "enum": [
            "IN_PROGRESS",
            "PUBLISHED",
            "HIDDEN"
          ],
          "type": "string"
        },
        "name": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "obsolete": {
          "type": "boolean"
        },
        "pastPublishDate": {
          "type": "boolean"
        },
        "publishDateToday": {
          "type": "boolean"
        },
        "published": {
          "type": "boolean"
        },
        "readyToExportInfo": {
          "$ref": "#/definitions/ReadyToExportInfo"
        },
        "requiredTaskDefinitions": {
          "items": {
            "$ref": "#/definitions/TaskDefinition"
          },
          "type": "array"
        },
        "targetPublishDate": {
          "format": "date",
          "type": "string"
        },
        "taskDefinitions": {
          "items": {
            "$ref": "#/definitions/TaskDefinition"
          },
          "type": "array"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "visibleId": {
          "maxLength": 250,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object"
    },
    "TaskPackageInfo": {
      "properties": {
        "taskPackageId": {
          "type": "string"
        },
        "taskPackageName": {
          "type": "string"
        },
        "taskPackageVisibleId": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskPackageInfo",
        "namespace": "http://www.casenet.com/TaskPackageInfo"
      }
    },
    "TaskPackageInstance": {
      "properties": {
        "id": {
          "type": "string"
        },
        "optionalTasks": {
          "items": {
            "$ref": "#/definitions/ProgramTaskDetails"
          },
          "type": "array",
          "uniqueItems": true
        },
        "requiredTasks": {
          "items": {
            "$ref": "#/definitions/ProgramTaskDetails"
          },
          "type": "array",
          "uniqueItems": true
        },
        "status": {
          "enum": [
            "IN_PROGRESS",
            "NOT_STARTED",
            "COMPLETED",
            "CANCELLED"
          ],
          "type": "string"
        },
        "taskPackageInfo": {
          "$ref": "#/definitions/TaskPackageInfo"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "TaskSearchAdvancedCriteria": {
      "properties": {
        "activity": {
          "$ref": "#/definitions/StringCriteria"
        },
        "bhpPath": {
          "$ref": "#/definitions/StringCriteria"
        },
        "eligibilityExtendedFieldValues": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "employer": {
          "$ref": "#/definitions/StringCriteria"
        },
        "levelOfUrgencyOption": {
          "type": "string"
        },
        "lineItemDeterminationDueDateFrom": {
          "format": "date-time",
          "type": "string"
        },
        "lineItemDeterminationDueDateTo": {
          "format": "date-time",
          "type": "string"
        },
        "memberExtendedFieldValues": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "memberFirstName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "memberLastName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "providerExtendedFieldValues": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "serviceTypeOption": {
          "type": "string"
        },
        "servicingFacility": {
          "$ref": "#/definitions/StringCriteria"
        },
        "servicingProvider": {
          "$ref": "#/definitions/StringCriteria"
        },
        "taskAreas": {
          "items": {
            "enum": [
              "AAG_CLINICAL_REVIEW",
              "AAG_ADVISOR_REVIEW",
              "AAG_ADVISOR_REVIEW_EVALUATION",
              "AAG_OUTCOME",
              "ADVISOR_REVIEW",
              "ADVISOR_REVIEW_APPEAL",
              "ADVISOR_REVIEW_EVALUATION",
              "ADVISOR_REVIEW_APPEAL_EVALUATION",
              "ASSESSMENT",
              "ASSESSMENT_INITIAL",
              "AUTHORIZATION_CORRECTION",
              "CARE_PLAN_WORK_ON",
              "CASE_SELECT",
              "CLINICAL_REVIEW",
              "CLINICAL_REVIEW_APPEAL",
              "CONCURRENT_REVIEW",
              "DETERMINATION",
              "INTERVENTION_CLOSE",
              "NOTIFICATION",
              "NOTIFICATION_APPEAL",
              "OUTCOME_APPEAL",
              "QI_ADVISOR_REVIEW",
              "QI_OUTCOME",
              "QI_REVIEW",
              "REFERRAL",
              "REFERRAL_COMPLETE",
              "REFERRAL_EVALUATION",
              "REFERRAL_SOURCE_NOTIFICATION",
              "SERVICE_REQUEST",
              "SERVICE_REQUEST_REVIEW",
              "CORRESPONDENCE_REVIEW"
            ],
            "type": "string",
            "xml": {
              "name": "TaskArea",
              "namespace": "http://www.casenet.com/TaskArea"
            }
          },
          "type": "array"
        },
        "taskAttemptCriteria": {
          "items": {
            "$ref": "#/definitions/TaskAttemptCriterion"
          },
          "type": "array"
        },
        "taskDefinitionTypes": {
          "items": {
            "enum": [
              "TASK_DEFINITION",
              "APPOINTMENT",
              "ASSESSMENT",
              "CARE_PLAN_CREATE",
              "CARE_PLAN_REVIEW",
              "MEDICATION_REVIEW"
            ],
            "type": "string",
            "xml": {
              "name": "TaskDefinitionType",
              "namespace": "http://www.casenet.com/TaskDefinitionType"
            }
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TaskSearchAssigneeRequest": {
      "type": "object"
    },
    "TaskSearchConfiguration": {
      "properties": {
        "eligibilityExtendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "eligibilityExtendedSearchFieldsConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedSearchFieldConfig"
          },
          "type": "array"
        },
        "memberExtendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "memberExtendedSearchFieldsConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedSearchFieldConfig"
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "providerExtendedAttributesConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedAttributeConfigDto"
          },
          "type": "array"
        },
        "providerExtendedSearchFieldsConfig": {
          "items": {
            "$ref": "#/definitions/ExtendedSearchFieldConfig"
          },
          "type": "array"
        },
        "taskConfigurationTimeIntervals": {
          "items": {
            "$ref": "#/definitions/TaskConfigurationTimeInterval"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskSearchConfiguration",
        "namespace": "http://www.casenet.com/TaskSearchConfiguration"
      }
    },
    "TaskSearchCriteria": {
      "properties": {
        "advancedCriteria": {
          "$ref": "#/definitions/TaskSearchAdvancedCriteria"
        },
        "assignee": {
          "$ref": "#/definitions/TaskSearchAssigneeRequest"
        },
        "cancelledStatus": {
          "type": "boolean"
        },
        "closedStatus": {
          "type": "boolean"
        },
        "fromDate": {
          "format": "date-time",
          "type": "string"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "includedFields": {
          "$ref": "#/definitions/TaskFieldsInResponse"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "memberId": {
          "$ref": "#/definitions/MemberId"
        },
        "openStatus": {
          "type": "boolean"
        },
        "overdueStatus": {
          "type": "boolean"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/TaskSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "taskDateType": {
          "enum": [
            "START_DATE",
            "REMINDER_DATE",
            "DUE_DATE"
          ],
          "type": "string"
        },
        "taskPriority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "toDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "TaskSearchResult": {
      "properties": {
        "activity": {
          "type": "string"
        },
        "assignee": {
          "$ref": "#/definitions/TaskAssigneeResponse"
        },
        "attemptsPerTimeOfDay": {
          "additionalProperties": {
            "$ref": "#/definitions/DayPartStatistic"
          },
          "type": "object"
        },
        "authorizationLevelOfUrgency": {
          "$ref": "#/definitions/OptionValue"
        },
        "authorizationNumber": {
          "type": "string"
        },
        "bhpPath": {
          "type": "string"
        },
        "canAddAttempt": {
          "type": "boolean"
        },
        "caseName": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "completedDate": {
          "format": "date-time",
          "type": "string"
        },
        "countOfComments": {
          "format": "int64",
          "type": "integer"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "employer": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "instanceId": {
          "type": "string"
        },
        "lineItemDeterminationDueDate": {
          "format": "date-time",
          "type": "string"
        },
        "lineItemLevelOfUrgency": {
          "$ref": "#/definitions/OptionValue"
        },
        "memberAccessible": {
          "type": "boolean"
        },
        "memberExtendedFieldValues": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "memberLite": {
          "$ref": "#/definitions/MemberLite"
        },
        "priority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "provider": {
          "type": "string"
        },
        "providerLocation": {
          "type": "string"
        },
        "providerPhoneNumber": {
          "$ref": "#/definitions/PhoneAndExtension"
        },
        "queueName": {
          "type": "string"
        },
        "reminderDate": {
          "format": "date-time",
          "type": "string"
        },
        "serviceType": {
          "$ref": "#/definitions/OptionValue"
        },
        "servicingFacility": {
          "type": "string"
        },
        "servicingFacilityLocation": {
          "type": "string"
        },
        "servicingFacilityPhoneNumber": {
          "$ref": "#/definitions/PhoneAndExtension"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "taskActions": {
          "items": {
            "enum": [
              "COMPLETE",
              "CLAIM",
              "CANCEL",
              "UNCLAIM"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "taskStatus": {
          "enum": [
            "OPEN",
            "CLOSED",
            "CANCELLED",
            "OVERDUE",
            "NOT_CREATED"
          ],
          "type": "string",
          "xml": {
            "name": "TaskStatus",
            "namespace": "http://www.casenet.com/TaskStatus"
          }
        },
        "teamName": {
          "type": "string"
        },
        "totalAttempts": {
          "format": "int64",
          "type": "integer"
        },
        "triggerSource": {
          "$ref": "#/definitions/TaskTriggerSource"
        },
        "workflowTask": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TaskSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/TaskSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "TaskSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "ACTIVITY",
            "ASSIGNEE",
            "AUTHORIZATION_NUMBER",
            "BHP_PATH",
            "CASE_NUMBER",
            "CASE_NAME",
            "COMPLETED_DATE",
            "COMMENTS_COUNT",
            "CREATED_DATE",
            "DESCRIPTION",
            "DUE_DATE",
            "MEMBER",
            "PRIORITY",
            "REMINDER_DATE",
            "SERVICING_FACILITY",
            "SERVICING_FACILITY_LOCATION",
            "SERVICING_FACILITY_PHONE_NUMBER",
            "SERVICING_RX_PROVIDER",
            "SERVICING_RX_PROVIDER_LOCATION",
            "SERVICING_RX_PROVIDER_PHONE_NUMBER",
            "START_DATE",
            "STATUS",
            "TOTAL_NUMBER_OF_ATTEMPTS",
            "TEAM_NAME",
            "TRIGGER_SOURCE"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "TaskTriggerSource": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "TaskTriggerSource",
        "namespace": "http://www.casenet.com/TaskTriggerSource"
      }
    },
    "TaskTypeConfiguration": {
      "properties": {
        "defaultAssignee": {
          "$ref": "#/definitions/TaskAssignee"
        },
        "taskTypeName": {
          "type": "string"
        }
      },
      "required": [
        "taskTypeName"
      ],
      "type": "object",
      "xml": {
        "name": "TaskTypeConfiguration",
        "namespace": "http://www.casenet.com/TaskTypeConfiguration"
      }
    },
    "TasksBatchActionRequest": {
      "properties": {
        "taskIds": {
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "maxItems": 100,
          "minItems": 1,
          "type": "array"
        },
        "tasksBatchAction": {
          "enum": [
            "CLAIM",
            "UNCLAIM",
            "CANCEL",
            "COMPLETE",
            "ASSIGN",
            "REFRESH"
          ],
          "type": "string",
          "xml": {
            "name": "TasksBatchAction",
            "namespace": "http://www.casenet.com/TasksBatchAction"
          }
        }
      },
      "required": [
        "taskIds",
        "tasksBatchAction"
      ],
      "type": "object",
      "xml": {
        "name": "TasksBatchActionRequest",
        "namespace": "http://www.casenet.com/TasksBatchActionRequest"
      }
    },
    "TasksBatchActionResult": {
      "properties": {
        "assignee": {
          "$ref": "#/definitions/TaskAssigneeResponse"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "queueName": {
          "type": "string"
        },
        "taskActions": {
          "items": {
            "enum": [
              "COMPLETE",
              "CLAIM",
              "CANCEL",
              "UNCLAIM"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "taskStatus": {
          "enum": [
            "OPEN",
            "CLOSED",
            "CANCELLED",
            "OVERDUE",
            "NOT_CREATED"
          ],
          "type": "string",
          "xml": {
            "name": "TaskStatus",
            "namespace": "http://www.casenet.com/TaskStatus"
          }
        },
        "teamName": {
          "type": "string"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TasksBatchActionResults": {
      "properties": {
        "results": {
          "items": {
            "$ref": "#/definitions/TasksBatchActionResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Team": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "numberOfUsers": {
          "format": "int32",
          "type": "integer"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/TeamUserSummary"
          },
          "type": "array",
          "uniqueItems": true
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "TeamInfoFull",
        "namespace": "http://www.casenet.com/TeamInfoFull"
      }
    },
    "TeamInfo": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "TeamInfo",
        "namespace": "http://www.casenet.com/TeamInfo"
      }
    },
    "TeamInfoFull": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "TeamInfoFull",
        "namespace": "http://www.casenet.com/TeamInfoFull"
      }
    },
    "TeamSearchCriteria": {
      "properties": {
        "bhpNodeIds": {
          "items": {
            "$ref": "#/definitions/BhpNodeId"
          },
          "type": "array"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "memberIds": {
          "items": {
            "$ref": "#/definitions/MemberId"
          },
          "type": "array"
        },
        "name": {
          "$ref": "#/definitions/StringCriteria"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/TeamSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "TeamSearchCriteria",
        "namespace": "http://www.casenet.com/TeamSearchCriteria"
      }
    },
    "TeamSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/TeamInfoFull"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "TeamSearchResults",
        "namespace": "http://www.casenet.com/TeamSearchResults"
      }
    },
    "TeamSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "TEAM_ID",
            "TEAM_NAME",
            "TEAM_DESCRIPTION"
          ],
          "type": "string",
          "xml": {
            "name": "TeamSortColumn",
            "namespace": "http://www.casenet.com/TeamSortColumn"
          }
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "TeamSortField",
        "namespace": "http://www.casenet.com/TeamSortField"
      }
    },
    "TeamSummary": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "numberOfUsers": {
          "format": "int32",
          "type": "integer"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "TeamInfoFull",
        "namespace": "http://www.casenet.com/TeamInfoFull"
      }
    },
    "TeamUserSummary": {
      "properties": {
        "disabled": {
          "type": "boolean"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "primaryLanguage": {
          "$ref": "#/definitions/OptionValue"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "userLicensure": {
          "$ref": "#/definitions/UserLicensure"
        }
      },
      "type": "object"
    },
    "TelephonyCallStatusResponse": {
      "properties": {
        "callActive": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TimeInterval": {
      "properties": {
        "endLocalDateTime": {
          "$ref": "#/definitions/LocalDateTime"
        },
        "endTime": {
          "format": "date-time",
          "type": "string"
        },
        "startLocalDateTime": {
          "$ref": "#/definitions/LocalDateTime"
        },
        "startTime": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TimeTrackingActivity": {
      "properties": {
        "activityDate": {
          "format": "date-time",
          "type": "string"
        },
        "activityName": {
          "$ref": "#/definitions/OptionValue"
        },
        "activityType": {
          "$ref": "#/definitions/OptionValue"
        },
        "comments": {
          "maxLength": 1500,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "minutes": {
          "format": "int32",
          "type": "integer"
        },
        "nonTruCareName": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        }
      },
      "type": "object"
    },
    "TimeTrackingBhpSetupTimeLimit": {
      "properties": {
        "activityType": {
          "$ref": "#/definitions/OptionValue"
        },
        "limit": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TimeTrackingConfiguration": {
      "properties": {
        "billingDay": {
          "format": "int32",
          "type": "integer"
        },
        "timeTrackingBhpSetupTimeLimits": {
          "items": {
            "$ref": "#/definitions/TimeTrackingBhpSetupTimeLimit"
          },
          "type": "array",
          "uniqueItems": true
        },
        "timeTrackingEnabled": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TimelineAssessment": {
      "properties": {
        "completedDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "enum": [
            "INITIAL",
            "GENERAL",
            "SPECIALTY"
          ],
          "type": "string",
          "xml": {
            "name": "AssessmentType",
            "namespace": "http://www.casenet.com/AssessmentType"
          }
        }
      },
      "type": "object"
    },
    "TimelineAuth": {
      "properties": {
        "authId": {
          "type": "string"
        },
        "authorizationNum": {
          "type": "string"
        },
        "lineItemRanges": {
          "items": {
            "$ref": "#/definitions/TimelineRange"
          },
          "type": "array"
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "UMStatus",
            "namespace": "http://www.casenet.com/UMStatus"
          }
        }
      },
      "type": "object"
    },
    "TimelineCarePlan": {
      "properties": {
        "carePlanName": {
          "type": "string"
        },
        "carePlanOwner": {
          "$ref": "#/definitions/User"
        },
        "statusHistories": {
          "items": {
            "$ref": "#/definitions/TimelineCarePlanStatus"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TimelineCarePlanStatus": {
      "properties": {
        "statusDate": {
          "format": "date-time",
          "type": "string"
        },
        "statusType": {
          "enum": [
            "IN_PROGRESS",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CarePlanStatusType",
            "namespace": "http://www.casenet.com/CarePlanStatusType"
          }
        }
      },
      "type": "object"
    },
    "TimelineCase": {
      "properties": {
        "caseHistories": {
          "items": {
            "$ref": "#/definitions/TimelineCaseStatus"
          },
          "type": "array"
        },
        "caseId": {
          "type": "string"
        },
        "caseName": {
          "$ref": "#/definitions/OptionValue"
        },
        "caseNameOther": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "contactedOn": {
          "$ref": "#/definitions/LocalDate"
        }
      },
      "type": "object"
    },
    "TimelineCaseStatus": {
      "properties": {
        "statusDate": {
          "format": "date-time",
          "type": "string"
        },
        "statusType": {
          "enum": [
            "IN_PROGRESS",
            "CLOSED"
          ],
          "type": "string",
          "xml": {
            "name": "CaseStatusType",
            "namespace": "http://www.casenet.com/CaseStatusType"
          }
        }
      },
      "type": "object"
    },
    "TimelineDataResults": {
      "properties": {
        "assessments": {
          "$ref": "#/definitions/TimelineItemsAssessment"
        },
        "carePlans": {
          "$ref": "#/definitions/TimelineItemsCarePlan"
        },
        "cases": {
          "$ref": "#/definitions/TimelineItemsCase"
        },
        "ipAuths": {
          "$ref": "#/definitions/TimelineItemsAuth"
        },
        "programs": {
          "$ref": "#/definitions/TimelineItemsProgram"
        },
        "referrals": {
          "$ref": "#/definitions/TimelineItemsReferral"
        },
        "rxAuths": {
          "$ref": "#/definitions/TimelineItemsAuth"
        },
        "serviceRequests": {
          "$ref": "#/definitions/TimelineItemsServiceRequest"
        },
        "spAuths": {
          "$ref": "#/definitions/TimelineItemsAuth"
        }
      },
      "type": "object"
    },
    "TimelineItemsAssessment": {
      "properties": {
        "hasMoreResults": {
          "type": "boolean"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/TimelineAssessment"
          },
          "type": "array"
        },
        "license": {
          "enum": [
            "LICENSED",
            "UNKNOWN"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TimelineItemsAuth": {
      "properties": {
        "hasMoreResults": {
          "type": "boolean"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/TimelineAuth"
          },
          "type": "array"
        },
        "license": {
          "enum": [
            "LICENSED",
            "UNKNOWN"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TimelineItemsCarePlan": {
      "properties": {
        "hasMoreResults": {
          "type": "boolean"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/TimelineCarePlan"
          },
          "type": "array"
        },
        "license": {
          "enum": [
            "LICENSED",
            "UNKNOWN"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TimelineItemsCase": {
      "properties": {
        "hasMoreResults": {
          "type": "boolean"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/TimelineCase"
          },
          "type": "array"
        },
        "license": {
          "enum": [
            "LICENSED",
            "UNKNOWN"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TimelineItemsProgram": {
      "properties": {
        "hasMoreResults": {
          "type": "boolean"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/TimelineProgram"
          },
          "type": "array"
        },
        "license": {
          "enum": [
            "LICENSED",
            "UNKNOWN"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TimelineItemsReferral": {
      "properties": {
        "hasMoreResults": {
          "type": "boolean"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/TimelineReferral"
          },
          "type": "array"
        },
        "license": {
          "enum": [
            "LICENSED",
            "UNKNOWN"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TimelineItemsServiceRequest": {
      "properties": {
        "hasMoreResults": {
          "type": "boolean"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/TimelineServiceRequest"
          },
          "type": "array"
        },
        "license": {
          "enum": [
            "LICENSED",
            "UNKNOWN"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TimelineProgram": {
      "properties": {
        "programEnrollmentHistories": {
          "items": {
            "$ref": "#/definitions/TimelineProgramEnrollmentStatus"
          },
          "type": "array"
        },
        "programName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TimelineProgramEnrollmentStatus": {
      "properties": {
        "statusDate": {
          "format": "date-time",
          "type": "string"
        },
        "statusType": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TimelineRange": {
      "properties": {
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TimelineReferral": {
      "properties": {
        "decision": {
          "enum": [
            "MEETS_CRITERIA",
            "DOES_NOT_MEET_CRITERIA",
            "ASSIGN_TO_ANOTHER"
          ],
          "type": "string",
          "xml": {
            "name": "ReferralAction",
            "namespace": "http://www.casenet.com/ReferralAction"
          }
        },
        "referralSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "referralSourceOther": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TimelineServiceRequest": {
      "properties": {
        "lineItemRanges": {
          "items": {
            "$ref": "#/definitions/TimelineRange"
          },
          "type": "array"
        },
        "referenceNumber": {
          "type": "string"
        },
        "serviceRequestId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TotalCostRequest": {
      "properties": {
        "serviceRequestIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TotalCostResponse": {
      "properties": {
        "totalCost": {
          "$ref": "#/definitions/Money"
        }
      },
      "type": "object"
    },
    "TransitionPlanNoteRequest": {
      "properties": {
        "checklistId": {
          "type": "string"
        },
        "noteRequests": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "transitionPlanId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UMInterqualReviewSource": {
      "properties": {
        "description": {
          "type": "string"
        },
        "source": {
          "enum": [
            "REVIEW_MANAGER",
            "IQCONNECT"
          ],
          "type": "string",
          "xml": {
            "name": "UMInterqualReviewSourceEnum",
            "namespace": "http://www.casenet.com/UMInterqualReviewSourceEnum"
          }
        },
        "umInterqualReviewSourceId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "UnitGroup": {
      "properties": {
        "disabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "units": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "UnitGroup",
        "namespace": "http://www.casenet.com/UnitGroup"
      }
    },
    "UpdateAAGRequest": {
      "properties": {
        "aagDetailsRequest": {
          "$ref": "#/definitions/AagDetailsRequest"
        },
        "aagHeaderRequest": {
          "$ref": "#/definitions/AagHeaderRequest"
        },
        "aagRequestorInfoRequest": {
          "$ref": "#/definitions/AagRequestorInfoRequest"
        },
        "aagTypeOption": {
          "type": "string"
        },
        "actionPathRequest": {
          "$ref": "#/definitions/AagActionPathRequest"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "aagTypeOption"
      ],
      "type": "object",
      "xml": {
        "name": "BaseAAGRequest",
        "namespace": "http://www.casenet.com/BaseAAGRequest"
      }
    },
    "UpdateAAGReviewRequest": {
      "properties": {
        "aagActionPathRequest": {
          "$ref": "#/definitions/AagActionPathRequest"
        },
        "aagReviewRequest": {
          "$ref": "#/definitions/AagReviewRequest"
        },
        "taskId": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "UpdateActionPathRequest": {
      "properties": {
        "activity": {
          "enum": [
            "CLINICAL_REVIEW",
            "ADVISOR_REVIEW",
            "DETERMINATION",
            "NOTIFICATION"
          ],
          "type": "string",
          "xml": {
            "name": "Activity",
            "namespace": "http://www.casenet.com/Activity"
          }
        },
        "assignedTo": {
          "$ref": "#/definitions/AssigneeRequest"
        },
        "description": {
          "maxLength": 2048,
          "minLength": 0,
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "priority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "selectedLineItemsNumbers": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "useRuleOutputs": {
          "type": "boolean"
        }
      },
      "required": [
        "useRuleOutputs"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateActionPathRequest",
        "namespace": "http://www.casenet.com/UpdateActionPathRequest"
      }
    },
    "UpdateActionRequest": {
      "properties": {
        "carePlanElementPriorityOption": {
          "type": "string"
        },
        "category": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "closedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "closureReasonOption": {
          "type": "string"
        },
        "comments": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "parentObjectiveId": {
          "type": "string"
        },
        "parentProblemId": {
          "type": "string"
        },
        "relatedTask": {
          "$ref": "#/definitions/RelatedTaskRequest"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "targetDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "version"
      ],
      "type": "object"
    },
    "UpdateAllergyRequest": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "allergyDetail": {
          "maxLength": 250,
          "minLength": 0,
          "type": "string"
        },
        "severityOption": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "UpdateAllergyRequest",
        "namespace": "http://www.casenet.com/UpdateAllergyRequest"
      }
    },
    "UpdateAppealOutcomeRequest": {
      "properties": {
        "actionPath": {
          "$ref": "#/definitions/AppealActionPathRequest"
        },
        "additionalLineItemIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "decision": {
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "lineItemUnderReviewId": {
          "type": "string"
        },
        "notificationToOption": {
          "type": "string"
        },
        "outcomeDetailOption": {
          "type": "string"
        },
        "outcomeOption": {
          "type": "string"
        },
        "outcomeOther": {
          "type": "string"
        },
        "resolutionLetterSentDate": {
          "format": "date-time",
          "type": "string"
        },
        "taskId": {
          "type": "string"
        },
        "verbalNotificationOfResolutionDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "lineItemUnderReviewId",
        "outcomeOption"
      ],
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "UpdateAppealReviewRequest": {
      "properties": {
        "appealActionPathRequest": {
          "$ref": "#/definitions/AppealActionPathRequest"
        },
        "appealReviewRequest": {
          "$ref": "#/definitions/AppealReviewRequest"
        },
        "taskId": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "UpdateAssessmentRequest": {
      "properties": {
        "agreeToParticipate": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "answerRequests": {
          "items": {
            "$ref": "#/definitions/AnswerRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "enrollMemberInProgram": {
          "type": "boolean"
        },
        "notes": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "offlineCompletedDate": {
          "format": "date-time",
          "type": "string"
        },
        "opportunityIdentified": {
          "type": "boolean"
        },
        "proceedToGeneralAssessment": {
          "type": "boolean"
        },
        "questionGroupResults": {
          "items": {
            "$ref": "#/definitions/QuestionGroupResultDto"
          },
          "type": "array",
          "uniqueItems": true
        },
        "selectedGeneralAssessmentId": {
          "type": "string"
        },
        "selectedProgramIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "signature": {
          "type": "string"
        },
        "taskId": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "UpdateAssessmentRequest",
        "namespace": "http://www.casenet.com/UpdateAssessmentRequest"
      }
    },
    "UpdateAssessmentTriggerRequest": {
      "properties": {
        "abstractAssessmentRequest": {
          "$ref": "#/definitions/AbstractAssessmentRequest"
        },
        "agreeToParticipate": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "answerRequests": {
          "items": {
            "$ref": "#/definitions/AnswerRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "assessmentMetaId": {
          "type": "string"
        },
        "locationId": {
          "type": "string"
        },
        "notes": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "problemDefinitionMcgUIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "questionGroupResults": {
          "items": {
            "$ref": "#/definitions/QuestionGroupResultDto"
          },
          "type": "array",
          "uniqueItems": true
        },
        "selectedAssessmentMetaIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "selectedMedicationRequestIds": {
          "items": {
            "$ref": "#/definitions/MedicationIdRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "selectedPrograms": {
          "items": {
            "$ref": "#/definitions/AssessmentProgramTriggerRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "selectedTasks": {
          "items": {
            "$ref": "#/definitions/AssessmentTaskTriggerRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "specialtyOptionValueID": {
          "type": "string"
        },
        "taskId": {
          "type": "string"
        },
        "textActionMcgUIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "assessmentMetaId",
        "version"
      ],
      "type": "object"
    },
    "UpdateAuthorizationAppealRequest": {
      "properties": {
        "acknowledgementLetterSentDate": {
          "format": "date-time",
          "type": "string"
        },
        "appealActionPathRequest": {
          "$ref": "#/definitions/AppealActionPathRequest"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "dueDateChangeReasonOption": {
          "type": "string"
        },
        "dueDateChangeReasonOther": {
          "maxLength": 250,
          "minLength": 0,
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "levelOption": {
          "type": "string"
        },
        "lineItemNumbers": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array",
          "uniqueItems": true
        },
        "methodOption": {
          "type": "string"
        },
        "ownerUsername": {
          "type": "string"
        },
        "reasonOption": {
          "type": "string"
        },
        "reasonOther": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "receivedDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestForInformationList": {
          "items": {
            "$ref": "#/definitions/AppealRequestForInformationRequest"
          },
          "type": "array"
        },
        "requestorAddress": {
          "$ref": "#/definitions/CreateAddressRequest"
        },
        "requestorAlternatePhone": {
          "$ref": "#/definitions/Phone"
        },
        "requestorEmail": {
          "maxLength": 254,
          "minLength": 0,
          "type": "string"
        },
        "requestorFax": {
          "$ref": "#/definitions/Phone"
        },
        "requestorName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "requestorPrimaryPhone": {
          "$ref": "#/definitions/Phone"
        },
        "requestorTypeOption": {
          "type": "string"
        },
        "typeOption": {
          "type": "string"
        },
        "urgencyChangeReasonOption": {
          "type": "string"
        },
        "urgencyChangeReasonOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "urgencyOption": {
          "type": "string"
        },
        "verbalNotificationExpeditedDenialDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "ownerUsername",
        "receivedDate"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateAuthorizationAppealRequest",
        "namespace": "http://www.casenet.com/UpdateAuthorizationAppealRequest"
      }
    },
    "UpdateAuthorizationRequest": {
      "properties": {
        "authDiagnosisRequest": {
          "$ref": "#/definitions/AddAuthorizationDiagnosisRequest"
        },
        "authorizationHeaderRequest": {
          "$ref": "#/definitions/AuthorizationHeaderRequest"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "newLineItems": {
          "items": {
            "$ref": "#/definitions/CreateLineItemRequest"
          },
          "type": "array"
        },
        "nextTask": {
          "$ref": "#/definitions/UpdateActionPathRequest"
        },
        "requestingProviderRequest": {
          "$ref": "#/definitions/RequestingProviderRequest"
        },
        "trackingNum": {
          "type": "string"
        },
        "updateLineItems": {
          "items": {
            "$ref": "#/definitions/UpdateLineItemRequest"
          },
          "type": "array"
        },
        "voidAuthorizationDiagnosisRequest": {
          "$ref": "#/definitions/VoidAuthorizationDiagnosisRequest"
        }
      },
      "required": [
        "authorizationVersion"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateAuthorizationRequest",
        "namespace": "http://www.casenet.com/UpdateAuthorizationRequest"
      }
    },
    "UpdateAuthorizationRequestAuthorizationHeaderRequestCreateLineItemRequestUpdateLineItemRequest": {
      "properties": {
        "authDiagnosisRequest": {
          "$ref": "#/definitions/AddAuthorizationDiagnosisRequest"
        },
        "authorizationHeaderRequest": {
          "$ref": "#/definitions/AuthorizationHeaderRequest"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "newLineItems": {
          "items": {
            "$ref": "#/definitions/CreateLineItemRequest"
          },
          "type": "array"
        },
        "nextTask": {
          "$ref": "#/definitions/UpdateActionPathRequest"
        },
        "requestingProviderRequest": {
          "$ref": "#/definitions/RequestingProviderRequest"
        },
        "trackingNum": {
          "type": "string"
        },
        "updateLineItems": {
          "items": {
            "$ref": "#/definitions/UpdateLineItemRequest"
          },
          "type": "array"
        },
        "voidAuthorizationDiagnosisRequest": {
          "$ref": "#/definitions/VoidAuthorizationDiagnosisRequest"
        }
      },
      "required": [
        "authorizationVersion"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateAuthorizationRequest",
        "namespace": "http://www.casenet.com/UpdateAuthorizationRequest"
      }
    },
    "UpdateAuthorizationResponse": {
      "properties": {
        "authorizationId": {
          "type": "string"
        },
        "authorizationNum": {
          "type": "string"
        },
        "authorizationProcessWarnings": {
          "items": {
            "enum": [
              "DUPLICATE_AUTHORIZATION",
              "CORRESPONDENCE_AUTOMATION_FAILURE",
              "RFI_DISTRIBUTED_CORRESPONDENCE_ENABLED",
              "RFI_NO_ADDRESS_FOR_MEMBER_DESIGNEE",
              "RFI_NO_ADDRESS_FOR_MEMBER"
            ],
            "type": "string",
            "xml": {
              "name": "AuthorizationProcessWarnings",
              "namespace": "http://www.casenet.com/AuthorizationProcessWarnings"
            }
          },
          "type": "array"
        },
        "duplicated": {
          "type": "boolean"
        },
        "isOpen": {
          "type": "boolean"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/AuthorizationLineItemInfoLite"
          },
          "type": "array",
          "uniqueItems": true
        },
        "state": {
          "enum": [
            "OPEN",
            "OPEN_MODIFIED",
            "OPEN_REVISED",
            "CLOSED",
            "VOID",
            "DISCHARGED",
            "DRAFT"
          ],
          "type": "string",
          "xml": {
            "name": "UMAuthorizationState",
            "namespace": "http://www.casenet.com/UMAuthorizationState"
          }
        },
        "status": {
          "enum": [
            "APPROVE",
            "PARTIAL_APPROVE",
            "DENY",
            "PARTIAL_DENY",
            "VOID",
            "PEND"
          ],
          "type": "string",
          "xml": {
            "name": "UMStatus",
            "namespace": "http://www.casenet.com/UMStatus"
          }
        },
        "trackingNum": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "warningMessage": {
          "enum": [
            "AUTOMATED_LETTER_WARNING"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "UpdateAuthorizationResponse",
        "namespace": "http://www.casenet.com/UpdateAuthorizationResponse"
      }
    },
    "UpdateBirthEventRequest": {
      "properties": {
        "babyAuthorizationId": {
          "$ref": "#/definitions/AuthorizationId"
        },
        "babyFirstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "babyLastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "babyMedicaidId": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "babyMemberId": {
          "$ref": "#/definitions/MemberId"
        },
        "birthDateTime": {
          "$ref": "#/definitions/LocalDateTime"
        },
        "birthOrderOption": {
          "type": "string"
        },
        "birthStatusOption": {
          "type": "string"
        },
        "birthWeightGrams": {
          "format": "int32",
          "maximum": 16000,
          "minimum": 0,
          "type": "integer"
        },
        "deliveryAuthorizationId": {
          "$ref": "#/definitions/AuthorizationId"
        },
        "deliveryTypeOption": {
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "fatherFirstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "fatherLastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "fiveMinuteApgar": {
          "format": "int32",
          "maximum": 10,
          "minimum": 0,
          "type": "integer"
        },
        "genderOption": {
          "type": "string"
        },
        "gestationalAgeDays": {
          "format": "int32",
          "maximum": 6,
          "minimum": 0,
          "type": "integer"
        },
        "gestationalAgeWeeks": {
          "format": "int32",
          "maximum": 99,
          "minimum": 0,
          "type": "integer"
        },
        "lastMenstrualPeriod": {
          "$ref": "#/definitions/LocalDate"
        },
        "motherFirstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "motherLastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "motherMemberId": {
          "$ref": "#/definitions/MemberId"
        },
        "oneMinuteApgar": {
          "format": "int32",
          "maximum": 10,
          "minimum": 0,
          "type": "integer"
        },
        "scheduledDelivery": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "fiveMinuteApgar",
        "oneMinuteApgar",
        "version"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateBirthEventRequest",
        "namespace": "http://www.casenet.com/UpdateBirthEventRequest"
      }
    },
    "UpdateCarePlanFromBuilderRequest": {
      "properties": {
        "artifactRequestList": {
          "items": {
            "$ref": "#/definitions/CarePlanElementRecommendationArtifactRequest"
          },
          "type": "array"
        },
        "carePlanId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "artifactRequestList",
        "carePlanId"
      ],
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "UpdateCarePlanRequest": {
      "properties": {
        "newActions": {
          "items": {
            "$ref": "#/definitions/CreateActionRequest"
          },
          "type": "array"
        },
        "newObjectives": {
          "items": {
            "$ref": "#/definitions/CreateObjectiveRequest"
          },
          "type": "array"
        },
        "newProblems": {
          "items": {
            "$ref": "#/definitions/CreateProblemRequest"
          },
          "type": "array"
        },
        "ownerUserName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "removeActions": {
          "items": {
            "$ref": "#/definitions/RemoveActionRequest"
          },
          "type": "array"
        },
        "removeObjectiveOutcomes": {
          "items": {
            "$ref": "#/definitions/RemoveObjectiveOutcomeRequest"
          },
          "type": "array"
        },
        "removeObjectives": {
          "items": {
            "$ref": "#/definitions/RemoveObjectiveRequest"
          },
          "type": "array"
        },
        "removeProblems": {
          "items": {
            "$ref": "#/definitions/RemoveProblemRequest"
          },
          "type": "array"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "updateActions": {
          "items": {
            "$ref": "#/definitions/UpdateActionRequest"
          },
          "type": "array"
        },
        "updateObjectiveOutcomes": {
          "items": {
            "$ref": "#/definitions/UpdateObjectiveOutcomeRequest"
          },
          "type": "array"
        },
        "updateObjectives": {
          "items": {
            "$ref": "#/definitions/UpdateObjectiveRequest"
          },
          "type": "array"
        },
        "updateProblems": {
          "items": {
            "$ref": "#/definitions/UpdateProblemRequest"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "version"
      ],
      "type": "object"
    },
    "UpdateCarePlansFromBuilderRequest": {
      "properties": {
        "updateCarePlanRequests": {
          "items": {
            "$ref": "#/definitions/UpdateCarePlanFromBuilderRequest"
          },
          "type": "array"
        }
      },
      "required": [
        "updateCarePlanRequests"
      ],
      "type": "object"
    },
    "UpdateCaseNotificationRequest": {
      "properties": {
        "caseNotificationType": {
          "enum": [
            "welcome",
            "closure"
          ],
          "type": "string"
        },
        "createInternalLetterNotificationRequest": {
          "$ref": "#/definitions/CreateInternalLetterNotificationRequest"
        },
        "createPhoneNotificationRequest": {
          "$ref": "#/definitions/CreatePhoneNotificationRequest"
        },
        "taskId": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "caseNotificationType",
        "taskId",
        "version"
      ],
      "type": "object"
    },
    "UpdateCaseRequest": {
      "properties": {
        "acuityLabel": {
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "type": "string",
          "xml": {
            "name": "CaseAcuity",
            "namespace": "http://www.casenet.com/CaseAcuity"
          }
        },
        "caseNameOption": {
          "type": "string"
        },
        "caseNameOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "caseTypeOption": {
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "noteRequests": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "primaryDiagnosisId": {
          "type": "string"
        },
        "primaryOwnerUsername": {
          "type": "string"
        },
        "secondaryOwnerUsernames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "caseNameOption",
        "caseTypeOption",
        "primaryOwnerUsername"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateCaseRequest",
        "namespace": "http://www.casenet.com/UpdateCaseRequest"
      }
    },
    "UpdateContactAddressRequest": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "address": {
          "$ref": "#/definitions/CreateAddressRequest"
        },
        "addressTypeOption": {
          "type": "string"
        },
        "contactAddressId": {
          "type": "string"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "preferredAddress": {
          "type": "boolean"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "contactAddressId",
        "version"
      ],
      "type": "object"
    },
    "UpdateContactEmailRequest": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "contactEmailId": {
          "type": "string"
        },
        "emailAddress": {
          "maxLength": 254,
          "minLength": 0,
          "type": "string"
        },
        "emailTypeOption": {
          "type": "string"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "preferredEmail": {
          "type": "boolean"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "contactEmailId",
        "emailAddress",
        "emailTypeOption",
        "version"
      ],
      "type": "object"
    },
    "UpdateContactPhoneNumberRequest": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "contactPhoneId": {
          "type": "string"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "phoneNumberTypeOption": {
          "type": "string"
        },
        "preferredPhoneNumber": {
          "type": "boolean"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "contactPhoneId",
        "phoneNumberTypeOption",
        "version"
      ],
      "type": "object"
    },
    "UpdateCostSavingsRequest": {
      "properties": {
        "careProviderId": {
          "type": "string"
        },
        "costSavingsAmountRequest": {
          "$ref": "#/definitions/CostSavingsAmountRequest"
        },
        "costSavingsCategoryOption": {
          "type": "string"
        },
        "costSavingsDetailsOption": {
          "type": "string"
        },
        "costSavingsTypeOption": {
          "type": "string"
        },
        "currencyOption": {
          "type": "string"
        },
        "finalizeFlag": {
          "type": "boolean"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "notes": {
          "items": {
            "$ref": "#/definitions/NoteRequest"
          },
          "type": "array"
        },
        "procedureCodeId": {
          "type": "string"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "typeOfServiceOption": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "costSavingsTypeOption",
        "version"
      ],
      "type": "object"
    },
    "UpdateDiagnosisRequest": {
      "properties": {
        "closedBy": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "closedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "primaryDiagnosis": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "UpdateDiagnosisRequest",
        "namespace": "http://www.casenet.com/UpdateDiagnosisRequest"
      }
    },
    "UpdateDraftAagRequest": {
      "properties": {
        "aagDetailsRequest": {
          "$ref": "#/definitions/AagDetailsRequest"
        },
        "aagHeaderRequest": {
          "$ref": "#/definitions/AagHeaderRequest"
        },
        "aagRequestorInfoRequest": {
          "$ref": "#/definitions/AagRequestorInfoRequest"
        },
        "aagTypeOption": {
          "type": "string"
        },
        "actionPathRequest": {
          "$ref": "#/definitions/AagActionPathRequest"
        },
        "id": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "aagTypeOption"
      ],
      "type": "object",
      "xml": {
        "name": "VersionedObject",
        "namespace": "http://www.casenet.com/VersionedObject"
      }
    },
    "UpdateDraftAuthorizationRequest": {
      "properties": {
        "authDiagnosisRequest": {
          "$ref": "#/definitions/CreateCommonAuthorizationDiagnosisRequest"
        },
        "authorizationHeaderRequest": {
          "$ref": "#/definitions/AuthorizationHeaderRequest"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/LineItemRequest"
          },
          "type": "array"
        },
        "newLineItems": {
          "items": {
            "$ref": "#/definitions/CreateLineItemRequest"
          },
          "type": "array"
        },
        "requestingProviderRequest": {
          "$ref": "#/definitions/RequestingProviderRequest"
        },
        "trackingNum": {
          "type": "string"
        },
        "updateLineItems": {
          "items": {
            "$ref": "#/definitions/UpdateLineItemRequest"
          },
          "type": "array"
        }
      },
      "required": [
        "authorizationVersion"
      ],
      "type": "object"
    },
    "UpdateDraftInpatientAuthorizationRequest": {
      "properties": {
        "authDiagnosisRequest": {
          "$ref": "#/definitions/CreateCommonAuthorizationDiagnosisRequest"
        },
        "authorizationHeaderRequest": {
          "$ref": "#/definitions/UpdateInpatientAuthorizationHeaderRequest"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/LineItemRequest"
          },
          "type": "array"
        },
        "newLineItems": {
          "items": {
            "$ref": "#/definitions/CreateLineItemRequest"
          },
          "type": "array"
        },
        "requestingProviderRequest": {
          "$ref": "#/definitions/RequestingProviderRequest"
        },
        "servicingFacilityRequest": {
          "$ref": "#/definitions/ServicingFacilityRequest"
        },
        "trackingNum": {
          "type": "string"
        },
        "updateLineItems": {
          "items": {
            "$ref": "#/definitions/UpdateLineItemRequest"
          },
          "type": "array"
        }
      },
      "required": [
        "authorizationVersion",
        "updateLineItems"
      ],
      "type": "object"
    },
    "UpdateDraftRxAuthorizationRequest": {
      "properties": {
        "authDiagnosisRequest": {
          "$ref": "#/definitions/CreateCommonAuthorizationDiagnosisRequest"
        },
        "authorizationHeaderRequest": {
          "$ref": "#/definitions/UpdateRxAuthorizationHeaderRequest"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/LineItemRequest"
          },
          "type": "array"
        },
        "newLineItems": {
          "items": {
            "$ref": "#/definitions/CreateRxLineItemRequest"
          },
          "type": "array"
        },
        "requestingProviderRequest": {
          "$ref": "#/definitions/RequestingProviderRequest"
        },
        "trackingNum": {
          "type": "string"
        },
        "updateLineItems": {
          "items": {
            "$ref": "#/definitions/UpdateRxLineItemRequest"
          },
          "type": "array"
        }
      },
      "required": [
        "authorizationVersion",
        "updateLineItems"
      ],
      "type": "object"
    },
    "UpdateDraftServiceProcedureAuthorizationRequest": {
      "properties": {
        "authDiagnosisRequest": {
          "$ref": "#/definitions/CreateCommonAuthorizationDiagnosisRequest"
        },
        "authorizationHeaderRequest": {
          "$ref": "#/definitions/UpdateServiceProcedureAuthorizationHeaderRequest"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "lineItems": {
          "items": {
            "$ref": "#/definitions/LineItemRequest"
          },
          "type": "array"
        },
        "newLineItems": {
          "items": {
            "$ref": "#/definitions/CreateServiceProcedureLineItemRequest"
          },
          "type": "array"
        },
        "requestingProviderRequest": {
          "$ref": "#/definitions/RequestingProviderRequest"
        },
        "servicingFacilityRequest": {
          "$ref": "#/definitions/ServicingFacilityRequest"
        },
        "trackingNum": {
          "type": "string"
        },
        "updateLineItems": {
          "items": {
            "$ref": "#/definitions/UpdateServiceProcedureLineItemRequest"
          },
          "type": "array"
        }
      },
      "required": [
        "authorizationVersion",
        "updateLineItems"
      ],
      "type": "object"
    },
    "UpdateEngagementLevelRequest": {
      "properties": {
        "engagementLevelOption": {
          "type": "string"
        },
        "programEnrollmentVersion": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "programEnrollmentVersion"
      ],
      "type": "object"
    },
    "UpdateExternalLetterRequest": {
      "properties": {
        "enclosureIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "eventType": {
          "enum": [
            "MANUAL",
            "CM",
            "CM_PROGRAM_ENROLLMENT",
            "CM_PROGRAM_CLOSURE",
            "UM",
            "TCA_UM",
            "TASK_ATTEMPT"
          ],
          "type": "string",
          "xml": {
            "name": "DistributedCorrespondenceEventType",
            "namespace": "http://www.casenet.com/DistributedCorrespondenceEventType"
          }
        },
        "letterOperations": {
          "enum": [
            "SAVE",
            "SUBMIT",
            "RESEND",
            "RESEND_EXACT_COPY"
          ],
          "type": "string"
        },
        "letterStatus": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "optionalRecipientTypes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "requiredRecipientTypes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "userNote": {
          "maxLength": 8000,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateFollowUpRequest": {
      "properties": {
        "contactScheduledDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "dmeRequired": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "followUpContactScheduled": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "followUpDate": {
          "format": "date-time",
          "type": "string"
        },
        "homeServicesRequired": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "medicationPrescribed": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "memberReferralOptions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "notes": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "phone": {
          "$ref": "#/definitions/Phone"
        },
        "scheduledForOption": {
          "type": "string"
        },
        "transportationConfirmed": {
          "enum": [
            "YES",
            "NO",
            "NA"
          ],
          "type": "string",
          "xml": {
            "name": "YesNoNaEnum",
            "namespace": "http://www.casenet.com/YesNoNaEnum"
          }
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "FollowUpRequest",
        "namespace": "http://www.casenet.com/FollowUpRequest"
      }
    },
    "UpdateFullTaskRequest": {
      "properties": {
        "assigneeName": {
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "USERS",
            "GROUP_QUEUES",
            "TEAMS"
          ],
          "type": "string",
          "xml": {
            "name": "TaskAssigneeType",
            "namespace": "http://www.casenet.com/TaskAssigneeType"
          }
        },
        "createTaskCommentsRequest": {
          "$ref": "#/definitions/CreateTaskCommentRequest"
        },
        "description": {
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "reminderDate": {
          "format": "date-time",
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "taskPriority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "taskRecurrenceOptionsRequest": {
          "$ref": "#/definitions/AbstractTaskRecurrenceOptionsRequest"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "assigneeType",
        "startDate",
        "taskPriority"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateFullTaskRequest",
        "namespace": "http://www.casenet.com/UpdateFullTaskRequest"
      }
    },
    "UpdateHcsEnrollmentDetailsRequest": {
      "properties": {
        "enrollmentDetailDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "fundingSourceOptionValue": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "stateClassificationOptionValues": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "teamId": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "version"
      ],
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "UpdateHcsWaiverEnrollmentRequest": {
      "properties": {
        "assignedTeamId": {
          "type": "string"
        },
        "cancelOpenTasks": {
          "type": "boolean"
        },
        "caseId": {
          "$ref": "#/definitions/CaseId"
        },
        "enrollmentDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "fundingSourceOptionValueId": {
          "type": "string"
        },
        "stateClassificationOptionValueIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "taskPackageId": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "UpdateHcsWaiverEnrollmentRequest",
        "namespace": "http://www.casenet.com/UpdateHcsWaiverEnrollmentRequest"
      }
    },
    "UpdateHcsWaiverEnrollmentRequestV2": {
      "properties": {
        "appliedEligibilityId": {
          "type": "string"
        },
        "caseId": {
          "$ref": "#/definitions/CaseId"
        },
        "createHcsEnrollmentDetailsRequests": {
          "items": {
            "$ref": "#/definitions/CreateHcsEnrollmentDetailsRequest"
          },
          "type": "array"
        },
        "enrollmentDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "taskAssigneeRequest": {
          "$ref": "#/definitions/TaskAssigneeRequest"
        },
        "taskPackageId": {
          "type": "string"
        },
        "updateHcsEnrollmentDetailsRequests": {
          "items": {
            "$ref": "#/definitions/UpdateHcsEnrollmentDetailsRequest"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "UpdateInpatientAuthorizationHeaderRequest": {
      "properties": {
        "admissionSourceOption": {
          "type": "string"
        },
        "admissionTypeOption": {
          "type": "string"
        },
        "continuityOfCare": {
          "type": "boolean"
        },
        "courtOrdered": {
          "type": "boolean"
        },
        "eligibleVerified": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "levelOfUrgencyOption": {
          "type": "string"
        },
        "overallPosOption": {
          "type": "string"
        },
        "ownerUsername": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestMethodOption": {
          "type": "string"
        },
        "requestSourceOption": {
          "type": "string"
        },
        "singleCaseAgreement": {
          "type": "boolean"
        },
        "targetAdmitDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "targetDischargeDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "urgencyRequestedByOption": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "UpdateInpatientAuthorizationHeaderRequest",
        "namespace": "http://www.casenet.com/UpdateInpatientAuthorizationHeaderRequest"
      }
    },
    "UpdateInpatientAuthorizationRequest": {
      "properties": {
        "authDiagnosisRequest": {
          "$ref": "#/definitions/AddAuthorizationDiagnosisRequest"
        },
        "authorizationHeaderRequest": {
          "$ref": "#/definitions/InpatientAuthorizationHeaderRequest"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "newLineItems": {
          "items": {
            "$ref": "#/definitions/CreateLineItemRequest"
          },
          "type": "array"
        },
        "nextTask": {
          "$ref": "#/definitions/UpdateActionPathRequest"
        },
        "requestingProviderRequest": {
          "$ref": "#/definitions/RequestingProviderRequest"
        },
        "servicingFacilityRequest": {
          "$ref": "#/definitions/ServicingFacilityRequest"
        },
        "trackingNum": {
          "type": "string"
        },
        "updateLineItems": {
          "items": {
            "$ref": "#/definitions/UpdateLineItemRequest"
          },
          "type": "array"
        },
        "voidAuthorizationDiagnosisRequest": {
          "$ref": "#/definitions/VoidAuthorizationDiagnosisRequest"
        }
      },
      "required": [
        "authorizationVersion",
        "updateLineItems"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateInpatientAuthorizationRequest",
        "namespace": "http://www.casenet.com/UpdateAuthorizationRequest"
      }
    },
    "UpdateInpatientLineItemRequest": {
      "properties": {
        "additionalProcedureCodeIds": {
          "items": {
            "$ref": "#/definitions/ProcedureCodeNaturalId"
          },
          "type": "array",
          "uniqueItems": true
        },
        "appliedEligibilityProductId": {
          "$ref": "#/definitions/ProductId"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "determination": {
          "$ref": "#/definitions/DeterminationRequest"
        },
        "dischargedSameDay": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "levelOfUrgencyOption": {
          "type": "string"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        },
        "lineItemType": {
          "enum": [
            "IP",
            "SP",
            "RX"
          ],
          "type": "string",
          "xml": {
            "name": "UMLineItemType",
            "namespace": "http://www.casenet.com/UMLineItemType"
          }
        },
        "lineItemTypeOption": {
          "type": "string"
        },
        "placeOfServiceOption": {
          "type": "string"
        },
        "primaryProcedureCodeId": {
          "$ref": "#/definitions/ProcedureCodeNaturalId"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "serviceTypeOption": {
          "type": "string"
        },
        "stayLevelOption": {
          "type": "string"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "urgencyRequestedByOption": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "UpdateInpatientLineItemRequest",
        "namespace": "http://www.casenet.com/UpdateInpatientLineItemRequest"
      }
    },
    "UpdateInternalLetterRequest": {
      "properties": {
        "bhpLogo": {
          "$ref": "#/definitions/LetterLogoRequest"
        },
        "companyGroupLogo": {
          "$ref": "#/definitions/LetterLogoRequest"
        },
        "enclosures": {
          "items": {
            "$ref": "#/definitions/EnclosureBase"
          },
          "type": "array"
        },
        "letterRecipients": {
          "items": {
            "$ref": "#/definitions/CreateLetterRecipientRequest"
          },
          "type": "array"
        },
        "logoFour": {
          "$ref": "#/definitions/LetterLogoRequest"
        },
        "logoSignature": {
          "$ref": "#/definitions/LetterLogoRequest"
        },
        "logoThree": {
          "$ref": "#/definitions/LetterLogoRequest"
        },
        "resendAsDuplicate": {
          "type": "boolean"
        },
        "userNotes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "version"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateInternalLetterRequest",
        "namespace": "http://www.casenet.com/UpdateInternalLetterRequest"
      }
    },
    "UpdateLetterStatusRequest": {
      "properties": {
        "dateGenerated": {
          "format": "date-time",
          "type": "string"
        },
        "letterMailingExternal": {
          "$ref": "#/definitions/LetterMailingExternal"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "version"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateLetterStatusRequest",
        "namespace": "http://www.casenet.com/UpdateLetterStatusRequest"
      }
    },
    "UpdateLineItemAdvisorReviewRequest": {
      "properties": {
        "administrativeDenial": {
          "type": "boolean"
        },
        "claimReviewTask": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "innerReview": {
          "$ref": "#/definitions/BaseInnerReviewRequest"
        },
        "lineItemNumbers": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array",
          "uniqueItems": true
        },
        "outcomeOption": {
          "type": "string"
        },
        "peerToPeerDate": {
          "format": "date-time",
          "type": "string"
        },
        "rationale": {
          "type": "string"
        },
        "reasonOption": {
          "type": "string"
        },
        "reviewDate": {
          "format": "date-time",
          "type": "string"
        },
        "reviewNotes": {
          "type": "string"
        },
        "reviewerRequest": {
          "$ref": "#/definitions/ReviewerRequest"
        },
        "specialtyOption": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "UpdateLineItemClinicalReviewRequest": {
      "properties": {
        "administrativeDenial": {
          "type": "boolean"
        },
        "claimReviewTask": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "informationSourceOption": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "informationSourceOptions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "innerReview": {
          "$ref": "#/definitions/BaseInnerReviewRequest"
        },
        "lineItemNumbers": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array",
          "uniqueItems": true
        },
        "methodOption": {
          "type": "string"
        },
        "outcomeOption": {
          "type": "string"
        },
        "rationale": {
          "type": "string"
        },
        "reviewDate": {
          "format": "date-time",
          "type": "string"
        },
        "reviewNotes": {
          "type": "string"
        },
        "reviewerRequest": {
          "$ref": "#/definitions/ReviewerRequest"
        }
      },
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "UpdateLineItemRequest": {
      "properties": {
        "appliedEligibilityProductId": {
          "$ref": "#/definitions/ProductId"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "determination": {
          "$ref": "#/definitions/DeterminationRequest"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "levelOfUrgencyOption": {
          "type": "string"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        },
        "lineItemType": {
          "enum": [
            "IP",
            "SP",
            "RX"
          ],
          "type": "string",
          "xml": {
            "name": "UMLineItemType",
            "namespace": "http://www.casenet.com/UMLineItemType"
          }
        },
        "lineItemTypeOption": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "serviceTypeOption": {
          "type": "string"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "urgencyRequestedByOption": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "UpdateLineItemRequest",
        "namespace": "http://www.casenet.com/UpdateLineItemRequest"
      }
    },
    "UpdateMedicationRegimenRequest": {
      "properties": {
        "adjustedDose": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "adjustedRouteOption": {
          "type": "string"
        },
        "adjustedRouteOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "completeMedicationRequest": {
          "$ref": "#/definitions/CompleteMedicationRequest"
        },
        "drugEntryType": {
          "enum": [
            "NDC",
            "DISPENSED_DRUG",
            "DRUG_BASE_NAME"
          ],
          "type": "string"
        },
        "drugId": {
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "frequencyOption": {
          "type": "string"
        },
        "frequencyOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "isConfirmationUpdateRequest": {
          "type": "boolean"
        },
        "isCurrentlyTaking": {
          "type": "boolean"
        },
        "medicationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "procurementMethodOption": {
          "type": "string"
        },
        "procurementMethodOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "regimenEndDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "regimenStartDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "sourceOption": {
          "type": "string"
        },
        "sourceOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "voidMedicationRequest": {
          "$ref": "#/definitions/VoidMedicationRequest"
        }
      },
      "required": [
        "medicationVersion"
      ],
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "UpdateMemberGeneralInformationRequest": {
      "properties": {
        "citizenshipStatus": {
          "type": "string"
        },
        "citizenshipStatusOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "ethnicity": {
          "type": "string"
        },
        "ethnicityOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "lockedInStatus": {
          "type": "boolean"
        },
        "pharmacy": {
          "$ref": "#/definitions/PharmacyRequest"
        },
        "primaryLanguage": {
          "type": "string"
        },
        "primaryLanguageOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "race": {
          "type": "string"
        },
        "raceOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "religion": {
          "type": "string"
        },
        "religionOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "secondaryLanguage": {
          "type": "string"
        },
        "secondaryLanguageOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "specialNeeds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "specialNeedsOther": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "writtenLanguage": {
          "type": "string"
        },
        "writtenLanguageOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "UpdateMemberGeneralInformationRequest",
        "namespace": "http://www.casenet.com/UpdateMemberGeneralInformationRequest"
      }
    },
    "UpdateMemberLocationRequest": {
      "properties": {
        "address": {
          "$ref": "#/definitions/CreateAddressRequest"
        },
        "addressVerifiedBy": {
          "type": "string"
        },
        "addressVerifiedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "comments": {
          "type": "string"
        },
        "contactName": {
          "type": "string"
        },
        "email": {
          "$ref": "#/definitions/Email"
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "fax": {
          "$ref": "#/definitions/PhoneAndExtension"
        },
        "informationSourceOption": {
          "type": "string"
        },
        "informationSourceOther": {
          "type": "string"
        },
        "levelOfCareOption": {
          "type": "string"
        },
        "levelOfCareOther": {
          "type": "string"
        },
        "locationName": {
          "type": "string"
        },
        "locationType": {
          "enum": [
            "FACILITY",
            "MEMBER_CONTACT",
            "OTHER"
          ],
          "type": "string"
        },
        "locationTypeOther": {
          "type": "string"
        },
        "memberAtLocationConfirmed": {
          "type": "boolean"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneAndExtension"
        },
        "providerLocationInfo": {
          "$ref": "#/definitions/ProviderLocationInfo"
        },
        "reportedBy": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "status": {
          "enum": [
            "Active",
            "Closed",
            "Historical",
            "Scheduled",
            "Voided"
          ],
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "locationName",
        "locationType",
        "memberAtLocationConfirmed",
        "reportedBy"
      ],
      "type": "object",
      "xml": {
        "name": "ExtendedAttributesRequest",
        "namespace": "http://www.casenet.com/ExtendedAttributesRequest"
      }
    },
    "UpdateMemberRequest": {
      "properties": {
        "bhpNodeFeedIdFullPath": {
          "type": "string"
        },
        "citizenshipOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "citizenshipStatusOption": {
          "type": "string"
        },
        "contactOptOut": {
          "type": "boolean"
        },
        "createContactAddressRequests": {
          "items": {
            "$ref": "#/definitions/CreateContactAddressRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "createContactEmailRequests": {
          "items": {
            "$ref": "#/definitions/CreateContactEmailRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "createContactPhoneNumberRequests": {
          "items": {
            "$ref": "#/definitions/CreateContactPhoneNumberRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "createOptOutPreferenceRequestset": {
          "items": {
            "$ref": "#/definitions/CreateOptOutPreferenceRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "deleteOptOutPreferenceIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ethnicityOption": {
          "type": "string"
        },
        "ethnicityOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "hasAllergy": {
          "type": "boolean"
        },
        "lockedInStatus": {
          "type": "boolean"
        },
        "memberContactTimes": {
          "$ref": "#/definitions/MemberContactTimes"
        },
        "pharmacy": {
          "$ref": "#/definitions/PharmacyRequest"
        },
        "primaryHealthcoach": {
          "$ref": "#/definitions/User"
        },
        "primaryLanguageOption": {
          "type": "string"
        },
        "primaryLanguageOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "raceOption": {
          "type": "string"
        },
        "raceOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "religionOption": {
          "type": "string"
        },
        "religionOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "secondaryLanguageOption": {
          "type": "string"
        },
        "secondaryLanguageOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "specialNeedsOptions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "specialNeedsOther": {
          "type": "string"
        },
        "updateContactAddressRequests": {
          "items": {
            "$ref": "#/definitions/UpdateContactAddressRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updateContactEmailRequests": {
          "items": {
            "$ref": "#/definitions/UpdateContactEmailRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updateContactPhoneNumberRequests": {
          "items": {
            "$ref": "#/definitions/UpdateContactPhoneNumberRequest"
          },
          "type": "array",
          "uniqueItems": true
        },
        "userAlert": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "writtenLanguageOption": {
          "type": "string"
        },
        "writtenLanguageOther": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "MemberDetailsRequest",
        "namespace": "http://www.casenet.com/MemberDetailsRequest"
      }
    },
    "UpdateObjectiveOutcomeRequest": {
      "properties": {
        "detail": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "objectiveOutcomeDescriptionOption": {
          "type": "string"
        },
        "objectiveOutcomeTypeOption": {
          "type": "string"
        },
        "parentObjectiveId": {
          "type": "string"
        },
        "parentProblemId": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "objectiveOutcomeTypeOption",
        "parentObjectiveId",
        "version"
      ],
      "type": "object"
    },
    "UpdateObjectiveRequest": {
      "properties": {
        "carePlanElementPriorityOption": {
          "type": "string"
        },
        "category": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "closedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "closureReasonOption": {
          "type": "string"
        },
        "comments": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "longTerm": {
          "type": "boolean"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "newActions": {
          "items": {
            "$ref": "#/definitions/CreateActionRequest"
          },
          "type": "array"
        },
        "newObjectiveOutcomes": {
          "items": {
            "$ref": "#/definitions/CreateObjectiveOutcomeRequest"
          },
          "type": "array"
        },
        "parentProblemId": {
          "type": "string"
        },
        "progress": {
          "format": "int32",
          "maximum": 100,
          "minimum": 0,
          "type": "integer"
        },
        "readinessToChangeOption": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "targetDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "version"
      ],
      "type": "object"
    },
    "UpdateOptOutPreferenceRequest": {
      "properties": {
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "optOutReasonOption": {
          "type": "string"
        },
        "optOutReasonOther": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "optOutReasonOption"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateOptOutPreferenceRequest",
        "namespace": "http://www.casenet.com/UpdateOptOutPreferenceRequest"
      }
    },
    "UpdateProblemRequest": {
      "properties": {
        "carePlanElementPriorityOption": {
          "type": "string"
        },
        "category": {
          "enum": [
            "BEHAVIORAL",
            "MEDICAL",
            "MEMBER",
            "GENERIC",
            "BOTH",
            "NEITHER"
          ],
          "type": "string",
          "xml": {
            "name": "SourceCategory",
            "namespace": "http://www.casenet.com/SourceCategory"
          }
        },
        "closureReasonOption": {
          "type": "string"
        },
        "comments": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastReviewedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "newObjectives": {
          "items": {
            "$ref": "#/definitions/CreateObjectiveRequest"
          },
          "type": "array"
        },
        "noteRequests": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "readinessToChangeOption": {
          "type": "string"
        },
        "resolvedDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "version"
      ],
      "type": "object"
    },
    "UpdateReferralDraftRequest": {
      "properties": {
        "firstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "lastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "nextTask": {
          "$ref": "#/definitions/CommonActionPathRequest"
        },
        "otherReasonDescription": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "otherReferralSource": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "reasonsForReferralOption": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "referralComments": {
          "maxLength": 1500,
          "minLength": 0,
          "type": "string"
        },
        "referralDeterminationExtendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "referralFinalDecisionRequest": {
          "$ref": "#/definitions/ReferralDraftFinalDecisionRequest"
        },
        "referralSourceInformationExtendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "referralSourceOption": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "sourceDescription": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "referralSourceOption",
        "requestDate",
        "version"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateReferralDraftRequest",
        "namespace": "http://www.casenet.com/UpdateReferralDraftRequest"
      }
    },
    "UpdateReferralNotificationRequest": {
      "properties": {
        "createInternalLetterNotificationRequest": {
          "$ref": "#/definitions/CreateInternalLetterNotificationRequest"
        },
        "createPhoneNotificationRequest": {
          "$ref": "#/definitions/CreatePhoneNotificationRequest"
        },
        "taskId": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "taskId",
        "version"
      ],
      "type": "object"
    },
    "UpdateReferralRequest": {
      "properties": {
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "firstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "lastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "nextTask": {
          "$ref": "#/definitions/CommonActionPathRequest"
        },
        "otherReasonDescription": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "otherReferralSource": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "reasonsForReferralOption": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "referralComments": {
          "maxLength": 1500,
          "minLength": 0,
          "type": "string"
        },
        "referralFinalDecisionRequest": {
          "$ref": "#/definitions/ReferralFinalDecisionRequest2"
        },
        "referralSourceOption": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "sourceDescription": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "referralSourceOption",
        "requestDate",
        "version"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateReferralRequest",
        "namespace": "http://www.casenet.com/UpdateReferralRequest"
      }
    },
    "UpdateReferralRequest2": {
      "properties": {
        "firstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "lastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "nextTask": {
          "$ref": "#/definitions/CommonActionPathRequest"
        },
        "otherReasonDescription": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "otherReferralSource": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "phoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "reasonsForReferralOption": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "referralComments": {
          "maxLength": 1500,
          "minLength": 0,
          "type": "string"
        },
        "referralDeterminationExtendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "referralFinalDecisionRequest": {
          "$ref": "#/definitions/ReferralFinalDecisionRequest3"
        },
        "referralSourceInformationExtendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "referralSourceOption": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "sourceDescription": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "referralSourceOption",
        "requestDate",
        "version"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateReferralRequest2",
        "namespace": "http://www.casenet.com/UpdateReferralRequest2"
      }
    },
    "UpdateRequestingProviderRequest": {
      "properties": {
        "authSpecificContactAddress": {
          "$ref": "#/definitions/CreateAddressRequest"
        },
        "authSpecificContactFax": {
          "$ref": "#/definitions/Phone"
        },
        "authSpecificContactFaxI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "authSpecificContactName": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "authSpecificContactPhone": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "authSpecificContactPhoneI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "requestingProviderLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "requestingProviderPhoneNumber": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "requestingProviderPhoneNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "requestingProviderSpecialtyOption": {
          "type": "string"
        },
        "useAuthSpecificContactAddressForCorrespondence": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "version"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateRequestingProviderRequest",
        "namespace": "http://www.casenet.com/UpdateRequestingProviderRequest"
      }
    },
    "UpdateRiskIndicatorRequest": {
      "properties": {
        "acuityLevel": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "conditionList": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "indicatorDate": {
          "format": "date-time",
          "type": "string"
        },
        "riskCategoryOption": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "riskIndicatorCode": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "riskIndicatorName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "riskStatus": {
          "enum": [
            "OPEN",
            "INACTIVE",
            "CLOSED",
            "REOPENED"
          ],
          "type": "string",
          "xml": {
            "name": "RiskIndicatorStatusType",
            "namespace": "http://www.casenet.com/RiskIndicatorStatusType"
          }
        },
        "riskValue": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "riskValueType": {
          "enum": [
            "STRING",
            "INTEGER",
            "DECIMAL",
            "PERCENTAGE"
          ],
          "type": "string",
          "xml": {
            "name": "RiskIndicatorValueType",
            "namespace": "http://www.casenet.com/RiskIndicatorValueType"
          }
        },
        "source": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "statusDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "indicatorDate",
        "riskIndicatorCode"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateRiskIndicatorRequest",
        "namespace": "http://www.casenet.com/UpdateRiskIndicatorRequest"
      }
    },
    "UpdateRiskIndicatorsRequest": {
      "properties": {
        "riskIndicatorsUpdate": {
          "items": {
            "$ref": "#/definitions/UpdateRiskIndicatorRequest"
          },
          "type": "array"
        }
      },
      "required": [
        "riskIndicatorsUpdate"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateRiskIndicatorsRequest",
        "namespace": "http://www.casenet.com/UpdateRiskIndicatorsRequest"
      }
    },
    "UpdateRxAuthorizationHeaderRequest": {
      "properties": {
        "continuityOfCare": {
          "type": "boolean"
        },
        "courtOrdered": {
          "type": "boolean"
        },
        "eligibleVerified": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "levelOfUrgencyOption": {
          "type": "string"
        },
        "ownerUsername": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestMethodOption": {
          "type": "string"
        },
        "requestSourceOption": {
          "type": "string"
        },
        "singleCaseAgreement": {
          "type": "boolean"
        },
        "urgencyRequestedByOption": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "UpdateRxAuthorizationHeaderRequest",
        "namespace": "http://www.casenet.com/UpdateRxAuthorizationHeaderRequest"
      }
    },
    "UpdateRxAuthorizationRequest": {
      "properties": {
        "authDiagnosisRequest": {
          "$ref": "#/definitions/AddAuthorizationDiagnosisRequest"
        },
        "authorizationHeaderRequest": {
          "$ref": "#/definitions/RxAuthorizationHeaderRequest"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "newLineItems": {
          "items": {
            "$ref": "#/definitions/AddRxLineItemRequest"
          },
          "type": "array"
        },
        "nextTask": {
          "$ref": "#/definitions/UpdateActionPathRequest"
        },
        "requestingProviderRequest": {
          "$ref": "#/definitions/RequestingProviderRequest"
        },
        "trackingNum": {
          "type": "string"
        },
        "updateLineItems": {
          "items": {
            "$ref": "#/definitions/UpdateRxLineItemRequest"
          },
          "type": "array"
        },
        "voidAuthorizationDiagnosisRequest": {
          "$ref": "#/definitions/VoidAuthorizationDiagnosisRequest"
        }
      },
      "required": [
        "authorizationVersion",
        "updateLineItems"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateRxAuthorizationRequest",
        "namespace": "http://www.casenet.com/UpdateAuthorizationRequest"
      }
    },
    "UpdateRxLineItemRequest": {
      "properties": {
        "appliedEligibilityProductId": {
          "$ref": "#/definitions/ProductId"
        },
        "authSpecificContactAddress": {
          "$ref": "#/definitions/CreateAddressRequest"
        },
        "authSpecificContactFax": {
          "$ref": "#/definitions/Phone"
        },
        "authSpecificContactFaxI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "authSpecificContactName": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "authSpecificContactPhone": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "authSpecificContactPhoneI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "determination": {
          "$ref": "#/definitions/DeterminationRequest"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "inFormulary": {
          "type": "boolean"
        },
        "levelOfUrgencyOption": {
          "type": "string"
        },
        "lineItemMedicationInfoRequest": {
          "$ref": "#/definitions/LineItemMedicationInfoRequest"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        },
        "lineItemType": {
          "enum": [
            "IP",
            "SP",
            "RX"
          ],
          "type": "string",
          "xml": {
            "name": "UMLineItemType",
            "namespace": "http://www.casenet.com/UMLineItemType"
          }
        },
        "lineItemTypeOption": {
          "type": "string"
        },
        "oonReasonOption": {
          "type": "string"
        },
        "placeOfServiceOption": {
          "type": "string"
        },
        "prescribingProviderPhoneNumber": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "prescribingProviderPhoneNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "providerLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "providerSpecialtyOption": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "serviceTypeOption": {
          "type": "string"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "urgencyRequestedByOption": {
          "type": "string"
        },
        "useAuthSpecificContactAddressForCorrespondence": {
          "type": "boolean"
        },
        "useRuleOutputs": {
          "type": "boolean"
        }
      },
      "required": [
        "serviceTypeOption"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateRxLineItemRequest",
        "namespace": "http://www.casenet.com/UpdateRxLineItemRequest"
      }
    },
    "UpdateServiceProcedureAuthorizationHeaderRequest": {
      "properties": {
        "continuityOfCare": {
          "type": "boolean"
        },
        "courtOrdered": {
          "type": "boolean"
        },
        "eligibleVerified": {
          "type": "boolean"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "levelOfUrgencyOption": {
          "type": "string"
        },
        "ownerUsername": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestMethodOption": {
          "type": "string"
        },
        "requestSourceOption": {
          "type": "string"
        },
        "singleCaseAgreement": {
          "type": "boolean"
        },
        "urgencyRequestedByOption": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "UpdateServiceProcedureAuthorizationHeaderRequest",
        "namespace": "http://www.casenet.com/UpdateServiceProcedureAuthorizationHeaderRequest"
      }
    },
    "UpdateServiceProcedureAuthorizationRequest": {
      "properties": {
        "authDiagnosisRequest": {
          "$ref": "#/definitions/AddAuthorizationDiagnosisRequest"
        },
        "authorizationHeaderRequest": {
          "$ref": "#/definitions/ServiceProcedureAuthorizationHeaderRequest"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "newLineItems": {
          "items": {
            "$ref": "#/definitions/AddServiceProcedureLineItemRequest"
          },
          "type": "array"
        },
        "nextTask": {
          "$ref": "#/definitions/UpdateActionPathRequest"
        },
        "requestingProviderRequest": {
          "$ref": "#/definitions/RequestingProviderRequest"
        },
        "trackingNum": {
          "type": "string"
        },
        "updateLineItems": {
          "items": {
            "$ref": "#/definitions/UpdateServiceProcedureLineItemRequest"
          },
          "type": "array"
        },
        "voidAuthorizationDiagnosisRequest": {
          "$ref": "#/definitions/VoidAuthorizationDiagnosisRequest"
        }
      },
      "required": [
        "authorizationVersion",
        "updateLineItems"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateServiceProcedureAuthorizationRequest",
        "namespace": "http://www.casenet.com/UpdateAuthorizationRequest"
      }
    },
    "UpdateServiceProcedureLineItemRequest": {
      "properties": {
        "additionalProcedures": {
          "items": {
            "$ref": "#/definitions/ModifiedProcedureCodeNaturalId"
          },
          "type": "array"
        },
        "appliedEligibilityProductId": {
          "$ref": "#/definitions/ProductId"
        },
        "authBy": {
          "enum": [
            "GROUP",
            "SPECIALTY",
            "PROVIDER",
            "PROCEDURE_CODE"
          ],
          "type": "string",
          "xml": {
            "name": "AuthorizedByType",
            "namespace": "http://www.casenet.com/AuthorizedByType"
          }
        },
        "authSpecificContactAddress": {
          "$ref": "#/definitions/CreateAddressRequest"
        },
        "authSpecificContactFax": {
          "$ref": "#/definitions/Phone"
        },
        "authSpecificContactFaxI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "authSpecificContactName": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "authSpecificContactPhone": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "authSpecificContactPhoneI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "clinicalReviewRequired": {
          "type": "boolean"
        },
        "determination": {
          "$ref": "#/definitions/DeterminationRequest"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "fromDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "levelOfUrgencyOption": {
          "type": "string"
        },
        "lineItemMedicationInfoRequest": {
          "$ref": "#/definitions/SPLineItemMedicationInfoRequest"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        },
        "lineItemType": {
          "enum": [
            "IP",
            "SP",
            "RX"
          ],
          "type": "string",
          "xml": {
            "name": "UMLineItemType",
            "namespace": "http://www.casenet.com/UMLineItemType"
          }
        },
        "lineItemTypeOption": {
          "type": "string"
        },
        "locationCodeNaturalId": {
          "type": "string"
        },
        "oonReasonOption": {
          "type": "string"
        },
        "plCodeOption": {
          "type": "string"
        },
        "placeOfServiceOption": {
          "type": "string"
        },
        "primaryProcedure": {
          "$ref": "#/definitions/ModifiedProcedureCodeNaturalId"
        },
        "providerLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "providerSpecialtyOption": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string"
        },
        "requestedUnits": {
          "format": "int32",
          "maximum": 999999999,
          "minimum": 1,
          "type": "integer"
        },
        "serviceTypeOption": {
          "type": "string"
        },
        "servicingProviderPhoneNumber": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "servicingProviderPhoneNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "toDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "treatmentTypeOption": {
          "type": "string"
        },
        "unitTypeOption": {
          "type": "string"
        },
        "urgencyRequestedByOption": {
          "type": "string"
        },
        "useAuthSpecificContactAddressForCorrespondence": {
          "type": "boolean"
        },
        "useRuleOutputs": {
          "type": "boolean"
        }
      },
      "required": [
        "placeOfServiceOption",
        "requestedUnits",
        "serviceTypeOption",
        "unitTypeOption"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateServiceProcedureLineItemRequest",
        "namespace": "http://www.casenet.com/UpdateServiceProcedureLineItemRequest"
      }
    },
    "UpdateServiceRequestLineItemRequest": {
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "appliedEligibilityId": {
          "type": "string"
        },
        "details": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "lineItemNumber": {
          "format": "int32",
          "type": "integer"
        },
        "negotiateUnitRate": {
          "format": "double",
          "type": "number"
        },
        "overrideCost": {
          "format": "double",
          "type": "number"
        },
        "requestDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "serviceLocationTypeOptionId": {
          "type": "string"
        },
        "serviceOfferRequest": {
          "$ref": "#/definitions/ServiceRequestServiceOfferRequest"
        },
        "serviceQuantityRequest": {
          "$ref": "#/definitions/BaseServiceRequestServiceQuantityRequest"
        },
        "serviceRequestLineItemDeterminationRequest": {
          "$ref": "#/definitions/ServiceRequestLineItemDeterminationRequest"
        },
        "serviceRequestProcedureRequest": {
          "$ref": "#/definitions/ServiceRequestSRProcedureRequest"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "endDate",
        "lineItemNumber",
        "startDate",
        "version"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateServiceRequestLineItemRequest",
        "namespace": "http://www.casenet.com/UpdateServiceRequestLineItemRequest"
      }
    },
    "UpdateServiceRequestRequest": {
      "properties": {
        "actionPath": {
          "$ref": "#/definitions/ServiceRequestActionPath"
        },
        "addLineItemRequests": {
          "items": {
            "$ref": "#/definitions/CreateServiceRequestLineItemRequest"
          },
          "type": "array"
        },
        "completeTaskId": {
          "format": "int64",
          "type": "integer"
        },
        "mcpId": {
          "type": "string"
        },
        "noteRequests": {
          "items": {
            "$ref": "#/definitions/AdminNoteRequest"
          },
          "type": "array"
        },
        "referenceNumber": {
          "maxLength": 12,
          "minLength": 0,
          "type": "string"
        },
        "reviewAssignedTo": {
          "$ref": "#/definitions/Assignee"
        },
        "reviewerId": {
          "type": "string"
        },
        "serviceRequestHeaderRequest": {
          "$ref": "#/definitions/ServiceRequestHeaderRequest"
        },
        "updateLineItemRequests": {
          "items": {
            "$ref": "#/definitions/UpdateServiceRequestLineItemRequest"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "updateLineItemRequests",
        "version"
      ],
      "type": "object"
    },
    "UpdateServicingFacilityRequest": {
      "properties": {
        "authSpecificContactAddress": {
          "$ref": "#/definitions/CreateAddressRequest"
        },
        "authSpecificContactFax": {
          "$ref": "#/definitions/Phone"
        },
        "authSpecificContactFaxI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "authSpecificContactName": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "authSpecificContactPhone": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "authSpecificContactPhoneI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "oonReasonOption": {
          "type": "string"
        },
        "servicingFacilityLocationId": {
          "$ref": "#/definitions/LocationId"
        },
        "servicingFacilityPhoneNumber": {
          "$ref": "#/definitions/PhoneAndExt"
        },
        "servicingFacilityPhoneNumberI18n": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "servicingFacilitySpecialtyOption": {
          "type": "string"
        },
        "useAuthSpecificContactAddressForCorrespondence": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "version"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateServicingFacilityRequest",
        "namespace": "http://www.casenet.com/UpdateServicingFacilityRequest"
      }
    },
    "UpdateTaskRequest": {
      "properties": {
        "assigneeName": {
          "type": "string"
        },
        "assigneeType": {
          "enum": [
            "USERS",
            "GROUP_QUEUES",
            "TEAMS"
          ],
          "type": "string",
          "xml": {
            "name": "TaskAssigneeType",
            "namespace": "http://www.casenet.com/TaskAssigneeType"
          }
        },
        "description": {
          "maxLength": 2048,
          "minLength": 0,
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "reminderDate": {
          "format": "date-time",
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "taskPriority": {
          "enum": [
            "LOW",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "xml": {
            "name": "TaskPriority",
            "namespace": "http://www.casenet.com/TaskPriority"
          }
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "assigneeName",
        "assigneeType",
        "dueDate",
        "startDate",
        "taskPriority"
      ],
      "type": "object",
      "xml": {
        "name": "UpdateTaskRequest",
        "namespace": "http://www.casenet.com/UpdateTaskRequest"
      }
    },
    "UpdateTeamUsersRequest": {
      "properties": {
        "usernames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "UpdateUserAppointmentRequest": {
      "properties": {
        "allowSchedulingWhenUnavailable": {
          "type": "boolean"
        },
        "cancelledAppointmentInfo": {
          "$ref": "#/definitions/CancelledAppointmentInfoRequest"
        },
        "durationOverrideReasonOption": {
          "type": "string"
        },
        "endTime": {
          "format": "date-time",
          "type": "string"
        },
        "eventTypeOption": {
          "type": "string"
        },
        "fieldVisit": {
          "type": "boolean"
        },
        "location": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "memberId": {
          "$ref": "#/definitions/MemberId"
        },
        "memberPhoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "memberPhoneNumberTypeOption": {
          "type": "string"
        },
        "notes": {
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "otherEventType": {
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "otherUsernames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startTime": {
          "format": "date-time",
          "type": "string"
        },
        "subject": {
          "maxLength": 150,
          "minLength": 0,
          "type": "string"
        },
        "timeZone": {
          "enum": [
            "AFRICA_ABIDJAN",
            "AFRICA_ACCRA",
            "AFRICA_NAIROBI",
            "AFRICA_ALGIERS",
            "AFRICA_LAGOS",
            "AFRICA_BISSAU",
            "AFRICA_MAPUTO",
            "AFRICA_CAIRO",
            "AFRICA_CASABLANCA",
            "AFRICA_CEUTA",
            "AFRICA_EL_AAIUN",
            "AFRICA_JOHANNESBURG",
            "AFRICA_KHARTOUM",
            "AFRICA_MONROVIA",
            "AFRICA_NDJAMENA",
            "AFRICA_TRIPOLI",
            "AFRICA_TUNIS",
            "AFRICA_WINDHOEK",
            "AMERICA_ADAK",
            "AMERICA_ANCHORAGE",
            "AMERICA_PORT_OF_SPAIN",
            "AMERICA_ANTIGUA",
            "AMERICA_ARAGUAINA",
            "AMERICA_ARGENTINA_BUENOS_AIRES",
            "AMERICA_ARGENTINA_CATAMARCA",
            "AMERICA_ARGENTINA_CORDOBA",
            "AMERICA_ARGENTINA_JUJUY",
            "AMERICA_ARGENTINA_LA_RIOJA",
            "AMERICA_ARGENTINA_MENDOZA",
            "AMERICA_ARGENTINA_RIO_GALLEGOS",
            "AMERICA_ARGENTINA_SALTA",
            "AMERICA_ARGENTINA_SAN_JUAN",
            "AMERICA_ARGENTINA_SAN_LUIS",
            "AMERICA_ARGENTINA_TUCUMAN",
            "AMERICA_ARGENTINA_USHUAIA",
            "AMERICA_CURACAO",
            "AMERICA_ASUNCION",
            "AMERICA_ATIKOKAN",
            "AMERICA_BAHIA",
            "AMERICA_BAHIA_BANDERAS",
            "AMERICA_BARBADOS",
            "AMERICA_BELEM",
            "AMERICA_BELIZE",
            "AMERICA_BLANC_SABLON",
            "AMERICA_BOA_VISTA",
            "AMERICA_BOGOTA",
            "AMERICA_BOISE",
            "AMERICA_CAMBRIDGE_BAY",
            "AMERICA_CAMPO_GRANDE",
            "AMERICA_CANCUN",
            "AMERICA_CARACAS",
            "AMERICA_CAYENNE",
            "AMERICA_CAYMAN",
            "AMERICA_CHICAGO",
            "AMERICA_CHIHUAHUA",
            "AMERICA_COSTA_RICA",
            "AMERICA_CRESTON",
            "AMERICA_CUIABA",
            "AMERICA_DANMARKSHAVN",
            "AMERICA_DAWSON",
            "AMERICA_DAWSON_CREEK",
            "AMERICA_DENVER",
            "AMERICA_DETROIT",
            "AMERICA_EDMONTON",
            "AMERICA_EIRUNEPE",
            "AMERICA_EL_SALVADOR",
            "AMERICA_TIJUANA",
            "AMERICA_INDIANA_INDIANAPOLIS",
            "AMERICA_FORTALEZA",
            "AMERICA_GLACE_BAY",
            "AMERICA_GODTHAB",
            "AMERICA_GOOSE_BAY",
            "AMERICA_GRAND_TURK",
            "AMERICA_GUATEMALA",
            "AMERICA_GUAYAQUIL",
            "AMERICA_GUYANA",
            "AMERICA_HALIFAX",
            "AMERICA_HAVANA",
            "AMERICA_HERMOSILLO",
            "AMERICA_INDIANA_KNOX",
            "AMERICA_INDIANA_MARENGO",
            "AMERICA_INDIANA_PETERSBURG",
            "AMERICA_INDIANA_TELL_CITY",
            "AMERICA_INDIANA_VEVAY",
            "AMERICA_INDIANA_VINCENNES",
            "AMERICA_INDIANA_WINAMAC",
            "AMERICA_INUVIK",
            "AMERICA_IQALUIT",
            "AMERICA_JAMAICA",
            "AMERICA_JUNEAU",
            "AMERICA_KENTUCKY_LOUISVILLE",
            "AMERICA_KENTUCKY_MONTICELLO",
            "AMERICA_LA_PAZ",
            "AMERICA_LIMA",
            "AMERICA_LOS_ANGELES",
            "AMERICA_MACEIO",
            "AMERICA_MANAGUA",
            "AMERICA_MANAUS",
            "AMERICA_MARTINIQUE",
            "AMERICA_MATAMOROS",
            "AMERICA_MAZATLAN",
            "AMERICA_MENOMINEE",
            "AMERICA_MERIDA",
            "AMERICA_METLAKATLA",
            "AMERICA_MEXICO_CITY",
            "AMERICA_MIQUELON",
            "AMERICA_MONCTON",
            "AMERICA_MONTERREY",
            "AMERICA_MONTEVIDEO",
            "AMERICA_MONTREAL",
            "AMERICA_NASSAU",
            "AMERICA_NEW_YORK",
            "AMERICA_NIPIGON",
            "AMERICA_NOME",
            "AMERICA_NORONHA",
            "AMERICA_NORTH_DAKOTA_BEULAH",
            "AMERICA_NORTH_DAKOTA_CENTER",
            "AMERICA_NORTH_DAKOTA_NEW_SALEM",
            "AMERICA_OJINAGA",
            "AMERICA_PANAMA",
            "AMERICA_PANGNIRTUNG",
            "AMERICA_PARAMARIBO",
            "AMERICA_PHOENIX",
            "AMERICA_PORT_AU_PRINCE",
            "AMERICA_RIO_BRANCO",
            "AMERICA_PORTO_VELHO",
            "AMERICA_PUERTO_RICO",
            "AMERICA_RAINY_RIVER",
            "AMERICA_RANKIN_INLET",
            "AMERICA_RECIFE",
            "AMERICA_REGINA",
            "AMERICA_RESOLUTE",
            "AMERICA_SANTA_ISABEL",
            "AMERICA_SANTAREM",
            "AMERICA_SANTIAGO",
            "AMERICA_SANTO_DOMINGO",
            "AMERICA_SAO_PAULO",
            "AMERICA_SCORESBYSUND",
            "AMERICA_SITKA",
            "AMERICA_ST_JOHNS",
            "AMERICA_SWIFT_CURRENT",
            "AMERICA_TEGUCIGALPA",
            "AMERICA_THULE",
            "AMERICA_THUNDER_BAY",
            "AMERICA_TORONTO",
            "AMERICA_VANCOUVER",
            "AMERICA_WHITEHORSE",
            "AMERICA_WINNIPEG",
            "AMERICA_YAKUTAT",
            "AMERICA_YELLOWKNIFE",
            "ANTARCTICA_CASEY",
            "ANTARCTICA_DAVIS",
            "ANTARCTICA_DUMONTDURVILLE",
            "ANTARCTICA_MACQUARIE",
            "ANTARCTICA_MAWSON",
            "PACIFIC_AUCKLAND",
            "ANTARCTICA_PALMER",
            "ANTARCTICA_ROTHERA",
            "ANTARCTICA_SYOWA",
            "ANTARCTICA_TROLL",
            "ANTARCTICA_VOSTOK",
            "EUROPE_OSLO",
            "ASIA_ADEN",
            "ASIA_ALMATY",
            "ASIA_AMMAN",
            "ASIA_ANADYR",
            "ASIA_AQTAU",
            "ASIA_AQTOBE",
            "ASIA_ASHGABAT",
            "ASIA_BAGHDAD",
            "ASIA_BAHRAIN",
            "ASIA_BAKU",
            "ASIA_BANGKOK",
            "ASIA_BEIRUT",
            "ASIA_BISHKEK",
            "ASIA_BRUNEI",
            "ASIA_KOLKATA",
            "ASIA_CHITA",
            "ASIA_CHOIBALSAN",
            "ASIA_SHANGHAI",
            "ASIA_COLOMBO",
            "ASIA_DHAKA",
            "ASIA_DAMASCUS",
            "ASIA_DILI",
            "ASIA_DUBAI",
            "ASIA_DUSHANBE",
            "ASIA_GAZA",
            "ASIA_HEBRON",
            "ASIA_HO_CHI_MINH",
            "ASIA_HONG_KONG",
            "ASIA_HOVD",
            "ASIA_IRKUTSK",
            "EUROPE_ISTANBUL",
            "ASIA_JAKARTA",
            "ASIA_JAYAPURA",
            "ASIA_JERUSALEM",
            "ASIA_KABUL",
            "ASIA_KAMCHATKA",
            "ASIA_KARACHI",
            "ASIA_URUMQI",
            "ASIA_KATHMANDU",
            "ASIA_KHANDYGA",
            "ASIA_KRASNOYARSK",
            "ASIA_KUALA_LUMPUR",
            "ASIA_KUCHING",
            "ASIA_KUWAIT",
            "ASIA_MACAU",
            "ASIA_MAGADAN",
            "ASIA_MAKASSAR",
            "ASIA_MANILA",
            "ASIA_MUSCAT",
            "ASIA_NICOSIA",
            "ASIA_NOVOKUZNETSK",
            "ASIA_NOVOSIBIRSK",
            "ASIA_OMSK",
            "ASIA_ORAL",
            "ASIA_PONTIANAK",
            "ASIA_PYONGYANG",
            "ASIA_QATAR",
            "ASIA_QYZYLORDA",
            "ASIA_RANGOON",
            "ASIA_RIYADH",
            "ASIA_SAKHALIN",
            "ASIA_SAMARKAND",
            "ASIA_SEOUL",
            "ASIA_SINGAPORE",
            "ASIA_SREDNEKOLYMSK",
            "ASIA_TAIPEI",
            "ASIA_TASHKENT",
            "ASIA_TBILISI",
            "ASIA_TEHRAN",
            "ASIA_THIMPHU",
            "ASIA_TOKYO",
            "ASIA_ULAANBAATAR",
            "ASIA_UST_NERA",
            "ASIA_VLADIVOSTOK",
            "ASIA_YAKUTSK",
            "ASIA_YEKATERINBURG",
            "ASIA_YEREVAN",
            "ATLANTIC_AZORES",
            "ATLANTIC_BERMUDA",
            "ATLANTIC_CANARY",
            "ATLANTIC_CAPE_VERDE",
            "ATLANTIC_FAROE",
            "ATLANTIC_MADEIRA",
            "ATLANTIC_REYKJAVIK",
            "ATLANTIC_SOUTH_GEORGIA",
            "ATLANTIC_STANLEY",
            "AUSTRALIA_SYDNEY",
            "AUSTRALIA_ADELAIDE",
            "AUSTRALIA_BRISBANE",
            "AUSTRALIA_BROKEN_HILL",
            "AUSTRALIA_CURRIE",
            "AUSTRALIA_DARWIN",
            "AUSTRALIA_EUCLA",
            "AUSTRALIA_HOBART",
            "AUSTRALIA_LORD_HOWE",
            "AUSTRALIA_LINDEMAN",
            "AUSTRALIA_MELBOURNE",
            "AUSTRALIA_PERTH",
            "CET",
            "CST6CDT",
            "PACIFIC_EASTER",
            "EET",
            "EST",
            "EST5EDT",
            "EUROPE_DUBLIN",
            "ETC_GMT",
            "ETC_GMT_PLUS_1",
            "ETC_GMT_PLUS_10",
            "ETC_GMT_PLUS_11",
            "ETC_GMT_PLUS_12",
            "ETC_GMT_PLUS_2",
            "ETC_GMT_PLUS_3",
            "ETC_GMT_PLUS_4",
            "ETC_GMT_PLUS_5",
            "ETC_GMT_PLUS_6",
            "ETC_GMT_PLUS_7",
            "ETC_GMT_PLUS_8",
            "ETC_GMT_PLUS_9",
            "ETC_GMT_MINUS_1",
            "ETC_GMT_MINUS_10",
            "ETC_GMT_MINUS_11",
            "ETC_GMT_MINUS_12",
            "ETC_GMT_MINUS_13",
            "ETC_GMT_MINUS_14",
            "ETC_GMT_MINUS_2",
            "ETC_GMT_MINUS_3",
            "ETC_GMT_MINUS_4",
            "ETC_GMT_MINUS_5",
            "ETC_GMT_MINUS_6",
            "ETC_GMT_MINUS_7",
            "ETC_GMT_MINUS_8",
            "ETC_GMT_MINUS_9",
            "ETC_UCT",
            "ETC_UTC",
            "EUROPE_AMSTERDAM",
            "EUROPE_ANDORRA",
            "EUROPE_ATHENS",
            "EUROPE_LONDON",
            "EUROPE_BELGRADE",
            "EUROPE_BERLIN",
            "EUROPE_PRAGUE",
            "EUROPE_BRUSSELS",
            "EUROPE_BUCHAREST",
            "EUROPE_BUDAPEST",
            "EUROPE_ZURICH",
            "EUROPE_CHISINAU",
            "EUROPE_COPENHAGEN",
            "EUROPE_GIBRALTAR",
            "EUROPE_HELSINKI",
            "EUROPE_KALININGRAD",
            "EUROPE_KIEV",
            "EUROPE_LISBON",
            "EUROPE_LUXEMBOURG",
            "EUROPE_MADRID",
            "EUROPE_MALTA",
            "EUROPE_MINSK",
            "EUROPE_MONACO",
            "EUROPE_MOSCOW",
            "EUROPE_PARIS",
            "EUROPE_RIGA",
            "EUROPE_ROME",
            "EUROPE_SAMARA",
            "EUROPE_SIMFEROPOL",
            "EUROPE_SOFIA",
            "EUROPE_STOCKHOLM",
            "EUROPE_TALLINN",
            "EUROPE_TIRANE",
            "EUROPE_UZHGOROD",
            "EUROPE_VIENNA",
            "EUROPE_VILNIUS",
            "EUROPE_VOLGOGRAD",
            "EUROPE_WARSAW",
            "EUROPE_ZAPOROZHYE",
            "HST",
            "INDIAN_CHAGOS",
            "INDIAN_CHRISTMAS",
            "INDIAN_COCOS",
            "INDIAN_KERGUELEN",
            "INDIAN_MAHE",
            "INDIAN_MALDIVES",
            "INDIAN_MAURITIUS",
            "INDIAN_REUNION",
            "PACIFIC_KWAJALEIN",
            "MET",
            "MST",
            "MST7MDT",
            "PACIFIC_CHATHAM",
            "PST8PDT",
            "PACIFIC_APIA",
            "PACIFIC_BOUGAINVILLE",
            "PACIFIC_CHUUK",
            "PACIFIC_EFATE",
            "PACIFIC_ENDERBURY",
            "PACIFIC_FAKAOFO",
            "PACIFIC_FIJI",
            "PACIFIC_FUNAFUTI",
            "PACIFIC_GALAPAGOS",
            "PACIFIC_GAMBIER",
            "PACIFIC_GUADALCANAL",
            "PACIFIC_GUAM",
            "PACIFIC_HONOLULU",
            "PACIFIC_KIRITIMATI",
            "PACIFIC_KOSRAE",
            "PACIFIC_MAJURO",
            "PACIFIC_MARQUESAS",
            "PACIFIC_MIDWAY",
            "PACIFIC_NAURU",
            "PACIFIC_NIUE",
            "PACIFIC_NORFOLK",
            "PACIFIC_NOUMEA",
            "PACIFIC_PAGO_PAGO",
            "PACIFIC_PALAU",
            "PACIFIC_PITCAIRN",
            "PACIFIC_POHNPEI",
            "PACIFIC_PORT_MORESBY",
            "PACIFIC_RAROTONGA",
            "PACIFIC_SAIPAN",
            "PACIFIC_TAHITI",
            "PACIFIC_TARAWA",
            "PACIFIC_TONGATAPU",
            "PACIFIC_WAKE",
            "PACIFIC_WALLIS",
            "UTC",
            "WET"
          ],
          "type": "string",
          "xml": {
            "name": "DateTimeZone",
            "namespace": "http://www.casenet.com/DateTimeZone"
          }
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "endTime",
        "startTime",
        "subject"
      ],
      "type": "object",
      "xml": {
        "name": "UserAppointmentRequest",
        "namespace": "http://www.casenet.com/UserAppointmentRequest"
      }
    },
    "User": {
      "properties": {
        "firstname": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "User",
        "namespace": "http://www.casenet.com/User"
      }
    },
    "UserAppointmentConfiguration": {
      "properties": {
        "bhpConfigurations": {
          "items": {
            "$ref": "#/definitions/AppointmentTypeConfiguration"
          },
          "type": "array"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "UserAppointmentConfiguration",
        "namespace": "http://www.casenet.com/UserAppointmentConfiguration"
      }
    },
    "UserAppointmentRequest": {
      "properties": {
        "allowSchedulingWhenUnavailable": {
          "type": "boolean"
        },
        "durationOverrideReasonOption": {
          "type": "string"
        },
        "endTime": {
          "format": "date-time",
          "type": "string"
        },
        "eventTypeOption": {
          "type": "string"
        },
        "fieldVisit": {
          "type": "boolean"
        },
        "location": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "memberId": {
          "$ref": "#/definitions/MemberId"
        },
        "memberPhoneNumber": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "memberPhoneNumberTypeOption": {
          "type": "string"
        },
        "notes": {
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "otherEventType": {
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "otherUsernames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startTime": {
          "format": "date-time",
          "type": "string"
        },
        "subject": {
          "maxLength": 150,
          "minLength": 0,
          "type": "string"
        },
        "timeZone": {
          "enum": [
            "AFRICA_ABIDJAN",
            "AFRICA_ACCRA",
            "AFRICA_NAIROBI",
            "AFRICA_ALGIERS",
            "AFRICA_LAGOS",
            "AFRICA_BISSAU",
            "AFRICA_MAPUTO",
            "AFRICA_CAIRO",
            "AFRICA_CASABLANCA",
            "AFRICA_CEUTA",
            "AFRICA_EL_AAIUN",
            "AFRICA_JOHANNESBURG",
            "AFRICA_KHARTOUM",
            "AFRICA_MONROVIA",
            "AFRICA_NDJAMENA",
            "AFRICA_TRIPOLI",
            "AFRICA_TUNIS",
            "AFRICA_WINDHOEK",
            "AMERICA_ADAK",
            "AMERICA_ANCHORAGE",
            "AMERICA_PORT_OF_SPAIN",
            "AMERICA_ANTIGUA",
            "AMERICA_ARAGUAINA",
            "AMERICA_ARGENTINA_BUENOS_AIRES",
            "AMERICA_ARGENTINA_CATAMARCA",
            "AMERICA_ARGENTINA_CORDOBA",
            "AMERICA_ARGENTINA_JUJUY",
            "AMERICA_ARGENTINA_LA_RIOJA",
            "AMERICA_ARGENTINA_MENDOZA",
            "AMERICA_ARGENTINA_RIO_GALLEGOS",
            "AMERICA_ARGENTINA_SALTA",
            "AMERICA_ARGENTINA_SAN_JUAN",
            "AMERICA_ARGENTINA_SAN_LUIS",
            "AMERICA_ARGENTINA_TUCUMAN",
            "AMERICA_ARGENTINA_USHUAIA",
            "AMERICA_CURACAO",
            "AMERICA_ASUNCION",
            "AMERICA_ATIKOKAN",
            "AMERICA_BAHIA",
            "AMERICA_BAHIA_BANDERAS",
            "AMERICA_BARBADOS",
            "AMERICA_BELEM",
            "AMERICA_BELIZE",
            "AMERICA_BLANC_SABLON",
            "AMERICA_BOA_VISTA",
            "AMERICA_BOGOTA",
            "AMERICA_BOISE",
            "AMERICA_CAMBRIDGE_BAY",
            "AMERICA_CAMPO_GRANDE",
            "AMERICA_CANCUN",
            "AMERICA_CARACAS",
            "AMERICA_CAYENNE",
            "AMERICA_CAYMAN",
            "AMERICA_CHICAGO",
            "AMERICA_CHIHUAHUA",
            "AMERICA_COSTA_RICA",
            "AMERICA_CRESTON",
            "AMERICA_CUIABA",
            "AMERICA_DANMARKSHAVN",
            "AMERICA_DAWSON",
            "AMERICA_DAWSON_CREEK",
            "AMERICA_DENVER",
            "AMERICA_DETROIT",
            "AMERICA_EDMONTON",
            "AMERICA_EIRUNEPE",
            "AMERICA_EL_SALVADOR",
            "AMERICA_TIJUANA",
            "AMERICA_INDIANA_INDIANAPOLIS",
            "AMERICA_FORTALEZA",
            "AMERICA_GLACE_BAY",
            "AMERICA_GODTHAB",
            "AMERICA_GOOSE_BAY",
            "AMERICA_GRAND_TURK",
            "AMERICA_GUATEMALA",
            "AMERICA_GUAYAQUIL",
            "AMERICA_GUYANA",
            "AMERICA_HALIFAX",
            "AMERICA_HAVANA",
            "AMERICA_HERMOSILLO",
            "AMERICA_INDIANA_KNOX",
            "AMERICA_INDIANA_MARENGO",
            "AMERICA_INDIANA_PETERSBURG",
            "AMERICA_INDIANA_TELL_CITY",
            "AMERICA_INDIANA_VEVAY",
            "AMERICA_INDIANA_VINCENNES",
            "AMERICA_INDIANA_WINAMAC",
            "AMERICA_INUVIK",
            "AMERICA_IQALUIT",
            "AMERICA_JAMAICA",
            "AMERICA_JUNEAU",
            "AMERICA_KENTUCKY_LOUISVILLE",
            "AMERICA_KENTUCKY_MONTICELLO",
            "AMERICA_LA_PAZ",
            "AMERICA_LIMA",
            "AMERICA_LOS_ANGELES",
            "AMERICA_MACEIO",
            "AMERICA_MANAGUA",
            "AMERICA_MANAUS",
            "AMERICA_MARTINIQUE",
            "AMERICA_MATAMOROS",
            "AMERICA_MAZATLAN",
            "AMERICA_MENOMINEE",
            "AMERICA_MERIDA",
            "AMERICA_METLAKATLA",
            "AMERICA_MEXICO_CITY",
            "AMERICA_MIQUELON",
            "AMERICA_MONCTON",
            "AMERICA_MONTERREY",
            "AMERICA_MONTEVIDEO",
            "AMERICA_MONTREAL",
            "AMERICA_NASSAU",
            "AMERICA_NEW_YORK",
            "AMERICA_NIPIGON",
            "AMERICA_NOME",
            "AMERICA_NORONHA",
            "AMERICA_NORTH_DAKOTA_BEULAH",
            "AMERICA_NORTH_DAKOTA_CENTER",
            "AMERICA_NORTH_DAKOTA_NEW_SALEM",
            "AMERICA_OJINAGA",
            "AMERICA_PANAMA",
            "AMERICA_PANGNIRTUNG",
            "AMERICA_PARAMARIBO",
            "AMERICA_PHOENIX",
            "AMERICA_PORT_AU_PRINCE",
            "AMERICA_RIO_BRANCO",
            "AMERICA_PORTO_VELHO",
            "AMERICA_PUERTO_RICO",
            "AMERICA_RAINY_RIVER",
            "AMERICA_RANKIN_INLET",
            "AMERICA_RECIFE",
            "AMERICA_REGINA",
            "AMERICA_RESOLUTE",
            "AMERICA_SANTA_ISABEL",
            "AMERICA_SANTAREM",
            "AMERICA_SANTIAGO",
            "AMERICA_SANTO_DOMINGO",
            "AMERICA_SAO_PAULO",
            "AMERICA_SCORESBYSUND",
            "AMERICA_SITKA",
            "AMERICA_ST_JOHNS",
            "AMERICA_SWIFT_CURRENT",
            "AMERICA_TEGUCIGALPA",
            "AMERICA_THULE",
            "AMERICA_THUNDER_BAY",
            "AMERICA_TORONTO",
            "AMERICA_VANCOUVER",
            "AMERICA_WHITEHORSE",
            "AMERICA_WINNIPEG",
            "AMERICA_YAKUTAT",
            "AMERICA_YELLOWKNIFE",
            "ANTARCTICA_CASEY",
            "ANTARCTICA_DAVIS",
            "ANTARCTICA_DUMONTDURVILLE",
            "ANTARCTICA_MACQUARIE",
            "ANTARCTICA_MAWSON",
            "PACIFIC_AUCKLAND",
            "ANTARCTICA_PALMER",
            "ANTARCTICA_ROTHERA",
            "ANTARCTICA_SYOWA",
            "ANTARCTICA_TROLL",
            "ANTARCTICA_VOSTOK",
            "EUROPE_OSLO",
            "ASIA_ADEN",
            "ASIA_ALMATY",
            "ASIA_AMMAN",
            "ASIA_ANADYR",
            "ASIA_AQTAU",
            "ASIA_AQTOBE",
            "ASIA_ASHGABAT",
            "ASIA_BAGHDAD",
            "ASIA_BAHRAIN",
            "ASIA_BAKU",
            "ASIA_BANGKOK",
            "ASIA_BEIRUT",
            "ASIA_BISHKEK",
            "ASIA_BRUNEI",
            "ASIA_KOLKATA",
            "ASIA_CHITA",
            "ASIA_CHOIBALSAN",
            "ASIA_SHANGHAI",
            "ASIA_COLOMBO",
            "ASIA_DHAKA",
            "ASIA_DAMASCUS",
            "ASIA_DILI",
            "ASIA_DUBAI",
            "ASIA_DUSHANBE",
            "ASIA_GAZA",
            "ASIA_HEBRON",
            "ASIA_HO_CHI_MINH",
            "ASIA_HONG_KONG",
            "ASIA_HOVD",
            "ASIA_IRKUTSK",
            "EUROPE_ISTANBUL",
            "ASIA_JAKARTA",
            "ASIA_JAYAPURA",
            "ASIA_JERUSALEM",
            "ASIA_KABUL",
            "ASIA_KAMCHATKA",
            "ASIA_KARACHI",
            "ASIA_URUMQI",
            "ASIA_KATHMANDU",
            "ASIA_KHANDYGA",
            "ASIA_KRASNOYARSK",
            "ASIA_KUALA_LUMPUR",
            "ASIA_KUCHING",
            "ASIA_KUWAIT",
            "ASIA_MACAU",
            "ASIA_MAGADAN",
            "ASIA_MAKASSAR",
            "ASIA_MANILA",
            "ASIA_MUSCAT",
            "ASIA_NICOSIA",
            "ASIA_NOVOKUZNETSK",
            "ASIA_NOVOSIBIRSK",
            "ASIA_OMSK",
            "ASIA_ORAL",
            "ASIA_PONTIANAK",
            "ASIA_PYONGYANG",
            "ASIA_QATAR",
            "ASIA_QYZYLORDA",
            "ASIA_RANGOON",
            "ASIA_RIYADH",
            "ASIA_SAKHALIN",
            "ASIA_SAMARKAND",
            "ASIA_SEOUL",
            "ASIA_SINGAPORE",
            "ASIA_SREDNEKOLYMSK",
            "ASIA_TAIPEI",
            "ASIA_TASHKENT",
            "ASIA_TBILISI",
            "ASIA_TEHRAN",
            "ASIA_THIMPHU",
            "ASIA_TOKYO",
            "ASIA_ULAANBAATAR",
            "ASIA_UST_NERA",
            "ASIA_VLADIVOSTOK",
            "ASIA_YAKUTSK",
            "ASIA_YEKATERINBURG",
            "ASIA_YEREVAN",
            "ATLANTIC_AZORES",
            "ATLANTIC_BERMUDA",
            "ATLANTIC_CANARY",
            "ATLANTIC_CAPE_VERDE",
            "ATLANTIC_FAROE",
            "ATLANTIC_MADEIRA",
            "ATLANTIC_REYKJAVIK",
            "ATLANTIC_SOUTH_GEORGIA",
            "ATLANTIC_STANLEY",
            "AUSTRALIA_SYDNEY",
            "AUSTRALIA_ADELAIDE",
            "AUSTRALIA_BRISBANE",
            "AUSTRALIA_BROKEN_HILL",
            "AUSTRALIA_CURRIE",
            "AUSTRALIA_DARWIN",
            "AUSTRALIA_EUCLA",
            "AUSTRALIA_HOBART",
            "AUSTRALIA_LORD_HOWE",
            "AUSTRALIA_LINDEMAN",
            "AUSTRALIA_MELBOURNE",
            "AUSTRALIA_PERTH",
            "CET",
            "CST6CDT",
            "PACIFIC_EASTER",
            "EET",
            "EST",
            "EST5EDT",
            "EUROPE_DUBLIN",
            "ETC_GMT",
            "ETC_GMT_PLUS_1",
            "ETC_GMT_PLUS_10",
            "ETC_GMT_PLUS_11",
            "ETC_GMT_PLUS_12",
            "ETC_GMT_PLUS_2",
            "ETC_GMT_PLUS_3",
            "ETC_GMT_PLUS_4",
            "ETC_GMT_PLUS_5",
            "ETC_GMT_PLUS_6",
            "ETC_GMT_PLUS_7",
            "ETC_GMT_PLUS_8",
            "ETC_GMT_PLUS_9",
            "ETC_GMT_MINUS_1",
            "ETC_GMT_MINUS_10",
            "ETC_GMT_MINUS_11",
            "ETC_GMT_MINUS_12",
            "ETC_GMT_MINUS_13",
            "ETC_GMT_MINUS_14",
            "ETC_GMT_MINUS_2",
            "ETC_GMT_MINUS_3",
            "ETC_GMT_MINUS_4",
            "ETC_GMT_MINUS_5",
            "ETC_GMT_MINUS_6",
            "ETC_GMT_MINUS_7",
            "ETC_GMT_MINUS_8",
            "ETC_GMT_MINUS_9",
            "ETC_UCT",
            "ETC_UTC",
            "EUROPE_AMSTERDAM",
            "EUROPE_ANDORRA",
            "EUROPE_ATHENS",
            "EUROPE_LONDON",
            "EUROPE_BELGRADE",
            "EUROPE_BERLIN",
            "EUROPE_PRAGUE",
            "EUROPE_BRUSSELS",
            "EUROPE_BUCHAREST",
            "EUROPE_BUDAPEST",
            "EUROPE_ZURICH",
            "EUROPE_CHISINAU",
            "EUROPE_COPENHAGEN",
            "EUROPE_GIBRALTAR",
            "EUROPE_HELSINKI",
            "EUROPE_KALININGRAD",
            "EUROPE_KIEV",
            "EUROPE_LISBON",
            "EUROPE_LUXEMBOURG",
            "EUROPE_MADRID",
            "EUROPE_MALTA",
            "EUROPE_MINSK",
            "EUROPE_MONACO",
            "EUROPE_MOSCOW",
            "EUROPE_PARIS",
            "EUROPE_RIGA",
            "EUROPE_ROME",
            "EUROPE_SAMARA",
            "EUROPE_SIMFEROPOL",
            "EUROPE_SOFIA",
            "EUROPE_STOCKHOLM",
            "EUROPE_TALLINN",
            "EUROPE_TIRANE",
            "EUROPE_UZHGOROD",
            "EUROPE_VIENNA",
            "EUROPE_VILNIUS",
            "EUROPE_VOLGOGRAD",
            "EUROPE_WARSAW",
            "EUROPE_ZAPOROZHYE",
            "HST",
            "INDIAN_CHAGOS",
            "INDIAN_CHRISTMAS",
            "INDIAN_COCOS",
            "INDIAN_KERGUELEN",
            "INDIAN_MAHE",
            "INDIAN_MALDIVES",
            "INDIAN_MAURITIUS",
            "INDIAN_REUNION",
            "PACIFIC_KWAJALEIN",
            "MET",
            "MST",
            "MST7MDT",
            "PACIFIC_CHATHAM",
            "PST8PDT",
            "PACIFIC_APIA",
            "PACIFIC_BOUGAINVILLE",
            "PACIFIC_CHUUK",
            "PACIFIC_EFATE",
            "PACIFIC_ENDERBURY",
            "PACIFIC_FAKAOFO",
            "PACIFIC_FIJI",
            "PACIFIC_FUNAFUTI",
            "PACIFIC_GALAPAGOS",
            "PACIFIC_GAMBIER",
            "PACIFIC_GUADALCANAL",
            "PACIFIC_GUAM",
            "PACIFIC_HONOLULU",
            "PACIFIC_KIRITIMATI",
            "PACIFIC_KOSRAE",
            "PACIFIC_MAJURO",
            "PACIFIC_MARQUESAS",
            "PACIFIC_MIDWAY",
            "PACIFIC_NAURU",
            "PACIFIC_NIUE",
            "PACIFIC_NORFOLK",
            "PACIFIC_NOUMEA",
            "PACIFIC_PAGO_PAGO",
            "PACIFIC_PALAU",
            "PACIFIC_PITCAIRN",
            "PACIFIC_POHNPEI",
            "PACIFIC_PORT_MORESBY",
            "PACIFIC_RAROTONGA",
            "PACIFIC_SAIPAN",
            "PACIFIC_TAHITI",
            "PACIFIC_TARAWA",
            "PACIFIC_TONGATAPU",
            "PACIFIC_WAKE",
            "PACIFIC_WALLIS",
            "UTC",
            "WET"
          ],
          "type": "string",
          "xml": {
            "name": "DateTimeZone",
            "namespace": "http://www.casenet.com/DateTimeZone"
          }
        }
      },
      "required": [
        "endTime",
        "startTime",
        "subject"
      ],
      "type": "object",
      "xml": {
        "name": "UserAppointmentRequest",
        "namespace": "http://www.casenet.com/UserAppointmentRequest"
      }
    },
    "UserArtifact": {
      "properties": {
        "currentUserHasBhpAccessToMember": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "memberLite": {
          "$ref": "#/definitions/MemberLite"
        }
      },
      "type": "object"
    },
    "UserDashboardCaseSearchCriteria": {
      "properties": {
        "acuity": {
          "enum": [
            "NONE",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "type": "string"
        },
        "caseName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "caseOwnerRole": {
          "enum": [
            "PRIMARY",
            "SECONDARY",
            "BOTH"
          ],
          "type": "string"
        },
        "caseTypeValue": {
          "type": "string"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "includeIneligibleMembers": {
          "type": "boolean"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "memberFirstName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "memberLastName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/UserDashboardCaseSearchSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "updatedDateFrom": {
          "format": "date-time",
          "type": "string"
        },
        "updatedDateTo": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "SearchCriteriaWithSorting",
        "namespace": "http://www.casenet.com/SearchCriteriaWithSorting"
      }
    },
    "UserDashboardCaseSearchResult": {
      "properties": {
        "caseAcuity": {
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "type": "string",
          "xml": {
            "name": "CaseAcuity",
            "namespace": "http://www.casenet.com/CaseAcuity"
          }
        },
        "caseId": {
          "type": "string"
        },
        "caseName": {
          "$ref": "#/definitions/OptionValue"
        },
        "caseNameOther": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "caseOwnerRole": {
          "enum": [
            "PRIMARY",
            "SECONDARY",
            "BOTH"
          ],
          "type": "string"
        },
        "caseType": {
          "$ref": "#/definitions/OptionValue"
        },
        "contactedOnDate": {
          "format": "date-time",
          "type": "string"
        },
        "member": {
          "$ref": "#/definitions/MemberLite"
        },
        "memberEligible": {
          "type": "boolean"
        },
        "primaryDiagnosis": {
          "$ref": "#/definitions/DiagnosisLite"
        },
        "programEnrollment": {
          "items": {
            "$ref": "#/definitions/ProgramEnrollmentLite"
          },
          "type": "array"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "userAccessToMember": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UserDashboardCaseSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "criticalAcuityCasesCount": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "highAcuityCasesCount": {
          "format": "int32",
          "type": "integer"
        },
        "lowAcuityCasesCount": {
          "format": "int32",
          "type": "integer"
        },
        "mediumAcuityCasesCount": {
          "format": "int32",
          "type": "integer"
        },
        "noAcuityCasesCount": {
          "format": "int32",
          "type": "integer"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/UserDashboardCaseSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "PaginatedSearchResults",
        "namespace": "http://www.casenet.com/PaginatedSearchResults"
      }
    },
    "UserDashboardCaseSearchSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "MEMBER_NAME",
            "MEMBER_FIRST_NAME",
            "MEMBER_LAST_NAME",
            "CASE_NUMBER",
            "CASE_NAME",
            "CASE_TYPE",
            "ACUITY",
            "START_DATE",
            "UPDATED_DATE",
            "CONTACTED_ON_DATE",
            "OWNERSHIP_TYPE",
            "PRIMARY_DIAGNOSIS"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    },
    "UserDashboardConfiguration": {
      "properties": {
        "enabledPods": {
          "items": {
            "enum": [
              "CASE_LOAD",
              "MESSAGES",
              "MY_TASK",
              "QUEUE",
              "TIME_TRACKING"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "messagesDaysToDisplay": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "UserDashboardPodStatusResult": {
      "properties": {
        "podsWithData": {
          "items": {
            "enum": [
              "CASES"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UserDefinedCorrespondenceTag": {
      "properties": {
        "defaultValue": {
          "$ref": "#/definitions/CorrespondenceValueObject"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/CorrespondenceValueObject"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "UserDefinedCorrespondenceTag",
        "namespace": "http://www.casenet.com/UserDefinedCorrespondenceTag"
      }
    },
    "UserEditableProgramsResponse": {
      "properties": {
        "editableProgramIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UserInfo": {
      "properties": {
        "calculatedTimezone": {
          "enum": [
            "AFRICA_ABIDJAN",
            "AFRICA_ACCRA",
            "AFRICA_NAIROBI",
            "AFRICA_ALGIERS",
            "AFRICA_LAGOS",
            "AFRICA_BISSAU",
            "AFRICA_MAPUTO",
            "AFRICA_CAIRO",
            "AFRICA_CASABLANCA",
            "AFRICA_CEUTA",
            "AFRICA_EL_AAIUN",
            "AFRICA_JOHANNESBURG",
            "AFRICA_KHARTOUM",
            "AFRICA_MONROVIA",
            "AFRICA_NDJAMENA",
            "AFRICA_TRIPOLI",
            "AFRICA_TUNIS",
            "AFRICA_WINDHOEK",
            "AMERICA_ADAK",
            "AMERICA_ANCHORAGE",
            "AMERICA_PORT_OF_SPAIN",
            "AMERICA_ANTIGUA",
            "AMERICA_ARAGUAINA",
            "AMERICA_ARGENTINA_BUENOS_AIRES",
            "AMERICA_ARGENTINA_CATAMARCA",
            "AMERICA_ARGENTINA_CORDOBA",
            "AMERICA_ARGENTINA_JUJUY",
            "AMERICA_ARGENTINA_LA_RIOJA",
            "AMERICA_ARGENTINA_MENDOZA",
            "AMERICA_ARGENTINA_RIO_GALLEGOS",
            "AMERICA_ARGENTINA_SALTA",
            "AMERICA_ARGENTINA_SAN_JUAN",
            "AMERICA_ARGENTINA_SAN_LUIS",
            "AMERICA_ARGENTINA_TUCUMAN",
            "AMERICA_ARGENTINA_USHUAIA",
            "AMERICA_CURACAO",
            "AMERICA_ASUNCION",
            "AMERICA_ATIKOKAN",
            "AMERICA_BAHIA",
            "AMERICA_BAHIA_BANDERAS",
            "AMERICA_BARBADOS",
            "AMERICA_BELEM",
            "AMERICA_BELIZE",
            "AMERICA_BLANC_SABLON",
            "AMERICA_BOA_VISTA",
            "AMERICA_BOGOTA",
            "AMERICA_BOISE",
            "AMERICA_CAMBRIDGE_BAY",
            "AMERICA_CAMPO_GRANDE",
            "AMERICA_CANCUN",
            "AMERICA_CARACAS",
            "AMERICA_CAYENNE",
            "AMERICA_CAYMAN",
            "AMERICA_CHICAGO",
            "AMERICA_CHIHUAHUA",
            "AMERICA_COSTA_RICA",
            "AMERICA_CRESTON",
            "AMERICA_CUIABA",
            "AMERICA_DANMARKSHAVN",
            "AMERICA_DAWSON",
            "AMERICA_DAWSON_CREEK",
            "AMERICA_DENVER",
            "AMERICA_DETROIT",
            "AMERICA_EDMONTON",
            "AMERICA_EIRUNEPE",
            "AMERICA_EL_SALVADOR",
            "AMERICA_TIJUANA",
            "AMERICA_INDIANA_INDIANAPOLIS",
            "AMERICA_FORTALEZA",
            "AMERICA_GLACE_BAY",
            "AMERICA_GODTHAB",
            "AMERICA_GOOSE_BAY",
            "AMERICA_GRAND_TURK",
            "AMERICA_GUATEMALA",
            "AMERICA_GUAYAQUIL",
            "AMERICA_GUYANA",
            "AMERICA_HALIFAX",
            "AMERICA_HAVANA",
            "AMERICA_HERMOSILLO",
            "AMERICA_INDIANA_KNOX",
            "AMERICA_INDIANA_MARENGO",
            "AMERICA_INDIANA_PETERSBURG",
            "AMERICA_INDIANA_TELL_CITY",
            "AMERICA_INDIANA_VEVAY",
            "AMERICA_INDIANA_VINCENNES",
            "AMERICA_INDIANA_WINAMAC",
            "AMERICA_INUVIK",
            "AMERICA_IQALUIT",
            "AMERICA_JAMAICA",
            "AMERICA_JUNEAU",
            "AMERICA_KENTUCKY_LOUISVILLE",
            "AMERICA_KENTUCKY_MONTICELLO",
            "AMERICA_LA_PAZ",
            "AMERICA_LIMA",
            "AMERICA_LOS_ANGELES",
            "AMERICA_MACEIO",
            "AMERICA_MANAGUA",
            "AMERICA_MANAUS",
            "AMERICA_MARTINIQUE",
            "AMERICA_MATAMOROS",
            "AMERICA_MAZATLAN",
            "AMERICA_MENOMINEE",
            "AMERICA_MERIDA",
            "AMERICA_METLAKATLA",
            "AMERICA_MEXICO_CITY",
            "AMERICA_MIQUELON",
            "AMERICA_MONCTON",
            "AMERICA_MONTERREY",
            "AMERICA_MONTEVIDEO",
            "AMERICA_MONTREAL",
            "AMERICA_NASSAU",
            "AMERICA_NEW_YORK",
            "AMERICA_NIPIGON",
            "AMERICA_NOME",
            "AMERICA_NORONHA",
            "AMERICA_NORTH_DAKOTA_BEULAH",
            "AMERICA_NORTH_DAKOTA_CENTER",
            "AMERICA_NORTH_DAKOTA_NEW_SALEM",
            "AMERICA_OJINAGA",
            "AMERICA_PANAMA",
            "AMERICA_PANGNIRTUNG",
            "AMERICA_PARAMARIBO",
            "AMERICA_PHOENIX",
            "AMERICA_PORT_AU_PRINCE",
            "AMERICA_RIO_BRANCO",
            "AMERICA_PORTO_VELHO",
            "AMERICA_PUERTO_RICO",
            "AMERICA_RAINY_RIVER",
            "AMERICA_RANKIN_INLET",
            "AMERICA_RECIFE",
            "AMERICA_REGINA",
            "AMERICA_RESOLUTE",
            "AMERICA_SANTA_ISABEL",
            "AMERICA_SANTAREM",
            "AMERICA_SANTIAGO",
            "AMERICA_SANTO_DOMINGO",
            "AMERICA_SAO_PAULO",
            "AMERICA_SCORESBYSUND",
            "AMERICA_SITKA",
            "AMERICA_ST_JOHNS",
            "AMERICA_SWIFT_CURRENT",
            "AMERICA_TEGUCIGALPA",
            "AMERICA_THULE",
            "AMERICA_THUNDER_BAY",
            "AMERICA_TORONTO",
            "AMERICA_VANCOUVER",
            "AMERICA_WHITEHORSE",
            "AMERICA_WINNIPEG",
            "AMERICA_YAKUTAT",
            "AMERICA_YELLOWKNIFE",
            "ANTARCTICA_CASEY",
            "ANTARCTICA_DAVIS",
            "ANTARCTICA_DUMONTDURVILLE",
            "ANTARCTICA_MACQUARIE",
            "ANTARCTICA_MAWSON",
            "PACIFIC_AUCKLAND",
            "ANTARCTICA_PALMER",
            "ANTARCTICA_ROTHERA",
            "ANTARCTICA_SYOWA",
            "ANTARCTICA_TROLL",
            "ANTARCTICA_VOSTOK",
            "EUROPE_OSLO",
            "ASIA_ADEN",
            "ASIA_ALMATY",
            "ASIA_AMMAN",
            "ASIA_ANADYR",
            "ASIA_AQTAU",
            "ASIA_AQTOBE",
            "ASIA_ASHGABAT",
            "ASIA_BAGHDAD",
            "ASIA_BAHRAIN",
            "ASIA_BAKU",
            "ASIA_BANGKOK",
            "ASIA_BEIRUT",
            "ASIA_BISHKEK",
            "ASIA_BRUNEI",
            "ASIA_KOLKATA",
            "ASIA_CHITA",
            "ASIA_CHOIBALSAN",
            "ASIA_SHANGHAI",
            "ASIA_COLOMBO",
            "ASIA_DHAKA",
            "ASIA_DAMASCUS",
            "ASIA_DILI",
            "ASIA_DUBAI",
            "ASIA_DUSHANBE",
            "ASIA_GAZA",
            "ASIA_HEBRON",
            "ASIA_HO_CHI_MINH",
            "ASIA_HONG_KONG",
            "ASIA_HOVD",
            "ASIA_IRKUTSK",
            "EUROPE_ISTANBUL",
            "ASIA_JAKARTA",
            "ASIA_JAYAPURA",
            "ASIA_JERUSALEM",
            "ASIA_KABUL",
            "ASIA_KAMCHATKA",
            "ASIA_KARACHI",
            "ASIA_URUMQI",
            "ASIA_KATHMANDU",
            "ASIA_KHANDYGA",
            "ASIA_KRASNOYARSK",
            "ASIA_KUALA_LUMPUR",
            "ASIA_KUCHING",
            "ASIA_KUWAIT",
            "ASIA_MACAU",
            "ASIA_MAGADAN",
            "ASIA_MAKASSAR",
            "ASIA_MANILA",
            "ASIA_MUSCAT",
            "ASIA_NICOSIA",
            "ASIA_NOVOKUZNETSK",
            "ASIA_NOVOSIBIRSK",
            "ASIA_OMSK",
            "ASIA_ORAL",
            "ASIA_PONTIANAK",
            "ASIA_PYONGYANG",
            "ASIA_QATAR",
            "ASIA_QYZYLORDA",
            "ASIA_RANGOON",
            "ASIA_RIYADH",
            "ASIA_SAKHALIN",
            "ASIA_SAMARKAND",
            "ASIA_SEOUL",
            "ASIA_SINGAPORE",
            "ASIA_SREDNEKOLYMSK",
            "ASIA_TAIPEI",
            "ASIA_TASHKENT",
            "ASIA_TBILISI",
            "ASIA_TEHRAN",
            "ASIA_THIMPHU",
            "ASIA_TOKYO",
            "ASIA_ULAANBAATAR",
            "ASIA_UST_NERA",
            "ASIA_VLADIVOSTOK",
            "ASIA_YAKUTSK",
            "ASIA_YEKATERINBURG",
            "ASIA_YEREVAN",
            "ATLANTIC_AZORES",
            "ATLANTIC_BERMUDA",
            "ATLANTIC_CANARY",
            "ATLANTIC_CAPE_VERDE",
            "ATLANTIC_FAROE",
            "ATLANTIC_MADEIRA",
            "ATLANTIC_REYKJAVIK",
            "ATLANTIC_SOUTH_GEORGIA",
            "ATLANTIC_STANLEY",
            "AUSTRALIA_SYDNEY",
            "AUSTRALIA_ADELAIDE",
            "AUSTRALIA_BRISBANE",
            "AUSTRALIA_BROKEN_HILL",
            "AUSTRALIA_CURRIE",
            "AUSTRALIA_DARWIN",
            "AUSTRALIA_EUCLA",
            "AUSTRALIA_HOBART",
            "AUSTRALIA_LORD_HOWE",
            "AUSTRALIA_LINDEMAN",
            "AUSTRALIA_MELBOURNE",
            "AUSTRALIA_PERTH",
            "CET",
            "CST6CDT",
            "PACIFIC_EASTER",
            "EET",
            "EST",
            "EST5EDT",
            "EUROPE_DUBLIN",
            "ETC_GMT",
            "ETC_GMT_PLUS_1",
            "ETC_GMT_PLUS_10",
            "ETC_GMT_PLUS_11",
            "ETC_GMT_PLUS_12",
            "ETC_GMT_PLUS_2",
            "ETC_GMT_PLUS_3",
            "ETC_GMT_PLUS_4",
            "ETC_GMT_PLUS_5",
            "ETC_GMT_PLUS_6",
            "ETC_GMT_PLUS_7",
            "ETC_GMT_PLUS_8",
            "ETC_GMT_PLUS_9",
            "ETC_GMT_MINUS_1",
            "ETC_GMT_MINUS_10",
            "ETC_GMT_MINUS_11",
            "ETC_GMT_MINUS_12",
            "ETC_GMT_MINUS_13",
            "ETC_GMT_MINUS_14",
            "ETC_GMT_MINUS_2",
            "ETC_GMT_MINUS_3",
            "ETC_GMT_MINUS_4",
            "ETC_GMT_MINUS_5",
            "ETC_GMT_MINUS_6",
            "ETC_GMT_MINUS_7",
            "ETC_GMT_MINUS_8",
            "ETC_GMT_MINUS_9",
            "ETC_UCT",
            "ETC_UTC",
            "EUROPE_AMSTERDAM",
            "EUROPE_ANDORRA",
            "EUROPE_ATHENS",
            "EUROPE_LONDON",
            "EUROPE_BELGRADE",
            "EUROPE_BERLIN",
            "EUROPE_PRAGUE",
            "EUROPE_BRUSSELS",
            "EUROPE_BUCHAREST",
            "EUROPE_BUDAPEST",
            "EUROPE_ZURICH",
            "EUROPE_CHISINAU",
            "EUROPE_COPENHAGEN",
            "EUROPE_GIBRALTAR",
            "EUROPE_HELSINKI",
            "EUROPE_KALININGRAD",
            "EUROPE_KIEV",
            "EUROPE_LISBON",
            "EUROPE_LUXEMBOURG",
            "EUROPE_MADRID",
            "EUROPE_MALTA",
            "EUROPE_MINSK",
            "EUROPE_MONACO",
            "EUROPE_MOSCOW",
            "EUROPE_PARIS",
            "EUROPE_RIGA",
            "EUROPE_ROME",
            "EUROPE_SAMARA",
            "EUROPE_SIMFEROPOL",
            "EUROPE_SOFIA",
            "EUROPE_STOCKHOLM",
            "EUROPE_TALLINN",
            "EUROPE_TIRANE",
            "EUROPE_UZHGOROD",
            "EUROPE_VIENNA",
            "EUROPE_VILNIUS",
            "EUROPE_VOLGOGRAD",
            "EUROPE_WARSAW",
            "EUROPE_ZAPOROZHYE",
            "HST",
            "INDIAN_CHAGOS",
            "INDIAN_CHRISTMAS",
            "INDIAN_COCOS",
            "INDIAN_KERGUELEN",
            "INDIAN_MAHE",
            "INDIAN_MALDIVES",
            "INDIAN_MAURITIUS",
            "INDIAN_REUNION",
            "PACIFIC_KWAJALEIN",
            "MET",
            "MST",
            "MST7MDT",
            "PACIFIC_CHATHAM",
            "PST8PDT",
            "PACIFIC_APIA",
            "PACIFIC_BOUGAINVILLE",
            "PACIFIC_CHUUK",
            "PACIFIC_EFATE",
            "PACIFIC_ENDERBURY",
            "PACIFIC_FAKAOFO",
            "PACIFIC_FIJI",
            "PACIFIC_FUNAFUTI",
            "PACIFIC_GALAPAGOS",
            "PACIFIC_GAMBIER",
            "PACIFIC_GUADALCANAL",
            "PACIFIC_GUAM",
            "PACIFIC_HONOLULU",
            "PACIFIC_KIRITIMATI",
            "PACIFIC_KOSRAE",
            "PACIFIC_MAJURO",
            "PACIFIC_MARQUESAS",
            "PACIFIC_MIDWAY",
            "PACIFIC_NAURU",
            "PACIFIC_NIUE",
            "PACIFIC_NORFOLK",
            "PACIFIC_NOUMEA",
            "PACIFIC_PAGO_PAGO",
            "PACIFIC_PALAU",
            "PACIFIC_PITCAIRN",
            "PACIFIC_POHNPEI",
            "PACIFIC_PORT_MORESBY",
            "PACIFIC_RAROTONGA",
            "PACIFIC_SAIPAN",
            "PACIFIC_TAHITI",
            "PACIFIC_TARAWA",
            "PACIFIC_TONGATAPU",
            "PACIFIC_WAKE",
            "PACIFIC_WALLIS",
            "UTC",
            "WET"
          ],
          "type": "string",
          "xml": {
            "name": "DateTimeZone",
            "namespace": "http://www.casenet.com/DateTimeZone"
          }
        },
        "companyGroup": {
          "$ref": "#/definitions/CompanyGroup"
        },
        "credentials": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "emails": {
          "items": {
            "$ref": "#/definitions/ContactEmail"
          },
          "type": "array",
          "uniqueItems": true
        },
        "faxNbr": {
          "$ref": "#/definitions/PhoneNumberObject"
        },
        "lastLoginTime": {
          "format": "date-time",
          "type": "string"
        },
        "phoneNumbers": {
          "items": {
            "$ref": "#/definitions/ContactPhoneNumber"
          },
          "type": "array",
          "uniqueItems": true
        },
        "preferredPhoneNumber": {
          "$ref": "#/definitions/PhoneNumberObject"
        },
        "title": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "userOffline": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "UserInfo",
        "namespace": "http://www.casenet.com/UserInfo"
      }
    },
    "UserLicensure": {
      "properties": {
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "id": {
          "type": "string"
        },
        "licenseNumber": {
          "type": "string"
        },
        "licenseType": {
          "$ref": "#/definitions/OptionValue"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "state": {
          "$ref": "#/definitions/OptionValue"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "UserLicensure",
        "namespace": "http://www.casenet.com/UserLicensure"
      }
    },
    "UserLicensureRequest": {
      "properties": {
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "licenseNumber": {
          "maxLength": 100,
          "minLength": 1,
          "type": "string"
        },
        "licenseTypeOption": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "state": {
          "type": "string"
        }
      },
      "required": [
        "licenseNumber",
        "state"
      ],
      "type": "object",
      "xml": {
        "name": "UserLicensureRequest",
        "namespace": "http://www.casenet.com/UserLicensureRequest"
      }
    },
    "UserNoteInfo": {
      "properties": {
        "contextBeforeText": {
          "type": "string"
        },
        "defaultNote": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "mandatory": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "UserNoteInfo",
        "namespace": "http://www.casenet.com/UserNoteInfo"
      }
    },
    "UserOfflineState": {
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "deviceId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "membersOffline": {
          "items": {
            "$ref": "#/definitions/Member"
          },
          "type": "array",
          "uniqueItems": true
        },
        "obsolete": {
          "type": "boolean"
        },
        "takenOfflineDate": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/SystemActor"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "UserPaginatedSearchResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "hasMoreResults": {
          "type": "boolean"
        },
        "searchResults": {
          "items": {
            "$ref": "#/definitions/UserSearchResult"
          },
          "type": "array"
        },
        "searchResultsColumnNames": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "UserPaginatedSearchResults",
        "namespace": "http://www.casenet.com/UserPaginatedSearchResults"
      }
    },
    "UserPermissions": {
      "properties": {
        "generalPermissions": {
          "items": {
            "enum": [
              "BEHAVIORAL_HEALTH_AUTH_EDIT",
              "BEHAVIORAL_HEALTH_AUTH_VIEW",
              "MEDICAL_AUTH_EDIT",
              "MEDICAL_AUTH_VIEW",
              "AUTHORIZATION_UNLOCK",
              "UPDATE_LOCKED_AUTHORIZATION",
              "PROVIDER_PORTAL_USER",
              "END_TASK_OR_WORKFLOW",
              "REASSIGN_TASK",
              "EDIT_TASK_ATTEMPT_DATE",
              "EDIT_TASK_DETAILS",
              "CREATE_TASK_ATTEMPT",
              "REFERRAL_DECIDE_PERMISSION",
              "CARE_PLAN_OBJECTIVE_EDIT",
              "OWNERSHIP_VIEW",
              "OWNERSHIP_REASSIGN",
              "SERVICE_PROVIDER_EDIT",
              "TCA_USER",
              "TCA_RULES_VALIDATOR",
              "DELETE_INSTANCE_DATA_PERMISSION",
              "CLIENT_MEMBER_MERGE",
              "READY_TO_EXPORT",
              "NOTE_CONFIDENTIALITY",
              "ENCLOSURES_LOCAL_ADD",
              "PHONE_DIALER",
              "RISK_INDICATOR_UPDATE",
              "SCHEDULER_EDIT_TEAM_USERS_CALENDARS",
              "SCHEDULER_VIEW_TEAM_USERS_CALENDARS",
              "SCHEDULER_EDIT_ALL_USERS_CALENDARS",
              "SCHEDULER_VIEW_ALL_USERS_CALENDARS",
              "SCHEDULER_SCHED_OUTSIDE_HOURS",
              "MANAGE_ALL_USERS_WORK_SCHEDULE",
              "MANAGE_TEAM_USERS_WORK_SCHEDULE",
              "MEMBER_PRIVACY_OVERRIDE",
              "EDIT_OWN_USER_PROFILE",
              "VIEW_TEAM_USER_PROFILE",
              "EDIT_TEAM_USER_PROFILE",
              "ADD_USER_TO_MY_TEAM",
              "REMOVE_USER_FROM_MY_TEAM",
              "ADD_PROVIDERS_MANUALLY",
              "DISTRIBUTED_CORRESPONDENCE_RESEND_LETTERS",
              "DISTRIBUTED_CORRESPONDENCE_MODIFY_RECIPIENTS",
              "PROVIDER_PORTAL_PLAN_ADMINISTRATOR_ACCESS",
              "PROVIDER_PORTAL_AUTHORIZATION_SUBMISSION_ACCESS",
              "PROVIDER_PORTAL_AUTHORIZATION_VIEW_ACCESS",
              "MOBILE_OFFLINE_ADMIN",
              "SEND_MEMBER_ONLINE",
              "MOBILE_OFFLINE",
              "POST_DETERMINATION_AUTH_EDIT",
              "EDIT_APPEAL_DUE_DATE",
              "OVERRIDE_RULE_DEFAULTS",
              "INSIGHTS_GENERAL_ADMIN_CONFIG_VIEW",
              "INSIGHTS_GENERAL_ADMIN_CONFIG_WRITE",
              "INSIGHTS_TASK_VIEW",
              "INSIGHTS_TASK_WRITE",
              "INSIGHTS_UM_VIEW",
              "INSIGHTS_UM_WRITE",
              "INSIGHTS_UM_ADMIN_CONFIG_VIEW",
              "INSIGHTS_UM_ADMIN_CONFIG_WRITE",
              "INSIGHTS_CM_VIEW",
              "INSIGHTS_CM_WRITE",
              "INSIGHTS_CM_ADMIN_CONFIG_VIEW",
              "INSIGHTS_CM_ADMIN_CONFIG_WRITE",
              "INSIGHTS_TIME_TRACKING_VIEW",
              "INSIGHTS_TIME_TRACKING_WRITE",
              "INSIGHTS_TIME_TRACKING_ADMIN_CONFIG_VIEW",
              "INSIGHTS_TIME_TRACKING_ADMIN_CONFIG_WRITE"
            ],
            "type": "string",
            "xml": {
              "name": "PermissionName",
              "namespace": "http://www.casenet.com/PermissionName"
            }
          },
          "type": "array",
          "uniqueItems": true
        },
        "nonScreenPermissions": {
          "additionalProperties": {
            "$ref": "#/definitions/SetOfNonScreenActions"
          },
          "type": "object"
        },
        "portalPermissions": {
          "items": {
            "enum": [
              "BEHAVIORAL_HEALTH_AUTH_EDIT",
              "BEHAVIORAL_HEALTH_AUTH_VIEW",
              "MEDICAL_AUTH_EDIT",
              "MEDICAL_AUTH_VIEW",
              "AUTHORIZATION_UNLOCK",
              "UPDATE_LOCKED_AUTHORIZATION",
              "PROVIDER_PORTAL_USER",
              "END_TASK_OR_WORKFLOW",
              "REASSIGN_TASK",
              "EDIT_TASK_ATTEMPT_DATE",
              "EDIT_TASK_DETAILS",
              "CREATE_TASK_ATTEMPT",
              "REFERRAL_DECIDE_PERMISSION",
              "CARE_PLAN_OBJECTIVE_EDIT",
              "OWNERSHIP_VIEW",
              "OWNERSHIP_REASSIGN",
              "SERVICE_PROVIDER_EDIT",
              "TCA_USER",
              "TCA_RULES_VALIDATOR",
              "DELETE_INSTANCE_DATA_PERMISSION",
              "CLIENT_MEMBER_MERGE",
              "READY_TO_EXPORT",
              "NOTE_CONFIDENTIALITY",
              "ENCLOSURES_LOCAL_ADD",
              "PHONE_DIALER",
              "RISK_INDICATOR_UPDATE",
              "SCHEDULER_EDIT_TEAM_USERS_CALENDARS",
              "SCHEDULER_VIEW_TEAM_USERS_CALENDARS",
              "SCHEDULER_EDIT_ALL_USERS_CALENDARS",
              "SCHEDULER_VIEW_ALL_USERS_CALENDARS",
              "SCHEDULER_SCHED_OUTSIDE_HOURS",
              "MANAGE_ALL_USERS_WORK_SCHEDULE",
              "MANAGE_TEAM_USERS_WORK_SCHEDULE",
              "MEMBER_PRIVACY_OVERRIDE",
              "EDIT_OWN_USER_PROFILE",
              "VIEW_TEAM_USER_PROFILE",
              "EDIT_TEAM_USER_PROFILE",
              "ADD_USER_TO_MY_TEAM",
              "REMOVE_USER_FROM_MY_TEAM",
              "ADD_PROVIDERS_MANUALLY",
              "DISTRIBUTED_CORRESPONDENCE_RESEND_LETTERS",
              "DISTRIBUTED_CORRESPONDENCE_MODIFY_RECIPIENTS",
              "PROVIDER_PORTAL_PLAN_ADMINISTRATOR_ACCESS",
              "PROVIDER_PORTAL_AUTHORIZATION_SUBMISSION_ACCESS",
              "PROVIDER_PORTAL_AUTHORIZATION_VIEW_ACCESS",
              "MOBILE_OFFLINE_ADMIN",
              "SEND_MEMBER_ONLINE",
              "MOBILE_OFFLINE",
              "POST_DETERMINATION_AUTH_EDIT",
              "EDIT_APPEAL_DUE_DATE",
              "OVERRIDE_RULE_DEFAULTS",
              "INSIGHTS_GENERAL_ADMIN_CONFIG_VIEW",
              "INSIGHTS_GENERAL_ADMIN_CONFIG_WRITE",
              "INSIGHTS_TASK_VIEW",
              "INSIGHTS_TASK_WRITE",
              "INSIGHTS_UM_VIEW",
              "INSIGHTS_UM_WRITE",
              "INSIGHTS_UM_ADMIN_CONFIG_VIEW",
              "INSIGHTS_UM_ADMIN_CONFIG_WRITE",
              "INSIGHTS_CM_VIEW",
              "INSIGHTS_CM_WRITE",
              "INSIGHTS_CM_ADMIN_CONFIG_VIEW",
              "INSIGHTS_CM_ADMIN_CONFIG_WRITE",
              "INSIGHTS_TIME_TRACKING_VIEW",
              "INSIGHTS_TIME_TRACKING_WRITE",
              "INSIGHTS_TIME_TRACKING_ADMIN_CONFIG_VIEW",
              "INSIGHTS_TIME_TRACKING_ADMIN_CONFIG_WRITE"
            ],
            "type": "string",
            "xml": {
              "name": "PermissionName",
              "namespace": "http://www.casenet.com/PermissionName"
            }
          },
          "type": "array",
          "uniqueItems": true
        },
        "screenPermissions": {
          "additionalProperties": {
            "$ref": "#/definitions/SetOfScreenActions"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "UserPermissions",
        "namespace": "http://www.casenet.com/UserPermissions"
      }
    },
    "UserProfile": {
      "properties": {
        "acuities": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "addresses": {
          "items": {
            "$ref": "#/definitions/ContactAddress"
          },
          "type": "array",
          "uniqueItems": true
        },
        "credentials": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "credentialsOther": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "emails": {
          "items": {
            "$ref": "#/definitions/ContactEmail"
          },
          "type": "array",
          "uniqueItems": true
        },
        "faxNumber": {
          "$ref": "#/definitions/PhoneNumberObject"
        },
        "gender": {
          "$ref": "#/definitions/OptionValue"
        },
        "ldapUser": {
          "type": "boolean"
        },
        "levelsOfCare": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "locations": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "phoneNumbers": {
          "items": {
            "$ref": "#/definitions/ContactPhoneNumber"
          },
          "type": "array",
          "uniqueItems": true
        },
        "primaryLanguage": {
          "$ref": "#/definitions/OptionValue"
        },
        "secondaryLanguages": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "serviceRegions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "serviceZipCodes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "skillAreas": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "specialNeedsAreas": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "specializations": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "timezone": {
          "enum": [
            "AFRICA_ABIDJAN",
            "AFRICA_ACCRA",
            "AFRICA_NAIROBI",
            "AFRICA_ALGIERS",
            "AFRICA_LAGOS",
            "AFRICA_BISSAU",
            "AFRICA_MAPUTO",
            "AFRICA_CAIRO",
            "AFRICA_CASABLANCA",
            "AFRICA_CEUTA",
            "AFRICA_EL_AAIUN",
            "AFRICA_JOHANNESBURG",
            "AFRICA_KHARTOUM",
            "AFRICA_MONROVIA",
            "AFRICA_NDJAMENA",
            "AFRICA_TRIPOLI",
            "AFRICA_TUNIS",
            "AFRICA_WINDHOEK",
            "AMERICA_ADAK",
            "AMERICA_ANCHORAGE",
            "AMERICA_PORT_OF_SPAIN",
            "AMERICA_ANTIGUA",
            "AMERICA_ARAGUAINA",
            "AMERICA_ARGENTINA_BUENOS_AIRES",
            "AMERICA_ARGENTINA_CATAMARCA",
            "AMERICA_ARGENTINA_CORDOBA",
            "AMERICA_ARGENTINA_JUJUY",
            "AMERICA_ARGENTINA_LA_RIOJA",
            "AMERICA_ARGENTINA_MENDOZA",
            "AMERICA_ARGENTINA_RIO_GALLEGOS",
            "AMERICA_ARGENTINA_SALTA",
            "AMERICA_ARGENTINA_SAN_JUAN",
            "AMERICA_ARGENTINA_SAN_LUIS",
            "AMERICA_ARGENTINA_TUCUMAN",
            "AMERICA_ARGENTINA_USHUAIA",
            "AMERICA_CURACAO",
            "AMERICA_ASUNCION",
            "AMERICA_ATIKOKAN",
            "AMERICA_BAHIA",
            "AMERICA_BAHIA_BANDERAS",
            "AMERICA_BARBADOS",
            "AMERICA_BELEM",
            "AMERICA_BELIZE",
            "AMERICA_BLANC_SABLON",
            "AMERICA_BOA_VISTA",
            "AMERICA_BOGOTA",
            "AMERICA_BOISE",
            "AMERICA_CAMBRIDGE_BAY",
            "AMERICA_CAMPO_GRANDE",
            "AMERICA_CANCUN",
            "AMERICA_CARACAS",
            "AMERICA_CAYENNE",
            "AMERICA_CAYMAN",
            "AMERICA_CHICAGO",
            "AMERICA_CHIHUAHUA",
            "AMERICA_COSTA_RICA",
            "AMERICA_CRESTON",
            "AMERICA_CUIABA",
            "AMERICA_DANMARKSHAVN",
            "AMERICA_DAWSON",
            "AMERICA_DAWSON_CREEK",
            "AMERICA_DENVER",
            "AMERICA_DETROIT",
            "AMERICA_EDMONTON",
            "AMERICA_EIRUNEPE",
            "AMERICA_EL_SALVADOR",
            "AMERICA_TIJUANA",
            "AMERICA_INDIANA_INDIANAPOLIS",
            "AMERICA_FORTALEZA",
            "AMERICA_GLACE_BAY",
            "AMERICA_GODTHAB",
            "AMERICA_GOOSE_BAY",
            "AMERICA_GRAND_TURK",
            "AMERICA_GUATEMALA",
            "AMERICA_GUAYAQUIL",
            "AMERICA_GUYANA",
            "AMERICA_HALIFAX",
            "AMERICA_HAVANA",
            "AMERICA_HERMOSILLO",
            "AMERICA_INDIANA_KNOX",
            "AMERICA_INDIANA_MARENGO",
            "AMERICA_INDIANA_PETERSBURG",
            "AMERICA_INDIANA_TELL_CITY",
            "AMERICA_INDIANA_VEVAY",
            "AMERICA_INDIANA_VINCENNES",
            "AMERICA_INDIANA_WINAMAC",
            "AMERICA_INUVIK",
            "AMERICA_IQALUIT",
            "AMERICA_JAMAICA",
            "AMERICA_JUNEAU",
            "AMERICA_KENTUCKY_LOUISVILLE",
            "AMERICA_KENTUCKY_MONTICELLO",
            "AMERICA_LA_PAZ",
            "AMERICA_LIMA",
            "AMERICA_LOS_ANGELES",
            "AMERICA_MACEIO",
            "AMERICA_MANAGUA",
            "AMERICA_MANAUS",
            "AMERICA_MARTINIQUE",
            "AMERICA_MATAMOROS",
            "AMERICA_MAZATLAN",
            "AMERICA_MENOMINEE",
            "AMERICA_MERIDA",
            "AMERICA_METLAKATLA",
            "AMERICA_MEXICO_CITY",
            "AMERICA_MIQUELON",
            "AMERICA_MONCTON",
            "AMERICA_MONTERREY",
            "AMERICA_MONTEVIDEO",
            "AMERICA_MONTREAL",
            "AMERICA_NASSAU",
            "AMERICA_NEW_YORK",
            "AMERICA_NIPIGON",
            "AMERICA_NOME",
            "AMERICA_NORONHA",
            "AMERICA_NORTH_DAKOTA_BEULAH",
            "AMERICA_NORTH_DAKOTA_CENTER",
            "AMERICA_NORTH_DAKOTA_NEW_SALEM",
            "AMERICA_OJINAGA",
            "AMERICA_PANAMA",
            "AMERICA_PANGNIRTUNG",
            "AMERICA_PARAMARIBO",
            "AMERICA_PHOENIX",
            "AMERICA_PORT_AU_PRINCE",
            "AMERICA_RIO_BRANCO",
            "AMERICA_PORTO_VELHO",
            "AMERICA_PUERTO_RICO",
            "AMERICA_RAINY_RIVER",
            "AMERICA_RANKIN_INLET",
            "AMERICA_RECIFE",
            "AMERICA_REGINA",
            "AMERICA_RESOLUTE",
            "AMERICA_SANTA_ISABEL",
            "AMERICA_SANTAREM",
            "AMERICA_SANTIAGO",
            "AMERICA_SANTO_DOMINGO",
            "AMERICA_SAO_PAULO",
            "AMERICA_SCORESBYSUND",
            "AMERICA_SITKA",
            "AMERICA_ST_JOHNS",
            "AMERICA_SWIFT_CURRENT",
            "AMERICA_TEGUCIGALPA",
            "AMERICA_THULE",
            "AMERICA_THUNDER_BAY",
            "AMERICA_TORONTO",
            "AMERICA_VANCOUVER",
            "AMERICA_WHITEHORSE",
            "AMERICA_WINNIPEG",
            "AMERICA_YAKUTAT",
            "AMERICA_YELLOWKNIFE",
            "ANTARCTICA_CASEY",
            "ANTARCTICA_DAVIS",
            "ANTARCTICA_DUMONTDURVILLE",
            "ANTARCTICA_MACQUARIE",
            "ANTARCTICA_MAWSON",
            "PACIFIC_AUCKLAND",
            "ANTARCTICA_PALMER",
            "ANTARCTICA_ROTHERA",
            "ANTARCTICA_SYOWA",
            "ANTARCTICA_TROLL",
            "ANTARCTICA_VOSTOK",
            "EUROPE_OSLO",
            "ASIA_ADEN",
            "ASIA_ALMATY",
            "ASIA_AMMAN",
            "ASIA_ANADYR",
            "ASIA_AQTAU",
            "ASIA_AQTOBE",
            "ASIA_ASHGABAT",
            "ASIA_BAGHDAD",
            "ASIA_BAHRAIN",
            "ASIA_BAKU",
            "ASIA_BANGKOK",
            "ASIA_BEIRUT",
            "ASIA_BISHKEK",
            "ASIA_BRUNEI",
            "ASIA_KOLKATA",
            "ASIA_CHITA",
            "ASIA_CHOIBALSAN",
            "ASIA_SHANGHAI",
            "ASIA_COLOMBO",
            "ASIA_DHAKA",
            "ASIA_DAMASCUS",
            "ASIA_DILI",
            "ASIA_DUBAI",
            "ASIA_DUSHANBE",
            "ASIA_GAZA",
            "ASIA_HEBRON",
            "ASIA_HO_CHI_MINH",
            "ASIA_HONG_KONG",
            "ASIA_HOVD",
            "ASIA_IRKUTSK",
            "EUROPE_ISTANBUL",
            "ASIA_JAKARTA",
            "ASIA_JAYAPURA",
            "ASIA_JERUSALEM",
            "ASIA_KABUL",
            "ASIA_KAMCHATKA",
            "ASIA_KARACHI",
            "ASIA_URUMQI",
            "ASIA_KATHMANDU",
            "ASIA_KHANDYGA",
            "ASIA_KRASNOYARSK",
            "ASIA_KUALA_LUMPUR",
            "ASIA_KUCHING",
            "ASIA_KUWAIT",
            "ASIA_MACAU",
            "ASIA_MAGADAN",
            "ASIA_MAKASSAR",
            "ASIA_MANILA",
            "ASIA_MUSCAT",
            "ASIA_NICOSIA",
            "ASIA_NOVOKUZNETSK",
            "ASIA_NOVOSIBIRSK",
            "ASIA_OMSK",
            "ASIA_ORAL",
            "ASIA_PONTIANAK",
            "ASIA_PYONGYANG",
            "ASIA_QATAR",
            "ASIA_QYZYLORDA",
            "ASIA_RANGOON",
            "ASIA_RIYADH",
            "ASIA_SAKHALIN",
            "ASIA_SAMARKAND",
            "ASIA_SEOUL",
            "ASIA_SINGAPORE",
            "ASIA_SREDNEKOLYMSK",
            "ASIA_TAIPEI",
            "ASIA_TASHKENT",
            "ASIA_TBILISI",
            "ASIA_TEHRAN",
            "ASIA_THIMPHU",
            "ASIA_TOKYO",
            "ASIA_ULAANBAATAR",
            "ASIA_UST_NERA",
            "ASIA_VLADIVOSTOK",
            "ASIA_YAKUTSK",
            "ASIA_YEKATERINBURG",
            "ASIA_YEREVAN",
            "ATLANTIC_AZORES",
            "ATLANTIC_BERMUDA",
            "ATLANTIC_CANARY",
            "ATLANTIC_CAPE_VERDE",
            "ATLANTIC_FAROE",
            "ATLANTIC_MADEIRA",
            "ATLANTIC_REYKJAVIK",
            "ATLANTIC_SOUTH_GEORGIA",
            "ATLANTIC_STANLEY",
            "AUSTRALIA_SYDNEY",
            "AUSTRALIA_ADELAIDE",
            "AUSTRALIA_BRISBANE",
            "AUSTRALIA_BROKEN_HILL",
            "AUSTRALIA_CURRIE",
            "AUSTRALIA_DARWIN",
            "AUSTRALIA_EUCLA",
            "AUSTRALIA_HOBART",
            "AUSTRALIA_LORD_HOWE",
            "AUSTRALIA_LINDEMAN",
            "AUSTRALIA_MELBOURNE",
            "AUSTRALIA_PERTH",
            "CET",
            "CST6CDT",
            "PACIFIC_EASTER",
            "EET",
            "EST",
            "EST5EDT",
            "EUROPE_DUBLIN",
            "ETC_GMT",
            "ETC_GMT_PLUS_1",
            "ETC_GMT_PLUS_10",
            "ETC_GMT_PLUS_11",
            "ETC_GMT_PLUS_12",
            "ETC_GMT_PLUS_2",
            "ETC_GMT_PLUS_3",
            "ETC_GMT_PLUS_4",
            "ETC_GMT_PLUS_5",
            "ETC_GMT_PLUS_6",
            "ETC_GMT_PLUS_7",
            "ETC_GMT_PLUS_8",
            "ETC_GMT_PLUS_9",
            "ETC_GMT_MINUS_1",
            "ETC_GMT_MINUS_10",
            "ETC_GMT_MINUS_11",
            "ETC_GMT_MINUS_12",
            "ETC_GMT_MINUS_13",
            "ETC_GMT_MINUS_14",
            "ETC_GMT_MINUS_2",
            "ETC_GMT_MINUS_3",
            "ETC_GMT_MINUS_4",
            "ETC_GMT_MINUS_5",
            "ETC_GMT_MINUS_6",
            "ETC_GMT_MINUS_7",
            "ETC_GMT_MINUS_8",
            "ETC_GMT_MINUS_9",
            "ETC_UCT",
            "ETC_UTC",
            "EUROPE_AMSTERDAM",
            "EUROPE_ANDORRA",
            "EUROPE_ATHENS",
            "EUROPE_LONDON",
            "EUROPE_BELGRADE",
            "EUROPE_BERLIN",
            "EUROPE_PRAGUE",
            "EUROPE_BRUSSELS",
            "EUROPE_BUCHAREST",
            "EUROPE_BUDAPEST",
            "EUROPE_ZURICH",
            "EUROPE_CHISINAU",
            "EUROPE_COPENHAGEN",
            "EUROPE_GIBRALTAR",
            "EUROPE_HELSINKI",
            "EUROPE_KALININGRAD",
            "EUROPE_KIEV",
            "EUROPE_LISBON",
            "EUROPE_LUXEMBOURG",
            "EUROPE_MADRID",
            "EUROPE_MALTA",
            "EUROPE_MINSK",
            "EUROPE_MONACO",
            "EUROPE_MOSCOW",
            "EUROPE_PARIS",
            "EUROPE_RIGA",
            "EUROPE_ROME",
            "EUROPE_SAMARA",
            "EUROPE_SIMFEROPOL",
            "EUROPE_SOFIA",
            "EUROPE_STOCKHOLM",
            "EUROPE_TALLINN",
            "EUROPE_TIRANE",
            "EUROPE_UZHGOROD",
            "EUROPE_VIENNA",
            "EUROPE_VILNIUS",
            "EUROPE_VOLGOGRAD",
            "EUROPE_WARSAW",
            "EUROPE_ZAPOROZHYE",
            "HST",
            "INDIAN_CHAGOS",
            "INDIAN_CHRISTMAS",
            "INDIAN_COCOS",
            "INDIAN_KERGUELEN",
            "INDIAN_MAHE",
            "INDIAN_MALDIVES",
            "INDIAN_MAURITIUS",
            "INDIAN_REUNION",
            "PACIFIC_KWAJALEIN",
            "MET",
            "MST",
            "MST7MDT",
            "PACIFIC_CHATHAM",
            "PST8PDT",
            "PACIFIC_APIA",
            "PACIFIC_BOUGAINVILLE",
            "PACIFIC_CHUUK",
            "PACIFIC_EFATE",
            "PACIFIC_ENDERBURY",
            "PACIFIC_FAKAOFO",
            "PACIFIC_FIJI",
            "PACIFIC_FUNAFUTI",
            "PACIFIC_GALAPAGOS",
            "PACIFIC_GAMBIER",
            "PACIFIC_GUADALCANAL",
            "PACIFIC_GUAM",
            "PACIFIC_HONOLULU",
            "PACIFIC_KIRITIMATI",
            "PACIFIC_KOSRAE",
            "PACIFIC_MAJURO",
            "PACIFIC_MARQUESAS",
            "PACIFIC_MIDWAY",
            "PACIFIC_NAURU",
            "PACIFIC_NIUE",
            "PACIFIC_NORFOLK",
            "PACIFIC_NOUMEA",
            "PACIFIC_PAGO_PAGO",
            "PACIFIC_PALAU",
            "PACIFIC_PITCAIRN",
            "PACIFIC_POHNPEI",
            "PACIFIC_PORT_MORESBY",
            "PACIFIC_RAROTONGA",
            "PACIFIC_SAIPAN",
            "PACIFIC_TAHITI",
            "PACIFIC_TARAWA",
            "PACIFIC_TONGATAPU",
            "PACIFIC_WAKE",
            "PACIFIC_WALLIS",
            "UTC",
            "WET"
          ],
          "type": "string",
          "xml": {
            "name": "DateTimeZone",
            "namespace": "http://www.casenet.com/DateTimeZone"
          }
        },
        "title": {
          "$ref": "#/definitions/OptionValue"
        },
        "titleOther": {
          "type": "string"
        },
        "updatedByUser": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "userLicenses": {
          "items": {
            "$ref": "#/definitions/UserLicensure"
          },
          "type": "array",
          "uniqueItems": true
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "UserProfile",
        "namespace": "http://www.casenet.com/UserProfile"
      }
    },
    "UserProfileConfiguration": {
      "properties": {
        "addressTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "addressTypeRequired": {
          "type": "boolean"
        },
        "availableTimeZones": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "credentialOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "emailTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "emailTypeRequired": {
          "type": "boolean"
        },
        "optionFieldMap": {
          "additionalProperties": {
            "$ref": "#/definitions/OptionGroupFieldConfig"
          },
          "type": "object"
        },
        "phoneNumberTypeOptions": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "phoneNumberTypeRequired": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "UserProfileConfiguration",
        "namespace": "http://www.casenet.com/UserProfileConfiguration"
      }
    },
    "UserSchedule": {
      "properties": {
        "outputTimeZone": {
          "enum": [
            "AFRICA_ABIDJAN",
            "AFRICA_ACCRA",
            "AFRICA_NAIROBI",
            "AFRICA_ALGIERS",
            "AFRICA_LAGOS",
            "AFRICA_BISSAU",
            "AFRICA_MAPUTO",
            "AFRICA_CAIRO",
            "AFRICA_CASABLANCA",
            "AFRICA_CEUTA",
            "AFRICA_EL_AAIUN",
            "AFRICA_JOHANNESBURG",
            "AFRICA_KHARTOUM",
            "AFRICA_MONROVIA",
            "AFRICA_NDJAMENA",
            "AFRICA_TRIPOLI",
            "AFRICA_TUNIS",
            "AFRICA_WINDHOEK",
            "AMERICA_ADAK",
            "AMERICA_ANCHORAGE",
            "AMERICA_PORT_OF_SPAIN",
            "AMERICA_ANTIGUA",
            "AMERICA_ARAGUAINA",
            "AMERICA_ARGENTINA_BUENOS_AIRES",
            "AMERICA_ARGENTINA_CATAMARCA",
            "AMERICA_ARGENTINA_CORDOBA",
            "AMERICA_ARGENTINA_JUJUY",
            "AMERICA_ARGENTINA_LA_RIOJA",
            "AMERICA_ARGENTINA_MENDOZA",
            "AMERICA_ARGENTINA_RIO_GALLEGOS",
            "AMERICA_ARGENTINA_SALTA",
            "AMERICA_ARGENTINA_SAN_JUAN",
            "AMERICA_ARGENTINA_SAN_LUIS",
            "AMERICA_ARGENTINA_TUCUMAN",
            "AMERICA_ARGENTINA_USHUAIA",
            "AMERICA_CURACAO",
            "AMERICA_ASUNCION",
            "AMERICA_ATIKOKAN",
            "AMERICA_BAHIA",
            "AMERICA_BAHIA_BANDERAS",
            "AMERICA_BARBADOS",
            "AMERICA_BELEM",
            "AMERICA_BELIZE",
            "AMERICA_BLANC_SABLON",
            "AMERICA_BOA_VISTA",
            "AMERICA_BOGOTA",
            "AMERICA_BOISE",
            "AMERICA_CAMBRIDGE_BAY",
            "AMERICA_CAMPO_GRANDE",
            "AMERICA_CANCUN",
            "AMERICA_CARACAS",
            "AMERICA_CAYENNE",
            "AMERICA_CAYMAN",
            "AMERICA_CHICAGO",
            "AMERICA_CHIHUAHUA",
            "AMERICA_COSTA_RICA",
            "AMERICA_CRESTON",
            "AMERICA_CUIABA",
            "AMERICA_DANMARKSHAVN",
            "AMERICA_DAWSON",
            "AMERICA_DAWSON_CREEK",
            "AMERICA_DENVER",
            "AMERICA_DETROIT",
            "AMERICA_EDMONTON",
            "AMERICA_EIRUNEPE",
            "AMERICA_EL_SALVADOR",
            "AMERICA_TIJUANA",
            "AMERICA_INDIANA_INDIANAPOLIS",
            "AMERICA_FORTALEZA",
            "AMERICA_GLACE_BAY",
            "AMERICA_GODTHAB",
            "AMERICA_GOOSE_BAY",
            "AMERICA_GRAND_TURK",
            "AMERICA_GUATEMALA",
            "AMERICA_GUAYAQUIL",
            "AMERICA_GUYANA",
            "AMERICA_HALIFAX",
            "AMERICA_HAVANA",
            "AMERICA_HERMOSILLO",
            "AMERICA_INDIANA_KNOX",
            "AMERICA_INDIANA_MARENGO",
            "AMERICA_INDIANA_PETERSBURG",
            "AMERICA_INDIANA_TELL_CITY",
            "AMERICA_INDIANA_VEVAY",
            "AMERICA_INDIANA_VINCENNES",
            "AMERICA_INDIANA_WINAMAC",
            "AMERICA_INUVIK",
            "AMERICA_IQALUIT",
            "AMERICA_JAMAICA",
            "AMERICA_JUNEAU",
            "AMERICA_KENTUCKY_LOUISVILLE",
            "AMERICA_KENTUCKY_MONTICELLO",
            "AMERICA_LA_PAZ",
            "AMERICA_LIMA",
            "AMERICA_LOS_ANGELES",
            "AMERICA_MACEIO",
            "AMERICA_MANAGUA",
            "AMERICA_MANAUS",
            "AMERICA_MARTINIQUE",
            "AMERICA_MATAMOROS",
            "AMERICA_MAZATLAN",
            "AMERICA_MENOMINEE",
            "AMERICA_MERIDA",
            "AMERICA_METLAKATLA",
            "AMERICA_MEXICO_CITY",
            "AMERICA_MIQUELON",
            "AMERICA_MONCTON",
            "AMERICA_MONTERREY",
            "AMERICA_MONTEVIDEO",
            "AMERICA_MONTREAL",
            "AMERICA_NASSAU",
            "AMERICA_NEW_YORK",
            "AMERICA_NIPIGON",
            "AMERICA_NOME",
            "AMERICA_NORONHA",
            "AMERICA_NORTH_DAKOTA_BEULAH",
            "AMERICA_NORTH_DAKOTA_CENTER",
            "AMERICA_NORTH_DAKOTA_NEW_SALEM",
            "AMERICA_OJINAGA",
            "AMERICA_PANAMA",
            "AMERICA_PANGNIRTUNG",
            "AMERICA_PARAMARIBO",
            "AMERICA_PHOENIX",
            "AMERICA_PORT_AU_PRINCE",
            "AMERICA_RIO_BRANCO",
            "AMERICA_PORTO_VELHO",
            "AMERICA_PUERTO_RICO",
            "AMERICA_RAINY_RIVER",
            "AMERICA_RANKIN_INLET",
            "AMERICA_RECIFE",
            "AMERICA_REGINA",
            "AMERICA_RESOLUTE",
            "AMERICA_SANTA_ISABEL",
            "AMERICA_SANTAREM",
            "AMERICA_SANTIAGO",
            "AMERICA_SANTO_DOMINGO",
            "AMERICA_SAO_PAULO",
            "AMERICA_SCORESBYSUND",
            "AMERICA_SITKA",
            "AMERICA_ST_JOHNS",
            "AMERICA_SWIFT_CURRENT",
            "AMERICA_TEGUCIGALPA",
            "AMERICA_THULE",
            "AMERICA_THUNDER_BAY",
            "AMERICA_TORONTO",
            "AMERICA_VANCOUVER",
            "AMERICA_WHITEHORSE",
            "AMERICA_WINNIPEG",
            "AMERICA_YAKUTAT",
            "AMERICA_YELLOWKNIFE",
            "ANTARCTICA_CASEY",
            "ANTARCTICA_DAVIS",
            "ANTARCTICA_DUMONTDURVILLE",
            "ANTARCTICA_MACQUARIE",
            "ANTARCTICA_MAWSON",
            "PACIFIC_AUCKLAND",
            "ANTARCTICA_PALMER",
            "ANTARCTICA_ROTHERA",
            "ANTARCTICA_SYOWA",
            "ANTARCTICA_TROLL",
            "ANTARCTICA_VOSTOK",
            "EUROPE_OSLO",
            "ASIA_ADEN",
            "ASIA_ALMATY",
            "ASIA_AMMAN",
            "ASIA_ANADYR",
            "ASIA_AQTAU",
            "ASIA_AQTOBE",
            "ASIA_ASHGABAT",
            "ASIA_BAGHDAD",
            "ASIA_BAHRAIN",
            "ASIA_BAKU",
            "ASIA_BANGKOK",
            "ASIA_BEIRUT",
            "ASIA_BISHKEK",
            "ASIA_BRUNEI",
            "ASIA_KOLKATA",
            "ASIA_CHITA",
            "ASIA_CHOIBALSAN",
            "ASIA_SHANGHAI",
            "ASIA_COLOMBO",
            "ASIA_DHAKA",
            "ASIA_DAMASCUS",
            "ASIA_DILI",
            "ASIA_DUBAI",
            "ASIA_DUSHANBE",
            "ASIA_GAZA",
            "ASIA_HEBRON",
            "ASIA_HO_CHI_MINH",
            "ASIA_HONG_KONG",
            "ASIA_HOVD",
            "ASIA_IRKUTSK",
            "EUROPE_ISTANBUL",
            "ASIA_JAKARTA",
            "ASIA_JAYAPURA",
            "ASIA_JERUSALEM",
            "ASIA_KABUL",
            "ASIA_KAMCHATKA",
            "ASIA_KARACHI",
            "ASIA_URUMQI",
            "ASIA_KATHMANDU",
            "ASIA_KHANDYGA",
            "ASIA_KRASNOYARSK",
            "ASIA_KUALA_LUMPUR",
            "ASIA_KUCHING",
            "ASIA_KUWAIT",
            "ASIA_MACAU",
            "ASIA_MAGADAN",
            "ASIA_MAKASSAR",
            "ASIA_MANILA",
            "ASIA_MUSCAT",
            "ASIA_NICOSIA",
            "ASIA_NOVOKUZNETSK",
            "ASIA_NOVOSIBIRSK",
            "ASIA_OMSK",
            "ASIA_ORAL",
            "ASIA_PONTIANAK",
            "ASIA_PYONGYANG",
            "ASIA_QATAR",
            "ASIA_QYZYLORDA",
            "ASIA_RANGOON",
            "ASIA_RIYADH",
            "ASIA_SAKHALIN",
            "ASIA_SAMARKAND",
            "ASIA_SEOUL",
            "ASIA_SINGAPORE",
            "ASIA_SREDNEKOLYMSK",
            "ASIA_TAIPEI",
            "ASIA_TASHKENT",
            "ASIA_TBILISI",
            "ASIA_TEHRAN",
            "ASIA_THIMPHU",
            "ASIA_TOKYO",
            "ASIA_ULAANBAATAR",
            "ASIA_UST_NERA",
            "ASIA_VLADIVOSTOK",
            "ASIA_YAKUTSK",
            "ASIA_YEKATERINBURG",
            "ASIA_YEREVAN",
            "ATLANTIC_AZORES",
            "ATLANTIC_BERMUDA",
            "ATLANTIC_CANARY",
            "ATLANTIC_CAPE_VERDE",
            "ATLANTIC_FAROE",
            "ATLANTIC_MADEIRA",
            "ATLANTIC_REYKJAVIK",
            "ATLANTIC_SOUTH_GEORGIA",
            "ATLANTIC_STANLEY",
            "AUSTRALIA_SYDNEY",
            "AUSTRALIA_ADELAIDE",
            "AUSTRALIA_BRISBANE",
            "AUSTRALIA_BROKEN_HILL",
            "AUSTRALIA_CURRIE",
            "AUSTRALIA_DARWIN",
            "AUSTRALIA_EUCLA",
            "AUSTRALIA_HOBART",
            "AUSTRALIA_LORD_HOWE",
            "AUSTRALIA_LINDEMAN",
            "AUSTRALIA_MELBOURNE",
            "AUSTRALIA_PERTH",
            "CET",
            "CST6CDT",
            "PACIFIC_EASTER",
            "EET",
            "EST",
            "EST5EDT",
            "EUROPE_DUBLIN",
            "ETC_GMT",
            "ETC_GMT_PLUS_1",
            "ETC_GMT_PLUS_10",
            "ETC_GMT_PLUS_11",
            "ETC_GMT_PLUS_12",
            "ETC_GMT_PLUS_2",
            "ETC_GMT_PLUS_3",
            "ETC_GMT_PLUS_4",
            "ETC_GMT_PLUS_5",
            "ETC_GMT_PLUS_6",
            "ETC_GMT_PLUS_7",
            "ETC_GMT_PLUS_8",
            "ETC_GMT_PLUS_9",
            "ETC_GMT_MINUS_1",
            "ETC_GMT_MINUS_10",
            "ETC_GMT_MINUS_11",
            "ETC_GMT_MINUS_12",
            "ETC_GMT_MINUS_13",
            "ETC_GMT_MINUS_14",
            "ETC_GMT_MINUS_2",
            "ETC_GMT_MINUS_3",
            "ETC_GMT_MINUS_4",
            "ETC_GMT_MINUS_5",
            "ETC_GMT_MINUS_6",
            "ETC_GMT_MINUS_7",
            "ETC_GMT_MINUS_8",
            "ETC_GMT_MINUS_9",
            "ETC_UCT",
            "ETC_UTC",
            "EUROPE_AMSTERDAM",
            "EUROPE_ANDORRA",
            "EUROPE_ATHENS",
            "EUROPE_LONDON",
            "EUROPE_BELGRADE",
            "EUROPE_BERLIN",
            "EUROPE_PRAGUE",
            "EUROPE_BRUSSELS",
            "EUROPE_BUCHAREST",
            "EUROPE_BUDAPEST",
            "EUROPE_ZURICH",
            "EUROPE_CHISINAU",
            "EUROPE_COPENHAGEN",
            "EUROPE_GIBRALTAR",
            "EUROPE_HELSINKI",
            "EUROPE_KALININGRAD",
            "EUROPE_KIEV",
            "EUROPE_LISBON",
            "EUROPE_LUXEMBOURG",
            "EUROPE_MADRID",
            "EUROPE_MALTA",
            "EUROPE_MINSK",
            "EUROPE_MONACO",
            "EUROPE_MOSCOW",
            "EUROPE_PARIS",
            "EUROPE_RIGA",
            "EUROPE_ROME",
            "EUROPE_SAMARA",
            "EUROPE_SIMFEROPOL",
            "EUROPE_SOFIA",
            "EUROPE_STOCKHOLM",
            "EUROPE_TALLINN",
            "EUROPE_TIRANE",
            "EUROPE_UZHGOROD",
            "EUROPE_VIENNA",
            "EUROPE_VILNIUS",
            "EUROPE_VOLGOGRAD",
            "EUROPE_WARSAW",
            "EUROPE_ZAPOROZHYE",
            "HST",
            "INDIAN_CHAGOS",
            "INDIAN_CHRISTMAS",
            "INDIAN_COCOS",
            "INDIAN_KERGUELEN",
            "INDIAN_MAHE",
            "INDIAN_MALDIVES",
            "INDIAN_MAURITIUS",
            "INDIAN_REUNION",
            "PACIFIC_KWAJALEIN",
            "MET",
            "MST",
            "MST7MDT",
            "PACIFIC_CHATHAM",
            "PST8PDT",
            "PACIFIC_APIA",
            "PACIFIC_BOUGAINVILLE",
            "PACIFIC_CHUUK",
            "PACIFIC_EFATE",
            "PACIFIC_ENDERBURY",
            "PACIFIC_FAKAOFO",
            "PACIFIC_FIJI",
            "PACIFIC_FUNAFUTI",
            "PACIFIC_GALAPAGOS",
            "PACIFIC_GAMBIER",
            "PACIFIC_GUADALCANAL",
            "PACIFIC_GUAM",
            "PACIFIC_HONOLULU",
            "PACIFIC_KIRITIMATI",
            "PACIFIC_KOSRAE",
            "PACIFIC_MAJURO",
            "PACIFIC_MARQUESAS",
            "PACIFIC_MIDWAY",
            "PACIFIC_NAURU",
            "PACIFIC_NIUE",
            "PACIFIC_NORFOLK",
            "PACIFIC_NOUMEA",
            "PACIFIC_PAGO_PAGO",
            "PACIFIC_PALAU",
            "PACIFIC_PITCAIRN",
            "PACIFIC_POHNPEI",
            "PACIFIC_PORT_MORESBY",
            "PACIFIC_RAROTONGA",
            "PACIFIC_SAIPAN",
            "PACIFIC_TAHITI",
            "PACIFIC_TARAWA",
            "PACIFIC_TONGATAPU",
            "PACIFIC_WAKE",
            "PACIFIC_WALLIS",
            "UTC",
            "WET"
          ],
          "type": "string",
          "xml": {
            "name": "DateTimeZone",
            "namespace": "http://www.casenet.com/DateTimeZone"
          }
        },
        "scheduleItems": {
          "items": {
            "$ref": "#/definitions/TimeInterval"
          },
          "type": "array"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "userTimeZone": {
          "enum": [
            "AFRICA_ABIDJAN",
            "AFRICA_ACCRA",
            "AFRICA_NAIROBI",
            "AFRICA_ALGIERS",
            "AFRICA_LAGOS",
            "AFRICA_BISSAU",
            "AFRICA_MAPUTO",
            "AFRICA_CAIRO",
            "AFRICA_CASABLANCA",
            "AFRICA_CEUTA",
            "AFRICA_EL_AAIUN",
            "AFRICA_JOHANNESBURG",
            "AFRICA_KHARTOUM",
            "AFRICA_MONROVIA",
            "AFRICA_NDJAMENA",
            "AFRICA_TRIPOLI",
            "AFRICA_TUNIS",
            "AFRICA_WINDHOEK",
            "AMERICA_ADAK",
            "AMERICA_ANCHORAGE",
            "AMERICA_PORT_OF_SPAIN",
            "AMERICA_ANTIGUA",
            "AMERICA_ARAGUAINA",
            "AMERICA_ARGENTINA_BUENOS_AIRES",
            "AMERICA_ARGENTINA_CATAMARCA",
            "AMERICA_ARGENTINA_CORDOBA",
            "AMERICA_ARGENTINA_JUJUY",
            "AMERICA_ARGENTINA_LA_RIOJA",
            "AMERICA_ARGENTINA_MENDOZA",
            "AMERICA_ARGENTINA_RIO_GALLEGOS",
            "AMERICA_ARGENTINA_SALTA",
            "AMERICA_ARGENTINA_SAN_JUAN",
            "AMERICA_ARGENTINA_SAN_LUIS",
            "AMERICA_ARGENTINA_TUCUMAN",
            "AMERICA_ARGENTINA_USHUAIA",
            "AMERICA_CURACAO",
            "AMERICA_ASUNCION",
            "AMERICA_ATIKOKAN",
            "AMERICA_BAHIA",
            "AMERICA_BAHIA_BANDERAS",
            "AMERICA_BARBADOS",
            "AMERICA_BELEM",
            "AMERICA_BELIZE",
            "AMERICA_BLANC_SABLON",
            "AMERICA_BOA_VISTA",
            "AMERICA_BOGOTA",
            "AMERICA_BOISE",
            "AMERICA_CAMBRIDGE_BAY",
            "AMERICA_CAMPO_GRANDE",
            "AMERICA_CANCUN",
            "AMERICA_CARACAS",
            "AMERICA_CAYENNE",
            "AMERICA_CAYMAN",
            "AMERICA_CHICAGO",
            "AMERICA_CHIHUAHUA",
            "AMERICA_COSTA_RICA",
            "AMERICA_CRESTON",
            "AMERICA_CUIABA",
            "AMERICA_DANMARKSHAVN",
            "AMERICA_DAWSON",
            "AMERICA_DAWSON_CREEK",
            "AMERICA_DENVER",
            "AMERICA_DETROIT",
            "AMERICA_EDMONTON",
            "AMERICA_EIRUNEPE",
            "AMERICA_EL_SALVADOR",
            "AMERICA_TIJUANA",
            "AMERICA_INDIANA_INDIANAPOLIS",
            "AMERICA_FORTALEZA",
            "AMERICA_GLACE_BAY",
            "AMERICA_GODTHAB",
            "AMERICA_GOOSE_BAY",
            "AMERICA_GRAND_TURK",
            "AMERICA_GUATEMALA",
            "AMERICA_GUAYAQUIL",
            "AMERICA_GUYANA",
            "AMERICA_HALIFAX",
            "AMERICA_HAVANA",
            "AMERICA_HERMOSILLO",
            "AMERICA_INDIANA_KNOX",
            "AMERICA_INDIANA_MARENGO",
            "AMERICA_INDIANA_PETERSBURG",
            "AMERICA_INDIANA_TELL_CITY",
            "AMERICA_INDIANA_VEVAY",
            "AMERICA_INDIANA_VINCENNES",
            "AMERICA_INDIANA_WINAMAC",
            "AMERICA_INUVIK",
            "AMERICA_IQALUIT",
            "AMERICA_JAMAICA",
            "AMERICA_JUNEAU",
            "AMERICA_KENTUCKY_LOUISVILLE",
            "AMERICA_KENTUCKY_MONTICELLO",
            "AMERICA_LA_PAZ",
            "AMERICA_LIMA",
            "AMERICA_LOS_ANGELES",
            "AMERICA_MACEIO",
            "AMERICA_MANAGUA",
            "AMERICA_MANAUS",
            "AMERICA_MARTINIQUE",
            "AMERICA_MATAMOROS",
            "AMERICA_MAZATLAN",
            "AMERICA_MENOMINEE",
            "AMERICA_MERIDA",
            "AMERICA_METLAKATLA",
            "AMERICA_MEXICO_CITY",
            "AMERICA_MIQUELON",
            "AMERICA_MONCTON",
            "AMERICA_MONTERREY",
            "AMERICA_MONTEVIDEO",
            "AMERICA_MONTREAL",
            "AMERICA_NASSAU",
            "AMERICA_NEW_YORK",
            "AMERICA_NIPIGON",
            "AMERICA_NOME",
            "AMERICA_NORONHA",
            "AMERICA_NORTH_DAKOTA_BEULAH",
            "AMERICA_NORTH_DAKOTA_CENTER",
            "AMERICA_NORTH_DAKOTA_NEW_SALEM",
            "AMERICA_OJINAGA",
            "AMERICA_PANAMA",
            "AMERICA_PANGNIRTUNG",
            "AMERICA_PARAMARIBO",
            "AMERICA_PHOENIX",
            "AMERICA_PORT_AU_PRINCE",
            "AMERICA_RIO_BRANCO",
            "AMERICA_PORTO_VELHO",
            "AMERICA_PUERTO_RICO",
            "AMERICA_RAINY_RIVER",
            "AMERICA_RANKIN_INLET",
            "AMERICA_RECIFE",
            "AMERICA_REGINA",
            "AMERICA_RESOLUTE",
            "AMERICA_SANTA_ISABEL",
            "AMERICA_SANTAREM",
            "AMERICA_SANTIAGO",
            "AMERICA_SANTO_DOMINGO",
            "AMERICA_SAO_PAULO",
            "AMERICA_SCORESBYSUND",
            "AMERICA_SITKA",
            "AMERICA_ST_JOHNS",
            "AMERICA_SWIFT_CURRENT",
            "AMERICA_TEGUCIGALPA",
            "AMERICA_THULE",
            "AMERICA_THUNDER_BAY",
            "AMERICA_TORONTO",
            "AMERICA_VANCOUVER",
            "AMERICA_WHITEHORSE",
            "AMERICA_WINNIPEG",
            "AMERICA_YAKUTAT",
            "AMERICA_YELLOWKNIFE",
            "ANTARCTICA_CASEY",
            "ANTARCTICA_DAVIS",
            "ANTARCTICA_DUMONTDURVILLE",
            "ANTARCTICA_MACQUARIE",
            "ANTARCTICA_MAWSON",
            "PACIFIC_AUCKLAND",
            "ANTARCTICA_PALMER",
            "ANTARCTICA_ROTHERA",
            "ANTARCTICA_SYOWA",
            "ANTARCTICA_TROLL",
            "ANTARCTICA_VOSTOK",
            "EUROPE_OSLO",
            "ASIA_ADEN",
            "ASIA_ALMATY",
            "ASIA_AMMAN",
            "ASIA_ANADYR",
            "ASIA_AQTAU",
            "ASIA_AQTOBE",
            "ASIA_ASHGABAT",
            "ASIA_BAGHDAD",
            "ASIA_BAHRAIN",
            "ASIA_BAKU",
            "ASIA_BANGKOK",
            "ASIA_BEIRUT",
            "ASIA_BISHKEK",
            "ASIA_BRUNEI",
            "ASIA_KOLKATA",
            "ASIA_CHITA",
            "ASIA_CHOIBALSAN",
            "ASIA_SHANGHAI",
            "ASIA_COLOMBO",
            "ASIA_DHAKA",
            "ASIA_DAMASCUS",
            "ASIA_DILI",
            "ASIA_DUBAI",
            "ASIA_DUSHANBE",
            "ASIA_GAZA",
            "ASIA_HEBRON",
            "ASIA_HO_CHI_MINH",
            "ASIA_HONG_KONG",
            "ASIA_HOVD",
            "ASIA_IRKUTSK",
            "EUROPE_ISTANBUL",
            "ASIA_JAKARTA",
            "ASIA_JAYAPURA",
            "ASIA_JERUSALEM",
            "ASIA_KABUL",
            "ASIA_KAMCHATKA",
            "ASIA_KARACHI",
            "ASIA_URUMQI",
            "ASIA_KATHMANDU",
            "ASIA_KHANDYGA",
            "ASIA_KRASNOYARSK",
            "ASIA_KUALA_LUMPUR",
            "ASIA_KUCHING",
            "ASIA_KUWAIT",
            "ASIA_MACAU",
            "ASIA_MAGADAN",
            "ASIA_MAKASSAR",
            "ASIA_MANILA",
            "ASIA_MUSCAT",
            "ASIA_NICOSIA",
            "ASIA_NOVOKUZNETSK",
            "ASIA_NOVOSIBIRSK",
            "ASIA_OMSK",
            "ASIA_ORAL",
            "ASIA_PONTIANAK",
            "ASIA_PYONGYANG",
            "ASIA_QATAR",
            "ASIA_QYZYLORDA",
            "ASIA_RANGOON",
            "ASIA_RIYADH",
            "ASIA_SAKHALIN",
            "ASIA_SAMARKAND",
            "ASIA_SEOUL",
            "ASIA_SINGAPORE",
            "ASIA_SREDNEKOLYMSK",
            "ASIA_TAIPEI",
            "ASIA_TASHKENT",
            "ASIA_TBILISI",
            "ASIA_TEHRAN",
            "ASIA_THIMPHU",
            "ASIA_TOKYO",
            "ASIA_ULAANBAATAR",
            "ASIA_UST_NERA",
            "ASIA_VLADIVOSTOK",
            "ASIA_YAKUTSK",
            "ASIA_YEKATERINBURG",
            "ASIA_YEREVAN",
            "ATLANTIC_AZORES",
            "ATLANTIC_BERMUDA",
            "ATLANTIC_CANARY",
            "ATLANTIC_CAPE_VERDE",
            "ATLANTIC_FAROE",
            "ATLANTIC_MADEIRA",
            "ATLANTIC_REYKJAVIK",
            "ATLANTIC_SOUTH_GEORGIA",
            "ATLANTIC_STANLEY",
            "AUSTRALIA_SYDNEY",
            "AUSTRALIA_ADELAIDE",
            "AUSTRALIA_BRISBANE",
            "AUSTRALIA_BROKEN_HILL",
            "AUSTRALIA_CURRIE",
            "AUSTRALIA_DARWIN",
            "AUSTRALIA_EUCLA",
            "AUSTRALIA_HOBART",
            "AUSTRALIA_LORD_HOWE",
            "AUSTRALIA_LINDEMAN",
            "AUSTRALIA_MELBOURNE",
            "AUSTRALIA_PERTH",
            "CET",
            "CST6CDT",
            "PACIFIC_EASTER",
            "EET",
            "EST",
            "EST5EDT",
            "EUROPE_DUBLIN",
            "ETC_GMT",
            "ETC_GMT_PLUS_1",
            "ETC_GMT_PLUS_10",
            "ETC_GMT_PLUS_11",
            "ETC_GMT_PLUS_12",
            "ETC_GMT_PLUS_2",
            "ETC_GMT_PLUS_3",
            "ETC_GMT_PLUS_4",
            "ETC_GMT_PLUS_5",
            "ETC_GMT_PLUS_6",
            "ETC_GMT_PLUS_7",
            "ETC_GMT_PLUS_8",
            "ETC_GMT_PLUS_9",
            "ETC_GMT_MINUS_1",
            "ETC_GMT_MINUS_10",
            "ETC_GMT_MINUS_11",
            "ETC_GMT_MINUS_12",
            "ETC_GMT_MINUS_13",
            "ETC_GMT_MINUS_14",
            "ETC_GMT_MINUS_2",
            "ETC_GMT_MINUS_3",
            "ETC_GMT_MINUS_4",
            "ETC_GMT_MINUS_5",
            "ETC_GMT_MINUS_6",
            "ETC_GMT_MINUS_7",
            "ETC_GMT_MINUS_8",
            "ETC_GMT_MINUS_9",
            "ETC_UCT",
            "ETC_UTC",
            "EUROPE_AMSTERDAM",
            "EUROPE_ANDORRA",
            "EUROPE_ATHENS",
            "EUROPE_LONDON",
            "EUROPE_BELGRADE",
            "EUROPE_BERLIN",
            "EUROPE_PRAGUE",
            "EUROPE_BRUSSELS",
            "EUROPE_BUCHAREST",
            "EUROPE_BUDAPEST",
            "EUROPE_ZURICH",
            "EUROPE_CHISINAU",
            "EUROPE_COPENHAGEN",
            "EUROPE_GIBRALTAR",
            "EUROPE_HELSINKI",
            "EUROPE_KALININGRAD",
            "EUROPE_KIEV",
            "EUROPE_LISBON",
            "EUROPE_LUXEMBOURG",
            "EUROPE_MADRID",
            "EUROPE_MALTA",
            "EUROPE_MINSK",
            "EUROPE_MONACO",
            "EUROPE_MOSCOW",
            "EUROPE_PARIS",
            "EUROPE_RIGA",
            "EUROPE_ROME",
            "EUROPE_SAMARA",
            "EUROPE_SIMFEROPOL",
            "EUROPE_SOFIA",
            "EUROPE_STOCKHOLM",
            "EUROPE_TALLINN",
            "EUROPE_TIRANE",
            "EUROPE_UZHGOROD",
            "EUROPE_VIENNA",
            "EUROPE_VILNIUS",
            "EUROPE_VOLGOGRAD",
            "EUROPE_WARSAW",
            "EUROPE_ZAPOROZHYE",
            "HST",
            "INDIAN_CHAGOS",
            "INDIAN_CHRISTMAS",
            "INDIAN_COCOS",
            "INDIAN_KERGUELEN",
            "INDIAN_MAHE",
            "INDIAN_MALDIVES",
            "INDIAN_MAURITIUS",
            "INDIAN_REUNION",
            "PACIFIC_KWAJALEIN",
            "MET",
            "MST",
            "MST7MDT",
            "PACIFIC_CHATHAM",
            "PST8PDT",
            "PACIFIC_APIA",
            "PACIFIC_BOUGAINVILLE",
            "PACIFIC_CHUUK",
            "PACIFIC_EFATE",
            "PACIFIC_ENDERBURY",
            "PACIFIC_FAKAOFO",
            "PACIFIC_FIJI",
            "PACIFIC_FUNAFUTI",
            "PACIFIC_GALAPAGOS",
            "PACIFIC_GAMBIER",
            "PACIFIC_GUADALCANAL",
            "PACIFIC_GUAM",
            "PACIFIC_HONOLULU",
            "PACIFIC_KIRITIMATI",
            "PACIFIC_KOSRAE",
            "PACIFIC_MAJURO",
            "PACIFIC_MARQUESAS",
            "PACIFIC_MIDWAY",
            "PACIFIC_NAURU",
            "PACIFIC_NIUE",
            "PACIFIC_NORFOLK",
            "PACIFIC_NOUMEA",
            "PACIFIC_PAGO_PAGO",
            "PACIFIC_PALAU",
            "PACIFIC_PITCAIRN",
            "PACIFIC_POHNPEI",
            "PACIFIC_PORT_MORESBY",
            "PACIFIC_RAROTONGA",
            "PACIFIC_SAIPAN",
            "PACIFIC_TAHITI",
            "PACIFIC_TARAWA",
            "PACIFIC_TONGATAPU",
            "PACIFIC_WAKE",
            "PACIFIC_WALLIS",
            "UTC",
            "WET"
          ],
          "type": "string",
          "xml": {
            "name": "DateTimeZone",
            "namespace": "http://www.casenet.com/DateTimeZone"
          }
        }
      },
      "type": "object"
    },
    "UserScheduleCalendarRequest": {
      "properties": {
        "desiredTimeZone": {
          "enum": [
            "AFRICA_ABIDJAN",
            "AFRICA_ACCRA",
            "AFRICA_NAIROBI",
            "AFRICA_ALGIERS",
            "AFRICA_LAGOS",
            "AFRICA_BISSAU",
            "AFRICA_MAPUTO",
            "AFRICA_CAIRO",
            "AFRICA_CASABLANCA",
            "AFRICA_CEUTA",
            "AFRICA_EL_AAIUN",
            "AFRICA_JOHANNESBURG",
            "AFRICA_KHARTOUM",
            "AFRICA_MONROVIA",
            "AFRICA_NDJAMENA",
            "AFRICA_TRIPOLI",
            "AFRICA_TUNIS",
            "AFRICA_WINDHOEK",
            "AMERICA_ADAK",
            "AMERICA_ANCHORAGE",
            "AMERICA_PORT_OF_SPAIN",
            "AMERICA_ANTIGUA",
            "AMERICA_ARAGUAINA",
            "AMERICA_ARGENTINA_BUENOS_AIRES",
            "AMERICA_ARGENTINA_CATAMARCA",
            "AMERICA_ARGENTINA_CORDOBA",
            "AMERICA_ARGENTINA_JUJUY",
            "AMERICA_ARGENTINA_LA_RIOJA",
            "AMERICA_ARGENTINA_MENDOZA",
            "AMERICA_ARGENTINA_RIO_GALLEGOS",
            "AMERICA_ARGENTINA_SALTA",
            "AMERICA_ARGENTINA_SAN_JUAN",
            "AMERICA_ARGENTINA_SAN_LUIS",
            "AMERICA_ARGENTINA_TUCUMAN",
            "AMERICA_ARGENTINA_USHUAIA",
            "AMERICA_CURACAO",
            "AMERICA_ASUNCION",
            "AMERICA_ATIKOKAN",
            "AMERICA_BAHIA",
            "AMERICA_BAHIA_BANDERAS",
            "AMERICA_BARBADOS",
            "AMERICA_BELEM",
            "AMERICA_BELIZE",
            "AMERICA_BLANC_SABLON",
            "AMERICA_BOA_VISTA",
            "AMERICA_BOGOTA",
            "AMERICA_BOISE",
            "AMERICA_CAMBRIDGE_BAY",
            "AMERICA_CAMPO_GRANDE",
            "AMERICA_CANCUN",
            "AMERICA_CARACAS",
            "AMERICA_CAYENNE",
            "AMERICA_CAYMAN",
            "AMERICA_CHICAGO",
            "AMERICA_CHIHUAHUA",
            "AMERICA_COSTA_RICA",
            "AMERICA_CRESTON",
            "AMERICA_CUIABA",
            "AMERICA_DANMARKSHAVN",
            "AMERICA_DAWSON",
            "AMERICA_DAWSON_CREEK",
            "AMERICA_DENVER",
            "AMERICA_DETROIT",
            "AMERICA_EDMONTON",
            "AMERICA_EIRUNEPE",
            "AMERICA_EL_SALVADOR",
            "AMERICA_TIJUANA",
            "AMERICA_INDIANA_INDIANAPOLIS",
            "AMERICA_FORTALEZA",
            "AMERICA_GLACE_BAY",
            "AMERICA_GODTHAB",
            "AMERICA_GOOSE_BAY",
            "AMERICA_GRAND_TURK",
            "AMERICA_GUATEMALA",
            "AMERICA_GUAYAQUIL",
            "AMERICA_GUYANA",
            "AMERICA_HALIFAX",
            "AMERICA_HAVANA",
            "AMERICA_HERMOSILLO",
            "AMERICA_INDIANA_KNOX",
            "AMERICA_INDIANA_MARENGO",
            "AMERICA_INDIANA_PETERSBURG",
            "AMERICA_INDIANA_TELL_CITY",
            "AMERICA_INDIANA_VEVAY",
            "AMERICA_INDIANA_VINCENNES",
            "AMERICA_INDIANA_WINAMAC",
            "AMERICA_INUVIK",
            "AMERICA_IQALUIT",
            "AMERICA_JAMAICA",
            "AMERICA_JUNEAU",
            "AMERICA_KENTUCKY_LOUISVILLE",
            "AMERICA_KENTUCKY_MONTICELLO",
            "AMERICA_LA_PAZ",
            "AMERICA_LIMA",
            "AMERICA_LOS_ANGELES",
            "AMERICA_MACEIO",
            "AMERICA_MANAGUA",
            "AMERICA_MANAUS",
            "AMERICA_MARTINIQUE",
            "AMERICA_MATAMOROS",
            "AMERICA_MAZATLAN",
            "AMERICA_MENOMINEE",
            "AMERICA_MERIDA",
            "AMERICA_METLAKATLA",
            "AMERICA_MEXICO_CITY",
            "AMERICA_MIQUELON",
            "AMERICA_MONCTON",
            "AMERICA_MONTERREY",
            "AMERICA_MONTEVIDEO",
            "AMERICA_MONTREAL",
            "AMERICA_NASSAU",
            "AMERICA_NEW_YORK",
            "AMERICA_NIPIGON",
            "AMERICA_NOME",
            "AMERICA_NORONHA",
            "AMERICA_NORTH_DAKOTA_BEULAH",
            "AMERICA_NORTH_DAKOTA_CENTER",
            "AMERICA_NORTH_DAKOTA_NEW_SALEM",
            "AMERICA_OJINAGA",
            "AMERICA_PANAMA",
            "AMERICA_PANGNIRTUNG",
            "AMERICA_PARAMARIBO",
            "AMERICA_PHOENIX",
            "AMERICA_PORT_AU_PRINCE",
            "AMERICA_RIO_BRANCO",
            "AMERICA_PORTO_VELHO",
            "AMERICA_PUERTO_RICO",
            "AMERICA_RAINY_RIVER",
            "AMERICA_RANKIN_INLET",
            "AMERICA_RECIFE",
            "AMERICA_REGINA",
            "AMERICA_RESOLUTE",
            "AMERICA_SANTA_ISABEL",
            "AMERICA_SANTAREM",
            "AMERICA_SANTIAGO",
            "AMERICA_SANTO_DOMINGO",
            "AMERICA_SAO_PAULO",
            "AMERICA_SCORESBYSUND",
            "AMERICA_SITKA",
            "AMERICA_ST_JOHNS",
            "AMERICA_SWIFT_CURRENT",
            "AMERICA_TEGUCIGALPA",
            "AMERICA_THULE",
            "AMERICA_THUNDER_BAY",
            "AMERICA_TORONTO",
            "AMERICA_VANCOUVER",
            "AMERICA_WHITEHORSE",
            "AMERICA_WINNIPEG",
            "AMERICA_YAKUTAT",
            "AMERICA_YELLOWKNIFE",
            "ANTARCTICA_CASEY",
            "ANTARCTICA_DAVIS",
            "ANTARCTICA_DUMONTDURVILLE",
            "ANTARCTICA_MACQUARIE",
            "ANTARCTICA_MAWSON",
            "PACIFIC_AUCKLAND",
            "ANTARCTICA_PALMER",
            "ANTARCTICA_ROTHERA",
            "ANTARCTICA_SYOWA",
            "ANTARCTICA_TROLL",
            "ANTARCTICA_VOSTOK",
            "EUROPE_OSLO",
            "ASIA_ADEN",
            "ASIA_ALMATY",
            "ASIA_AMMAN",
            "ASIA_ANADYR",
            "ASIA_AQTAU",
            "ASIA_AQTOBE",
            "ASIA_ASHGABAT",
            "ASIA_BAGHDAD",
            "ASIA_BAHRAIN",
            "ASIA_BAKU",
            "ASIA_BANGKOK",
            "ASIA_BEIRUT",
            "ASIA_BISHKEK",
            "ASIA_BRUNEI",
            "ASIA_KOLKATA",
            "ASIA_CHITA",
            "ASIA_CHOIBALSAN",
            "ASIA_SHANGHAI",
            "ASIA_COLOMBO",
            "ASIA_DHAKA",
            "ASIA_DAMASCUS",
            "ASIA_DILI",
            "ASIA_DUBAI",
            "ASIA_DUSHANBE",
            "ASIA_GAZA",
            "ASIA_HEBRON",
            "ASIA_HO_CHI_MINH",
            "ASIA_HONG_KONG",
            "ASIA_HOVD",
            "ASIA_IRKUTSK",
            "EUROPE_ISTANBUL",
            "ASIA_JAKARTA",
            "ASIA_JAYAPURA",
            "ASIA_JERUSALEM",
            "ASIA_KABUL",
            "ASIA_KAMCHATKA",
            "ASIA_KARACHI",
            "ASIA_URUMQI",
            "ASIA_KATHMANDU",
            "ASIA_KHANDYGA",
            "ASIA_KRASNOYARSK",
            "ASIA_KUALA_LUMPUR",
            "ASIA_KUCHING",
            "ASIA_KUWAIT",
            "ASIA_MACAU",
            "ASIA_MAGADAN",
            "ASIA_MAKASSAR",
            "ASIA_MANILA",
            "ASIA_MUSCAT",
            "ASIA_NICOSIA",
            "ASIA_NOVOKUZNETSK",
            "ASIA_NOVOSIBIRSK",
            "ASIA_OMSK",
            "ASIA_ORAL",
            "ASIA_PONTIANAK",
            "ASIA_PYONGYANG",
            "ASIA_QATAR",
            "ASIA_QYZYLORDA",
            "ASIA_RANGOON",
            "ASIA_RIYADH",
            "ASIA_SAKHALIN",
            "ASIA_SAMARKAND",
            "ASIA_SEOUL",
            "ASIA_SINGAPORE",
            "ASIA_SREDNEKOLYMSK",
            "ASIA_TAIPEI",
            "ASIA_TASHKENT",
            "ASIA_TBILISI",
            "ASIA_TEHRAN",
            "ASIA_THIMPHU",
            "ASIA_TOKYO",
            "ASIA_ULAANBAATAR",
            "ASIA_UST_NERA",
            "ASIA_VLADIVOSTOK",
            "ASIA_YAKUTSK",
            "ASIA_YEKATERINBURG",
            "ASIA_YEREVAN",
            "ATLANTIC_AZORES",
            "ATLANTIC_BERMUDA",
            "ATLANTIC_CANARY",
            "ATLANTIC_CAPE_VERDE",
            "ATLANTIC_FAROE",
            "ATLANTIC_MADEIRA",
            "ATLANTIC_REYKJAVIK",
            "ATLANTIC_SOUTH_GEORGIA",
            "ATLANTIC_STANLEY",
            "AUSTRALIA_SYDNEY",
            "AUSTRALIA_ADELAIDE",
            "AUSTRALIA_BRISBANE",
            "AUSTRALIA_BROKEN_HILL",
            "AUSTRALIA_CURRIE",
            "AUSTRALIA_DARWIN",
            "AUSTRALIA_EUCLA",
            "AUSTRALIA_HOBART",
            "AUSTRALIA_LORD_HOWE",
            "AUSTRALIA_LINDEMAN",
            "AUSTRALIA_MELBOURNE",
            "AUSTRALIA_PERTH",
            "CET",
            "CST6CDT",
            "PACIFIC_EASTER",
            "EET",
            "EST",
            "EST5EDT",
            "EUROPE_DUBLIN",
            "ETC_GMT",
            "ETC_GMT_PLUS_1",
            "ETC_GMT_PLUS_10",
            "ETC_GMT_PLUS_11",
            "ETC_GMT_PLUS_12",
            "ETC_GMT_PLUS_2",
            "ETC_GMT_PLUS_3",
            "ETC_GMT_PLUS_4",
            "ETC_GMT_PLUS_5",
            "ETC_GMT_PLUS_6",
            "ETC_GMT_PLUS_7",
            "ETC_GMT_PLUS_8",
            "ETC_GMT_PLUS_9",
            "ETC_GMT_MINUS_1",
            "ETC_GMT_MINUS_10",
            "ETC_GMT_MINUS_11",
            "ETC_GMT_MINUS_12",
            "ETC_GMT_MINUS_13",
            "ETC_GMT_MINUS_14",
            "ETC_GMT_MINUS_2",
            "ETC_GMT_MINUS_3",
            "ETC_GMT_MINUS_4",
            "ETC_GMT_MINUS_5",
            "ETC_GMT_MINUS_6",
            "ETC_GMT_MINUS_7",
            "ETC_GMT_MINUS_8",
            "ETC_GMT_MINUS_9",
            "ETC_UCT",
            "ETC_UTC",
            "EUROPE_AMSTERDAM",
            "EUROPE_ANDORRA",
            "EUROPE_ATHENS",
            "EUROPE_LONDON",
            "EUROPE_BELGRADE",
            "EUROPE_BERLIN",
            "EUROPE_PRAGUE",
            "EUROPE_BRUSSELS",
            "EUROPE_BUCHAREST",
            "EUROPE_BUDAPEST",
            "EUROPE_ZURICH",
            "EUROPE_CHISINAU",
            "EUROPE_COPENHAGEN",
            "EUROPE_GIBRALTAR",
            "EUROPE_HELSINKI",
            "EUROPE_KALININGRAD",
            "EUROPE_KIEV",
            "EUROPE_LISBON",
            "EUROPE_LUXEMBOURG",
            "EUROPE_MADRID",
            "EUROPE_MALTA",
            "EUROPE_MINSK",
            "EUROPE_MONACO",
            "EUROPE_MOSCOW",
            "EUROPE_PARIS",
            "EUROPE_RIGA",
            "EUROPE_ROME",
            "EUROPE_SAMARA",
            "EUROPE_SIMFEROPOL",
            "EUROPE_SOFIA",
            "EUROPE_STOCKHOLM",
            "EUROPE_TALLINN",
            "EUROPE_TIRANE",
            "EUROPE_UZHGOROD",
            "EUROPE_VIENNA",
            "EUROPE_VILNIUS",
            "EUROPE_VOLGOGRAD",
            "EUROPE_WARSAW",
            "EUROPE_ZAPOROZHYE",
            "HST",
            "INDIAN_CHAGOS",
            "INDIAN_CHRISTMAS",
            "INDIAN_COCOS",
            "INDIAN_KERGUELEN",
            "INDIAN_MAHE",
            "INDIAN_MALDIVES",
            "INDIAN_MAURITIUS",
            "INDIAN_REUNION",
            "PACIFIC_KWAJALEIN",
            "MET",
            "MST",
            "MST7MDT",
            "PACIFIC_CHATHAM",
            "PST8PDT",
            "PACIFIC_APIA",
            "PACIFIC_BOUGAINVILLE",
            "PACIFIC_CHUUK",
            "PACIFIC_EFATE",
            "PACIFIC_ENDERBURY",
            "PACIFIC_FAKAOFO",
            "PACIFIC_FIJI",
            "PACIFIC_FUNAFUTI",
            "PACIFIC_GALAPAGOS",
            "PACIFIC_GAMBIER",
            "PACIFIC_GUADALCANAL",
            "PACIFIC_GUAM",
            "PACIFIC_HONOLULU",
            "PACIFIC_KIRITIMATI",
            "PACIFIC_KOSRAE",
            "PACIFIC_MAJURO",
            "PACIFIC_MARQUESAS",
            "PACIFIC_MIDWAY",
            "PACIFIC_NAURU",
            "PACIFIC_NIUE",
            "PACIFIC_NORFOLK",
            "PACIFIC_NOUMEA",
            "PACIFIC_PAGO_PAGO",
            "PACIFIC_PALAU",
            "PACIFIC_PITCAIRN",
            "PACIFIC_POHNPEI",
            "PACIFIC_PORT_MORESBY",
            "PACIFIC_RAROTONGA",
            "PACIFIC_SAIPAN",
            "PACIFIC_TAHITI",
            "PACIFIC_TARAWA",
            "PACIFIC_TONGATAPU",
            "PACIFIC_WAKE",
            "PACIFIC_WALLIS",
            "UTC",
            "WET"
          ],
          "type": "string",
          "xml": {
            "name": "DateTimeZone",
            "namespace": "http://www.casenet.com/DateTimeZone"
          }
        },
        "endDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "originalTimeZone": {
          "enum": [
            "AFRICA_ABIDJAN",
            "AFRICA_ACCRA",
            "AFRICA_NAIROBI",
            "AFRICA_ALGIERS",
            "AFRICA_LAGOS",
            "AFRICA_BISSAU",
            "AFRICA_MAPUTO",
            "AFRICA_CAIRO",
            "AFRICA_CASABLANCA",
            "AFRICA_CEUTA",
            "AFRICA_EL_AAIUN",
            "AFRICA_JOHANNESBURG",
            "AFRICA_KHARTOUM",
            "AFRICA_MONROVIA",
            "AFRICA_NDJAMENA",
            "AFRICA_TRIPOLI",
            "AFRICA_TUNIS",
            "AFRICA_WINDHOEK",
            "AMERICA_ADAK",
            "AMERICA_ANCHORAGE",
            "AMERICA_PORT_OF_SPAIN",
            "AMERICA_ANTIGUA",
            "AMERICA_ARAGUAINA",
            "AMERICA_ARGENTINA_BUENOS_AIRES",
            "AMERICA_ARGENTINA_CATAMARCA",
            "AMERICA_ARGENTINA_CORDOBA",
            "AMERICA_ARGENTINA_JUJUY",
            "AMERICA_ARGENTINA_LA_RIOJA",
            "AMERICA_ARGENTINA_MENDOZA",
            "AMERICA_ARGENTINA_RIO_GALLEGOS",
            "AMERICA_ARGENTINA_SALTA",
            "AMERICA_ARGENTINA_SAN_JUAN",
            "AMERICA_ARGENTINA_SAN_LUIS",
            "AMERICA_ARGENTINA_TUCUMAN",
            "AMERICA_ARGENTINA_USHUAIA",
            "AMERICA_CURACAO",
            "AMERICA_ASUNCION",
            "AMERICA_ATIKOKAN",
            "AMERICA_BAHIA",
            "AMERICA_BAHIA_BANDERAS",
            "AMERICA_BARBADOS",
            "AMERICA_BELEM",
            "AMERICA_BELIZE",
            "AMERICA_BLANC_SABLON",
            "AMERICA_BOA_VISTA",
            "AMERICA_BOGOTA",
            "AMERICA_BOISE",
            "AMERICA_CAMBRIDGE_BAY",
            "AMERICA_CAMPO_GRANDE",
            "AMERICA_CANCUN",
            "AMERICA_CARACAS",
            "AMERICA_CAYENNE",
            "AMERICA_CAYMAN",
            "AMERICA_CHICAGO",
            "AMERICA_CHIHUAHUA",
            "AMERICA_COSTA_RICA",
            "AMERICA_CRESTON",
            "AMERICA_CUIABA",
            "AMERICA_DANMARKSHAVN",
            "AMERICA_DAWSON",
            "AMERICA_DAWSON_CREEK",
            "AMERICA_DENVER",
            "AMERICA_DETROIT",
            "AMERICA_EDMONTON",
            "AMERICA_EIRUNEPE",
            "AMERICA_EL_SALVADOR",
            "AMERICA_TIJUANA",
            "AMERICA_INDIANA_INDIANAPOLIS",
            "AMERICA_FORTALEZA",
            "AMERICA_GLACE_BAY",
            "AMERICA_GODTHAB",
            "AMERICA_GOOSE_BAY",
            "AMERICA_GRAND_TURK",
            "AMERICA_GUATEMALA",
            "AMERICA_GUAYAQUIL",
            "AMERICA_GUYANA",
            "AMERICA_HALIFAX",
            "AMERICA_HAVANA",
            "AMERICA_HERMOSILLO",
            "AMERICA_INDIANA_KNOX",
            "AMERICA_INDIANA_MARENGO",
            "AMERICA_INDIANA_PETERSBURG",
            "AMERICA_INDIANA_TELL_CITY",
            "AMERICA_INDIANA_VEVAY",
            "AMERICA_INDIANA_VINCENNES",
            "AMERICA_INDIANA_WINAMAC",
            "AMERICA_INUVIK",
            "AMERICA_IQALUIT",
            "AMERICA_JAMAICA",
            "AMERICA_JUNEAU",
            "AMERICA_KENTUCKY_LOUISVILLE",
            "AMERICA_KENTUCKY_MONTICELLO",
            "AMERICA_LA_PAZ",
            "AMERICA_LIMA",
            "AMERICA_LOS_ANGELES",
            "AMERICA_MACEIO",
            "AMERICA_MANAGUA",
            "AMERICA_MANAUS",
            "AMERICA_MARTINIQUE",
            "AMERICA_MATAMOROS",
            "AMERICA_MAZATLAN",
            "AMERICA_MENOMINEE",
            "AMERICA_MERIDA",
            "AMERICA_METLAKATLA",
            "AMERICA_MEXICO_CITY",
            "AMERICA_MIQUELON",
            "AMERICA_MONCTON",
            "AMERICA_MONTERREY",
            "AMERICA_MONTEVIDEO",
            "AMERICA_MONTREAL",
            "AMERICA_NASSAU",
            "AMERICA_NEW_YORK",
            "AMERICA_NIPIGON",
            "AMERICA_NOME",
            "AMERICA_NORONHA",
            "AMERICA_NORTH_DAKOTA_BEULAH",
            "AMERICA_NORTH_DAKOTA_CENTER",
            "AMERICA_NORTH_DAKOTA_NEW_SALEM",
            "AMERICA_OJINAGA",
            "AMERICA_PANAMA",
            "AMERICA_PANGNIRTUNG",
            "AMERICA_PARAMARIBO",
            "AMERICA_PHOENIX",
            "AMERICA_PORT_AU_PRINCE",
            "AMERICA_RIO_BRANCO",
            "AMERICA_PORTO_VELHO",
            "AMERICA_PUERTO_RICO",
            "AMERICA_RAINY_RIVER",
            "AMERICA_RANKIN_INLET",
            "AMERICA_RECIFE",
            "AMERICA_REGINA",
            "AMERICA_RESOLUTE",
            "AMERICA_SANTA_ISABEL",
            "AMERICA_SANTAREM",
            "AMERICA_SANTIAGO",
            "AMERICA_SANTO_DOMINGO",
            "AMERICA_SAO_PAULO",
            "AMERICA_SCORESBYSUND",
            "AMERICA_SITKA",
            "AMERICA_ST_JOHNS",
            "AMERICA_SWIFT_CURRENT",
            "AMERICA_TEGUCIGALPA",
            "AMERICA_THULE",
            "AMERICA_THUNDER_BAY",
            "AMERICA_TORONTO",
            "AMERICA_VANCOUVER",
            "AMERICA_WHITEHORSE",
            "AMERICA_WINNIPEG",
            "AMERICA_YAKUTAT",
            "AMERICA_YELLOWKNIFE",
            "ANTARCTICA_CASEY",
            "ANTARCTICA_DAVIS",
            "ANTARCTICA_DUMONTDURVILLE",
            "ANTARCTICA_MACQUARIE",
            "ANTARCTICA_MAWSON",
            "PACIFIC_AUCKLAND",
            "ANTARCTICA_PALMER",
            "ANTARCTICA_ROTHERA",
            "ANTARCTICA_SYOWA",
            "ANTARCTICA_TROLL",
            "ANTARCTICA_VOSTOK",
            "EUROPE_OSLO",
            "ASIA_ADEN",
            "ASIA_ALMATY",
            "ASIA_AMMAN",
            "ASIA_ANADYR",
            "ASIA_AQTAU",
            "ASIA_AQTOBE",
            "ASIA_ASHGABAT",
            "ASIA_BAGHDAD",
            "ASIA_BAHRAIN",
            "ASIA_BAKU",
            "ASIA_BANGKOK",
            "ASIA_BEIRUT",
            "ASIA_BISHKEK",
            "ASIA_BRUNEI",
            "ASIA_KOLKATA",
            "ASIA_CHITA",
            "ASIA_CHOIBALSAN",
            "ASIA_SHANGHAI",
            "ASIA_COLOMBO",
            "ASIA_DHAKA",
            "ASIA_DAMASCUS",
            "ASIA_DILI",
            "ASIA_DUBAI",
            "ASIA_DUSHANBE",
            "ASIA_GAZA",
            "ASIA_HEBRON",
            "ASIA_HO_CHI_MINH",
            "ASIA_HONG_KONG",
            "ASIA_HOVD",
            "ASIA_IRKUTSK",
            "EUROPE_ISTANBUL",
            "ASIA_JAKARTA",
            "ASIA_JAYAPURA",
            "ASIA_JERUSALEM",
            "ASIA_KABUL",
            "ASIA_KAMCHATKA",
            "ASIA_KARACHI",
            "ASIA_URUMQI",
            "ASIA_KATHMANDU",
            "ASIA_KHANDYGA",
            "ASIA_KRASNOYARSK",
            "ASIA_KUALA_LUMPUR",
            "ASIA_KUCHING",
            "ASIA_KUWAIT",
            "ASIA_MACAU",
            "ASIA_MAGADAN",
            "ASIA_MAKASSAR",
            "ASIA_MANILA",
            "ASIA_MUSCAT",
            "ASIA_NICOSIA",
            "ASIA_NOVOKUZNETSK",
            "ASIA_NOVOSIBIRSK",
            "ASIA_OMSK",
            "ASIA_ORAL",
            "ASIA_PONTIANAK",
            "ASIA_PYONGYANG",
            "ASIA_QATAR",
            "ASIA_QYZYLORDA",
            "ASIA_RANGOON",
            "ASIA_RIYADH",
            "ASIA_SAKHALIN",
            "ASIA_SAMARKAND",
            "ASIA_SEOUL",
            "ASIA_SINGAPORE",
            "ASIA_SREDNEKOLYMSK",
            "ASIA_TAIPEI",
            "ASIA_TASHKENT",
            "ASIA_TBILISI",
            "ASIA_TEHRAN",
            "ASIA_THIMPHU",
            "ASIA_TOKYO",
            "ASIA_ULAANBAATAR",
            "ASIA_UST_NERA",
            "ASIA_VLADIVOSTOK",
            "ASIA_YAKUTSK",
            "ASIA_YEKATERINBURG",
            "ASIA_YEREVAN",
            "ATLANTIC_AZORES",
            "ATLANTIC_BERMUDA",
            "ATLANTIC_CANARY",
            "ATLANTIC_CAPE_VERDE",
            "ATLANTIC_FAROE",
            "ATLANTIC_MADEIRA",
            "ATLANTIC_REYKJAVIK",
            "ATLANTIC_SOUTH_GEORGIA",
            "ATLANTIC_STANLEY",
            "AUSTRALIA_SYDNEY",
            "AUSTRALIA_ADELAIDE",
            "AUSTRALIA_BRISBANE",
            "AUSTRALIA_BROKEN_HILL",
            "AUSTRALIA_CURRIE",
            "AUSTRALIA_DARWIN",
            "AUSTRALIA_EUCLA",
            "AUSTRALIA_HOBART",
            "AUSTRALIA_LORD_HOWE",
            "AUSTRALIA_LINDEMAN",
            "AUSTRALIA_MELBOURNE",
            "AUSTRALIA_PERTH",
            "CET",
            "CST6CDT",
            "PACIFIC_EASTER",
            "EET",
            "EST",
            "EST5EDT",
            "EUROPE_DUBLIN",
            "ETC_GMT",
            "ETC_GMT_PLUS_1",
            "ETC_GMT_PLUS_10",
            "ETC_GMT_PLUS_11",
            "ETC_GMT_PLUS_12",
            "ETC_GMT_PLUS_2",
            "ETC_GMT_PLUS_3",
            "ETC_GMT_PLUS_4",
            "ETC_GMT_PLUS_5",
            "ETC_GMT_PLUS_6",
            "ETC_GMT_PLUS_7",
            "ETC_GMT_PLUS_8",
            "ETC_GMT_PLUS_9",
            "ETC_GMT_MINUS_1",
            "ETC_GMT_MINUS_10",
            "ETC_GMT_MINUS_11",
            "ETC_GMT_MINUS_12",
            "ETC_GMT_MINUS_13",
            "ETC_GMT_MINUS_14",
            "ETC_GMT_MINUS_2",
            "ETC_GMT_MINUS_3",
            "ETC_GMT_MINUS_4",
            "ETC_GMT_MINUS_5",
            "ETC_GMT_MINUS_6",
            "ETC_GMT_MINUS_7",
            "ETC_GMT_MINUS_8",
            "ETC_GMT_MINUS_9",
            "ETC_UCT",
            "ETC_UTC",
            "EUROPE_AMSTERDAM",
            "EUROPE_ANDORRA",
            "EUROPE_ATHENS",
            "EUROPE_LONDON",
            "EUROPE_BELGRADE",
            "EUROPE_BERLIN",
            "EUROPE_PRAGUE",
            "EUROPE_BRUSSELS",
            "EUROPE_BUCHAREST",
            "EUROPE_BUDAPEST",
            "EUROPE_ZURICH",
            "EUROPE_CHISINAU",
            "EUROPE_COPENHAGEN",
            "EUROPE_GIBRALTAR",
            "EUROPE_HELSINKI",
            "EUROPE_KALININGRAD",
            "EUROPE_KIEV",
            "EUROPE_LISBON",
            "EUROPE_LUXEMBOURG",
            "EUROPE_MADRID",
            "EUROPE_MALTA",
            "EUROPE_MINSK",
            "EUROPE_MONACO",
            "EUROPE_MOSCOW",
            "EUROPE_PARIS",
            "EUROPE_RIGA",
            "EUROPE_ROME",
            "EUROPE_SAMARA",
            "EUROPE_SIMFEROPOL",
            "EUROPE_SOFIA",
            "EUROPE_STOCKHOLM",
            "EUROPE_TALLINN",
            "EUROPE_TIRANE",
            "EUROPE_UZHGOROD",
            "EUROPE_VIENNA",
            "EUROPE_VILNIUS",
            "EUROPE_VOLGOGRAD",
            "EUROPE_WARSAW",
            "EUROPE_ZAPOROZHYE",
            "HST",
            "INDIAN_CHAGOS",
            "INDIAN_CHRISTMAS",
            "INDIAN_COCOS",
            "INDIAN_KERGUELEN",
            "INDIAN_MAHE",
            "INDIAN_MALDIVES",
            "INDIAN_MAURITIUS",
            "INDIAN_REUNION",
            "PACIFIC_KWAJALEIN",
            "MET",
            "MST",
            "MST7MDT",
            "PACIFIC_CHATHAM",
            "PST8PDT",
            "PACIFIC_APIA",
            "PACIFIC_BOUGAINVILLE",
            "PACIFIC_CHUUK",
            "PACIFIC_EFATE",
            "PACIFIC_ENDERBURY",
            "PACIFIC_FAKAOFO",
            "PACIFIC_FIJI",
            "PACIFIC_FUNAFUTI",
            "PACIFIC_GALAPAGOS",
            "PACIFIC_GAMBIER",
            "PACIFIC_GUADALCANAL",
            "PACIFIC_GUAM",
            "PACIFIC_HONOLULU",
            "PACIFIC_KIRITIMATI",
            "PACIFIC_KOSRAE",
            "PACIFIC_MAJURO",
            "PACIFIC_MARQUESAS",
            "PACIFIC_MIDWAY",
            "PACIFIC_NAURU",
            "PACIFIC_NIUE",
            "PACIFIC_NORFOLK",
            "PACIFIC_NOUMEA",
            "PACIFIC_PAGO_PAGO",
            "PACIFIC_PALAU",
            "PACIFIC_PITCAIRN",
            "PACIFIC_POHNPEI",
            "PACIFIC_PORT_MORESBY",
            "PACIFIC_RAROTONGA",
            "PACIFIC_SAIPAN",
            "PACIFIC_TAHITI",
            "PACIFIC_TARAWA",
            "PACIFIC_TONGATAPU",
            "PACIFIC_WAKE",
            "PACIFIC_WALLIS",
            "UTC",
            "WET"
          ],
          "type": "string",
          "xml": {
            "name": "DateTimeZone",
            "namespace": "http://www.casenet.com/DateTimeZone"
          }
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "userIds": {
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "originalTimeZone",
        "userIds"
      ],
      "type": "object"
    },
    "UserSearchCriteria": {
      "properties": {
        "bhpNodeFeedIdFullPath": {
          "type": "string"
        },
        "excludeDisabled": {
          "default": false,
          "type": "boolean"
        },
        "excludedUserTypes": {
          "items": {
            "enum": [
              "TRUCARE",
              "PROVIDER_PORTAL",
              "API",
              "MOBILE",
              "SYSTEM"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "firstName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "lastName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "sortColumns": {
          "items": {
            "$ref": "#/definitions/UserSortField"
          },
          "type": "array"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "userName": {
          "$ref": "#/definitions/StringCriteria"
        }
      },
      "type": "object",
      "xml": {
        "name": "UserSearchCriteria",
        "namespace": "http://www.casenet.com/UserSearchCriteria"
      }
    },
    "UserSearchCriteriaV2": {
      "properties": {
        "excludedUserIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "excludedUserTypes": {
          "items": {
            "enum": [
              "TRUCARE",
              "PROVIDER_PORTAL",
              "API",
              "MOBILE",
              "SYSTEM"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "firstName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "gotoLastPage": {
          "type": "boolean"
        },
        "lastName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "length": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "memberIds": {
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        },
        "showDisabledUsers": {
          "type": "boolean"
        },
        "startIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "userName": {
          "$ref": "#/definitions/StringCriteria"
        },
        "viewArtifactType": {
          "enum": [
            "AUTHORIZATION",
            "CAREPLAN",
            "CASE",
            "QUALITYINCIDENT",
            "TASK"
          ],
          "type": "string"
        },
        "viewDiagnosisType": {
          "items": {
            "enum": [
              "BEHAVIORAL_DSMIV",
              "MEDICAL",
              "BEHAVIORAL_DSM5"
            ],
            "type": "string",
            "xml": {
              "name": "UMDiagnosisType",
              "namespace": "http://www.casenet.com/UMDiagnosisType"
            }
          },
          "type": "array",
          "uniqueItems": true
        },
        "viewUMAuthorizationType": {
          "items": {
            "enum": [
              "INPATIENT",
              "SP",
              "RX"
            ],
            "type": "string",
            "xml": {
              "name": "UMAuthorizationType",
              "namespace": "http://www.casenet.com/UMAuthorizationType"
            }
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "memberIds"
      ],
      "type": "object",
      "xml": {
        "name": "SearchCriteria",
        "namespace": "http://www.casenet.com/SearchCriteria"
      }
    },
    "UserSearchResult": {
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "userType": {
          "enum": [
            "TRUCARE",
            "PROVIDER_PORTAL",
            "API",
            "MOBILE",
            "SYSTEM"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "UserSearchResult",
        "namespace": "http://www.casenet.com/UserSearchResult"
      }
    },
    "UserSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "FIRST_NAME",
            "LAST_NAME",
            "USER_NAME"
          ],
          "type": "string",
          "xml": {
            "name": "UserSortColumn",
            "namespace": "http://www.casenet.com/UserSortColumn"
          }
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "UserSortField",
        "namespace": "http://www.casenet.com/UserSortField"
      }
    },
    "ValidationResult": {
      "properties": {
        "arrayValidationResults": {
          "additionalProperties": {
            "additionalProperties": {
              "$ref": "#/definitions/ValidationResult"
            },
            "type": "object"
          },
          "type": "object"
        },
        "fieldErrorMessages": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "objectValidationResults": {
          "additionalProperties": {
            "$ref": "#/definitions/ValidationResult"
          },
          "type": "object"
        }
      },
      "type": "object",
      "xml": {
        "name": "ValidationResult",
        "namespace": "http://www.casenet.com/ValidationResult"
      }
    },
    "VersionedPhoneNumber": {
      "properties": {
        "alpha2Code": {
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "formattedPhoneNumber": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "phoneCountryCode": {
          "maxLength": 3,
          "minLength": 0,
          "pattern": "^[0-9]*$",
          "type": "string"
        },
        "phoneExtension": {
          "maxLength": 7,
          "minLength": 0,
          "pattern": "^[0-9]*$",
          "type": "string"
        },
        "phoneExtensionString": {
          "type": "string"
        },
        "phoneNumber": {
          "pattern": "^[0-9]+$",
          "type": "string"
        },
        "phoneNumberString": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "alpha2Code",
        "phoneNumber"
      ],
      "type": "object",
      "xml": {
        "name": "VersionedPhoneNumber",
        "namespace": "http://www.casenet.com/VersionedPhoneNumber"
      }
    },
    "VettingQuestion": {
      "properties": {
        "answer": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "question": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "answer",
        "question"
      ],
      "type": "object",
      "xml": {
        "name": "VettingQuestion",
        "namespace": "http://www.casenet.com/VettingQuestion"
      }
    },
    "VoidAuthorizationDiagnosis": {
      "properties": {
        "diagnosisCodeIdSet": {
          "items": {
            "$ref": "#/definitions/AuthorizationDiagnosisCode"
          },
          "type": "array",
          "uniqueItems": true
        },
        "primaryAdmittingDiagnosisId": {
          "$ref": "#/definitions/AuthorizationDiagnosisCode"
        }
      },
      "type": "object",
      "xml": {
        "name": "VoidAuthorizationDiagnosis",
        "namespace": "http://www.casenet.com/VoidAuthorizationDiagnosis"
      }
    },
    "VoidAuthorizationDiagnosisCode": {
      "properties": {
        "diagnosisCodeNaturalId": {
          "$ref": "#/definitions/DiagnosisCodeNaturalId"
        },
        "voidReasonOption": {
          "type": "string"
        },
        "voidReasonOther": {
          "type": "string"
        }
      },
      "required": [
        "voidReasonOption"
      ],
      "type": "object",
      "xml": {
        "name": "VoidAuthorizationDiagnosisCode",
        "namespace": "http://www.casenet.com/VoidAuthorizationDiagnosisCode"
      }
    },
    "VoidAuthorizationDiagnosisRequest": {
      "properties": {
        "voidAuthorizationDiagnosisCodes": {
          "items": {
            "$ref": "#/definitions/VoidAuthorizationDiagnosisCode"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "voidAuthorizationDiagnosisCodes"
      ],
      "type": "object",
      "xml": {
        "name": "VoidAuthorizationDiagnosisRequest",
        "namespace": "http://www.casenet.com/VoidAuthorizationDiagnosisRequest"
      }
    },
    "VoidAuthorizationRequest": {
      "properties": {
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "explanationOption": {
          "type": "string"
        }
      },
      "required": [
        "authorizationVersion"
      ],
      "type": "object",
      "xml": {
        "name": "VoidAuthorizationRequest",
        "namespace": "http://www.casenet.com/VoidAuthorizationRequest"
      }
    },
    "VoidAuthorizationResponse": {
      "properties": {
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "warningMessage": {
          "enum": [
            "AUTOMATED_LETTER_WARNING"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "VoidAuthorizationResponse",
        "namespace": "http://www.casenet.com/VoidAuthorizationResponse"
      }
    },
    "VoidConfig": {
      "properties": {
        "defaultVoidReasonOptionValue": {
          "$ref": "#/definitions/OptionValue"
        },
        "voidReasonFieldLabel": {
          "type": "string"
        },
        "voidReasonOptionValues": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array"
        },
        "voidReasonRequired": {
          "type": "boolean"
        }
      },
      "type": "object",
      "xml": {
        "name": "VoidConfig",
        "namespace": "http://www.casenet.com/VoidConfig"
      }
    },
    "VoidHcsWaiverEnrollmentRequest": {
      "properties": {
        "authorizedByUsername": {
          "type": "string"
        },
        "detail": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueRequestObject"
          },
          "type": "object"
        },
        "taskAssigneeRequest": {
          "$ref": "#/definitions/TaskAssigneeRequest"
        },
        "taskPackageId": {
          "type": "string"
        },
        "voidReasonOption": {
          "type": "string"
        },
        "voidReasonOther": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "authorizedByUsername",
        "voidReasonOption"
      ],
      "type": "object",
      "xml": {
        "name": "VoidRequest2",
        "namespace": "http://www.casenet.com/VoidRequest2"
      }
    },
    "VoidInfo": {
      "properties": {
        "authorizedBy": {
          "$ref": "#/definitions/User"
        },
        "detail": {
          "type": "string"
        },
        "reason": {
          "$ref": "#/definitions/OptionValue"
        },
        "reasonOther": {
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        },
        "voidDate": {
          "format": "date-time",
          "type": "string"
        },
        "voidReasonTxt": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "VoidInternalLetterRequest": {
      "properties": {
        "detail": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "voidDate": {
          "format": "date-time",
          "type": "string"
        },
        "voidReasonOption": {
          "type": "string"
        },
        "voidReasonOther": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "voidDate",
        "voidReasonOption"
      ],
      "type": "object",
      "xml": {
        "name": "VoidInternalLetterRequest",
        "namespace": "http://www.casenet.com/VoidInternalLetterRequest"
      }
    },
    "VoidLetterRequest": {
      "properties": {
        "detail": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "reasonOptionValueId": {
          "type": "string"
        },
        "voidDate": {
          "format": "date-time",
          "type": "string"
        },
        "voidReasonOther": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "reasonOptionValueId",
        "voidDate"
      ],
      "type": "object",
      "xml": {
        "name": "VoidLetterRequest",
        "namespace": "http://www.casenet.com/VoidLetterRequest"
      }
    },
    "VoidLineItemAuthorizationResponse": {
      "properties": {
        "authorizationVersion": {
          "format": "int32",
          "type": "integer"
        },
        "lineItemVersion": {
          "format": "int32",
          "type": "integer"
        },
        "warningMessage": {
          "enum": [
            "AUTOMATED_LETTER_WARNING"
          ],
          "type": "string"
        }
      },
      "required": [
        "authorizationVersion",
        "lineItemVersion"
      ],
      "type": "object",
      "xml": {
        "name": "VoidLineItemAuthorizationResponse",
        "namespace": "http://www.casenet.com/VoidLineItemAuthorizationResponse"
      }
    },
    "VoidMedicationRequest": {
      "properties": {
        "medicationRequestIds": {
          "items": {
            "$ref": "#/definitions/MedicationIdRequest"
          },
          "maxItems": 2147483647,
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "medicationRequestIds"
      ],
      "type": "object"
    },
    "VoidRequest": {
      "properties": {
        "authorizedById": {
          "type": "string"
        },
        "detail": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "voidReasonOption": {
          "type": "string"
        },
        "voidReasonOptionValueId": {
          "type": "string"
        },
        "voidReasonOther": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "authorizedById"
      ],
      "type": "object",
      "xml": {
        "name": "VoidRequest",
        "namespace": "http://www.casenet.com/VoidRequest"
      }
    },
    "VoidRequest2": {
      "properties": {
        "authorizedByUsername": {
          "type": "string"
        },
        "detail": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "voidReasonOption": {
          "type": "string"
        },
        "voidReasonOther": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "authorizedByUsername",
        "voidReasonOption"
      ],
      "type": "object",
      "xml": {
        "name": "VoidRequest2",
        "namespace": "http://www.casenet.com/VoidRequest2"
      }
    },
    "VoidRequestBase": {
      "properties": {
        "detail": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "voidReasonOption": {
          "type": "string"
        },
        "voidReasonOther": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "voidReasonOption"
      ],
      "type": "object",
      "xml": {
        "name": "VoidRequestBase",
        "namespace": "http://www.casenet.com/VoidRequestBase"
      }
    },
    "WaiverEnrollment": {
      "properties": {
        "appliedEligibility": {
          "$ref": "#/definitions/Eligibility"
        },
        "appliedEligibilityId": {
          "type": "string"
        },
        "caseIdentity": {
          "$ref": "#/definitions/CaseIdentity"
        },
        "closeDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "closeReason": {
          "$ref": "#/definitions/OptionValue"
        },
        "closeReasonOther": {
          "type": "string"
        },
        "cnCase": {
          "$ref": "#/definitions/CnCaseLite"
        },
        "enrollmentDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "status": {
          "enum": [
            "ACTIVE",
            "CLOSED",
            "HISTORICAL",
            "SCHEDULED",
            "VOIDED"
          ],
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/User"
        },
        "updatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voidInfo": {
          "$ref": "#/definitions/VoidInfo"
        },
        "waiverEnrollmentDetails": {
          "items": {
            "$ref": "#/definitions/WaiverEnrollmentDetails"
          },
          "type": "array"
        }
      },
      "type": "object",
      "xml": {
        "name": "WaiverEnrollment",
        "namespace": "http://www.casenet.com/WaiverEnrollment"
      }
    },
    "WaiverEnrollmentDetails": {
      "properties": {
        "extendedAttributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValueObject"
          },
          "type": "object"
        },
        "fundingSource": {
          "$ref": "#/definitions/OptionValue"
        },
        "id": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/LocalDate"
        },
        "stateClassifications": {
          "items": {
            "$ref": "#/definitions/OptionValue"
          },
          "type": "array",
          "uniqueItems": true
        },
        "status": {
          "enum": [
            "ACTIVE",
            "CLOSED",
            "HISTORICAL",
            "SCHEDULED",
            "VOIDED"
          ],
          "type": "string"
        },
        "team": {
          "$ref": "#/definitions/TeamInfo"
        },
        "teamName": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "xml": {
        "name": "WaiverEnrollmentDetails",
        "namespace": "http://www.casenet.com/WaiverEnrollmentDetails"
      }
    },
    "WaiverEnrollmentSummarySearchSortField": {
      "properties": {
        "columnType": {
          "enum": [
            "ENROLLMENT_DATE",
            "APPLIED_ELIGIBILITY",
            "CLOSE_DATE",
            "CLOSE_REASON",
            "CASE_NUMBER",
            "CASE_NAME",
            "STATUS"
          ],
          "type": "string"
        },
        "sortType": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string",
          "xml": {
            "name": "SortType",
            "namespace": "http://www.casenet.com/SortType"
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "SortField",
        "namespace": "http://www.casenet.com/SortField"
      }
    }
  },
  "info": {
    "title": "TruCare API",
    "version": "${trucareApiVersion}"
  },
  "paths": {
    "/aag-configurations/aag-types": {
      "get": {
        "description": "${description/aag/getAagTypes.html}",
        "operationId": "getAagTypesForBhpPath",
        "parameters": [
          {
            "description": "The member BHP node feed ID full path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BhpNodeNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/OptionValue"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the AAG types",
        "tags": [
          "aags"
        ]
      }
    },
    "/aag-configurations/aag-types/{aagTypeValue}": {
      "get": {
        "description": "${description/aag/getAagDefinition.html}",
        "operationId": "getAagDefinitionForAagTypeAndBhpPath",
        "parameters": [
          {
            "description": "The AAG Type Value, obtainable from get AAG Types",
            "in": "path",
            "name": "aagTypeValue",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member BHP node feed ID full path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AagDefinition"
            }
          }
        },
        "summary": "Gets the AAG configuration",
        "tags": [
          "aags"
        ]
      }
    },
    "/address-configurations": {
      "get": {
        "description": "${description/addresses/getAddressConfigurations.html}",
        "operationId": "getAddressConfigurations",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "Country Alpha2 Code",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "alpha2Code",
            "type": "array",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AddressConfiguration"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get address configurations by country codes",
        "tags": [
          "contacts"
        ]
      }
    },
    "/admin/bhp-nodes": {
      "get": {
        "description": "${description/admin/getBhpNode.html}",
        "operationId": "getBhpNode",
        "parameters": [
          {
            "description": "The BHP node feed ID full path. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BhpNodeNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/BhpNode"
            }
          }
        },
        "summary": "Find a BhpNode by full feed Id path",
        "tags": [
          "admin"
        ]
      }
    },
    "/admin/system-logo": {
      "get": {
        "description": "${description/admin/systemLogo.html}",
        "operationId": "systemLogo-internal_1",
        "parameters": [],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "default": {
            "schema": {
              "properties": {
                "allowedMethods": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "uniqueItems": true
                },
                "cookies": {
                  "additionalProperties": {
                    "properties": {
                      "comment": {
                        "type": "string"
                      },
                      "domain": {
                        "type": "string"
                      },
                      "expiry": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "httpOnly": {
                        "type": "boolean"
                      },
                      "maxAge": {
                        "format": "int32",
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "path": {
                        "type": "string"
                      },
                      "secure": {
                        "type": "boolean"
                      },
                      "value": {
                        "type": "string"
                      },
                      "version": {
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "object"
                },
                "date": {
                  "format": "date-time",
                  "type": "string"
                },
                "entity": {
                  "type": "object"
                },
                "entityTag": {
                  "properties": {
                    "value": {
                      "type": "string"
                    },
                    "weak": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "headers": {
                  "additionalProperties": {
                    "items": {
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "language": {
                  "properties": {
                    "country": {
                      "type": "string"
                    },
                    "displayCountry": {
                      "type": "string"
                    },
                    "displayLanguage": {
                      "type": "string"
                    },
                    "displayName": {
                      "type": "string"
                    },
                    "displayScript": {
                      "type": "string"
                    },
                    "displayVariant": {
                      "type": "string"
                    },
                    "extensionKeys": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "iso3Country": {
                      "type": "string"
                    },
                    "iso3Language": {
                      "type": "string"
                    },
                    "language": {
                      "type": "string"
                    },
                    "script": {
                      "type": "string"
                    },
                    "unicodeLocaleAttributes": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "unicodeLocaleKeys": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "variant": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "lastModified": {
                  "format": "date-time",
                  "type": "string"
                },
                "length": {
                  "format": "int32",
                  "type": "integer"
                },
                "links": {
                  "items": {
                    "properties": {
                      "params": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "rel": {
                        "type": "string"
                      },
                      "rels": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "title": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "uri": {
                        "format": "uri",
                        "type": "string"
                      },
                      "uriBuilder": {
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array",
                  "uniqueItems": true
                },
                "location": {
                  "format": "uri",
                  "type": "string"
                },
                "mediaType": {
                  "properties": {
                    "parameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "type": "object"
                    },
                    "subtype": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "wildcardSubtype": {
                      "type": "boolean"
                    },
                    "wildcardType": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "metadata": {
                  "additionalProperties": {
                    "items": {
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "status": {
                  "format": "int32",
                  "type": "integer"
                },
                "statusInfo": {
                  "properties": {
                    "family": {
                      "enum": [
                        "INFORMATIONAL",
                        "SUCCESSFUL",
                        "REDIRECTION",
                        "CLIENT_ERROR",
                        "SERVER_ERROR",
                        "OTHER"
                      ],
                      "type": "string"
                    },
                    "reasonPhrase": {
                      "type": "string"
                    },
                    "statusCode": {
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "stringHeaders": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Finds a system logo",
        "tags": [
          "admin"
        ]
      }
    },
    "/admin/system-properties": {
      "get": {
        "description": "${description/admin/getSystemPropertyValue.html}",
        "operationId": "getSystemPropertyValue-internal",
        "parameters": [
          {
            "description": "The property key ",
            "enum": [
              "ANALYTICS_URL",
              "ALLOW_CAPTURING_ADDRESS_FOR_AUTHORIZATION_SPECIFIC_CONTACT",
              "PROVIDER_SEARCH_ELIGIBILITY"
            ],
            "in": "query",
            "name": "propertyKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NonUniqueResultException}"
          },
          "404": {
            "description": "${PropertyNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Gets the system property value based on the property key",
        "tags": [
          "admin"
        ]
      },
      "post": {
        "description": "${description/admin/postSystemProperty.html}",
        "operationId": "editSystemProperty-internal",
        "parameters": [
          {
            "description": "The property Key",
            "in": "query",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The property Value",
            "in": "query",
            "name": "value",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "summary": "Edits a system property. Only for testing purposes.",
        "tags": [
          "admin"
        ]
      }
    },
    "/allergy-configuration": {
      "get": {
        "deprecated": true,
        "description": "${description/allergies/getAllergyConfiguration.html}",
        "operationId": "getAllergyConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/AllergyConfiguration"
            }
          }
        },
        "summary": "Gets the allergy configuration (Deprecated)",
        "tags": [
          "allergies"
        ]
      }
    },
    "/appeal-configuration": {
      "get": {
        "description": "${description/appeals/getAppealConfiguration.html}",
        "operationId": "getAuthorizationAppealConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationAppealConfiguration"
            }
          }
        },
        "summary": "Get the configuration for creating an appeal",
        "tags": [
          "appeals"
        ]
      }
    },
    "/appeal-configuration/tasks-bhp-configuration": {
      "get": {
        "description": "${description/appeals/getAppealTasksBhpConfiguration.html}",
        "operationId": "getAppealTasksBhpConfiguration-internal",
        "parameters": [
          {
            "description": "The BHP node feed ID full path. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${BhpNodeNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AppealTasksBhpConfiguration"
            }
          }
        },
        "summary": "Retrieve the Appeal Tasks information configured for the BhpNode",
        "tags": [
          "appeals"
        ]
      }
    },
    "/assessment-configuration": {
      "get": {
        "description": "${description/assessments/getAssessmentConfiguration.html}",
        "operationId": "getAssessmentConfiguration-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/AssessmentConfiguration"
            }
          }
        },
        "summary": "Get information about that if MCG is enabled for Assessments",
        "tags": [
          "assessments"
        ]
      }
    },
    "/assessment-metas/general-assessments/available-metas": {
      "get": {
        "description": "${description/assessments/getGeneralAssessmentMetas.html}",
        "operationId": "getGeneralAssessmentMetas-internal",
        "parameters": [
          {
            "description": "The member BHP node Feed ID Full Path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${BhpNodeNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AssessmentMetaLite"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get the available general assessments available at the provided BHP node",
        "tags": [
          "assessments"
        ]
      }
    },
    "/assessment-metas/question-groups/{assessmentQuestionGroupId}": {
      "get": {
        "description": "${description/assessment-metas/getAssessmentQuestionGroup.html}",
        "operationId": "getAssessmentQuestionGroup",
        "parameters": [
          {
            "description": "ID of the assessment question group that needs to be fetched",
            "in": "path",
            "name": "assessmentQuestionGroupId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ThirdPartyContentAccessDeniedException}"
          },
          "404": {
            "description": "${AssessmentQuestionGroupDefinitionNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AssessmentQuestionGroupDefinition"
            }
          }
        },
        "summary": "Find assessment question group by ID",
        "tags": [
          "assessments"
        ]
      }
    },
    "/assessment-metas/question-groups/{assessmentQuestionGroupId}/all-questions": {
      "get": {
        "description": "${description/assessment-metas/getAllAssessmentQuestionsForAssessmentQuestionGroup.html}",
        "operationId": "getAllAssessmentQuestionsForAssessmentQuestionGroup-internal",
        "parameters": [
          {
            "description": "ID of the assessment question group for which questions are requested",
            "in": "path",
            "name": "assessmentQuestionGroupId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AssessmentQuestionDefinition"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns list of all questions for a question group",
        "tags": [
          "assessments"
        ]
      }
    },
    "/assessment-metas/question-groups/{assessmentQuestionGroupId}/questions": {
      "get": {
        "description": "${description/assessment-metas/getQuestionsForAssessmentQuestionGroup.html}",
        "operationId": "getAssessmentQuestionsForAssessmentQuestionGroup",
        "parameters": [
          {
            "description": "ID of the assessment question group for which questions are requested",
            "in": "path",
            "name": "assessmentQuestionGroupId",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "Starting offset for questions to be loaded. Offset numbering starts with zero.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": 20,
            "description": "Maximum number of questions to be loaded. Fewer than the specified limit will be loaded if the end of the question group is reached.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${AssessmentQuestionGroupDefinitionNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AssessmentQuestionDefinition"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns a list of questions for a question group",
        "tags": [
          "assessments"
        ]
      }
    },
    "/assessment-metas/specialty-assessments/available-metas": {
      "get": {
        "description": "${description/assessments/getAvailableSpecialties.html}",
        "operationId": "getAssessmentMetas-internal",
        "parameters": [
          {
            "default": "root",
            "description": "The member BHP node Feed ID Full Path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${BhpNodeNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AssessmentMetaLite"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the available speciality assessments metas",
        "tags": [
          "assessments"
        ]
      }
    },
    "/assessment-metas/{assessmentMetaId}": {
      "get": {
        "description": "${description/assessments/getFullAssessmentMeta.html}",
        "operationId": "getFullAssessmentMeta-internal",
        "parameters": [
          {
            "description": "ID of the assessment meta",
            "in": "path",
            "name": "assessmentMetaId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "If true and assessment meta is an MCG one, we return the latest version of it, otherwise we return Assessment Meta by its id",
            "in": "query",
            "name": "getLatestMcgVersion",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AssessmentMetaSourceException}"
          },
          "404": {
            "description": "${AssessmentMetaNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AssessmentMetaFull"
              },
              "type": "array"
            }
          }
        },
        "summary": "Search for AssessmentMeta",
        "tags": [
          "assessments"
        ]
      }
    },
    "/assessment-metas/{assessmentMetaId}/bhp-configuration": {
      "get": {
        "description": "${description/assessments/getAssessmentBhpConfiguration.html}",
        "operationId": "getAssessmentBhpConfiguration-internal",
        "parameters": [
          {
            "description": "ID of the assessment meta for which BHP configurations are requested",
            "in": "path",
            "name": "assessmentMetaId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member BHP node Feed ID Full Path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AssessmentMetaStatusException}"
          },
          "404": {
            "description": "${AssessmentMetaNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AssessmentBhpSetupLite"
            }
          }
        },
        "summary": "Get the BHP configuration for an assessment",
        "tags": [
          "assessments"
        ]
      }
    },
    "/assessment-metas/{assessmentMetaId}/programs": {
      "get": {
        "description": "${description/assessment-metas/getAvailablePrograms.html}",
        "operationId": "getAvailablePrograms",
        "parameters": [
          {
            "description": "ID of the assessment type for which available programs are requested",
            "in": "path",
            "name": "assessmentMetaId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${AssessmentMetaNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Program"
              },
              "type": "array"
            }
          }
        },
        "summary": "Find available programs for program enrollment",
        "tags": [
          "assessments"
        ]
      }
    },
    "/assessment-metas/{assessmentMetaId}/programs-v2": {
      "get": {
        "description": "${description/assessment-metas/getAvailableProgramsV2.html}",
        "operationId": "getAvailableProgramsV2-internal",
        "parameters": [
          {
            "description": "ID of the assessment type for which available programs are requested",
            "in": "path",
            "name": "assessmentMetaId",
            "required": true,
            "type": "string"
          },
          {
            "default": "root",
            "description": "The member BHP node Feed ID Full Path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${AssessmentMetaNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ProgramFull"
              },
              "type": "array"
            }
          }
        },
        "summary": "Find available programs for program enrollment",
        "tags": [
          "assessments"
        ]
      }
    },
    "/authorization-claims-acceptance-requests/{claimRequestId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/claim/updateClaimAcceptance.html}",
        "operationId": "updateClaimAcceptance",
        "parameters": [
          {
            "description": "Request ID of the claim",
            "in": "path",
            "name": "claimRequestId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Claims acceptance message",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClaimAcceptance"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${ClaimRequestNotFoundException}"
          }
        },
        "summary": "Updates the acceptance status of a claim",
        "tags": [
          "claims"
        ]
      }
    },
    "/authorization-global-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postAuthorizationGlobalSearch.html}",
        "operationId": "globalSearchAuthorizations-internal",
        "parameters": [
          {
            "default": false,
            "description": "Indicates whether draft authorizations are included in the results. Draft authorizations are not returned by default",
            "in": "query",
            "name": "includeDrafts",
            "type": "boolean"
          },
          {
            "description": "The maximum number of authorizations. If value is less or equal 0, it is defaulted to the value specified in the property DEFAULT_SEARCH_MAX_RESULTS.",
            "format": "int32",
            "in": "query",
            "name": "max",
            "type": "integer"
          },
          {
            "description": "The search criteria for authorizations",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationGlobalSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationGlobalSearchResults"
            }
          }
        },
        "summary": "Performs a search for authorizations",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/authorization-global-search-configuration": {
      "get": {
        "description": "${description/authorizations/getAuthorizationGlobalSearchConfiguration.html}",
        "operationId": "getAuthorizationGlobalSearchConfiguration-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationGlobalSearchConfiguration"
            }
          }
        },
        "summary": "Gets the authorization search configuration",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/authorizations-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations-search/postAuthorizationSearch.html}",
        "operationId": "searchAuthorizations",
        "parameters": [
          {
            "default": false,
            "description": "Indicates whether draft authorizations are included in the results. Draft authorizations are not returned by default",
            "in": "query",
            "name": "includeDrafts",
            "type": "boolean"
          },
          {
            "description": "The search criteria for authorizations",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationSearchResults"
            }
          }
        },
        "summary": "Performs a search for authorizations",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/bhp-node-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/bhp/searchBhpNode.html}",
        "operationId": "searchBhpNodes-internal",
        "parameters": [
          {
            "description": "The search criteria for bhp nodes",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BhpNodeCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/BhpNodeSearchResults"
            }
          }
        },
        "summary": "Search for bhp nodes",
        "tags": [
          "bhp-nodes"
        ]
      }
    },
    "/bhp-nodes/{bhpNodeFeedIdFullPath}/authorization-configuration": {
      "get": {
        "description": "${description/bhp/getAuthorizationBhpConfiguration.html}",
        "operationId": "getAuthorizationConfiguration_2",
        "parameters": [
          {
            "description": "The BHP node feed ID full path.",
            "in": "path",
            "name": "bhpNodeFeedIdFullPath",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationBhpConfiguration"
            }
          }
        },
        "summary": "Returns the Inpatient, Service Procedure and Rx authorization configuration for the requested BHP node",
        "tags": [
          "bhp-nodes"
        ]
      }
    },
    "/bhp-nodes/{bhpNodeFeedIdFullPath}/care-plans-configuration": {
      "get": {
        "description": "${description/bhp/getCarePlanBhpConfiguration.html}",
        "operationId": "getCarePlanBhpConfiguration-internal",
        "parameters": [
          {
            "description": "The BHP node feed ID full path.",
            "in": "path",
            "name": "bhpNodeFeedIdFullPath",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${BhpNodeNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CarePlanBhpConfiguration"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get the configuration for care plans based on the BHP node",
        "tags": [
          "bhp-nodes"
        ]
      }
    },
    "/bhp-nodes/{bhpNodeFeedIdFullPath}/currency-configuration": {
      "get": {
        "description": "${description/bhp/getCurrencyConfiguration.html}",
        "operationId": "getCurrencyConfiguration-internal",
        "parameters": [
          {
            "description": "The BHP node feed ID full path.",
            "in": "path",
            "name": "bhpNodeFeedIdFullPath",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${BhpNodeNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CurrencyBhpConfiguration"
            }
          }
        },
        "summary": "Retrieve the currency information configured for the BhpNode",
        "tags": [
          "bhp-nodes"
        ]
      }
    },
    "/bhp-nodes/{bhpNodeFeedIdFullPath}/default-country": {
      "get": {
        "description": "${description/bhp/getDefaultCountry.html}",
        "operationId": "getDefaultCountryByBhpFeedPath-internal",
        "parameters": [
          {
            "description": "The BHP node feed ID full path.",
            "in": "path",
            "name": "bhpNodeFeedIdFullPath",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/Country"
            }
          }
        },
        "summary": "Retrieve the default country configured for the BhpNode",
        "tags": [
          "bhp-nodes"
        ]
      }
    },
    "/cancel-mcg-request": {
      "post": {
        "description": "${description/assessments/postCancelMcgRequest.html}",
        "operationId": "cancelMcgRequest-internal",
        "parameters": [],
        "responses": {
          "400": {
            "description": "${NoHttpSessionForMcgRequestException}"
          }
        },
        "summary": "Cancel an ongoing MCG connection stored in the user's HTTP session",
        "tags": [
          "assessments"
        ]
      }
    },
    "/care-opportunity-configuration": {
      "get": {
        "description": "${description/care-opportunity-configuration/getCareOpportunityConfiguration.html}",
        "operationId": "getCareOpportunityConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/CareOpportunityConfiguration"
            }
          }
        },
        "summary": "Get the Care Opportunities configuration",
        "tags": [
          "care-opportunities"
        ]
      }
    },
    "/care-plans-configuration": {
      "get": {
        "description": "${description/care-plan/getCarePlanConfiguration.html}",
        "operationId": "getCarePlanConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/PortableConfiguration"
            }
          }
        },
        "summary": "Returns the configuration for care plans",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/care-plans-configuration-v2": {
      "get": {
        "description": "${description/care-plan/getCarePlanConfiguration2.html}",
        "operationId": "getCarePlanConfiguration-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/CarePlanConfiguration"
            }
          }
        },
        "summary": "Get the configuration for care plans",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/care-plans-configuration/action-definitions/{definitionId}": {
      "get": {
        "description": "${description/care-plan/getActionDefinition.html}",
        "operationId": "getActionDefinition-internal",
        "parameters": [
          {
            "description": "Action definition id",
            "in": "path",
            "name": "definitionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${CarePlanElementDefinitionException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ActionDefinition"
            }
          }
        },
        "summary": "Get action definition",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/care-plans-configuration/definitions/{carePlanDefinitionId}": {
      "get": {
        "description": "${description/care-plan/getCarePlanDefinition.html}",
        "operationId": "getCarePlanDefinition-internal",
        "parameters": [
          {
            "description": "Care plan definition id",
            "in": "path",
            "name": "carePlanDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${NotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CarePlanDefinitionNode"
            }
          }
        },
        "summary": "Get care plan definition",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/care-plans-configuration/objective-definitions/{definitionId}": {
      "get": {
        "description": "${description/care-plan/getObjectiveDefinition.html}",
        "operationId": "getObjectiveDefinition-internal",
        "parameters": [
          {
            "description": "Objective definition id",
            "in": "path",
            "name": "definitionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${CarePlanElementDefinitionException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ObjectiveDefinition"
            }
          }
        },
        "summary": "Get objective definition",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/care-plans-configuration/problem-definitions/{definitionId}": {
      "get": {
        "description": "${description/care-plan/getProblemDefinition.html}",
        "operationId": "getProblemDefinition-internal",
        "parameters": [
          {
            "description": "Problem definition id",
            "in": "path",
            "name": "definitionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${CarePlanElementDefinitionException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ProblemDefinition"
            }
          }
        },
        "summary": "Get problem definition",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/care-plans-configuration/problem-definitions/{definitionId}/note-definitions": {
      "get": {
        "description": "${description/care-plan/getNoteDefinitions.html}",
        "operationId": "getProblemNoteDefinitions-internal",
        "parameters": [
          {
            "description": "Problem definition id",
            "in": "path",
            "name": "definitionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${CarePlanElementDefinitionException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/NoteDefinition"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get note definitions for the problem definition",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/care-plans/action-definitions-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/care-plan/postActionDefinitionSearch.html}",
        "operationId": "searchActionDefinitions-internal",
        "parameters": [
          {
            "description": "The search criteria for actions",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionDefinitionSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ActionDefinitionSearchResults"
            }
          }
        },
        "summary": "Search the care plan's actions ",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/care-plans/objective-definitions-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/care-plan/postObjectiveDefinitionSearch.html}",
        "operationId": "searchObjectiveDefinitions-internal",
        "parameters": [
          {
            "description": "The search criteria for objectives",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectiveDefinitionSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${OptionValueNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ObjectiveDefinitionSearchResults"
            }
          }
        },
        "summary": "Search the care plan's objectives ",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/care-plans/problem-definitions-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/care-plan/postProblemDefinitionSearch.html}",
        "operationId": "searchProblemDefinitions-internal",
        "parameters": [
          {
            "description": "The search criteria for problems",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProblemDefinitionSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ProblemDefinitionSearchResults"
            }
          }
        },
        "summary": "Search the care plan's problems ",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/case-configuration": {
      "get": {
        "description": "${description/cases/getCaseConfiguration.html}",
        "operationId": "getCaseConfiguration",
        "parameters": [
          {
            "default": "ADD",
            "description": "The user action for case",
            "enum": [
              "ADD",
              "ADD_AND_ASSIGN",
              "EDIT",
              "CLOSE",
              "REOPEN",
              "GET"
            ],
            "in": "query",
            "name": "caseAction",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member BHP node feed ID full path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/CaseConfiguration"
            }
          }
        },
        "summary": "Gets the configuration for a case",
        "tags": [
          "cases"
        ]
      }
    },
    "/coach-search-configuration": {
      "get": {
        "description": "${description/coach/coachSearchConfiguration.html}",
        "operationId": "getCoachSearchConfiguration-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ExtendedAttributesConfiguration"
            }
          }
        },
        "summary": "Returns all Coach Search Configuration",
        "tags": [
          "coach-internal"
        ]
      }
    },
    "/company-group-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/users/postCompanyGroupSearch.html}",
        "operationId": "companyGroupSearch-internal",
        "parameters": [
          {
            "description": "The company group search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyGroupSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CompanyGroupSearchResults"
            }
          }
        },
        "summary": "Perform a company group search",
        "tags": [
          "users"
        ]
      }
    },
    "/concurrent-review-configuration/bhp-configuration": {
      "get": {
        "description": "${description/authorizations/getConcurrentReviewConfiguration.html}",
        "operationId": "getConcurrentReviewConfiguration-internal",
        "parameters": [
          {
            "description": "The member BHP node Feed ID Full Path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BhpNodeNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ConcurrentReviewConfiguration"
            }
          }
        },
        "summary": "Gets the member's Concurrent Review BHP configuration",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/configuration/allergy": {
      "get": {
        "description": "${description/allergies/getPropertyBasedAllergyConfiguration.html}",
        "operationId": "getAllergyConfiguration_1",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/PortableConfiguration"
            }
          }
        },
        "summary": "Gets the allergy configuration",
        "tags": [
          "allergies"
        ]
      }
    },
    "/configuration/birth-events": {
      "get": {
        "description": "${description/birthevent/birthEventConfiguration.html}",
        "operationId": "getBirthEventConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ExtendedAttributesConfiguration"
            }
          }
        },
        "summary": "Gets the birth event configuration",
        "tags": [
          "birth-events"
        ]
      }
    },
    "/correspondence-configuration": {
      "get": {
        "description": "${description/correspondence/getCorrespondenceConfiguration.html}",
        "operationId": "getDistributedCorrespondenceConfiguration-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/CorrespondenceConfiguration"
            }
          }
        },
        "summary": "Check if distributed correspondence is enabled",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/cost-savings-configuration": {
      "get": {
        "description": "${description/costsavings/getCostSavingsConfiguration.html}",
        "operationId": "getCostSavingsConfiguration-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/CostSavingsConfiguration"
            }
          }
        },
        "summary": "Get the configuration for creating an cost savings",
        "tags": [
          "cost-savings"
        ]
      }
    },
    "/cost-savings-configuration/bhp-configuration": {
      "get": {
        "description": "${description/costsavings/getCostSavingsBhpConfiguration.html}",
        "operationId": "getCostSavingsBhpConfiguration-internal",
        "parameters": [
          {
            "description": "The BHP node feed ID full path. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${BhpNodeNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CostSavingsBhpConfiguration"
            }
          }
        },
        "summary": "Retrieve the Cost Savings information configured for the BhpNode",
        "tags": [
          "cost-savings"
        ]
      }
    },
    "/cost-savings-definitions/{costSavingsTypeId}": {
      "get": {
        "description": "${description/costsavings/getCostSavingsDefBySavingType.html}",
        "operationId": "getCostSavingsDefBySavingsType-internal",
        "parameters": [
          {
            "description": "The Cost Savings Type Id",
            "in": "path",
            "name": "costSavingsTypeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${OptionValueNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CostSavingsDefinition"
            }
          }
        },
        "summary": "Get the cost saving definition by saving type",
        "tags": [
          "cost-savings"
        ]
      }
    },
    "/cost-savings-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/costsavings/postCostSavingsSearch.html}",
        "operationId": "searchCostSavings",
        "parameters": [
          {
            "description": "Cost savings search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CostSavingsSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CostSavingsSearchResults"
            }
          }
        },
        "summary": "Performs a search for cost savings",
        "tags": [
          "cost-savings"
        ]
      }
    },
    "/cost-savings-search-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/costsavings/postCostSavingsSearchV2.html}",
        "operationId": "searchCostSavings-internal",
        "parameters": [
          {
            "description": "Cost savings search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CostSavingsSearchAdvancedCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CostSavingsSearchResults"
            }
          }
        },
        "summary": "Performs a search for cost savings",
        "tags": [
          "cost-savings"
        ]
      }
    },
    "/countries": {
      "get": {
        "description": "${description/countries/getCountries.html}",
        "operationId": "getCountries",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Country"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve all the countries supported",
        "tags": [
          "contacts"
        ]
      }
    },
    "/create-pdf": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/pdf/createPdf.html}",
        "operationId": "createPdf-internal",
        "parameters": [
          {
            "description": "Information to create PDF",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePdfRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteInstanceDoesNotBelongToMemberException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates PDF files",
        "tags": [
          "documents"
        ]
      }
    },
    "/create-pdf-file": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/pdf-file/createPdfFile.html}",
        "operationId": "createPdfFile-internal",
        "parameters": [
          {
            "description": "Information to create PDF",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePdfRequest"
            }
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {}
        },
        "summary": "Creates PDF files",
        "tags": [
          "documents"
        ]
      }
    },
    "/determination-configuration": {
      "get": {
        "description": "${description/authorizations/getDeterminationConfiguration.html}",
        "operationId": "getDeterminationConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/DeterminationConfiguration"
            }
          }
        },
        "summary": "Gets the configuration to create a determination",
        "tags": [
          "determinations"
        ]
      }
    },
    "/diagnosis-codes": {
      "get": {
        "description": "${description/diagnosis-codes/search.html}",
        "operationId": "diagnosisCodeSearch",
        "parameters": [
          {
            "description": "Matches a substring from the diagnosis name field",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "default": "BEGINS_WITH",
            "description": "Change search mode for Diagnosis name.",
            "enum": [
              "BEGINS_WITH",
              "CONTAINS",
              "EQUALS"
            ],
            "in": "query",
            "name": "nameSearchType",
            "type": "string"
          },
          {
            "description": "Matches the diagnosis code field",
            "in": "query",
            "name": "code",
            "type": "string"
          },
          {
            "default": "BEGINS_WITH",
            "description": "Change search mode for Diagnosis code.",
            "enum": [
              "BEGINS_WITH",
              "CONTAINS",
              "EQUALS"
            ],
            "in": "query",
            "name": "codeSearchType",
            "type": "string"
          },
          {
            "description": "The type of diagnosis code",
            "enum": [
              "ICD9",
              "ICD10"
            ],
            "in": "query",
            "name": "diagnosisCodeType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/DiagnosisCode"
              },
              "type": "array"
            }
          }
        },
        "summary": "Search for diagnosis codes",
        "tags": [
          "diagnosis-codes"
        ]
      }
    },
    "/diagnosis-codes-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/diagnosis-codes/postDiagnosisSearch.html}",
        "operationId": "searchDiagnosisCodes-internal",
        "parameters": [
          {
            "description": "The diagnosis search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnosisCodeSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/DiagnosisCodeSearchResults"
            }
          }
        },
        "summary": "Search for diagnosis codes",
        "tags": [
          "diagnosis-codes"
        ]
      }
    },
    "/diagnosis-configuration": {
      "get": {
        "description": "${description/diagnoses/getDiagnosisConfiguration.html}",
        "operationId": "getDiagnosisConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ExtendedAttributesConfiguration"
            }
          }
        },
        "summary": "Configuration for create and close a member diagnosis",
        "tags": [
          "diagnosis-codes"
        ]
      }
    },
    "/discharge-configuration": {
      "get": {
        "description": "${description/authorizations/getDischargeConfiguration.html}",
        "operationId": "getDischargeConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/PortableConfiguration"
            }
          }
        },
        "summary": "Gets the configuration to discharge an authorization.",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/discovery/api-groups": {
      "get": {
        "description": "${description/discovery/apiGroups.html}",
        "operationId": "getApiGroups-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ApiGroup"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the list of all API groups",
        "tags": [
          "discovery-internal"
        ]
      }
    },
    "/discovery/api-groups/{api-group-id}": {
      "get": {
        "description": "${description/discovery/apisInGroup.html}",
        "operationId": "getApisInGroup-internal",
        "parameters": [
          {
            "description": "API Group ID",
            "in": "path",
            "name": "api-group-id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${ApiNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ApiGroup"
            }
          }
        },
        "summary": "Gets the details of all APIs in an API group",
        "tags": [
          "discovery-internal"
        ]
      }
    },
    "/discovery/schemas/json/{schemaName}": {
      "get": {
        "description": "${description/discovery/getJsonSchema.html}",
        "operationId": "getJsonSchema-internal",
        "parameters": [
          {
            "description": "Name of the schema",
            "in": "path",
            "name": "schemaName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${SchemaNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Gets the JSON schema for an API",
        "tags": [
          "discovery-internal"
        ]
      }
    },
    "/discovery/schemas/json/{schemaName}.html": {
      "get": {
        "description": "${description/discovery/getJsonSchemaHtml.html}",
        "operationId": "getJsonSchemaHtml-internal",
        "parameters": [
          {
            "description": "Name of the schema",
            "in": "path",
            "name": "schemaName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "text/html"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Gets an HTML containing the JSON schema for an API",
        "tags": [
          "discovery-internal"
        ]
      }
    },
    "/document-library-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/documents/postDocumentLibrarySearch.html}",
        "operationId": "documentLibrarySearch-internal",
        "parameters": [
          {
            "description": "The document search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentLibrarySearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/DocumentLibrarySearchResults"
            }
          }
        },
        "summary": "Search for library documents",
        "tags": [
          "documents"
        ]
      }
    },
    "/documents/configuration": {
      "get": {
        "description": "${description/documents/getConfiguration.html}",
        "operationId": "getAttachmentConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/DocumentConfiguration"
            }
          }
        },
        "summary": "Gets the configuration to create a new attachment",
        "tags": [
          "documents"
        ]
      }
    },
    "/documents/{documentId}/file": {
      "get": {
        "description": "${description/documents/getFile.html}",
        "operationId": "getAttachmentFile_1",
        "parameters": [
          {
            "description": "The document ID",
            "in": "path",
            "name": "documentId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "default": {}
        },
        "summary": "Gets an existing attachment file",
        "tags": [
          "documents"
        ]
      }
    },
    "/documents/{documentId}/metadata": {
      "get": {
        "description": "${description/documents/getMetadata.html}",
        "operationId": "getAttachmentMetadata",
        "parameters": [
          {
            "description": "The document ID",
            "in": "path",
            "name": "documentId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/DocumentInfo"
            }
          }
        },
        "summary": "Gets an existing attachment metadata",
        "tags": [
          "documents"
        ]
      }
    },
    "/drug-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/drugs/postDrugSearch.html}",
        "operationId": "searchDrugs-internal",
        "parameters": [
          {
            "description": "The search criteria for drugs",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DrugSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MediSpanDrugSearchException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/DrugSearchResults"
            }
          }
        },
        "summary": "Search for drugs",
        "tags": [
          "drugs"
        ]
      }
    },
    "/drugs": {
      "get": {
        "description": "${description/drugs/getDrugs.html}",
        "operationId": "simpleDrugSearch",
        "parameters": [
          {
            "description": "A search term matching the drug name",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "default": "BEGINS_WITH",
            "description": "Search mode for drug name field",
            "enum": [
              "BEGINS_WITH",
              "CONTAINS",
              "EQUALS"
            ],
            "in": "query",
            "name": "nameMatchType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/SimpleDrug"
              },
              "type": "array"
            }
          }
        },
        "summary": "Search for drugs",
        "tags": [
          "drugs"
        ]
      }
    },
    "/drugs/{drugId}": {
      "get": {
        "description": "${description/drugs/getDrugById.html}",
        "operationId": "getDrug",
        "parameters": [
          {
            "description": "The drug ID obtained from the drug search",
            "in": "path",
            "name": "drugId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Drug"
            }
          }
        },
        "summary": "Find a drug by ID",
        "tags": [
          "drugs"
        ]
      }
    },
    "/duplicate-candidates/duplicate-member/{duplicateId}/target-member/{targetId}/merge": {
      "post": {
        "description": "${description/member-reconciliation/postMergeMember.html}",
        "operationId": "manuallyMergeMember-internal",
        "parameters": [
          {
            "description": "Member details retrived from duplicateId ",
            "in": "path",
            "name": "duplicateId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Member details retrived from targetId",
            "in": "path",
            "name": "targetId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Manually merge member by duplicateId and targetId",
        "tags": [
          "member-reconciliation-internal"
        ]
      }
    },
    "/duplicate-candidates/{duplicateCandidateId}": {
      "get": {
        "description": "${description/member-reconciliation/getDuplicateMember.html}",
        "operationId": "getDuplicateCandidate-internal",
        "parameters": [
          {
            "description": "Duplicate CandidateId retrieved from duplicateId search or duplicateId list",
            "in": "path",
            "name": "duplicateCandidateId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${DuplicateCandidateNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/DuplicateCandidate"
            }
          }
        },
        "summary": "View Duplicate MemberDetails",
        "tags": [
          "member-reconciliation-internal"
        ]
      }
    },
    "/duplicate-candidates/{duplicateCandidateId}/resolve": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-reconciliation/resolveDuplicateMember.html}",
        "operationId": "resolveDuplicateMember-internal",
        "parameters": [
          {
            "description": "Duplicate CandidateId retrieved from duplicateId search or duplicateId list",
            "in": "path",
            "name": "duplicateCandidateId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The match determination information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResolveDuplicateCandidateRequest"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "${DuplicateCandidateNotFoundException}"
          }
        },
        "summary": "Resolve member by duplicate CandidateId",
        "tags": [
          "member-reconciliation-internal"
        ]
      }
    },
    "/dynamic-api": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/dynamic-api/postResource.html}",
        "operationId": "postResource-internal",
        "parameters": [
          {
            "description": "The service information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceInformation"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "object"
            }
          }
        },
        "summary": "Post generic resource from service",
        "tags": [
          "dynamic-api-internal"
        ]
      }
    },
    "/eligibilities-configuration": {
      "get": {
        "description": "${description/eligibilities/getEligibilitiesConfiguration.html}",
        "operationId": "getEligibilitiesConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/EligibilityConfiguration"
            }
          }
        },
        "summary": "Gets the eligibilities configuration",
        "tags": [
          "eligibilities"
        ]
      }
    },
    "/environment-configuration": {
      "get": {
        "description": "${description/environment-configuration/getEnvironmentDetails.html}",
        "operationId": "getEnvironmentDetails-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/EnvironmentDetails"
            }
          }
        },
        "summary": "Get environment configuration",
        "tags": [
          "environment"
        ]
      }
    },
    "/environment-configuration/api-version": {
      "get": {
        "description": "${description/environment-configuration/getBuildNumber.html}",
        "operationId": "getApiBuildInformation",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/BuildInfo"
            }
          }
        },
        "summary": "Get API build number",
        "tags": [
          "environment"
        ]
      }
    },
    "/environment-configuration/reload-brs": {
      "post": {
        "description": "${description/environment-configuration/brsReload.html}",
        "operationId": "reloadBRSProxies-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/BRSProxyStatusSummary"
            }
          }
        },
        "summary": "Reloads BRS proxies",
        "tags": [
          "environment"
        ]
      }
    },
    "/external-letter-templates": {
      "get": {
        "description": "${description/correspondence/getExternalLetterTemplates.html}",
        "operationId": "getExternalLetterTemplates-internal",
        "parameters": [
          {
            "description": "Casenet License Feature name",
            "enum": [
              "CM",
              "DM",
              "UM",
              "TRUMOBILE",
              "MEMBER_PORTAL",
              "EMPLOYER_PORTAL",
              "PROVIDER_PORTAL",
              "REPORTING",
              "ANALYTICS",
              "WELLNESS",
              "HCS",
              "GENERIC",
              "AAG",
              "MEDICATION_MANAGEMENT",
              "TCI_CARE_MANAGEMENT",
              "TCI_CARE_MANAGEMENT_BI_MODELING",
              "TCI_TIME_TRACKING",
              "TCI_TIME_TRACKING_BI_MODELING",
              "TCI_UTILIZATION_MANAGEMENT",
              "TCI_UTILIZATION_MANAGEMENT_BI_MODELING"
            ],
            "in": "query",
            "name": "casenetFeature",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ExternalLetterTemplate"
            }
          }
        },
        "summary": "Gets the list of External Letter Templates",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/external-letters/{letterId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/letters/draftExternalLetter.html}",
        "operationId": "updateFailedExternalLetter-internal",
        "parameters": [
          {
            "description": "Letter Id",
            "in": "path",
            "name": "letterId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Request object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateExternalLetterRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          }
        },
        "summary": "Save and submit Operation for Failed external letter",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/external-letters/{letterId}/resend": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/letters/resendUpdateExternalLetter.html}",
        "operationId": "resendExactCopyLetter-internal",
        "parameters": [
          {
            "description": "Letter Id",
            "in": "path",
            "name": "letterId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Request object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateExternalLetterRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          }
        },
        "summary": "Resend a letter",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/external-letters/{letterId}/void": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/letters/voidExternalLetterFromUI.html}",
        "operationId": "voidExternalLetter-internal",
        "parameters": [
          {
            "description": "The letter ID",
            "in": "path",
            "name": "letterId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The void information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidLetterRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          }
        },
        "summary": "Void external letter",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/fax-queues": {
      "get": {
        "description": "${description/fax/getFaxQueues.html}",
        "operationId": "getAllFaxQueues-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/InboundFaxQueue"
              },
              "type": "array"
            }
          }
        },
        "summary": "To retrieve the list of fax queues",
        "tags": [
          "fax-internal"
        ]
      }
    },
    "/fax-queues/{faxQueueId}/documents": {
      "get": {
        "description": "${description/fax/getFaxDocumentsByQueueId.html}",
        "operationId": "getFaxDocumentsByQueueId-internal",
        "parameters": [
          {
            "description": "Fax Queue Id",
            "in": "path",
            "name": "faxQueueId",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "Start Index",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 10,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          },
          {
            "default": false,
            "description": "Indicates whether the endpoint returns the last page of results",
            "in": "query",
            "name": "gotoLastPage",
            "type": "boolean"
          },
          {
            "default": "FAX_DOCUMENT_RECEIPT_DATE",
            "description": "Sort Column",
            "enum": [
              "FAX_DOCUMENT_NAME",
              "FAX_DOCUMENT_TYPE",
              "FAX_DOCUMENT_SOURCE",
              "FAX_DOCUMENT_RECEIPT_DATE",
              "FAX_DOCUMENT_ALREADY_ATTACHED"
            ],
            "in": "query",
            "name": "sortColumn",
            "type": "string"
          },
          {
            "default": "ASC",
            "description": "Sort Type",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sortType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${FaxNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/FaxDocumentSearchResults"
            }
          }
        },
        "summary": "To retrieve the list of fax documents for a selected fax queue",
        "tags": [
          "fax-internal"
        ]
      }
    },
    "/fax-queues/{faxQueueId}/documents/{faxId}": {
      "post": {
        "description": "${description/fax/postMoveFaxToQueue.html}",
        "operationId": "moveDocument-internal",
        "parameters": [
          {
            "description": "Fax Queue Id",
            "in": "path",
            "name": "faxQueueId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Fax Id",
            "in": "path",
            "name": "faxId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "${FaxNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${FaxNotFoundException}"
          }
        },
        "summary": "Move fax to different queue",
        "tags": [
          "fax-internal"
        ]
      }
    },
    "/fax/{faxId}/process": {
      "post": {
        "description": "${description/fax/processFax.html}",
        "operationId": "processFax-internal",
        "parameters": [
          {
            "description": "Fax Id",
            "in": "path",
            "name": "faxId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${FaxNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/InboundFaxDocumentInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Mark the fax as processed",
        "tags": [
          "fax-internal"
        ]
      }
    },
    "/fax/{faxId}/split": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/fax/postSplitFax.html}",
        "operationId": "splitPdf-internal",
        "parameters": [
          {
            "default": "faxId",
            "description": "Fax Id",
            "in": "path",
            "name": "faxId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The split pdf document information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SplitPdfRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${FaxNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/InboundFaxDocumentInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "To Split the fax document",
        "tags": [
          "fax-internal"
        ]
      }
    },
    "/fax/{faxId}/split-fax/{splitFaxId}/revert": {
      "post": {
        "description": "${description/fax/revertSplitFax.html}",
        "operationId": "revertSplitPdf-internal",
        "parameters": [
          {
            "description": "Fax Id",
            "in": "path",
            "name": "faxId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Split Fax Id",
            "in": "path",
            "name": "splitFaxId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "${FaxNotFoundException}"
          },
          "404": {
            "description": "${FaxNotFoundException}"
          }
        },
        "summary": "Revert the split fax document",
        "tags": [
          "fax-internal"
        ]
      }
    },
    "/faxes/process-faxes": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/fax/process-faxes.html}",
        "operationId": "process-faxes-internal",
        "parameters": [
          {
            "description": "Document Process IDs",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentProcessRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${FaxNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/InboundFaxDocumentInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Mark the fax as processed",
        "tags": [
          "fax-internal"
        ]
      }
    },
    "/follow-up-configuration": {
      "get": {
        "description": "${description/authorizations/getFollowUpConfiguration.html}",
        "operationId": "getFollowUpConfiguration-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/PortableConfiguration"
            }
          }
        },
        "summary": "Gets the configuration to follow up an authorization.",
        "tags": [
          "follow-ups-internal"
        ]
      }
    },
    "/hcs-enrollment-closure-configuration": {
      "get": {
        "description": "${description/service-requests/enrollment/getHcsEnrollmentClosureConfiguration.html}",
        "operationId": "getHcsEnrollmentClosureConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/HcsEnrollmentClosureConfiguration"
            }
          }
        },
        "summary": "Gets the configuration for HCS Closure",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/hcs-enrollment-configuration": {
      "get": {
        "description": "${description/service-requests/enrollment/getHcsEnrollmentConfiguration.html}",
        "operationId": "getHcsEnrollmentConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/HcsEnrollmentConfiguration"
            }
          }
        },
        "summary": "Gets the configuration for a case",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/hcs-enrollments/task-packages": {
      "get": {
        "description": "${description/service-requests/enrollment/getHcsTaskPackage.html}",
        "operationId": "getHcsTaskPackage-internal",
        "parameters": [
          {
            "description": "The member BHP node feed ID full path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          },
          {
            "description": "Task package search criteria",
            "enum": [
              "GENERIC",
              "HCS_ENROLLMENT_CREATE",
              "HCS_ENROLLMENT_EDIT",
              "HCS_ENROLLMENT_CLOSE",
              "HCS_ENROLLMENT_VOID"
            ],
            "in": "query",
            "name": "taskPackageCategory",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/HcsTaskPackageInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns all the hcs task packages",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/hcs-individual-service-plan-configuration/bhp-configuration": {
      "get": {
        "description": "${description/hcs/getIspConfig.html}",
        "operationId": "configuration-internal",
        "parameters": [
          {
            "description": "The member BHP node Feed ID Full Path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${BhpNodeNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/IspBhpSetup"
            }
          }
        },
        "summary": " Retrieve the configuration for the Individual Service Plan",
        "tags": [
          "hcs-individual-service-plan-internal"
        ]
      }
    },
    "/inpatient-authorization-configuration": {
      "get": {
        "description": "${description/authorizations/getInpatientAuthorizationConfiguration.html}",
        "operationId": "getAuthorizationConfiguration_1",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/InpatientAuthorizationConfiguration"
            }
          }
        },
        "summary": "Get configuration to create a new authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/inpatient-authorization-configuration/bhp-configuration": {
      "get": {
        "description": "${description/authorizations/getMemberInpatientAuthorizationConfiguration.html}",
        "operationId": "getInpatientAuthorizationBhpConfiguration",
        "parameters": [
          {
            "description": "The member BHP node Feed ID Full Path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/InpatientAuthorizationBhpConfiguration"
            }
          }
        },
        "summary": "Gets the valid types of line items and diagnoses",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/internal-letter-configuration": {
      "get": {
        "description": "${description/correspondence/getInternalLetterConfiguration.html}",
        "operationId": "getInternalLetterConfiguration-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/PortableConfiguration"
            }
          }
        },
        "summary": "Gets the internal letter configuration",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/internal-letter-templates": {
      "get": {
        "description": "${description/correspondence/getInternalLetterTemplates.html}",
        "operationId": "getInternalLetterTemplates-internal",
        "parameters": [
          {
            "description": "The BHP node feed ID full path.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          },
          {
            "description": "Casenet License Feature name",
            "enum": [
              "CM",
              "DM",
              "UM",
              "TRUMOBILE",
              "MEMBER_PORTAL",
              "EMPLOYER_PORTAL",
              "PROVIDER_PORTAL",
              "REPORTING",
              "ANALYTICS",
              "WELLNESS",
              "HCS",
              "GENERIC",
              "AAG",
              "MEDICATION_MANAGEMENT",
              "TCI_CARE_MANAGEMENT",
              "TCI_CARE_MANAGEMENT_BI_MODELING",
              "TCI_TIME_TRACKING",
              "TCI_TIME_TRACKING_BI_MODELING",
              "TCI_UTILIZATION_MANAGEMENT",
              "TCI_UTILIZATION_MANAGEMENT_BI_MODELING"
            ],
            "in": "query",
            "name": "casenetFeature",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${BhpNodeNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/InternalLetterTemplate"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a list of Internal Letter Templates for given BHP node",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/internal-letter-templates/versions/{versionId}": {
      "get": {
        "description": "${description/correspondence/getInternalLetterTemplateVersion.html}",
        "operationId": "getInternalLetterTemplateVersion-internal",
        "parameters": [
          {
            "description": "ID of the required Internal Letter Template Version",
            "in": "path",
            "name": "versionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${NotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InternalLetterTemplateVersionDetail"
            }
          }
        },
        "summary": "Gets Internal Letter Templates Version of given ID",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/ip-line-item-configuration": {
      "get": {
        "description": "${description/authorizations/getIPLineItemConfiguration.html}",
        "operationId": "getIPLineItemConfiguration",
        "parameters": [
          {
            "description": "The member BHP node feed ID full path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/InpatientLineItemConfiguration"
            }
          }
        },
        "summary": "Get the member-specific inpatient line item configuration",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/iq-connect/configuration": {
      "get": {
        "description": "${description/iqconnect/getConfiguration.html}",
        "operationId": "getIqConnectConfiguration-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/IqConnectConfiguration"
            }
          }
        },
        "summary": "Get the configuration for IQConnect",
        "tags": [
          "iqconnect-internal"
        ]
      }
    },
    "/iq-connect/default-saml-assertion": {
      "get": {
        "description": "${description/iqconnect/getDefaultSamlAssertion.html}",
        "operationId": "getDefaultSamlAssertion-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${IQConnectSamlException}"
          },
          "503": {
            "description": "${IQConnectMissingCertificateException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/SamlResponse"
            }
          }
        },
        "summary": "Get SAML Assertion response for Default IQConnect Authentication",
        "tags": [
          "iqconnect-internal"
        ]
      }
    },
    "/iq-connect/dynamic-saml-assertion": {
      "get": {
        "description": "${description/iqconnect/getDynamicSamlAssertion.html}",
        "operationId": "getDynamicSamlAssertion-internal",
        "parameters": [
          {
            "description": "Primary Facility Identifier",
            "in": "query",
            "name": "primaryFacilityId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Primary Facility Name",
            "in": "query",
            "name": "primaryFacilityName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${IQConnectSamlException}"
          },
          "503": {
            "description": "${IQConnectMissingCertificateException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/SamlResponse"
            }
          }
        },
        "summary": "Get SAML Assertion response for Dynamic IQConnect Authentication",
        "tags": [
          "iqconnect-internal"
        ]
      }
    },
    "/key-metric-calculated": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/key-metrics/calculateKeyMetric.html}",
        "operationId": "calculateKeyMetricInstance",
        "parameters": [
          {
            "description": "The key metric instance",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyMetricRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/KeyMetricInstance"
            }
          }
        },
        "summary": "Returns a calculated key metric instance",
        "tags": [
          "key-metrics"
        ]
      }
    },
    "/key-metric-configuration": {
      "get": {
        "description": "${description/key-metrics/getKeyMetricConfiguration.html}",
        "operationId": "getKeyMetricConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/KeyMetricConfiguration"
            }
          }
        },
        "summary": "Gets the configuration for creating a key metric",
        "tags": [
          "key-metrics"
        ]
      }
    },
    "/key-metric-definitions/{keyMetricDefId}": {
      "get": {
        "description": "${description/key-metrics/getKeyMetricDefinition.html}",
        "operationId": "getKeyMetricDefinition",
        "parameters": [
          {
            "description": "The key metric definition id",
            "in": "path",
            "name": "keyMetricDefId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/KeyMetricDef"
            }
          }
        },
        "summary": "Gets the key metric definition",
        "tags": [
          "key-metrics"
        ]
      }
    },
    "/key-metrics-search-configuration": {
      "get": {
        "description": "${description/key-metrics-search/getKeyMetricsSearchConfiguration.html}",
        "operationId": "getKeyMetricsSearchConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/KeyMetricsSearchConfiguration"
            }
          }
        },
        "summary": "Gets the key metrics search configuration",
        "tags": [
          "key-metrics"
        ]
      }
    },
    "/letter-configuration": {
      "get": {
        "description": "${description/letters/getLetterConfiguration.html}",
        "operationId": "getExternalLetterConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ExternalLetterConfiguration"
            }
          }
        },
        "summary": "Gets the letter configuration",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/letter-configuration/enclosures": {
      "get": {
        "description": "${description/letters/getLetterConfigurationEnclosures.html}",
        "operationId": "getEnclosures",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ExternalLetterEnclosure"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the letter configuration enclosures",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/letter-configuration/template/{templateId}": {
      "get": {
        "description": "${description/correspondence/getRecipient.html}",
        "operationId": "getRecipientsByTemplateId-internal",
        "parameters": [
          {
            "description": "Letter Template Id",
            "in": "path",
            "name": "templateId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${ExternalLetterTemplateVersionNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ExternalLetterTemplateVersion"
            }
          }
        },
        "summary": "Gets the recipients for the letter template id",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/letter-logos/{letterLogoId}": {
      "get": {
        "description": "${description/correspondence/getLetterLogoResource.html}",
        "operationId": "getLetterLogo-internal",
        "parameters": [
          {
            "description": "The letter logo ID",
            "in": "path",
            "name": "letterLogoId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "400": {
            "description": "${LetterLogoProcessingException}"
          },
          "404": {
            "description": "${LetterLogoNotFoundException}"
          },
          "default": {
            "schema": {
              "properties": {
                "allowedMethods": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "uniqueItems": true
                },
                "cookies": {
                  "additionalProperties": {
                    "properties": {
                      "comment": {
                        "type": "string"
                      },
                      "domain": {
                        "type": "string"
                      },
                      "expiry": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "httpOnly": {
                        "type": "boolean"
                      },
                      "maxAge": {
                        "format": "int32",
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "path": {
                        "type": "string"
                      },
                      "secure": {
                        "type": "boolean"
                      },
                      "value": {
                        "type": "string"
                      },
                      "version": {
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "object"
                },
                "date": {
                  "format": "date-time",
                  "type": "string"
                },
                "entity": {
                  "type": "object"
                },
                "entityTag": {
                  "properties": {
                    "value": {
                      "type": "string"
                    },
                    "weak": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "headers": {
                  "additionalProperties": {
                    "items": {
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "language": {
                  "properties": {
                    "country": {
                      "type": "string"
                    },
                    "displayCountry": {
                      "type": "string"
                    },
                    "displayLanguage": {
                      "type": "string"
                    },
                    "displayName": {
                      "type": "string"
                    },
                    "displayScript": {
                      "type": "string"
                    },
                    "displayVariant": {
                      "type": "string"
                    },
                    "extensionKeys": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "iso3Country": {
                      "type": "string"
                    },
                    "iso3Language": {
                      "type": "string"
                    },
                    "language": {
                      "type": "string"
                    },
                    "script": {
                      "type": "string"
                    },
                    "unicodeLocaleAttributes": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "unicodeLocaleKeys": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "variant": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "lastModified": {
                  "format": "date-time",
                  "type": "string"
                },
                "length": {
                  "format": "int32",
                  "type": "integer"
                },
                "links": {
                  "items": {
                    "properties": {
                      "params": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "rel": {
                        "type": "string"
                      },
                      "rels": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "title": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "uri": {
                        "format": "uri",
                        "type": "string"
                      },
                      "uriBuilder": {
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array",
                  "uniqueItems": true
                },
                "location": {
                  "format": "uri",
                  "type": "string"
                },
                "mediaType": {
                  "properties": {
                    "parameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "type": "object"
                    },
                    "subtype": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "wildcardSubtype": {
                      "type": "boolean"
                    },
                    "wildcardType": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "metadata": {
                  "additionalProperties": {
                    "items": {
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "status": {
                  "format": "int32",
                  "type": "integer"
                },
                "statusInfo": {
                  "properties": {
                    "family": {
                      "enum": [
                        "INFORMATIONAL",
                        "SUCCESSFUL",
                        "REDIRECTION",
                        "CLIENT_ERROR",
                        "SERVER_ERROR",
                        "OTHER"
                      ],
                      "type": "string"
                    },
                    "reasonPhrase": {
                      "type": "string"
                    },
                    "statusCode": {
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "stringHeaders": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Get Letter Logos",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/letters/external-letter": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/letters/createExternalLetter.html}",
        "operationId": "createExternalLetter",
        "parameters": [
          {
            "description": "Create External Letter Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateExternalLetterRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "503": {
            "description": "${ServiceUnavailableException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "create an external letter",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/letters/{letterId}": {
      "get": {
        "description": "${description/letters/getLetterDetails.html}",
        "operationId": "getLetterDetails",
        "parameters": [
          {
            "description": "The letter ID",
            "in": "path",
            "name": "letterId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${LetterNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ExternalLetter"
            }
          }
        },
        "summary": "Get letter details",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/letters/{letterId}/letter-details/{letterMailingId}": {
      "get": {
        "description": "${description/letters/getLetterMailingDetails.html}",
        "operationId": "getLetterMailingDetails",
        "parameters": [
          {
            "description": "The letter ID",
            "in": "path",
            "name": "letterId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The letter mailing ID",
            "in": "path",
            "name": "letterMailingId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${LetterNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ExternalLetter"
            }
          }
        },
        "summary": "Get letter mailing details",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/letters/{letterId}/mailings-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/correspondence/getLetterMailings.html}",
        "operationId": "getLetterMailings-internal",
        "parameters": [
          {
            "description": "The letter ID",
            "in": "path",
            "name": "letterId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Letter mailing request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LetterMailingRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${LetterNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/LetterMailingPaginatedResults"
            }
          }
        },
        "summary": "Get paginated letter mailings",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/letters/{letterId}/resendings": {
      "post": {
        "description": "${description/letters/resendExternalLetter.html}",
        "operationId": "resendFailedLetter",
        "parameters": [
          {
            "description": "The letter ID",
            "in": "path",
            "name": "letterId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "${ExternalLetterResendException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          }
        },
        "summary": "Resend failed letter",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/letters/{letterId}/status": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/letters/updateExternalLetter.html}",
        "operationId": "updateExternalLetter",
        "parameters": [
          {
            "description": "The letter ID",
            "in": "path",
            "name": "letterId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Update letter Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateLetterStatusRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${LetterNotFoundException}"
          }
        },
        "summary": "Update status of an external letter",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/letters/{letterId}/status-message": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/letters/putLetterStatusMessage.html}",
        "operationId": "updateLetterStatusMessage-internal",
        "parameters": [
          {
            "description": "The letter ID",
            "in": "path",
            "name": "letterId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Mailing ID",
            "in": "query",
            "name": "mailingId",
            "type": "string"
          },
          {
            "description": "The LetterStatusMessage Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LetterStatusMessageRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${LetterNotFoundException}"
          }
        },
        "summary": "Update letter status message",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/letters/{letterId}/void-info": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/letters/voidExternalLetter.html}",
        "operationId": "voidExternalLetter",
        "parameters": [
          {
            "description": "The letter ID",
            "in": "path",
            "name": "letterId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The void information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidLetterRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          }
        },
        "summary": "Void external letter",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/line-item-advisor-review-configuration": {
      "get": {
        "description": "${description/review/getLineItemAdvisorReviewConfiguration.html}",
        "operationId": "getAdvisorReviewConfiguration-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/PortableConfiguration"
            }
          }
        },
        "summary": "Get the configuration for creating a line item advisor review",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/line-item-clinical-review-configuration": {
      "get": {
        "description": "${description/review/getLineItemClinicalReviewConfiguration.html}",
        "operationId": "getClinicalReviewConfiguration-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/PortableConfiguration"
            }
          }
        },
        "summary": "Get the configuration for creating a line item clinical review",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/line-item-clinical-review-configuration/bhp-configuration": {
      "get": {
        "description": "${description/review/getLineItemClinicalReviewBHPConfiguration.html}",
        "operationId": "getClinicalReviewBHPConfiguration-internal",
        "parameters": [
          {
            "description": "The member BHP node feed ID full path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${BhpNodeNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/LineItemClinicalReviewBHPConfiguration"
            }
          }
        },
        "summary": "Get the BHP configuration for a line item clinical review",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/location-configuration/bhp-configuration/{bhpNodeFeedIdFullPath}": {
      "get": {
        "description": "${description/member-locations/getMemberLocationBhpConfiguration.html}",
        "operationId": "getMemberLocationBhpConfiguration-internal",
        "parameters": [
          {
            "description": "The member BHP node Feed ID Full Path",
            "in": "path",
            "name": "bhpNodeFeedIdFullPath",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/LocationBhpConfiguration"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the Member Location bhp configuration data.",
        "tags": [
          "members"
        ]
      }
    },
    "/locations/{locationId}": {
      "get": {
        "deprecated": true,
        "description": "${description/providers/getLocation.html}",
        "operationId": "getProviderLocation",
        "parameters": [
          {
            "description": "The location ID",
            "in": "path",
            "name": "locationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the location ID",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "locationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${InvalidProviderLocationException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        },
        "summary": "Finds location by ID",
        "tags": [
          "providers"
        ]
      }
    },
    "/log-source-client": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/logger/sourceClientLogEvent.html}",
        "operationId": "saveSourceClientLog",
        "parameters": [
          {
            "description": "The fields required to create a UserAccessLog record",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SourceClientResourceRequest"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "${UserNotFoundException}"
          }
        },
        "summary": "Saves a new log entry for source client",
        "tags": [
          "logs"
        ]
      }
    },
    "/logger": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/logger/postLogEntry.html}",
        "operationId": "postNewLogEntry",
        "parameters": [
          {
            "description": "Contains the information to create a new log entry",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LogMessage"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          }
        },
        "summary": "Saves a new log entry",
        "tags": [
          "logs"
        ]
      }
    },
    "/logger/log-configuration": {
      "get": {
        "description": "${description/logger/getLoggingConfiguration.html}",
        "operationId": "getLoggingConfiguration-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${PropertyNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/LoggingConfiguration"
            }
          }
        },
        "summary": "Get logging configuration",
        "tags": [
          "logs"
        ]
      }
    },
    "/logger/log-error": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/logger/postLogError.html}",
        "operationId": "postLogReport-internal",
        "parameters": [
          {
            "description": "Contains the error report that has to be logged in the system",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LogErrorRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          }
        },
        "summary": "Log an error report into the system",
        "tags": [
          "logs"
        ]
      }
    },
    "/logger/log-level": {
      "get": {
        "description": "${description/logger/getLoggerLevel.html}",
        "operationId": "getLoggerLevel",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "enum": [
                "ALL",
                "TRACE",
                "DEBUG",
                "INFO",
                "WARN",
                "ERROR",
                "FATAL",
                "OFF"
              ],
              "type": "string",
              "xml": {
                "name": "LoggerLevel",
                "namespace": "http://www.casenet.com/LoggerLevel"
              }
            }
          }
        },
        "summary": "Retrieves the log level",
        "tags": [
          "logs"
        ]
      }
    },
    "/medication-configuration": {
      "get": {
        "description": "${description/medications/getMedicationConfiguration.html}",
        "operationId": "getMedicationConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ExtendedAttributesConfiguration"
            }
          }
        },
        "summary": "Gets the medication configuration",
        "tags": [
          "medications"
        ]
      }
    },
    "/medication-configuration-v2": {
      "get": {
        "description": "${description/medications/getMedicationConfigurationV2.html}",
        "operationId": "getMedicationConfigurationV2-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/MedicationConfiguration"
            }
          }
        },
        "summary": "Gets the Medication Configurations",
        "tags": [
          "medications"
        ]
      }
    },
    "/medispan-allergen-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/allergies/postMedispanAllergenSearch.html}",
        "operationId": "searchAllergens",
        "parameters": [
          {
            "description": "The search criteria for allergens",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MedispanAllergenSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${LicenseNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MedispanAllergenSearchResults"
            }
          }
        },
        "summary": "Search for Medispan Allergens",
        "tags": [
          "allergies"
        ]
      }
    },
    "/member-activity-configuration": {
      "get": {
        "description": "${description/member-properties/getMemberActivityConfiguration.html}",
        "operationId": "getMemberActivityConfiguration-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/MemberActivityConfiguration"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve member activity configuration",
        "tags": [
          "members"
        ]
      }
    },
    "/member-contact-address-configuration": {
      "get": {
        "description": "${description/member-contacts/getMemberContactAddressConfiguration.html}",
        "operationId": "getMemberContactAddressConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberContactAddressConfiguration"
            }
          }
        },
        "summary": "Gets the member contact address configuration",
        "tags": [
          "members"
        ]
      }
    },
    "/member-contact-email-configuration": {
      "get": {
        "description": "${description/member-contacts/getMemberContactEmailConfiguration.html}",
        "operationId": "getMemberContactEmailConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberContactEmailConfiguration"
            }
          }
        },
        "summary": "Gets the member contact address configuration",
        "tags": [
          "members"
        ]
      }
    },
    "/member-contact-email-configuration-v2": {
      "get": {
        "description": "${description/member-contacts/getMemberContactEmailConfigurationV2.html}",
        "operationId": "getMemberContactEmailConfigurationV2-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberContactEmailConfiguration2"
            }
          }
        },
        "summary": "Gets the member contact email configuration",
        "tags": [
          "members"
        ]
      }
    },
    "/member-contact-phone-number-configuration": {
      "get": {
        "description": "${description/member-contacts/getMemberContactPhoneNumberConfiguration.html}",
        "operationId": "getMemberContactPhoneNumberConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberContactPhoneNumberConfiguration"
            }
          }
        },
        "summary": "Gets the member contact phone number configuration",
        "tags": [
          "members"
        ]
      }
    },
    "/member-dashboard-configuration": {
      "get": {
        "description": "${description/dashboard/memberDashboardConfiguration.html}",
        "operationId": "getEnabledPodsOfCurrentUser-internal",
        "parameters": [
          {
            "description": "The BHP node feed ID full path.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${BhpNodeNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberDashboardConfiguration"
            }
          }
        },
        "summary": "Get the the enabled screen pods of current user",
        "tags": [
          "member-dashboard-configuration-internal"
        ]
      }
    },
    "/member-filter-group-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/dashboard/memberFilterGroup.html}",
        "operationId": "searchMemberFilterGroup-internal",
        "parameters": [
          {
            "description": "The Member Filter Group search criteria",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/MemberFilterGroupSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberFilterGroupSearchResults"
            }
          }
        },
        "summary": "Search for member filter group",
        "tags": [
          "dashboard-internal"
        ]
      }
    },
    "/member-list/managed": {
      "get": {
        "description": "${description/members/getManagedMemberList.html}",
        "operationId": "getMemberList",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberList"
            }
          }
        },
        "summary": "Gets the managed member list",
        "tags": [
          "members"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/members/updateManagedMemberList.html}",
        "operationId": "updateManagedMemberList",
        "parameters": [
          {
            "description": "Member Id list to process",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberListRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${MemberListOperationException}"
          },
          "404": {
            "description": "${OperationNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberList"
            }
          }
        },
        "summary": "Adds or removes multiple memberIds to/from managed member list",
        "tags": [
          "members"
        ]
      }
    },
    "/member-list/managed-v2": {
      "get": {
        "description": "${description/members/getPaginatedManagedMemberList.html}",
        "operationId": "searchManagedMemberList-internal",
        "parameters": [
          {
            "default": 0,
            "description": "Start Index",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          },
          {
            "default": false,
            "description": "Indicates whether the endpoint returns the last page of results",
            "in": "query",
            "name": "gotoLastPage",
            "type": "boolean"
          },
          {
            "default": "MEMBER_NAME",
            "description": "sortColumn",
            "enum": [
              "MEMBER_NAME",
              "BIRTH_DATE",
              "GENDER",
              "MPI",
              "EXTERNAL_MEMBER_ID"
            ],
            "in": "query",
            "name": "Sort Column",
            "type": "string"
          },
          {
            "default": "ASC",
            "description": "Sort Type",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sortType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberListSearchResults"
            }
          }
        },
        "summary": "Gets the managed member list paginating and sorting",
        "tags": [
          "members"
        ]
      }
    },
    "/member-list/managed/{memberId}": {
      "delete": {
        "description": "${description/members/deleteMemberFromManagedMemberList.html}",
        "operationId": "removeFromMemberList",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberList"
            }
          }
        },
        "summary": "Remove a member from the member list",
        "tags": [
          "members"
        ]
      },
      "put": {
        "description": "${description/members/putMemberInManagedMemberList.html}",
        "operationId": "addToMemberList",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${MemberListOperationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberList"
            }
          }
        },
        "summary": "Add a member to the managed member list",
        "tags": [
          "members"
        ]
      }
    },
    "/member-list/recent": {
      "get": {
        "description": "${description/members/getRecentMemberList.html}",
        "operationId": "getRecentMemberList-internal",
        "parameters": [
          {
            "default": 0,
            "description": "Start Index",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          },
          {
            "default": false,
            "description": "Indicates whether the endpoint returns the last page of results",
            "in": "query",
            "name": "gotoLastPage",
            "type": "boolean"
          },
          {
            "default": "MEMBER_NAME",
            "description": "sortColumn",
            "enum": [
              "MEMBER_NAME",
              "BIRTH_DATE",
              "GENDER",
              "MPI",
              "EXTERNAL_MEMBER_ID"
            ],
            "in": "query",
            "name": "Sort Column",
            "type": "string"
          },
          {
            "default": "ASC",
            "description": "Sort Type",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sortType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberListSearchResults"
            }
          }
        },
        "summary": "Gets the recently viewed member list",
        "tags": [
          "members"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/members/updateRecentMemberList.html}",
        "operationId": "updateRecentMemberList-internal",
        "parameters": [
          {
            "description": "Member Id list to process",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberListRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${OperationNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberList"
            }
          }
        },
        "summary": "Adds or removes multiple memberIds to/from Recent member list",
        "tags": [
          "members"
        ]
      }
    },
    "/member-list/starred": {
      "get": {
        "description": "${description/members/getStarredMemberList.html}",
        "operationId": "getStarredMemberList-internal",
        "parameters": [
          {
            "default": 0,
            "description": "Start Index",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          },
          {
            "default": false,
            "description": "Indicates whether the endpoint returns the last page of results",
            "in": "query",
            "name": "gotoLastPage",
            "type": "boolean"
          },
          {
            "default": "MEMBER_NAME",
            "description": "Sort Column",
            "enum": [
              "MEMBER_NAME",
              "BIRTH_DATE",
              "GENDER",
              "MPI",
              "EXTERNAL_MEMBER_ID"
            ],
            "in": "query",
            "name": "sortColumn",
            "type": "string"
          },
          {
            "default": "ASC",
            "description": "Sort Type",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sortType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberListSearchResults"
            }
          }
        },
        "summary": "Gets the starred member list",
        "tags": [
          "members"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/members/updateStarredMemberList.html}",
        "operationId": "updateStarredMemberList-internal",
        "parameters": [
          {
            "description": "Member Id list to process",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberListRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${MemberListOperationException}"
          },
          "404": {
            "description": "${OperationNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberList"
            }
          }
        },
        "summary": "Adds or removes multiple memberIds to/from starred member list",
        "tags": [
          "members"
        ]
      }
    },
    "/member-properties-configuration/general-information": {
      "get": {
        "description": "${description/member-properties/getMemberGeneralInformationConfiguration.html}",
        "operationId": "getMemberGeneralInformationConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberGeneralInformationConfiguration"
            }
          }
        },
        "summary": "Gets the general information configuration",
        "tags": [
          "members"
        ]
      }
    },
    "/member-properties-configuration/member-details": {
      "get": {
        "description": "${description/member-properties/getMemberDetailsConfiguration.html}",
        "operationId": "getMemberDetailsConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberDetailsConfiguration"
            }
          }
        },
        "summary": "Gets the member details configuration",
        "tags": [
          "members"
        ]
      }
    },
    "/member-properties-configuration/member-header": {
      "get": {
        "description": "${description/member-properties/getMemberHeaderConfiguration.html}",
        "operationId": "getMemberHeaderConfiguration-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberHeaderConfiguration"
            }
          }
        },
        "summary": "Gets the member header configuration",
        "tags": [
          "members"
        ]
      }
    },
    "/member-properties-configuration/opt-out-preferences": {
      "get": {
        "description": "${description/member-properties/getOptOutPreferenceConfiguration.html}",
        "operationId": "getOptOutPreferenceConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/OptOutPreferenceConfiguration"
            }
          }
        },
        "summary": "Gets the opt-out preferences configuration",
        "tags": [
          "members"
        ]
      }
    },
    "/member-reconciliation/duplicate-candidates": {
      "get": {
        "description": "${description/members/getDuplicateCandidatesList.html}",
        "operationId": "getDuplicateCandidates-internal",
        "parameters": [
          {
            "default": 0,
            "description": "Start Index",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/DuplicateCandidateResults"
              },
              "type": "array"
            }
          }
        },
        "summary": "Find list of duplicate candidates",
        "tags": [
          "members"
        ]
      }
    },
    "/members": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/members/postMember.html}",
        "operationId": "createMember",
        "parameters": [
          {
            "description": "The object describing the properties of the new member",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMemberRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberLite"
            }
          }
        },
        "summary": "Add a member",
        "tags": [
          "members"
        ]
      }
    },
    "/members-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/members/postMembersSearch.html}",
        "operationId": "memberSearch",
        "parameters": [
          {
            "description": "The member search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberSearchResults"
            }
          }
        },
        "summary": "Perform a member search",
        "tags": [
          "members"
        ]
      }
    },
    "/members-search-configuration": {
      "get": {
        "description": "${description/members/getMembersSearchConfiguration.html}",
        "operationId": "getConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberSearchConfiguration"
            }
          }
        },
        "summary": "Gets the configuration for creating a member search request",
        "tags": [
          "members"
        ]
      }
    },
    "/members-search-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/members/postMembersSearchV2.html}",
        "operationId": "memberSearch_1",
        "parameters": [
          {
            "description": "The member search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberSearchCriteriaV2"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberSearchResults"
            }
          }
        },
        "summary": "Perform a member search with enhanced search criteria.",
        "tags": [
          "members"
        ]
      }
    },
    "/members/internal": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/members/postMemberInternal.html}",
        "operationId": "createMemberInternal-internal",
        "parameters": [
          {
            "description": "Bhp Node Name Full Path",
            "in": "query",
            "name": "bhpNodeNameFullPath",
            "type": "string"
          },
          {
            "description": "The object describing the properties of the new member",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Member"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create a Member",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-properties/updateMemberDemographics.html}",
        "operationId": "updateMembeDemographics-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The updated member demographics value",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMemberRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Updates the member demographics",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/aags": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/aag/postAag.html}",
        "operationId": "postAag",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The AAG information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAagRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AagSubmissionResponse"
            }
          }
        },
        "summary": "Posts the AAG request",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/aags-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/aag/postAagSearch.html}",
        "operationId": "searchAags",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The search criteria for AAGs",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AagSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AagSearchResults"
            }
          }
        },
        "summary": "Performs a search for AAGs",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/aags/numbers": {
      "get": {
        "description": "${description/aag/getRetrieveAags.html}",
        "operationId": "getAagNumbersForMember-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AAGNumberResponse"
            }
          }
        },
        "summary": "Retrieves the entire list of aagNumber and aagType available for the Member",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/aags/{aagId}": {
      "get": {
        "description": "${description/aag/getAag.html}",
        "operationId": "getAag",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Aag"
            }
          }
        },
        "summary": "Gets the member's AAG",
        "tags": [
          "aags"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/aag/putEditSubmittedAag.html}",
        "operationId": "editSubmittedAag-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "DEFAULT",
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          },
          {
            "description": "The update Aag request data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAAGRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Edit and submit an existing AAG",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/aags/{aagId}/attachments": {
      "get": {
        "description": "${description/aag/getAagAttachments.html}",
        "operationId": "getsAagAttachments-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/DocumentInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the attachments of an AAG",
        "tags": [
          "aags"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/aag/postAagAttachment.html}",
        "operationId": "postAagAttachment",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          },
          {
            "description": "Metadata",
            "in": "formData",
            "name": "metadata",
            "type": "object"
          },
          {
            "description": "Attachment file",
            "format": "binary",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new attachment for an AAG",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/aags/{aagId}/attachments/{attachmentId}/void": {
      "post": {
        "description": "${description/aag/voidAagAttachment.html}",
        "operationId": "voidAagAttachment-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "DEFAULT",
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          },
          {
            "default": "DEFAULT",
            "description": "The member AAG review ID",
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Voids AAG Attachment",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/aags/{aagId}/complete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/aag/postCompleteAag.html}",
        "operationId": "postCompleteAag-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          },
          {
            "description": "The Complete request data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteAagRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AagClosedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Complete an AAG",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/aags/{aagId}/draft-review": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/aag/saveAagReview.html}",
        "operationId": "savesAAGReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          },
          {
            "description": "The AAG Review request data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAAGReviewRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AagClosedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Saves AAG Review for a member",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/aags/{aagId}/draft-reviews/{reviewId}": {
      "get": {
        "description": "${description/aag/getAagDraftReview.html}",
        "operationId": "getAagDraftReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          },
          {
            "description": "The member AAG review ID",
            "in": "path",
            "name": "reviewId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AagClosedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AagReview"
            }
          }
        },
        "summary": "Gets the Member's AAG draft review",
        "tags": [
          "aags"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/aag/postSubmitAagDraftReview.html}",
        "operationId": "updateAndSubmitAagDraftReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          },
          {
            "description": "The member AAG review ID",
            "in": "path",
            "name": "reviewId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The submit aag review request data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAAGReviewRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AagClosedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "summary": "Update and Submit existing AAG draft review",
        "tags": [
          "aags"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/aag/editSaveAagReview.html}",
        "operationId": "editSaveAagReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          },
          {
            "description": "The member AAG review ID",
            "in": "path",
            "name": "reviewId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The review request data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAAGReviewRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AagVoidedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Save the AAG Draft review",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/aags/{aagId}/notes": {
      "get": {
        "description": "${description/aag/getAagNotes.html}",
        "operationId": "getAagNoteInstanceList-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "DEFAULT",
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/NoteInstance"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the list of note details for AAG",
        "tags": [
          "aags"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/aag/postAagNote.html}",
        "operationId": "postAagNote",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          },
          {
            "description": "The note",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminNoteRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new note for an AAG",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/aags/{aagId}/notes-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/aag/postAagNoteV2.html}",
        "operationId": "postAagNoteV2-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          },
          {
            "description": "The AAG current version",
            "format": "int64",
            "in": "query",
            "name": "aagVersion",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The note",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminNoteRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/NewNoteResponse"
            }
          }
        },
        "summary": "Creates a new note for an AAG",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/aags/{aagId}/outcome": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/aag/postOutcomeAAG.html}",
        "operationId": "postOutcome-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          },
          {
            "description": "The task request data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAagOutcomeRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AagClosedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Posts an outcome on an AAG",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/aags/{aagId}/reopen": {
      "put": {
        "description": "${description/aag/putReopenAag.html}",
        "operationId": "postReopenAag-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Reopen an AAG",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/aags/{aagId}/review": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/aag/postSubmitReview.html}",
        "operationId": "postSubmitReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          },
          {
            "description": "The review request data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAAGReviewRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AagClosedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Submits a review on an AAG",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/aags/{aagId}/reviews": {
      "get": {
        "description": "${description/aag/getAagReviews.html}",
        "operationId": "getAagReviewList-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AagReview"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the list of AAG reviews",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/aags/{aagId}/reviews/{reviewId}": {
      "get": {
        "description": "${description/aag/getAagReview.html}",
        "operationId": "getAagReview",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          },
          {
            "description": "The member AAG review ID",
            "in": "path",
            "name": "reviewId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AagReview"
            }
          }
        },
        "summary": "Gets the member's submitted AAG review",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/aags/{aagId}/reviews/{reviewId}/void": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/aag/voidAagReview.html}",
        "operationId": "voidsAAGReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          },
          {
            "description": "The member AAG review ID",
            "in": "path",
            "name": "reviewId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The AAG void request data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Voids AAG Review for a member",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/aags/{aagId}/tasks": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/aag/postAagTask.html}",
        "operationId": "postAagTask",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          },
          {
            "description": "The task request data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AagActionPathRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Submits a task on an AAG",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/aags/{aagId}/void": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/aag/postVoidAag.html}",
        "operationId": "postVoidAag-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          },
          {
            "description": "void request data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${OptionValueNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Voids a particular Aag",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/activities": {
      "get": {
        "description": "${description/member-properties/getMemberActivity.html}",
        "operationId": "getMemberActivityItems-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ActivityItem"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve member activity",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/addresses": {
      "get": {
        "description": "${description/member-contacts/getMemberAddressList.html}",
        "operationId": "getMemberAddressList",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ContactAddress"
              },
              "type": "array"
            }
          }
        },
        "summary": "Find member addresses",
        "tags": [
          "members"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-contacts/postMemberContactAddress.html}",
        "operationId": "addMemberContactAddress",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new member address",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactAddress"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create a new member address",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/addresses/{contactAddressId}": {
      "get": {
        "description": "${description/member-contacts/getMemberContactAddress.html}",
        "operationId": "getContactAddress",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The contact address ID",
            "in": "path",
            "name": "contactAddressId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ContactAddress"
            }
          }
        },
        "summary": "Gets a member contact address",
        "tags": [
          "members"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-contacts/putMemberContactAddress.html}",
        "operationId": "updateMemberContactAddress",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The contact address ID",
            "in": "path",
            "name": "contactAddressId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The updated member address",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactAddress"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Update a member address",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/alerts": {
      "get": {
        "description": "${description/member-properties/getMemberAlerts.html}",
        "operationId": "getMemberAlerts",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberAlerts"
            }
          }
        },
        "summary": "Gets the member alerts",
        "tags": [
          "members"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-properties/updateMemberAlerts.html}",
        "operationId": "updateMemberAlerts",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The updated alerts value",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberAlertsRequest"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates the member alerts",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/allergen-medication-reactions-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/allergies/postMedispanAllergenReactionSearch.html}",
        "operationId": "postAllergenMedicationReactionsSearch-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MedispanAllergenReactionSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${LicenseNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MedispanAllergenSearchResults"
            }
          }
        },
        "summary": "Search for reacting medications",
        "tags": [
          "allergies"
        ]
      }
    },
    "/members/{memberId}/allergies": {
      "get": {
        "description": "${description/allergies/getMemberAllergies.html}",
        "operationId": "getMemberAllergies",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Allergy"
              },
              "type": "array"
            }
          }
        },
        "summary": "Find allergies for a member",
        "tags": [
          "allergies"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/allergies/postMemberAllergy.html}",
        "operationId": "createAllergy",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The allergy information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAllergyRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create a member allergy",
        "tags": [
          "allergies"
        ]
      }
    },
    "/members/{memberId}/allergies-v2": {
      "get": {
        "description": "${description/allergies/getSortedMemberAllergies.html}",
        "operationId": "getSortedMemberAllergies-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "Start Index",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          },
          {
            "default": "ALLERGY",
            "description": "Sort Column",
            "enum": [
              "ALLERGY",
              "ALLERGY_DETAIL",
              "REACTION",
              "SEVERITY",
              "SOURCE",
              "DATE_IDENTIFIED",
              "ACTIVE"
            ],
            "in": "query",
            "name": "sortColumn",
            "type": "string"
          },
          {
            "default": "ASC",
            "description": "Sort type",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sortType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether the endpoint returns the last page of results",
            "in": "query",
            "name": "gotoLastPage",
            "type": "boolean"
          },
          {
            "default": "ALL",
            "description": "Status",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "ALL"
            ],
            "in": "query",
            "name": "status",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether the endpoint returns voided allergies",
            "in": "query",
            "name": "showVoided",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AllergySearchResults"
            }
          }
        },
        "summary": "Get a summary of a sorted member's allergies",
        "tags": [
          "allergies"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/allergies/postMemberAllergyV2.html}",
        "operationId": "createAllergy_1",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The allergy information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateBaseAllergyRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create a TruCare Allergy or a MediSpan Drug Allergy for a member",
        "tags": [
          "allergies"
        ]
      }
    },
    "/members/{memberId}/allergies/{allergyId}": {
      "get": {
        "description": "${description/allergies/getAllergy.html}",
        "operationId": "getAllergy",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The allergy ID",
            "in": "path",
            "name": "allergyId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/Allergy"
            }
          }
        },
        "summary": "Retrieve a member allergy",
        "tags": [
          "allergies"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/allergies/putMemberAllergy.html}",
        "operationId": "updateAllergy",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The allergy ID",
            "in": "path",
            "name": "allergyId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The allergy information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAllergyRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Update a member allergy",
        "tags": [
          "allergies"
        ]
      }
    },
    "/members/{memberId}/allergies/{allergyId}/void-info": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/allergies/voidMemberAllergy.html}",
        "operationId": "voidAllergy",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The allergy ID",
            "in": "path",
            "name": "allergyId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The void information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Void a member allergy",
        "tags": [
          "allergies"
        ]
      }
    },
    "/members/{memberId}/appeals/{appealId}": {
      "get": {
        "description": "${description/appeals/getAppeal.html}",
        "operationId": "getAppeal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Flag to show the Appeal Due Date change history as part of GET Appeal. The flag will be defaulted to 'false' if no value is passed.",
            "in": "query",
            "name": "showAppealDueDateHistory",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Flag to show the Appeal Due Date change history as part of GET Appeal. The flag will be defaulted to 'false' if no value is passed.",
            "in": "query",
            "name": "includeDraftReviews",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${AppealNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Appeal"
            }
          }
        },
        "summary": "Gets the appeal",
        "tags": [
          "appeals"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/appeals/putAppeal.html}",
        "operationId": "updateAppeal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "description": "The appeal information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAuthorizationAppealRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "404": {
            "description": "${AppealNotFoundException}"
          }
        },
        "summary": "Update an existing appeal instance",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/appeals/{appealId}/attachments": {
      "get": {
        "description": "${description/appeals/getAppealAttachments.html}",
        "operationId": "getAppealAttachments",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${AppealNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/DocumentInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the attachments of an appeal",
        "tags": [
          "appeals"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/appeals/postAppealAttachment.html}",
        "operationId": "postAppealAttachment",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "description": "Metadata",
            "in": "formData",
            "name": "metadata",
            "type": "object"
          },
          {
            "description": "Attachment file",
            "format": "binary",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${AppealNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new attachment for an appeal",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/appeals/{appealId}/attachments/{attachmentId}/void-info": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/appeals/postVoidAttachment.html}",
        "operationId": "voidAppealAttachment-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The attachment ID",
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Void metadata",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Void an attachment of an appeal",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/appeals/{appealId}/complete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/appeals/completeAppeal.html}",
        "operationId": "completeAppeal-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "description": "The appeal information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAppealGlobalOutcomeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "404": {
            "description": "${NotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CompleteAppealResponse"
              },
              "type": "array"
            }
          }
        },
        "summary": "complete an existing appeal ",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/appeals/{appealId}/draft-notifications": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/appeals/postSaveAppealNotification.html}",
        "operationId": "saveAppealNotification-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "saveAppealNotificationRequest",
            "type": "object"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InternalLetterInfo"
            }
          }
        },
        "summary": "Save an appeal notification draft",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/appeals/{appealId}/draft-review": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/appeals/postSaveAppealReview.html}",
        "operationId": "postSaveAppealReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "description": "The review request data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAppealReviewRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NotEditableLineItemException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Saves a review on an Appeal",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/appeals/{appealId}/draft-reviews/{appealReviewId}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/appeals/updateSubmitAppealReview.html}",
        "operationId": "submitDraftAppealReview-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "description": "Appeal Review ID to be updated",
            "in": "path",
            "name": "appealReviewId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The review request data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAppealReviewRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AppealReviewIsNotDraftException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Submits a review on an Appeal",
        "tags": [
          "appeals"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/appeals/updateSaveAppealReview.html}",
        "operationId": "updateSaveAppealReview-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "description": "Appeal Review ID to be updated",
            "in": "path",
            "name": "appealReviewId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The review request data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAppealReviewRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AppealReviewIsNotDraftException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Saves a review on an Appeal",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/appeals/{appealId}/draft-reviews/{reviewId}": {
      "get": {
        "description": "${description/appeals/getAppealDraftReview.html}",
        "operationId": "getAppealDraftReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "description": "The appeal review ID",
            "in": "path",
            "name": "reviewId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AppealReviewIsNotDraftException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AppealReview"
            }
          }
        },
        "summary": "Gets the appeal's draft review",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/appeals/{appealId}/notes": {
      "get": {
        "description": "${description/appeals/getAppealNotes.html}",
        "operationId": "getAppealNotes",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${AppealNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/NoteInstance"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets notes of an appeal",
        "tags": [
          "appeals"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/notes/postAppealNote.html}",
        "operationId": "postAppealNote",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "description": "The note",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminNoteRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create a new note for an Appeal",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/appeals/{appealId}/notifications": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/appeals/postSubmitAppealNotification.html}",
        "operationId": "submitAppealNotification-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "submitAppealNotificationRequest",
            "type": "object"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InternalLetterInfo"
            }
          }
        },
        "summary": "Submit an appeal notification",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/appeals/{appealId}/outcome": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/appeals/postOutcomeAppeal.html}",
        "operationId": "postappealoutcome-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "description": "The appeal information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAppealOutcomeRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AppealActivityHasWrongValueException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "creates an outcome for an appeal",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/appeals/{appealId}/outcome/{outcomeId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/appeals/putOutcomeAppeal.html}",
        "operationId": "putappealoutcome-internal",
        "parameters": [
          {
            "description": "Appeal outcomeId to be updated",
            "in": "path",
            "name": "outcomeId",
            "required": true,
            "type": "string"
          },
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "description": "The appeal information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAppealOutcomeRequest"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "updates an outcome for an appeal",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/appeals/{appealId}/reopen": {
      "post": {
        "description": "${description/appeals/reopenAppeal.html}",
        "operationId": "reopenAppeal-internal",
        "parameters": [
          {
            "description": "memberId",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyOpenException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Reopen Appeal for completed or closed status",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/appeals/{appealId}/review": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/appeals/postSubmitAppealReview.html}",
        "operationId": "postSubmitAppealReview-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "description": "The review request data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAppealReviewRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NotEditableLineItemException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Submits a review on an Appeal",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/appeals/{appealId}/reviews/{reviewId}": {
      "get": {
        "description": "${description/appeals/getAppealReview.html}",
        "operationId": "getAppealReview",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "description": "The appeal review ID",
            "in": "path",
            "name": "reviewId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${AppealNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AppealReview"
            }
          }
        },
        "summary": "Gets the appeal reviews",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/appeals/{appealId}/reviews/{reviewId}/void": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/appeals/voidAppealReview.html}",
        "operationId": "voidAppealReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The appeal review ID",
            "in": "path",
            "name": "reviewId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "description": "Void Info request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Void the appeal review",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/appeals/{appealId}/tasks": {
      "get": {
        "description": "${description/appeals/getAppealTasks.html}",
        "operationId": "getAppealTasks",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidTaskException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AppealTask"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the tasks of an appeal",
        "tags": [
          "appeals"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/appeals/postAppealTask.html}",
        "operationId": "postAppealTask",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "description": "The task request data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppealActionPathRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ActionPathSummary"
            }
          }
        },
        "summary": "Submit a task on an appeal",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/appeals/{appealId}/void-info": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/appeals/voidAppeal.html}",
        "operationId": "voidAppeal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "description": "The void information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AppealClosedException}"
          },
          "404": {
            "description": "${AppealNotFoundException}"
          }
        },
        "summary": "Voids an existing appeal",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/assessment-metas/{assessmentMetaId}/prepopulated-answers": {
      "get": {
        "description": "${description/assessments/getPrepopulatedAnswers.html}",
        "operationId": "getPrepopulatedAnswers-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "ID of Assessment Meta for prepopulated answers search",
            "in": "path",
            "name": "assessmentMetaId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AssessmentMetaNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Answer"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get the prepopulated answers for a member's assessment.",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessment-metas/{assessmentMetaId}/tasks": {
      "get": {
        "description": "${description/assessments/getAssessmentTask.html}",
        "operationId": "getAssesmentTasks-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "ID of Assessment Meta for the desired tasks",
            "in": "path",
            "name": "assessmentMetaId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Status of the desired tasks, null for all",
            "in": "query",
            "items": {
              "enum": [
                "OPEN",
                "CLOSED",
                "CANCELLED",
                "OVERDUE",
                "NOT_CREATED"
              ],
              "type": "string",
              "xml": {
                "name": "TaskStatus",
                "namespace": "http://www.casenet.com/TaskStatus"
              }
            },
            "name": "status",
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AssessmentMetaStatusException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/TaskLite"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get list of tasks for a given member, assessment meta and task status.",
        "tags": [
          "assessments"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/assessments/assignAssessmentTask.html}",
        "operationId": "assignAssessmentTask-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "ID of Assessment Meta for Assign",
            "in": "path",
            "name": "assessmentMetaId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Assignee of Task",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskAssigneeRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Assign an assessment task to a user, queue or team.",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessment-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/assessments/postAssessmentSearch.html}",
        "operationId": "searchAssessment-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The search criteria for assessment",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssessmentSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AssessmentSearchResults"
            }
          }
        },
        "summary": "Load the member's assessment summary",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments": {
      "get": {
        "description": "${description/assessments/getMemberAssessments.html}",
        "operationId": "getSummaryScreen",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AssessmentSummaryScreen"
            }
          }
        },
        "summary": "Load the member's assessment summary",
        "tags": [
          "assessments"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/assessments/createAssessment.html}",
        "operationId": "createAssessment",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The device ID, obtainable when the member is set offline",
            "in": "query",
            "name": "deviceId",
            "type": "string"
          },
          {
            "default": false,
            "description": "A boolean specifying if the assessment should be submitted or left in draft state.",
            "in": "query",
            "name": "submit",
            "type": "boolean"
          },
          {
            "description": "The new assessment data, including answers, notes, outcomes, program enrollments, and signature.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAssessmentRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create a new assessment instance",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/assessments/createAssessmentV2.html}",
        "operationId": "createAssessment-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The new assessment data, including answers, notes, outcomes, program enrollments and triggers",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAssessmentTriggerRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${TaskNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create a new assessment instance",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments-v2/assessment-metas/{assessmentMetaId}": {
      "get": {
        "description": "${description/assessments/getNewAssessmentV2.html}",
        "operationId": "getStartAssessment-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The assessment instance ID, obtainable from the assessment summary",
            "in": "path",
            "name": "assessmentMetaId",
            "required": true,
            "type": "string"
          },
          {
            "description": "If the taskId is sent, we will populate the task-related data (ID, user, referral source) from that specific task, otherwise we will not include any task-related data into the response.",
            "in": "query",
            "name": "taskId",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AssessmentMetaStatusException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/BaseAssessment"
            }
          }
        },
        "summary": "Load a screen to create a new specialty assessment",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments-v2/{assessmentId}": {
      "get": {
        "description": "${description/assessments/getAssessment-v2.html}",
        "operationId": "getAssessment-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The assessment instance ID, obtainable from the assessment summary",
            "in": "path",
            "name": "assessmentId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/BaseAssessment"
            }
          }
        },
        "summary": "Load an assessment by ID",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/assessment-metas/{assessmentMetaId}": {
      "get": {
        "description": "${description/assessments/getStartAssessmentScreen.html}",
        "operationId": "getStartAssessmentScreen",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The assessment type ID, obtainable from the assessment summary",
            "in": "path",
            "name": "assessmentMetaId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "A boolean specifying if the first 15 questions from the first question group should be included.",
            "in": "query",
            "name": "include-initial-questions",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AssessmentMetaStatusException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AssessmentScreen"
            }
          }
        },
        "summary": "Load a screen to create a new specialty assessment",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/care-plan-builder-assessments": {
      "get": {
        "description": "${description/assessments/getCarePlanBuilderAssessments.html}",
        "operationId": "getCarePlanBuilderAssessments-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CarePlanBuilderAssessment"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns a list of assessments for a member with at least one suggested Care Plan element",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/care-plan-builder-recommendations": {
      "get": {
        "description": "${description/assessments/getElementRecommendationsByMember.html}",
        "operationId": "getCarePlanElementRecommendationsByMember-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CarePlanElementRecommendationArtifact"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns care plan elements from a triggered assessments",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/care-plan-builder-recommendations/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/assessments/deleteCarePlanBuilderRecommendationsMultiAssessment.html}",
        "operationId": "deleteCarePlanBuilderRecommendationsMultiAssessment-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "List of care plan builder recommendation element identifiers that should be deleted",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentifiersRequest"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Delete list of recommendation elements from care plan builder for all assessments",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/cases": {
      "get": {
        "description": "${description/assessments/getAssessmentCases.html}",
        "operationId": "getAssessmentCases-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": 0,
            "description": "Start Index",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CaseLiteResults"
            }
          }
        },
        "summary": "Load the member's cases that assessments assigned to them",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/status": {
      "get": {
        "description": "${description/assessments/getAssessmentsStatus.html}",
        "operationId": "getAssessmentsStatus-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": 0,
            "description": "Start Index",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          },
          {
            "default": false,
            "description": "Indicates whether the endpoint returns the last page of results",
            "in": "query",
            "name": "gotoLastPage",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AssessmentStatusResults"
            }
          }
        },
        "summary": "Get the status of all assessments available for a member",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/tasks/{taskId}": {
      "get": {
        "description": "${description/assessments/getAssessmentScreenForTask.html}",
        "operationId": "getAssessmentScreenForTask",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The task ID, obtainable from the assessment summary",
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "A boolean specifying if the first 15 questions from the first question group should be included.",
            "in": "query",
            "name": "include-initial-questions",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${TaskNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AssessmentScreen"
            }
          }
        },
        "summary": "Load an assessment by task ID",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/triggers": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/assessments/assessmentTrigger.html}",
        "operationId": "assessmentValidateAndTrigger-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The  assessment data, including answers, notes, outcomes, program enrollments that needs to be validated",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssessmentValidateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "500": {
            "description": "${McgConnectionException}"
          },
          "504": {
            "description": "${McgConnectionTimeOutException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AssessmentAnswerTriggeredArtifacts"
            }
          }
        },
        "summary": "Validate an assessment and get the triggers",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/{assessmentId}": {
      "get": {
        "description": "${description/assessments/getAssessmentScreen.html}",
        "operationId": "getAssessmentScreen",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The assessment instance ID, obtainable from the assessment summary",
            "in": "path",
            "name": "assessmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "A boolean specifying if the first 15 questions from the first question group should be included.",
            "in": "query",
            "name": "include-initial-questions",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AssessmentScreen"
            }
          }
        },
        "summary": "Load an assessment by ID",
        "tags": [
          "assessments"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/assessments/updateAssessment.html}",
        "operationId": "updateAssessment",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The assessment instance ID, obtainable from the assessment summary",
            "in": "path",
            "name": "assessmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The device ID, obtainable when the member is set offline",
            "in": "query",
            "name": "deviceId",
            "type": "string"
          },
          {
            "default": false,
            "description": "A boolean specifying if the assessment should be submitted or left in draft state.",
            "in": "query",
            "name": "submit",
            "type": "boolean"
          },
          {
            "description": "The new assessment data, including answers, notes, outcomes, program enrollments, and signature.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAssessmentRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${BadTaskIdException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          }
        },
        "summary": "Update an existing assessment instance",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/{assessmentId}/care-plan-builder-recommendations": {
      "get": {
        "description": "${description/assessments/getElementsFromTriggeredAssessment.html}",
        "operationId": "getElementsFromTriggeredAssessment-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The assessment instance ID, obtainable from the assessment summary",
            "in": "path",
            "name": "assessmentId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CarePlanElementRecommendationArtifact"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns care plan elements from a triggered assessments",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/{assessmentId}/care-plan-builder-recommendations/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/assessments/deleteCarePlanBuilderRecommendations.html}",
        "operationId": "deleteCarePlanBuilderRecommendations-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The assessment instance ID, obtainable from the assessment summary",
            "in": "path",
            "name": "assessmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "List of care plan builder recommendation element identifiers that should be deleted",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentifiersRequest"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Delete list of recommendation elements from care plan builder for given assessment",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/{assessmentId}/case": {
      "delete": {
        "description": "${description/assessments/removeCaseFromAssessment.html}",
        "operationId": "removeCaseFromAssessment-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The assessment instance ID, obtainable from the assessment summary",
            "in": "path",
            "name": "assessmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The version of the assessment, obtainable from the assessment summary",
            "format": "int32",
            "in": "query",
            "name": "assessmentVersion",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Remove case from assessment",
        "tags": [
          "assessments"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/assessments/assignCaseToAssessment.html}",
        "operationId": "assignCaseToAssessment-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The assessment instance ID, obtainable from the assessment summary",
            "in": "path",
            "name": "assessmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The request data, including caseId and assessment version.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssignCaseToAssessmentRequest"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Assign case to the assessment",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/{assessmentId}/notes": {
      "get": {
        "description": "${description/assessments/getAssessmentHeaderNotes.html}",
        "operationId": "getAssessmentHeaderNotes",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The assessment ID",
            "in": "path",
            "name": "assessmentId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/NoteInstance"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get header notes that belong to an assessment",
        "tags": [
          "assessments"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/assessments/createAssessmentHeaderNote.html}",
        "operationId": "createAssessmentHeaderNote",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The assessment ID",
            "in": "path",
            "name": "assessmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The device ID, obtainable when the member is set offline",
            "in": "query",
            "name": "deviceId",
            "type": "string"
          },
          {
            "description": "The note",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminNoteRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create a new header note for an assessment",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/{assessmentId}/notes-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/assessments/createAssessmentHeaderNoteV2.html}",
        "operationId": "createAssessmentHeaderNote-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The assessment ID",
            "in": "path",
            "name": "assessmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The current assessment version",
            "format": "int64",
            "in": "query",
            "name": "assessmentVersion",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The device ID, obtainable when the member is set offline",
            "in": "query",
            "name": "deviceId",
            "type": "string"
          },
          {
            "description": "The note",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminNoteRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/NewNoteResponse"
            }
          }
        },
        "summary": "Create a new header note for an assessment",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/{assessmentId}/notes/all": {
      "get": {
        "description": "${description/assessments/getAllAssessmentNotes.html}",
        "operationId": "getAllAssessmentNotes-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The assessment ID",
            "in": "path",
            "name": "assessmentId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ArtifactNote"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get all notes that belong to an assessment",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/{assessmentId}/question-groups/{assessmentQuestionGroupId}/notes": {
      "get": {
        "description": "${description/assessments/getAssessmentQuestionGroupNotes.html}",
        "operationId": "getAssessmentQuestionGroupNotes",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The assessment ID",
            "in": "path",
            "name": "assessmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The assessment-question-group ID",
            "in": "path",
            "name": "assessmentQuestionGroupId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/NoteInstance"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get header notes that belong to an assessment question group",
        "tags": [
          "assessments"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/assessments/createAssessmentQuestionGroupNote.html}",
        "operationId": "createAssessmentQuestionGroupNote",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The assessment ID",
            "in": "path",
            "name": "assessmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The assessment-question-group ID",
            "in": "path",
            "name": "assessmentQuestionGroupId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The device ID, obtainable when the member is set offline",
            "in": "query",
            "name": "deviceId",
            "type": "string"
          },
          {
            "description": "The note",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminNoteRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create a new note for an assessment question group",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/{assessmentId}/question-groups/{assessmentQuestionGroupId}/notes-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/assessments/createAssessmentQuestionGroupNoteV2.html}",
        "operationId": "createAssessmentQuestionGroupNote-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The assessment ID",
            "in": "path",
            "name": "assessmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The assessment-question-group ID",
            "in": "path",
            "name": "assessmentQuestionGroupId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The device ID, obtainable when the member is set offline",
            "in": "query",
            "name": "deviceId",
            "type": "string"
          },
          {
            "description": "The Assessment current version",
            "format": "int64",
            "in": "query",
            "name": "assessmentVersion",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The note",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminNoteRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/NewNoteResponse"
            }
          }
        },
        "summary": "Create a new note for an assessment question group",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/{assessmentId}/signature": {
      "get": {
        "description": "${description/assessments/getSignature.html}",
        "operationId": "getSignature",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The assessment instance ID, obtainable from the assessment summary",
            "in": "path",
            "name": "assessmentId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {}
        },
        "summary": "Get an assessment signature",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/{assessmentId}/void": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/assessments/voidAssessment2.html}",
        "operationId": "voidAssessmentV2-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The assessment instance ID, obtainable from the assessment summary",
            "in": "path",
            "name": "assessmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The device ID, obtainable when the member is set offline",
            "in": "query",
            "name": "deviceId",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The void information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequestBase"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${NotMemberResourceException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          }
        },
        "summary": "Void an assessment",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/assessments/{assessmentId}/void-info": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/assessments/voidAssessment.html}",
        "operationId": "voidAssessment",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The assessment instance ID, obtainable from the assessment summary",
            "in": "path",
            "name": "assessmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The device ID, obtainable when the member is set offline",
            "in": "query",
            "name": "deviceId",
            "type": "string"
          },
          {
            "description": "The void information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${AssessmentNotFoundException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          }
        },
        "summary": "Void an assessment",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/attach-authorization-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postAttachAuthorizationSearchByMember.html}",
        "operationId": "searchMemberAttachAuthorizations-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The search criteria for authorizations",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberAttachAuthorizationSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AuthorizationGlobalSearchRow"
              },
              "type": "array"
            }
          }
        },
        "summary": "Performs a search for authorizations by member",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/attachments/{attachmentId}/void-info": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/members/postVoidAttachment.html}",
        "operationId": "voidDocumentAttachment-internal",
        "parameters": [
          {
            "description": "The member ID",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The attachment ID",
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Void metadata",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Void an attachment of a member",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/authorization-search-configuration": {
      "get": {
        "description": "${description/authorizations-search/getAuthorizationSearchConfiguration.html}",
        "operationId": "getAuthorizationSearchConfiguration",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/PortableConfiguration"
            }
          }
        },
        "summary": "Gets the configuration for the authorization search",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postAuthorization.html}",
        "operationId": "runPrescreenAndPostAuthorization",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates if pre-screen has to be run before creating an authorization.",
            "in": "query",
            "name": "runPrescreenBeforeAuthSubmission",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates if in case pre-screen was run resulting in authorization required a pre-screen note has to be created or not.",
            "in": "query",
            "name": "createPrescreenNote",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the authorization/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process in case warning message(s) is generated while validating the gaps between dates of IP line items",
            "in": "query",
            "name": "rejectGapsIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process in case warning message(s) is generated while validating the overlaps of dates of IP line items",
            "in": "query",
            "name": "rejectOverlapsIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether copy is being created, UDFs are being copied even if they are marked as hidden",
            "in": "query",
            "name": "copyArtifact",
            "type": "boolean"
          },
          {
            "description": "The Authorization Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationSubmissionResponse"
            }
          }
        },
        "summary": "Submits an authorization request",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-properties/postMemberAuthorizationSearch.html}",
        "operationId": "searchMemberAuthorizations-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The search criteria for member authorizations",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberAuthorizationSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberAuthorizationSearchResults"
            }
          }
        },
        "summary": "Performs a search for the member authorizations",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/authorizations/cwqi-auth-request": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/prepareCareWebQIRequest.html}",
        "operationId": "prepareCareWebQIRequest-internal",
        "parameters": [
          {
            "description": "The member ID, contained as patient ID in a CareWebQIAuthRequest.",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Details used in initiating a CareWebQI AuthRequest session.",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CareWebQIRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CareWebQIRequest"
            }
          }
        },
        "summary": "Prepares a CareWebQI request for interacting with CareWebQI APIs from an external client.",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/duplicate-check": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postAuthDuplicatedCheck.html}",
        "operationId": "checkIfLineItemsAreDuplicated-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The internal authorization ID that we don't take into account for the duplication",
            "in": "query",
            "name": "authToExclude",
            "type": "string"
          },
          {
            "description": "Type of authorization.",
            "enum": [
              "INPATIENT",
              "SP",
              "RX"
            ],
            "in": "query",
            "name": "authorizationType",
            "required": true,
            "type": "string"
          },
          {
            "description": "The request body with the line items that we want to check",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LineItemListDuplicateCheckRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${BadRequestException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationInfo"
            }
          }
        },
        "summary": "Check if the given line items are duplicated into an stored authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/locked": {
      "get": {
        "description": "${description/authorizations/getLockedAuthorizationIds.html}",
        "operationId": "getLockedAuthorizationIds-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "List of authorization ids to check",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "authorizationIds",
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns locked authorizations ids",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}": {
      "get": {
        "description": "${description/authorizations/getAuthorization.html}",
        "operationId": "getAuthorization",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidAuthorizationTypeException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Authorization"
            }
          }
        },
        "summary": "Gets entire authorization",
        "tags": [
          "authorizations"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/putAuthorization.html}",
        "operationId": "updateAuthorization",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates if the intent of this request is to update a locked authorization, waiting on additional information from external systems.",
            "in": "query",
            "name": "lockedAuthUpdate",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the authorization/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process in case warning message(s) is generated while validating the gaps between dates of IP line items",
            "in": "query",
            "name": "rejectGapsIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process in case warning message(s) is generated while validating the overlaps of dates of IP line items",
            "in": "query",
            "name": "rejectOverlapsIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Claims the determination task if not assigned to the user",
            "in": "query",
            "name": "claimDeterminationTask",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether copy is being created, UDFs are being copied even if they are marked as hidden",
            "in": "query",
            "name": "copyArtifact",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to skip the validation on line item service date against provider location start and end dates",
            "in": "query",
            "name": "rejectLocationDatesIfWarning",
            "type": "boolean"
          },
          {
            "description": "The update authorization request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/UpdateAuthorizationResponse"
            }
          }
        },
        "summary": "Updates entire authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/appeal-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postAppealSearch.html}",
        "operationId": "searchAppeals-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "The search criteria for appeals",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppealSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AppealSearchResults"
            }
          }
        },
        "summary": "Search for appeals on an authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/appealable-line-items": {
      "get": {
        "description": "${description/authorizations/getAppealableLineItems.html}",
        "operationId": "getAppealableLineItems-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AppealableLineItemResponse"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns appealable line items",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/appeals": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/appeals/postAppeal.html}",
        "operationId": "postAuthorizationAppeal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "The Appeal Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAuthorizationAppealRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationAppealSummary"
            }
          }
        },
        "summary": "Submits an appeal request on an authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/attachments": {
      "get": {
        "description": "${description/authorizations/getAuthorizationAttachments.html}",
        "operationId": "getAuthorizationAttachments",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/DocumentInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the attachments of an authorization",
        "tags": [
          "authorizations"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/authorizations/postAuthAttachment.html}",
        "operationId": "postAuthorizationAttachment",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Metadata",
            "in": "formData",
            "name": "metadata",
            "type": "object"
          },
          {
            "description": "Attachment file",
            "format": "binary",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new attachment for an authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/attachments-v2": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/authorizations/postAuthorizationAttachments.html}",
        "operationId": "addAttachments-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "createAttachmentsRequest",
            "type": "object"
          }
        ],
        "responses": {
          "400": {
            "description": "${AttachmentFileException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          }
        },
        "summary": "Creates new attachments for an authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/attachments/count": {
      "get": {
        "description": "${description/authorizations/getAuthorizationAttachmentsCount.html}",
        "operationId": "AuthorizationAttachmentsCount-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "integer"
            }
          }
        },
        "summary": "Get count of attachments for an authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/attachments/{attachmentId}/void-info": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/attachments/postVoidAttachment.html}",
        "operationId": "voidAuthorizationAttachment-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The attachment ID",
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "Void metadata",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Void an attachment of an authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/case-association": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/assignCaseToAuthorization.html}",
        "operationId": "assignCaseToAuthorization-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The search criteria for appeals",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationCaseAssociationRequest"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Assign or Unassign a case to authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/close": {
      "post": {
        "description": "${description/authorizations/closeAuthorization.html}",
        "operationId": "closeAuthorization-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyClosedException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Closes a specific authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/cwqi-review-page": {
      "get": {
        "description": "${description/authorizations/getCWQIReviewPage.html}",
        "operationId": "getCareWebQIRedirectPage-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "The internal diagnosis code id to be passed to the CareWebQI guideline search",
            "in": "query",
            "name": "diagnosisCodeId for searchParam",
            "type": "string"
          },
          {
            "description": "The internal procedure code id to be passed to the CareWebQI guideline search",
            "in": "query",
            "name": "procedureCodeId for searchParam",
            "type": "string"
          },
          {
            "description": "The line item's internal procedure code id to be passed to the CareWebQI document request.",
            "in": "query",
            "name": "lineItemProcedureCodeId",
            "type": "string"
          },
          {
            "description": "The line item's number to determine lineItem specific data",
            "format": "int32",
            "in": "query",
            "name": "lineItemNumber",
            "type": "integer"
          },
          {
            "description": "Return url to which the CarewebQI application should send data to.",
            "in": "query",
            "name": "returnUrl",
            "type": "string"
          }
        ],
        "produces": [
          "text/html"
        ],
        "responses": {
          "400": {
            "description": "${MemberNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "default": {
            "schema": {
              "properties": {
                "allowedMethods": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "uniqueItems": true
                },
                "cookies": {
                  "additionalProperties": {
                    "properties": {
                      "comment": {
                        "type": "string"
                      },
                      "domain": {
                        "type": "string"
                      },
                      "expiry": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "httpOnly": {
                        "type": "boolean"
                      },
                      "maxAge": {
                        "format": "int32",
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "path": {
                        "type": "string"
                      },
                      "secure": {
                        "type": "boolean"
                      },
                      "value": {
                        "type": "string"
                      },
                      "version": {
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "object"
                },
                "date": {
                  "format": "date-time",
                  "type": "string"
                },
                "entity": {
                  "type": "object"
                },
                "entityTag": {
                  "properties": {
                    "value": {
                      "type": "string"
                    },
                    "weak": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "headers": {
                  "additionalProperties": {
                    "items": {
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "language": {
                  "properties": {
                    "country": {
                      "type": "string"
                    },
                    "displayCountry": {
                      "type": "string"
                    },
                    "displayLanguage": {
                      "type": "string"
                    },
                    "displayName": {
                      "type": "string"
                    },
                    "displayScript": {
                      "type": "string"
                    },
                    "displayVariant": {
                      "type": "string"
                    },
                    "extensionKeys": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "iso3Country": {
                      "type": "string"
                    },
                    "iso3Language": {
                      "type": "string"
                    },
                    "language": {
                      "type": "string"
                    },
                    "script": {
                      "type": "string"
                    },
                    "unicodeLocaleAttributes": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "unicodeLocaleKeys": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "variant": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "lastModified": {
                  "format": "date-time",
                  "type": "string"
                },
                "length": {
                  "format": "int32",
                  "type": "integer"
                },
                "links": {
                  "items": {
                    "properties": {
                      "params": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "rel": {
                        "type": "string"
                      },
                      "rels": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "title": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "uri": {
                        "format": "uri",
                        "type": "string"
                      },
                      "uriBuilder": {
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array",
                  "uniqueItems": true
                },
                "location": {
                  "format": "uri",
                  "type": "string"
                },
                "mediaType": {
                  "properties": {
                    "parameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "type": "object"
                    },
                    "subtype": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "wildcardSubtype": {
                      "type": "boolean"
                    },
                    "wildcardType": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "metadata": {
                  "additionalProperties": {
                    "items": {
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "status": {
                  "format": "int32",
                  "type": "integer"
                },
                "statusInfo": {
                  "properties": {
                    "family": {
                      "enum": [
                        "INFORMATIONAL",
                        "SUCCESSFUL",
                        "REDIRECTION",
                        "CLIENT_ERROR",
                        "SERVER_ERROR",
                        "OTHER"
                      ],
                      "type": "string"
                    },
                    "reasonPhrase": {
                      "type": "string"
                    },
                    "statusCode": {
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "stringHeaders": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Gets CWQI Page",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/determination-due-date-history-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postDeterminationDueDateHistorySearch.html}",
        "operationId": "getDeterminationDueDateHistory-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "Line Determination Due Date History Search request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeterminationDueDateHistorySearchRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidAuthorizationTypeException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/DeterminationDueDateHistoryResults"
            }
          }
        },
        "summary": "Gets the determination due date history for all line items in an authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/diagnoses": {
      "get": {
        "description": "${description/authorizations/getAuthorizationDiagnosis.html}",
        "operationId": "getAuthorizationDiagnosis",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationDiagnosis"
            }
          }
        },
        "summary": "Gets the diagnosis information for an authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/discharges-readmissions-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/searchDischargeAndReadmission.html}",
        "operationId": "searchDischargesAndReadmissions-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "The search criteria for discharge readmission",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DischargeReadmissionSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/DischargeReadmissionSearchResults"
            }
          }
        },
        "summary": "Search for discharges and readmit",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/draft": {
      "get": {
        "description": "${description/authorizations/getDraftAuthorization.html}",
        "operationId": "getDraftAuthorization-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Authorization"
            }
          }
        },
        "summary": "Gets entire draft authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/draft-appeals": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postDraftAppeal.html}",
        "operationId": "createDraftAppeal-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "The Appeal Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAuthorizationAppealRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create Draft appeal request on an authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/draft-notifications": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/authorizations/postSaveAuthNotification.html}",
        "operationId": "saveAuthorizationNotification-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "saveAuthNotificationRequest",
            "type": "object"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InternalLetterInfo"
            }
          }
        },
        "summary": "Save an authorization notification draft",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/fax/{faxId}": {
      "post": {
        "description": "${description/fax/addFaxToAuthorization.html}",
        "operationId": "addFaxToAuthorization-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "Fax Id",
            "in": "path",
            "name": "faxId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          }
        },
        "summary": "Add/Tag the fax to a authorization",
        "tags": [
          "fax-internal"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/follow-ups": {
      "get": {
        "description": "${description/authorizations/getFollowUps.html}",
        "operationId": "getFollowUpsForAuthorization-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidAuthorizationTypeException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/FollowUp"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets follow ups of an authorization.",
        "tags": [
          "follow-ups-internal"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postFollowUp.html}",
        "operationId": "createFollowUp-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "The Follow Up Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FollowUpRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AuthorizationClosedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/FollowUp"
            }
          }
        },
        "summary": "Create follow up for an authorization.",
        "tags": [
          "follow-ups-internal"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/follow-ups/{followUpId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/putFollowUp.html}",
        "operationId": "updateFollowUp-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "The ID of the follow Up to edit",
            "in": "path",
            "name": "followUpId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Follow Up Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateFollowUpRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AuthorizationClosedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/FollowUp"
            }
          }
        },
        "summary": "Update follow up of an authorization.",
        "tags": [
          "follow-ups-internal"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/header": {
      "get": {
        "description": "${description/authorizations/getAuthorizationHeader.html}",
        "operationId": "getAuthorizationHeader",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationHeader"
            }
          }
        },
        "summary": "Gets the header of an authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/header-v2": {
      "get": {
        "description": "${description/authorizations/getAuthorizationHeader2.html}",
        "operationId": "getAuthorizationHeader2-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationHeader2"
            }
          }
        },
        "summary": "Gets authorization header with servicing facility information.",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/interqual-transition-plan": {
      "get": {
        "description": "${description/transitionplan/getTransitionPlan.html}",
        "operationId": "retrieveTransitionPlans-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InterqualTransitionPlan"
            }
          }
        },
        "summary": "Retrieve all the transition plans created for the authorization",
        "tags": [
          "transition-plan-internal"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/transitionplan/submitTransitionPlan.html}",
        "operationId": "submitTransitionPlan-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "InterQual Review Source",
            "enum": [
              "REVIEW_MANAGER",
              "IQCONNECT"
            ],
            "in": "query",
            "name": "reviewSource",
            "required": true,
            "type": "string"
          },
          {
            "description": "InterQual document",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidAuthorizationTypeException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${TransitionPlanAlreadyExistsException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InterqualTransitionPlan"
            }
          }
        },
        "summary": "Crete new transition plan",
        "tags": [
          "transition-plan-internal"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/interqual-transition-plan/notes": {
      "get": {
        "description": "${description/transitionplan/getTransitionPlanNotes.html}",
        "operationId": "getTransitionPlanNotes-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidAuthorizationTypeException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/NoteInstance"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get all transition plan notes for an authorization",
        "tags": [
          "transition-plan-internal"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/transitionplan/submitTransitionPlanNotes.html}",
        "operationId": "submitTransitionPlanNotes-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "The Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransitionPlanNoteRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${InvalidAuthorizationTypeException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Create new transition plan note",
        "tags": [
          "transition-plan-internal"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/line-item-advisor-review": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/review/postLineItemAdvisorReview.html}",
        "operationId": "postLineItemAdvisorReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "Draft id in case we are submitting a draft review",
            "in": "query",
            "name": "draftReviewId",
            "type": "string"
          },
          {
            "description": "Line Item Advisor Review request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLineItemAdvisorReviewRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "403": {
            "description": "${TaskAssignmentClaimException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/LineItemReviewSummary"
            }
          }
        },
        "summary": "Create new line item advisor review",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/line-item-advisor-review/draft": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/review/postLineItemAdvisorReviewDraft.html}",
        "operationId": "postDraftLineItemAdvisorReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "Line Item Advisor Review request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLineItemAdvisorReviewRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "403": {
            "description": "${TaskAssignmentClaimException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/LineItemReviewSummary"
            }
          }
        },
        "summary": "Create new draft line item advisor review",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/line-item-advisor-review/{reviewId}/draft": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/review/putLineItemAdvisorReviewDraft.html}",
        "operationId": "putDraftLineItemAdvisorReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "The review ID",
            "in": "path",
            "name": "reviewId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Line Item Advisor Review update request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateLineItemAdvisorReviewRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "403": {
            "description": "${TaskAssignmentClaimException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          }
        },
        "summary": "Update a draft line item advisor review",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/line-item-advisor-reviews/{reviewId}/draft": {
      "get": {
        "description": "${description/review/getLineItemAdvisorReviewDraft.html}",
        "operationId": "getDraftLineItemAdvisorReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "The line item review ID",
            "in": "path",
            "name": "reviewId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidAuthorizationTypeException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationLineItemReview"
            }
          }
        },
        "summary": "Gets a draft line item advisor review",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/line-item-clinical-review": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/review/postLineItemClinicalReview.html}",
        "operationId": "postLineItemClinicalReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": true,
            "description": "Optional, defaults to true. Indicates whether to trigger the Business Rules when submitting this Clinical Review, which may auto-approve line items. (Must also be enabled for the line item types in the Administrative Console.)",
            "in": "query",
            "name": "runBRE",
            "type": "boolean"
          },
          {
            "description": "Draft id in case we are submitting a draft review",
            "in": "query",
            "name": "draftReviewId",
            "type": "string"
          },
          {
            "description": "Line Item Clinical Review request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLineItemClinicalReviewRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "403": {
            "description": "${TaskAssignmentClaimException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/LineItemReviewSummary"
            }
          }
        },
        "summary": "Create new line item clinical review",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/line-item-clinical-review/draft": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/review/postLineItemClinicalReviewDraft.html}",
        "operationId": "postDraftLineItemClinicalReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "Line Item Clinical Review request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLineItemClinicalReviewRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "403": {
            "description": "${TaskAssignmentClaimException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/LineItemReviewSummary"
            }
          }
        },
        "summary": "Create new draft line item clinical review",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/line-item-clinical-review/{reviewId}/draft": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/review/putLineItemClinicalReviewDraft.html}",
        "operationId": "putDraftLineItemClinicalReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "The review ID",
            "in": "path",
            "name": "reviewId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Line Item Clinical Review update request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateLineItemClinicalReviewRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "403": {
            "description": "${TaskAssignmentClaimException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          }
        },
        "summary": "Update a draft line item clinical review",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/line-item-clinical-reviews/{reviewId}/draft": {
      "get": {
        "description": "${description/review/getLineItemClinicalReviewDraft.html}",
        "operationId": "getDraftLineItemClinicalReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "The line item review ID",
            "in": "path",
            "name": "reviewId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidAuthorizationTypeException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${LineItemReviewNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationLineItemReview"
            }
          }
        },
        "summary": "Gets a draft line item clinical review",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/line-items": {
      "get": {
        "description": "${description/authorizations/getAuthorizationLineItemsPage.html}",
        "operationId": "getLineItems-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": 0,
            "description": "Start Index",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          },
          {
            "default": "LINE_ITEM_NUMBER",
            "enum": [
              "LINE_ITEM_NUMBER",
              "STAY_LEVEL",
              "FROM_DATE",
              "TO_DATE",
              "SERVICE_TYPE",
              "STATUS",
              "SERVICING_PROVIDER",
              "PROCEDURE_CODE"
            ],
            "in": "query",
            "name": "sortColumn",
            "type": "string"
          },
          {
            "default": "ASC",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sortType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether the endpoint returns the last page of results",
            "in": "query",
            "name": "gotoLastPage",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidAuthorizationTypeException}"
          },
          "400": {
            "description": "${AuthorizationDoesNotBelongToMemberException}"
          },
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/LineItemPaginatedResults"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a page of authorization line items.",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/line-items/determination": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postMultiLineItemDetermination.html}",
        "operationId": "determineMultipleLineItems-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Claims the determination task if not assigned to the user",
            "in": "query",
            "name": "claimDeterminationTask",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Claims the evaluate advisor review task if not assigned to the user",
            "in": "query",
            "name": "claimEvaluateAdvisorReviewTask",
            "type": "boolean"
          },
          {
            "description": "The line item determination request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultiLineItemDeterminationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${NotEditableLineItemException}"
          },
          "400": {
            "description": "${LineItemAlreadyVoidedException}"
          },
          "400": {
            "description": "${NotEditableLineItemAuthLockedException}"
          },
          "400": {
            "description": "${NotDeterminableLineItemException}"
          },
          "403": {
            "description": "${TaskAssignmentClaimException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/LineItemDeterminationResponse"
            }
          }
        },
        "summary": "Determines multiple line items",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/line-items/line-item-reviews": {
      "get": {
        "description": "${description/authorizations/getAuthorizationLineItemReviews.html}",
        "operationId": "getLineItemReviews",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": true,
            "description": "Indicates whether draft reviews are included in the results. Draft reviews are returned by default",
            "in": "query",
            "name": "includeDrafts",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AuthorizationLineItemReview"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the line item reviews for the given authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/line-items/line-item-reviews-v2": {
      "get": {
        "description": "${description/authorizations/getPaginatedAuthorizationLineItemReviews.html}",
        "operationId": "getLineItemReviews2-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": true,
            "description": "Indicates whether draft reviews are included in the results. Draft reviews are returned by default",
            "in": "query",
            "name": "includeDrafts",
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "Start Index",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          },
          {
            "default": "REVIEW_DATE",
            "enum": [
              "REVIEW_TYPE",
              "REVIEW_DATE",
              "REVIEWED_BY",
              "CRITERIA"
            ],
            "in": "query",
            "name": "sortColumn",
            "type": "string"
          },
          {
            "default": "ASC",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sortType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether the endpoint returns the last page of results",
            "in": "query",
            "name": "gotoLastPage",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/LineItemReviewSearchResults"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get the line items' reviews on an authorization.",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/line-items/{lineItemNumber}": {
      "get": {
        "description": "${description/authorizations/getLineItem.html}",
        "operationId": "getLineItem",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The line item number",
            "format": "int32",
            "in": "path",
            "name": "lineItemNumber",
            "required": true,
            "type": "integer"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/LineItem"
            }
          }
        },
        "summary": "Gets a line item",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/line-items/{lineItemNumber}/determination": {
      "get": {
        "description": "${description/authorizations/getDetermination.html}",
        "operationId": "getDetermination",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The line item number",
            "format": "int32",
            "in": "path",
            "name": "lineItemNumber",
            "required": true,
            "type": "integer"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${DeterminationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Determination"
            }
          }
        },
        "summary": "Gets the line item determination",
        "tags": [
          "authorizations"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postDetermination.html}",
        "operationId": "determineLineItem",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The line item number",
            "format": "int32",
            "in": "path",
            "name": "lineItemNumber",
            "required": true,
            "type": "integer"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Claims the determination task if not assigned to the user",
            "in": "query",
            "name": "claimDeterminationTask",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Claims the evaluate advisor review task if not assigned to the user",
            "in": "query",
            "name": "claimEvaluateAdvisorReviewTask",
            "type": "boolean"
          },
          {
            "description": "The line item determination request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeterminationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${AuthorizationAlreadyDischargedException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${NotEditableLineItemException}"
          },
          "400": {
            "description": "${NonVoidableLineItemException}"
          },
          "400": {
            "description": "${NotEditableLineItemAuthLockedException}"
          },
          "400": {
            "description": "${ConcurrentReviewNotEnabledException}"
          },
          "400": {
            "description": "${InvalidConcurrentReviewDueDateException}"
          },
          "400": {
            "description": "${AssigneeDisabledException}"
          },
          "400": {
            "description": "${AssigneeMissingMemberPermissionException}"
          },
          "403": {
            "description": "${TaskAssignmentClaimException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/LineItemDeterminationResponse"
            }
          }
        },
        "summary": "Determines a line item",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/line-items/{lineItemNumber}/determination/additional-line-items": {
      "get": {
        "description": "${description/authorizations/getAdditionalLineItemsForDetermination.html}",
        "operationId": "getAdditionalLineItemsForDetermination-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The line item number",
            "format": "int32",
            "in": "path",
            "name": "lineItemNumber",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Decision status to apply in the line item determination",
            "enum": [
              "APPROVE",
              "DENY",
              "VOID",
              "PEND"
            ],
            "in": "query",
            "name": "decisionStatus",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/LineItem"
              },
              "type": "array"
            }
          }
        },
        "summary": "Determines multiple line items",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/line-items/{lineItemNumber}/line-item-reviews/{lineItemReviewId}/void-info": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postVoidReview.html}",
        "operationId": "voidLineItemReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The line item number",
            "format": "int32",
            "in": "path",
            "name": "lineItemNumber",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The review ID",
            "in": "path",
            "name": "lineItemReviewId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "Void metadata",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${OptionValueNotFoundException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${NotEditableLineItemException}"
          },
          "400": {
            "description": "${NotEditableLineItemAuthLockedException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${LineItemReviewNotFoundException}"
          }
        },
        "summary": "Void a review of a line item in an authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/line-items/{lineItemNumber}/void": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/voidLineItem.html}",
        "operationId": "voidAuthorizationLineItem-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The line item number",
            "format": "int32",
            "in": "path",
            "name": "lineItemNumber",
            "required": true,
            "type": "integer"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates if the intent of this request is to void a line item of a locked authorization.",
            "in": "query",
            "name": "lockedAuthUpdate",
            "type": "boolean"
          },
          {
            "description": "The line item version and authorization version object request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LineItemVoidRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${NotEditableLineItemException}"
          },
          "400": {
            "description": "${NonVoidableLineItemException}"
          },
          "400": {
            "description": "${LineItemAlreadyVoidedException}"
          },
          "400": {
            "description": "${NotEditableLineItemAuthLockedException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "404": {
            "description": "${AuthorizationLockedException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/VoidLineItemAuthorizationResponse"
            }
          }
        },
        "summary": "Voids a line item of an authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/link": {
      "post": {
        "description": "${description/authorizations/createLinkIPAuthToSPAuth.html}",
        "operationId": "createLinkIPAuthToSPAuth-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "otherAuthorizationId as a query param",
            "in": "query",
            "name": "otherAuthorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "${InstanceVoidedException}"
          },
          "400": {
            "description": "${InvalidAuthorizationTypeException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          }
        },
        "summary": "Creates a link between IPAuthorization and SPAuthorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/linked-authorizations": {
      "get": {
        "description": "${description/authorizations/getLinkedAuthorizationBaseList.html}",
        "operationId": "getLinkedAuthorizationBaseList-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidAuthorizationTypeException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/LinkedAuthorizationBase"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a list of linked authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/lock": {
      "delete": {
        "description": "${description/authorizations/unlockAndSubmitAuthorization.html}",
        "operationId": "unlockAndSubmitAuthorization",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "${AuthorizationProcessingFailedException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "404": {
            "description": "${AlreadyUnlockedException}"
          }
        },
        "summary": "Deletes the lock on an authorization and submit it for processing",
        "tags": [
          "authorizations"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/lockAuthorization.html}",
        "operationId": "lockAuthorization-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Lock Reason",
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "summary": "Locks an authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/notes": {
      "get": {
        "description": "${description/authorizations/getAuthorizationNotes.html}",
        "operationId": "getAuthorizationNotes",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/NoteInstance"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the notes of an authorization",
        "tags": [
          "authorizations"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postAuthNote.html}",
        "operationId": "postAuthorizationNote",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member internal authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Note request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminNoteRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new note for an authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/notes/count": {
      "get": {
        "description": "${description/authorizations/getAuthorizationNotesCount.html}",
        "operationId": "getNotesCount-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "integer"
            }
          }
        },
        "summary": "Gets the notes count of an authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/notifications": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/authorizations/postSubmitAuthNotification.html}",
        "operationId": "submitAuthorizationNotification-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Claims the notification task",
            "in": "query",
            "name": "claimNotificationTask",
            "type": "boolean"
          },
          {
            "default": true,
            "description": "Closes the notification task",
            "in": "query",
            "name": "closeNotificationTask",
            "type": "boolean"
          },
          {
            "in": "formData",
            "name": "submitAuthNotificationRequest",
            "type": "object"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${InternalLetterRecipientCreationException}"
          },
          "400": {
            "description": "${UnsupportedDeliveryMethodException}"
          },
          "400": {
            "description": "${InternalLetterRecipientException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InternalLetterInfo"
            }
          }
        },
        "summary": "Submit an authorization notification",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/partial-update": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/patchAuthorization.html}",
        "operationId": "partiallyUpdateAuthorization-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates if the intent of this request is to update a locked authorization, waiting on additional information from external systems.",
            "in": "query",
            "name": "lockedAuthUpdate",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the authorization/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process in case warning message(s) is generated while validating the gaps between dates of IP line items",
            "in": "query",
            "name": "rejectGapsIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process in case warning message(s) is generated while validating the overlaps of dates of IP line items",
            "in": "query",
            "name": "rejectOverlapsIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Claims the determination task if not assigned to the user",
            "in": "query",
            "name": "claimDeterminationTask",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether copy is being created, UDFs are being copied even if they are marked as hidden",
            "in": "query",
            "name": "copyArtifact",
            "type": "boolean"
          },
          {
            "description": "The update authorization request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAuthorizationRequestAuthorizationHeaderRequestCreateLineItemRequestUpdateLineItemRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${DuplicateAuthorizationException}"
          },
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidProviderSpecialtyException}"
          },
          "400": {
            "description": "${InvalidServiceTypeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${InpatientLineItemOverlappingDatesException}"
          },
          "400": {
            "description": "${TaskContainsDeterminedLineItemException}"
          },
          "400": {
            "description": "${InpatientLineItemGapDatesException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${NonVoidableLineItemException}"
          },
          "400": {
            "description": "${LineItemAlreadyVoidedException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${InvalidRequestedUnitsException}"
          },
          "400": {
            "description": "${InvalidServicingFacilityLocationException}"
          },
          "400": {
            "description": "${AuthorizationLimitExceededException}"
          },
          "400": {
            "description": "${LineItemLimitExceededException}"
          },
          "400": {
            "description": "${AuthSpecificContactRequiredException}"
          },
          "400": {
            "description": "${AuthSpecificContactInvalidException}"
          },
          "400": {
            "description": "${OonReasonNotAllowedWhenInNetworkException}"
          },
          "400": {
            "description": "${AssigneeDisabledException}"
          },
          "400": {
            "description": "${AssigneeMissingMemberPermissionException}"
          },
          "400": {
            "description": "${InvalidNotificationTaskException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "404": {
            "description": "${AlreadyUnlockedException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/UpdateAuthorizationResponse"
            }
          }
        },
        "summary": "Updates parts of authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/reopen": {
      "post": {
        "description": "${description/authorizations/reopenAuthorization.html}",
        "operationId": "reopenAuthorization-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyOpenException}"
          },
          "400": {
            "description": "${OperationNotSupportedOnDraftAuthorizationException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${InvalidAuthorizationTypeException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          }
        },
        "summary": "Reopen a specific authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/request-for-information": {
      "get": {
        "description": "${description/authorizations/getAuthorizationRequestForInformation.html}",
        "operationId": "getAuthorizationRequestForInformation",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/RequestForInformation"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get the requests for information (RFIs) on an authorization",
        "tags": [
          "authorizations"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/rfi/postRfis.html}",
        "operationId": "postRFIAuthorization",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Create the RFI even for locked authorizations",
            "in": "query",
            "name": "allowForLockedAuth",
            "type": "boolean"
          },
          {
            "description": "The Request For Information Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRequestForInformationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${NotEditableLineItemException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${RequestTypeAlreadyUsedException}"
          },
          "400": {
            "description": "${InvalidReceivedDateException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${QueueNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CreateRequestForInformationResponse"
            }
          }
        },
        "summary": "Create a request for information (RFI) on an authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/request-for-information/count": {
      "get": {
        "description": "${description/authorizations/getCountAuthorizationRequestForInformation.html}",
        "operationId": "getRFICount-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "integer"
            }
          }
        },
        "summary": "Get Requet-for-informtion count for each authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/requesting-provider": {
      "get": {
        "description": "${description/authorizations/getAuthorizationRequestingProvider.html}",
        "operationId": "getAuthorizationRequestingProvider",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/RequestingProvider"
            }
          }
        },
        "summary": "Gets the requesting provider information for an authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/authorizations/{authorizationId}/void": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/voidAuthorization.html}",
        "operationId": "voidAuthorization-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "The void authorization object request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${NotEditableLineItemException}"
          },
          "400": {
            "description": "${NonVoidableLineItemException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/VoidAuthorizationResponse"
            }
          }
        },
        "summary": "Voids an authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/available-teams": {
      "get": {
        "description": "${description/member-properties/getMemberTeams.html}",
        "operationId": "searchAvaliableTeams-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/TeamInfo"
            }
          }
        },
        "summary": "Retrieves list of teams for the member",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/birth-events": {
      "get": {
        "description": "${description/member-summary/getBirthEventSummary.html}",
        "operationId": "getBirthEventSummary",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/BirthEventSummary"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the birth events summary",
        "tags": [
          "birth-events"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/birthevent/createBirthEvent.html}",
        "operationId": "createBirthEvent",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The birth event request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BirthEventRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${MemberNotFoundException}"
          },
          "400": {
            "description": "${AuthorizationNotFoundException}"
          },
          "400": {
            "description": "${BirthEventCurrentMemberRequiredException}"
          },
          "400": {
            "description": "${BirthEventSameMemberException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a birth event",
        "tags": [
          "birth-events"
        ]
      }
    },
    "/members/{memberId}/birth-events/{birthEventId}": {
      "get": {
        "description": "${description/birthevent/getBirthEvent.html}",
        "operationId": "getBirthEventDetails",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Birth event ID",
            "in": "path",
            "name": "birthEventId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${BirthEventNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/BirthEvent"
            }
          }
        },
        "summary": "Gets the birth event details",
        "tags": [
          "birth-events"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/birthevent/editBirthEvent.html}",
        "operationId": "editBirthEvent",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Birth event ID",
            "in": "path",
            "name": "birthEventId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The birth event update request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateBirthEventRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${MemberNotFoundException}"
          },
          "400": {
            "description": "${AuthorizationNotFoundException}"
          },
          "400": {
            "description": "${BirthEventCurrentMemberRequiredException}"
          },
          "400": {
            "description": "${BirthEventSameMemberException}"
          },
          "404": {
            "description": "${BirthEventNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Edits a birth event",
        "tags": [
          "birth-events"
        ]
      }
    },
    "/members/{memberId}/care-opportunity": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/careopportunity/createMemberRiskIndicators.html}",
        "operationId": "createMemberRiskIndicators",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The members risk indicators creation request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRiskIndicatorsRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${JsonValidationException}"
          },
          "400": {
            "description": "${XmlValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${NonUniqueResultException}"
          },
          "400": {
            "description": "${RiskIndicatorAlreadyExistsException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "It creates the member risk indicators list",
        "tags": [
          "care-opportunities"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/careopportunity/updateMemberRiskIndicators.html}",
        "operationId": "updateMemberRiskIndicators",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The members risk indicators update request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRiskIndicatorsRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${JsonValidationException}"
          },
          "400": {
            "description": "${XmlValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${NonUniqueResultException}"
          },
          "400": {
            "description": "${RiskIndicatorNotExistsException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "It updates the member risk indicators list",
        "tags": [
          "care-opportunities"
        ]
      }
    },
    "/members/{memberId}/care-opportunity-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/care-opportunity-search/postCareOpportunitySearch.html}",
        "operationId": "careOpportunitySearch-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The care opportunity search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CareOpportunitySearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CareOpportunitySearchResults"
            }
          }
        },
        "summary": "Search for Member Care Opportunities",
        "tags": [
          "care-opportunities"
        ]
      }
    },
    "/members/{memberId}/care-opportunity/configuration": {
      "get": {
        "description": "${description/careopportunity/getMemberCareOpportunityConfigurationResponse.html}",
        "operationId": "getMemberCareOpportunityConfiguration-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CareOpportunityMemberConfiguration"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets member specific configuration items",
        "tags": [
          "care-opportunities"
        ]
      }
    },
    "/members/{memberId}/care-opportunity/risk-indicators": {
      "get": {
        "description": "${description/careopportunity/getRiskIndicatorResponse.html}",
        "operationId": "getMemberRiskIndicators",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/RiskIndicatorResponse"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the risk indicators by member",
        "tags": [
          "care-opportunities"
        ]
      }
    },
    "/members/{memberId}/care-opportunity/{indicatorCode}/history": {
      "get": {
        "description": "${description/careopportunity/getRiskIndicatorHistoryResponse.html}",
        "operationId": "getMemberRiskIndicatorHistory",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Risk Indicator Code",
            "in": "path",
            "name": "indicatorCode",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${MemberRiskIndicatorCodeException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/RiskIndicatorHistoryResponse"
            }
          }
        },
        "summary": "Get the member's risk indicator and its historical changes",
        "tags": [
          "care-opportunities"
        ]
      }
    },
    "/members/{memberId}/care-opportunity/{indicatorCode}/history-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/careopportunity/postRiskIndicatorHistorySearch.html}",
        "operationId": "searchMemberRiskIndicatorHistory-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Risk Indicator Code",
            "in": "path",
            "name": "indicatorCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "The risk indicator history search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RiskIndicatorHistorySearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${MemberRiskIndicatorCodeException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/RiskIndicatorHistorySearchResults"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get the paginated member's risk indicator and its historical changes",
        "tags": [
          "care-opportunities"
        ]
      }
    },
    "/members/{memberId}/care-plans": {
      "get": {
        "description": "${description/care-plan/getCarePlansSummaryByMemberId.html}",
        "operationId": "getCarePlansSummaryByMemberId",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": true,
            "description": "Includes closed care plans",
            "in": "query",
            "name": "includeClosed",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CarePlanSummary"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a summary of all care plans for a member",
        "tags": [
          "care-plans"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/care-plan/postCarePlan.html}",
        "operationId": "createCarePlan-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Care Plan Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCarePlanRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${CarePlanElementDefinitionException}"
          },
          "403": {
            "description": "${TaskAssignmentClaimException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "404": {
            "description": "${TeamNotFoundException}"
          },
          "404": {
            "description": "${QueueNotFoundException}"
          },
          "404": {
            "description": "${CarePlanElementDefinitionException}"
          },
          "404": {
            "description": "${CarePlanConditionDefinitionNotFoundException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/SubmitCarePlanResponse"
            }
          }
        },
        "summary": "Creates a new Care Plan",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/members/{memberId}/care-plans/actions": {
      "get": {
        "description": "${description/care-plan/getMemberActions.html}",
        "operationId": "getMemberActions",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "ALL",
            "description": "Status to filter actions",
            "enum": [
              "ALL",
              "OPEN",
              "CLOSED"
            ],
            "in": "query",
            "name": "status",
            "type": "string"
          },
          {
            "description": "Type to filter actions. It could be a main type: INTERVENTION, SERVICE_REQUEST, ASSESSMENT, TASK, TEXT or a subtype",
            "in": "query",
            "name": "type",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CarePlanAction"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns all care plan actions for a member",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/members/{memberId}/care-plans/builder-care-plan": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/care-plan/postCarePlansFromBuilder.html}",
        "operationId": "createCarePlanFromBuilder-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Care Plan From Builder Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCarePlansFromBuilderRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${CarePlanElementDefinitionException}"
          },
          "400": {
            "description": "${CarePlanRecommendationArtifactNotAvailableException}"
          },
          "403": {
            "description": "${TaskAssignmentClaimException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "404": {
            "description": "${TeamNotFoundException}"
          },
          "404": {
            "description": "${QueueNotFoundException}"
          },
          "404": {
            "description": "${CarePlanElementDefinitionException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/SaveCarePlanResponse"
              },
              "type": "array"
            }
          }
        },
        "summary": "Creates new Care Plans from Builder",
        "tags": [
          "care-plans"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/care-plan/putCarePlansFromBuilder.html}",
        "operationId": "updateCarePlanFromBuilder-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Care Plan From Builder Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCarePlansFromBuilderRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${CarePlanAlreadyClosedException}"
          },
          "400": {
            "description": "${CarePlanRecommendationArtifactNotAvailableException}"
          },
          "403": {
            "description": "${TaskAssignmentClaimException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${TeamNotFoundException}"
          },
          "404": {
            "description": "${QueueNotFoundException}"
          },
          "404": {
            "description": "${CarePlanNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/SaveCarePlanResponse"
              },
              "type": "array"
            }
          }
        },
        "summary": "Updates existing Care Plans from Builder",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/members/{memberId}/care-plans/objectives": {
      "get": {
        "description": "${description/care-plan/getMemberObjectives.html}",
        "operationId": "getMemberObjectives",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "ALL",
            "description": "Status to filter actions, objectives and problems",
            "enum": [
              "ALL",
              "OPEN",
              "CLOSED"
            ],
            "in": "query",
            "name": "status",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CarePlanObjective"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns all member's care plan objectives",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/members/{memberId}/care-plans/outcomes": {
      "get": {
        "description": "${description/care-plan/getOutcomesByMemberId.html}",
        "operationId": "getOutcomesByMemberId-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${MemberNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ObjectiveOutcomeSummary"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get outcomes for all care plans for a member",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/members/{memberId}/care-plans/problems": {
      "get": {
        "description": "${description/care-plan/getMemberProblems.html}",
        "operationId": "getMemberProblems",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "ALL",
            "description": "Status to filter actions, objectives and problems",
            "enum": [
              "ALL",
              "OPEN",
              "CLOSED"
            ],
            "in": "query",
            "name": "status",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CarePlanProblem"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns all care plan problems for a member",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/members/{memberId}/care-plans/{carePlanId}": {
      "get": {
        "description": "${description/care-plan/getCarePlanDetails.html}",
        "operationId": "getCarePlanDetails",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Care plan identifier",
            "in": "path",
            "name": "carePlanId",
            "required": true,
            "type": "string"
          },
          {
            "default": "ALL",
            "description": "Status to filter actions, objectives and problems",
            "enum": [
              "ALL",
              "OPEN",
              "CLOSED"
            ],
            "in": "query",
            "name": "status",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CarePlanNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CarePlan"
            }
          }
        },
        "summary": "Returns all details of a care plan",
        "tags": [
          "care-plans"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/care-plan/putCarePlan.html}",
        "operationId": "updateCarePlan-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The ID of the Care Plan to update",
            "in": "path",
            "name": "carePlanId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Submit Care Plan upon update",
            "in": "query",
            "name": "submitCarePlan",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Update Care Plan Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCarePlanRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${CarePlanElementDefinitionException}"
          },
          "400": {
            "description": "${CarePlanAssessmentInProgressException}"
          },
          "403": {
            "description": "${TaskAssignmentClaimException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${DraftViolatesDatabaseConstraint}"
          },
          "404": {
            "description": "${TeamNotFoundException}"
          },
          "404": {
            "description": "${QueueNotFoundException}"
          },
          "404": {
            "description": "${CarePlanNotFoundException}"
          },
          "404": {
            "description": "${CarePlanElementDefinitionException}"
          },
          "404": {
            "description": "${CarePlanElementNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/SubmitCarePlanResponse"
            }
          }
        },
        "summary": "Updates an existing Care Plan",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/members/{memberId}/care-plans/{carePlanId}/acknowledgements": {
      "get": {
        "deprecated": true,
        "description": "${description/care-plan/getCarePlanAcknowledgement.html}",
        "operationId": "getCarePlanAcknowledgements",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Care plan identifier",
            "in": "path",
            "name": "carePlanId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CarePlanNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CarePlanAcknowledgement"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns acknowledgments of a care plan",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/members/{memberId}/care-plans/{carePlanId}/acknowledgments": {
      "get": {
        "description": "${description/care-plan/getCarePlanAcknowledgment.html}",
        "operationId": "getCarePlanAcknowledgments",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Care plan identifier",
            "in": "path",
            "name": "carePlanId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CarePlanNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CarePlanAcknowledgement"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns acknowledgments of a care plan",
        "tags": [
          "care-plans"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/care-plan/postAcknowledgments.html}",
        "operationId": "postAcknowledgements-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Care plan identifier",
            "in": "path",
            "name": "carePlanId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Post an acknowledgment",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CarePlanAcknowledgementRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${MemberNotFoundException}"
          },
          "400": {
            "description": "${OptionValueNotFoundException}"
          },
          "400": {
            "description": "${CarePlanNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create an acknowledgement for selected Care Plan",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/members/{memberId}/care-plans/{carePlanId}/closure-information": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/care-plan/closureInformation.html}",
        "operationId": "closureInformation-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Care plan identifier",
            "in": "path",
            "name": "carePlanId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Care Plan details to close",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloseCarePlanRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${OptionValueNotFoundException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${CarePlanAlreadyClosedException}"
          },
          "400": {
            "description": "${CarePlanAssessmentInProgressException}"
          },
          "404": {
            "description": "${CarePlanNotFoundException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          }
        },
        "summary": "Close a member's care plan",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/members/{memberId}/care-plans/{carePlanId}/history": {
      "get": {
        "description": "${description/care-plan/getCarePlanHistory.html}",
        "operationId": "getCarePlanHistory",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Care plan identifier",
            "in": "path",
            "name": "carePlanId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CarePlanNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CarePlanStatus"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns the status change history for a care plan",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/members/{memberId}/care-plans/{carePlanId}/notes": {
      "get": {
        "description": "${description/care-plan/getCarePlanNoteInstance.html}",
        "operationId": "getCarePlanNotes",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Care plan identifier",
            "in": "path",
            "name": "carePlanId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The note creation date from which active notes will be returned. If not provided, all active notes will be returned",
            "in": "query",
            "name": "startDate",
            "type": "string"
          },
          {
            "default": false,
            "description": "Include or exclude voided notes. Empty param will return active notes only",
            "in": "query",
            "name": "includeVoided",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CarePlanNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CarePlanNoteInstance"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns all notes of a care plan, inclusion of voided notes depends on the value of includeVoided",
        "tags": [
          "care-plans"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/care-plan/postCarePlanNote.html}",
        "operationId": "postCarePlanNote-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Care plan identifier",
            "in": "path",
            "name": "carePlanId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Careplan current version",
            "format": "int64",
            "in": "query",
            "name": "careplanVersion",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Note request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminNoteRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${OptionValueNotFoundException}"
          },
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/NewNoteResponse"
            }
          }
        },
        "summary": "Creates a new note for a CarePlan",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/members/{memberId}/care-plans/{carePlanId}/problems/{problemId}/notes": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/care-plan/createCarePlanProblemNote.html}",
        "operationId": "createCarePlanProblemNote-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CarePlan ID",
            "in": "path",
            "name": "carePlanId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CarePlan Problem ID ",
            "in": "path",
            "name": "problemId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CarePlan Problem Version",
            "format": "int64",
            "in": "query",
            "minimum": 0,
            "name": "problemVersion",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The note",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminNoteRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CarePlanAlreadyClosedException}"
          },
          "404": {
            "description": "${CarePlanNotFoundException}"
          },
          "404": {
            "description": "${CarePlanElementNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          },
          "409": {
            "description": "${UserOfflineMemberOnlineException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/NewNoteResponse"
            }
          }
        },
        "summary": "Creates a new Care Plan Problem note",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/members/{memberId}/care-plans/{carePlanId}/related-assessments": {
      "get": {
        "description": "${description/care-plan/getRelatedAssessments.html}",
        "operationId": "getRelatedAssessments-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Care plan identifier",
            "in": "path",
            "name": "carePlanId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CarePlanNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/RelatedAssessment"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns all related assessments of a care plan",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/members/{memberId}/care-plans/{carePlanId}/related-elements-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/care-plan/postRelatedElementsSearch.html}",
        "operationId": "postRelatedElementsSearch-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Care plan identifier",
            "in": "path",
            "name": "carePlanId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "CarePlan related elements search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CarePlanRelatedElementsSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${MemberNotFoundException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${CarePlanNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CarePlanRelatedElementsSearchResults"
            }
          }
        },
        "summary": "Searches for care plan's related elements",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/members/{memberId}/care-plans/{carePlanId}/reopen": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/care-plan/postCarePlanReopen.html}",
        "operationId": "postCarePlanReopen-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Care plan identifier",
            "in": "path",
            "name": "carePlanId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "CarePlan reopen details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReopenCarePlanRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${OptionValueNotFoundException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${CarePlanAlreadyOpenException}"
          },
          "400": {
            "description": "${CarePlanReopenNotAllowedException}"
          },
          "404": {
            "description": "${CarePlanNotFoundException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          }
        },
        "summary": "Reopen a closed Care Plan",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/members/{memberId}/case-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/cases/searchCase.html}",
        "operationId": "searchCases",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The search criteria for cases",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CaseSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CaseSearchResults"
            }
          }
        },
        "summary": "Search for cases",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/case-search-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/cases/searchCaseV2.html}",
        "operationId": "searchCasesV2-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The search criteria for cases",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CaseSearchCriteriaV2"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CaseSearchResultsV2"
            }
          }
        },
        "summary": "Search for cases",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/cases/postCase.html}",
        "operationId": "createCase",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The new case information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCaseRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${InvalidDiagnosisException}"
          },
          "400": {
            "description": "${DuplicateCaseNameException}"
          },
          "400": {
            "description": "${VoidDiagnosisException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CaseIdentity"
            }
          }
        },
        "summary": "Create a member case",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}": {
      "get": {
        "description": "${description/cases/getCase.html}",
        "operationId": "getCase",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The case ID",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CnCase"
            }
          }
        },
        "summary": "Retrieve a member case",
        "tags": [
          "cases"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/cases/putCase.html}",
        "operationId": "updateCase",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The case ID",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          },
          {
            "description": "The updated case information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCaseRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${DiagnosisRequiredException}"
          },
          "400": {
            "description": "${InvalidDiagnosisException}"
          },
          "400": {
            "description": "${DuplicateCaseNameException}"
          },
          "400": {
            "description": "${VoidDiagnosisException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${CaseClosedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Update a member case",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}/assessment-summary": {
      "get": {
        "description": "${description/cases/getAssessmentsByCaseId.html}",
        "operationId": "findAssessmentsByCaseId-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "The member ID",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The case ID",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/BaseAssessment"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get the Assessments of the case",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}/authorizations": {
      "get": {
        "description": "${description/cases/findAuthorizationbyMember.html}",
        "operationId": "findAuthorizationsByMemberAndCaseId-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The case ID",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/SummaryAuthorization"
            }
          }
        },
        "summary": "to see detailed information of the Case and this API provides details regarding authorizations",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}/care-plans": {
      "get": {
        "description": "${description/cases/getCaseCarePlan.html}",
        "operationId": "findCarePlanSummaryByCaseId-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "memberId",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "caseId",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CarePlanSummary"
            }
          }
        },
        "summary": "View CarePlans for a case",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}/case-closure": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/cases/closeCase.html}",
        "operationId": "closeCase",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The case ID",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          },
          {
            "description": "The close case information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloseCaseRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AlreadyClosedException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${OpenTasksForCaseException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          }
        },
        "summary": "Close a member case",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}/case-history-field-changes": {
      "get": {
        "description": "${description/cases/getCaseFieldChangesByCaseId.html}",
        "operationId": "fetchCaseFieldChanges-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The case ID",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          },
          {
            "default": 100,
            "description": "Maximum Number of Items for Case History, will be defaulted to 100 if no value is provided",
            "format": "int32",
            "in": "query",
            "name": "maxItems",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CaseFieldChange"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get the CaseFieldChanges of the case",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}/case-reopen": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/cases/reopenCase.html}",
        "operationId": "reopenCase-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "memberId",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "caseId",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          },
          {
            "description": "Reopen Case Information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReopenCaseRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AlreadyClosedException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${OpenTasksForCaseException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          }
        },
        "summary": "Reopen a member case",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}/close-tasks": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/cases/closeTasks.html}",
        "operationId": "closeTasks-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The case ID",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          },
          {
            "description": "List of Tasks to be closed",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloseTasksRequest"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${TaskNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          }
        },
        "summary": "Close tasks",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}/draft-notifications": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/cases/saveCaseNotification.html}",
        "operationId": "saveCaseNotification-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The case ID",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "saveDraftCaseNotificationRequest",
            "type": "object"
          }
        ],
        "responses": {
          "400": {
            "description": "${TaskNotFoundException}"
          },
          "400": {
            "description": "${CaseNotFoundException}"
          },
          "400": {
            "description": "${LetterTemplateNotFoundException}"
          },
          "400": {
            "description": "${InternalLetterRecipientCreationException}"
          },
          "400": {
            "description": "${UnsupportedDeliveryMethodException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Saves a case notification",
        "tags": [
          "cases"
        ]
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/cases/updateDraftCaseNotification.html}",
        "operationId": "updateDraftCaseNotification-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The case ID",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "updateDraftCaseNotificationRequest",
            "type": "object"
          }
        ],
        "responses": {
          "400": {
            "description": "${TaskNotFoundException}"
          },
          "400": {
            "description": "${InternalLetterRecipientCreationException}"
          },
          "400": {
            "description": "${UnsupportedDeliveryMethodException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          }
        },
        "summary": "Updates a draft case notification",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}/draft-notifications/{draftNotificationId}": {
      "get": {
        "description": "${description/cases/getDraftCaseNotification.html}",
        "operationId": "getDraftCaseNotification-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The case ID",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          },
          {
            "description": "The ID of the draft notification that we want to retrieve",
            "in": "path",
            "name": "draftNotificationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InternalLetterArtifactException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "404": {
            "description": "${DraftNotificationNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CaseNotificationDetails"
            }
          }
        },
        "summary": "Get a draft case notification",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}/notes": {
      "get": {
        "description": "${description/cases/getNotes.html}",
        "operationId": "getNotes-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The case ID",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/NoteInstance"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve a note-details",
        "tags": [
          "cases"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/cases/createCaseNote.html}",
        "operationId": "createCaseNote-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The case ID",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          },
          {
            "description": "The Case current version",
            "format": "int64",
            "in": "query",
            "name": "caseVersion",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Note request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AlreadyClosedException}"
          },
          "400": {
            "description": "${InvalidNoteTypeException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/NewNoteResponse"
            }
          }
        },
        "summary": "Creates a new note for a Case",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}/notifications": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/cases/submitCaseNotification.html}",
        "operationId": "submitCaseNotification-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The case ID",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "submitCaseNotificationRequest",
            "type": "object"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${TaskNotFoundException}"
          },
          "400": {
            "description": "${CaseNotFoundException}"
          },
          "400": {
            "description": "${InternalLetterRecipientCreationException}"
          },
          "400": {
            "description": "${UnsupportedDeliveryMethodException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InternalLetterInfo"
            }
          }
        },
        "summary": "Submits a case notification",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}/program-enrollments": {
      "get": {
        "description": "${description/cases/getCasePrgmEnrollment.html}",
        "operationId": "getPrgmEnrollment-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "memberId",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "caseId",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ProgramEnrollment"
            }
          }
        },
        "summary": "View ProgramEnrollments for each case",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}/referrals": {
      "get": {
        "description": "${description/cases/getReferralsLiteByCaseId.html}",
        "operationId": "findReferralsLiteByCaseId-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The case ID",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ReferralLite"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get the referral list of the case by caseId",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}/service-requests": {
      "get": {
        "description": "${description/cases/getServiceRequestLiteByCaseId.html}",
        "operationId": "findServiceRequestsLiteByCaseId-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The case ID",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ServiceRequestLite"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get the service request list of the case by caseId",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}/tasks": {
      "get": {
        "description": "${description/cases/getOpenCaseTasks.html}",
        "operationId": "getTasksForCaseId-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The case ID",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CaseTasks"
            }
          }
        },
        "summary": "Retrieves list of open task for member case",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}/time-tracking-activities": {
      "get": {
        "description": "${description/cases/timetracking.html}",
        "operationId": "getTimeTrackingList-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member Id",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Case Id",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/TimeTrackingActivity"
            }
          }
        },
        "summary": "Get time tracking details",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}/time-tracking/{timeTrackingId}/void-info": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/cases/postVoidTimeTracking.html}",
        "operationId": "postVoidTimeTracking-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member Id",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Case Id",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "description": "TimeTracking Id",
            "in": "path",
            "name": "timeTrackingId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          },
          {
            "description": "Time Tracking request information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          }
        },
        "summary": "Void time tracking",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/cases/{caseId}/waiver-enrollments": {
      "get": {
        "description": "${description/cases/getEnrollments.html}",
        "operationId": "getHcsEnrollmentSummaryByCaseId-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The case ID",
            "in": "path",
            "name": "caseId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "The type of the Case identifier. The type will be defaulted to 'INTERNAL_ID' if no value is passed.'",
            "enum": [
              "INTERNAL_ID",
              "CASE_NUMBER"
            ],
            "in": "query",
            "name": "caseIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/WaiverEnrollment"
            }
          }
        },
        "summary": " To view waiver enrollments associated with given Case Id in the View Case Detail",
        "tags": [
          "cases"
        ]
      }
    },
    "/members/{memberId}/claims": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/claim/searchClaims.html}",
        "operationId": "claimSearch-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Claims search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClaimsBaseSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ClaimsSearchResults"
            }
          }
        },
        "summary": "Search for claims summaries",
        "tags": [
          "claims"
        ]
      }
    },
    "/members/{memberId}/claims/medications-donut-hole": {
      "get": {
        "description": "${description/claim/getDonutHoleResults.html}",
        "operationId": "getDonutHoleResults-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${MedispanNotConfiguredException}"
          },
          "400": {
            "description": "${NoBhpSetupForMedicationDonutHoleException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LicenseNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MedicationsDonutHoleResult"
            }
          }
        },
        "summary": "Get Medications donut hole",
        "tags": [
          "claims"
        ]
      }
    },
    "/members/{memberId}/claims/{claimId}": {
      "get": {
        "description": "${description/claim/getViewClaims.html}",
        "operationId": "viewClaimResults-internal",
        "parameters": [
          {
            "description": "The Claim Id",
            "in": "path",
            "name": "claimId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ClaimRequestDoesNotBelongToMemberException}"
          },
          "404": {
            "description": "${ClaimRequestNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/BaseClaim"
            }
          }
        },
        "summary": "Claims Summary view",
        "tags": [
          "claims"
        ]
      }
    },
    "/members/{memberId}/coach-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/coach/searchCoach.html}",
        "operationId": "coachSearch-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The search criteria for health coaches",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CoachSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CoachSearchResults"
            }
          }
        },
        "summary": "Search for health coaches",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/contact-information": {
      "get": {
        "description": "${description/member-properties/getContactInformation.html}",
        "operationId": "getContactInformation",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberContactInformation"
            }
          }
        },
        "summary": "Gets the member contact information",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/contact-times": {
      "get": {
        "description": "${description/member-properties/getMemberContactTimes.html}",
        "operationId": "getMemberContactTimes",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberContactTimes"
            }
          }
        },
        "summary": "Gets the preferred contact times of the member",
        "tags": [
          "members"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-properties/setMemberContactTimes.html}",
        "operationId": "setMemberContactTimes",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The updated contact times",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberContactTimes"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates the preferred contact times of the member",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/correspondence-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/correspondence/searchCorrespondence.html}",
        "operationId": "searchCorrespondence",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The search criteria for correspondence summary",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CorrespondenceSummarySearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CorrespondenceSummarySearchResults"
            }
          }
        },
        "summary": "Search for correspondence summaries",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/members/{memberId}/correspondence-search-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/correspondence/searchCorrespondenceV2.html}",
        "operationId": "searchCorrespondence-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The search criteria for correspondence summary",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CorrespondenceSummarySearchCriteriaV2"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CorrespondenceSummarySearchResultsV2"
            }
          }
        },
        "summary": "Search for correspondence summaries",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/members/{memberId}/cost-savings": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/costsavings/createCostSavings.html}",
        "operationId": "createCostSavings-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Create Cost Savings request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCostSavingsRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${OptionValueNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new Cost Savings record for member",
        "tags": [
          "cost-savings"
        ]
      }
    },
    "/members/{memberId}/cost-savings/artifacts": {
      "get": {
        "description": "${description/costsavings/getCostSavingsArtifacts.html}",
        "operationId": "getCostSavingsArtifacts-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "artifactType as a query param",
            "in": "query",
            "name": "artifactType",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "description": "If value is passed as false it returns only Open artifacts otherwise (true or empty) it returns Open and Closed artifacts. This only applies to cases",
            "in": "query",
            "name": "includeClosedCases",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CostSavingsArtifact"
            }
          }
        },
        "summary": "retrieve list of artifacts for a member",
        "tags": [
          "cost-savings"
        ]
      }
    },
    "/members/{memberId}/cost-savings/{costSavingsId}": {
      "get": {
        "description": "${description/costsavings/getCostSavingsDetails.html}",
        "operationId": "getCostSavingsDetails-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Cost Savings Id",
            "in": "path",
            "name": "costSavingsId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${CostSavingDoesNotBelongToMemberException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CostSavingsInstanceSummaryLite"
            }
          }
        },
        "summary": "Retrieves Cost Savings record for member by Id",
        "tags": [
          "cost-savings"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/costsavings/saveCostSavings.html}",
        "operationId": "saveCostSavings-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Cost Savings Id",
            "in": "path",
            "name": "costSavingsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Update Cost Savings request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCostSavingsRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${OptionValueNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Save Cost Savings record for member",
        "tags": [
          "cost-savings"
        ]
      }
    },
    "/members/{memberId}/cost-savings/{costSavingsId}/notes": {
      "get": {
        "description": "${description/costsavings/getCostSavingsNotes.html}",
        "operationId": "getCostSavingsNotes-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Cost Savings identifier",
            "in": "path",
            "name": "costSavingsId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${CostSavingDoesNotBelongToMemberException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/NoteInstance"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets notes of an Cost savings",
        "tags": [
          "cost-savings"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/costsavings/createCostSavingsNote.html}",
        "operationId": "createCostSavingsNote-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Cost Savings identifier",
            "in": "path",
            "name": "costSavingsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Cost Savings Version",
            "format": "int64",
            "in": "query",
            "minimum": 0,
            "name": "costSavingsVersion",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Note request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${CostSavingDoesNotBelongToMemberException}"
          },
          "400": {
            "description": "${InstanceVoidedException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidNoteTypeException}"
          },
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/NewNoteResponse"
            }
          }
        },
        "summary": "Creates a new note for a Cost Savings",
        "tags": [
          "cost-savings"
        ]
      }
    },
    "/members/{memberId}/cost-savings/{costSavingsId}/void-info": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/costsavings/postVoidCostSavings.html}",
        "operationId": "voidCostSavings-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Cost Savings Id",
            "in": "path",
            "name": "costSavingsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The void information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${CostSavingDoesNotBelongToMemberException}"
          },
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Voids the Cost Savings record for member by Id",
        "tags": [
          "cost-savings"
        ]
      }
    },
    "/members/{memberId}/dashboard/timeline": {
      "get": {
        "description": "${description/dashboard/getTimelineData.html}",
        "operationId": "getDashboardTimeline-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The start date e.g. YYYY-MM-DDThh:mm:ss.SSSZ",
            "in": "query",
            "name": "fromDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "The end date e.g. YYYY-MM-DDThh:mm:ss.SSSZ",
            "in": "query",
            "name": "endDate",
            "required": true,
            "type": "string"
          },
          {
            "default": 10,
            "description": "The length",
            "format": "int64",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "length",
            "type": "integer"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/TimelineDataResults"
            }
          }
        },
        "summary": "Get dashboard timeline data",
        "tags": [
          "dashboard-internal"
        ]
      }
    },
    "/members/{memberId}/diagnoses": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/diagnoses/postMemberDiagnosis.html}",
        "operationId": "addDiagnosis",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The diagnosis information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDiagnosisRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${DuplicateDiagnosisException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create a member diagnosis",
        "tags": [
          "diagnoses"
        ]
      }
    },
    "/members/{memberId}/diagnoses-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/diagnosis-search/postDiagnosesSummary.html}",
        "operationId": "diagnosesSearch",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The diagnosis search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnosisSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/DiagnosesSearchResults"
            }
          }
        },
        "summary": "Search for member diagnoses",
        "tags": [
          "diagnosis-codes"
        ]
      }
    },
    "/members/{memberId}/diagnoses/{diagnosisId}": {
      "get": {
        "description": "${description/diagnoses/getDiagnosis.html}",
        "operationId": "getDiagnosis",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The diagnosis ID",
            "in": "path",
            "name": "diagnosisId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Diagnosis"
            }
          }
        },
        "summary": "Gets a member diagnosis",
        "tags": [
          "diagnoses"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/diagnoses/editMemberDiagnosis.html}",
        "operationId": "editDiagnosis",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The diagnosis ID",
            "in": "path",
            "name": "diagnosisId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The diagnosis information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDiagnosisRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyClosedException}"
          },
          "400": {
            "description": "${InstanceVoidedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Update a member diagnosis",
        "tags": [
          "diagnoses"
        ]
      }
    },
    "/members/{memberId}/diagnoses/{diagnosisId}/close": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/diagnoses/closeMemberDiagnosis.html}",
        "operationId": "closeDiagnosis-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The diagnosis ID",
            "in": "path",
            "name": "diagnosisId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The close diagnosis information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloseDiagnosisRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyClosedException}"
          },
          "400": {
            "description": "${InstanceVoidedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          }
        },
        "summary": "Close a member diagnosis",
        "tags": [
          "diagnoses"
        ]
      }
    },
    "/members/{memberId}/diagnoses/{diagnosisId}/void-info": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/diagnoses/voidMemberDiagnosis.html}",
        "operationId": "voidDiagnosis",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The diagnosis ID",
            "in": "path",
            "name": "diagnosisId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The void information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          }
        },
        "summary": "Voids a member medication",
        "tags": [
          "diagnoses"
        ]
      }
    },
    "/members/{memberId}/document-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/documents/postDocumentSearch.html}",
        "operationId": "documentSearch-internal",
        "parameters": [
          {
            "description": "The member ID",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The document search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/DocumentSearchResults"
            }
          }
        },
        "summary": "Search for documents",
        "tags": [
          "documents"
        ]
      }
    },
    "/members/{memberId}/documents": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/members/postMemberDocument.html}",
        "operationId": "addDocument-internal",
        "parameters": [
          {
            "description": "The member ID",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Metadata",
            "in": "formData",
            "name": "metadata",
            "type": "object"
          },
          {
            "description": "Document file",
            "format": "binary",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "${AttachmentFileException}"
          },
          "400": {
            "description": "${AttachmentFileSizeException}"
          },
          "400": {
            "description": "${AttachmentFileNameExtensionException}"
          },
          "400": {
            "description": "${AttachmentFileNamePatternException}"
          }
        },
        "summary": "Add document for member",
        "tags": [
          "documents"
        ]
      }
    },
    "/members/{memberId}/documents/document-types": {
      "get": {
        "description": "${description/documents/getDocumentTypes.html}",
        "operationId": "getDocumentTypes-internal",
        "parameters": [
          {
            "description": "The member ID",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/OptionValue"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get Document Types",
        "tags": [
          "documents"
        ]
      }
    },
    "/members/{memberId}/documents/{documentId}/void-info": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/documents/voidDocument.html}",
        "operationId": "voidDocument-internal",
        "parameters": [
          {
            "description": "The member ID",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The document ID",
            "in": "path",
            "name": "documentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Void Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          }
        },
        "summary": "Void a document",
        "tags": [
          "documents"
        ]
      }
    },
    "/members/{memberId}/draft-aags": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/aag/postSaveAag.html}",
        "operationId": "postSaveAag-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The AAG information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAagRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "400": {
            "description": "${BhpNodeNotFoundException}"
          },
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "400": {
            "description": "${ExtendedAttributeDisabledException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Save the AAG request",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/draft-aags/{aagId}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/aag/postSubmitAagDraft.html}",
        "operationId": "submitAagDraft-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          },
          {
            "description": "The Submit AAG Draft information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDraftAagRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BhpNodeNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AagNotFoundException}"
          },
          "404": {
            "description": "${AagDraftNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Submit the AAG in draft state",
        "tags": [
          "aags"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/aag/putEditSaveAagDraft.html}",
        "operationId": "editSaveAagDraft-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member AAG ID",
            "in": "path",
            "name": "aagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          },
          {
            "description": "The Edit Save AAG Draft information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDraftAagRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BhpNodeNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AagNotFoundException}"
          },
          "404": {
            "description": "${AagDraftNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Edit and save the AAG in draft state",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/draft-aags/{draftAagId}": {
      "get": {
        "description": "${description/aag/getDraftAag.html}",
        "operationId": "getDraftAag-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "DEFAULT",
            "description": "The member AAG ID",
            "in": "path",
            "name": "draftAagId",
            "required": true,
            "type": "string"
          },
          {
            "default": "AAG_ID",
            "description": "Type of the AAG ID. The type will be defaulted to 'AAG_ID' if no value is passed.",
            "enum": [
              "AAG_ID",
              "AAG_NUMBER"
            ],
            "in": "query",
            "name": "aagIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AagNotFoundException}"
          },
          "404": {
            "description": "${AagIsNotDraftException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Aag"
            }
          }
        },
        "summary": "Gets the member's Draft AAG",
        "tags": [
          "aags"
        ]
      }
    },
    "/members/{memberId}/draft-appeals/{appealId}/void": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/appeals/voidDraftAppeal.html}",
        "operationId": "voidDraftAppeal-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "appealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "description": "The void information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AppealClosedException}"
          },
          "400": {
            "description": "${AppealVoidedException}"
          },
          "404": {
            "description": "${AppealNotFoundException}"
          }
        },
        "summary": "Voids an existing draft appeal",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/draft-appeals/{draftAppealId}": {
      "get": {
        "description": "${description/appeals/getAppealDraft.html}",
        "operationId": "getDraftAppeals-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member draft appeal ID",
            "in": "path",
            "name": "draftAppealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the draft appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "draftAppealIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AppealNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Appeal"
            }
          }
        },
        "summary": "Gets the draft appeal",
        "tags": [
          "appeals"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/appeals/postUpdateDraftAppealAndSubmit.html}",
        "operationId": "postUpdateDraftAppealAndSubmit-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "draftAppealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "description": "The appeal information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAuthorizationAppealRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${InvalidUrgencyChangeReasonException}"
          },
          "400": {
            "description": "${MissingUrgencyChangeReasonException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AppealNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Post Update and Submit DraftAppeal",
        "tags": [
          "appeals"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/appeals/putDraftAppeal.html}",
        "operationId": "updateDraftAppeal-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member appeal ID",
            "in": "path",
            "name": "draftAppealId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of the appeal ID. The type will be defaulted to 'INTERNAL_ID' if no value is passed.",
            "enum": [
              "INTERNAL_ID",
              "APPEAL_NUMBER"
            ],
            "in": "query",
            "name": "appealIdType",
            "type": "string"
          },
          {
            "description": "The appeal information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAuthorizationAppealRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${OptionValueNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AppealNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Update an existing Draft appeal instance",
        "tags": [
          "appeals"
        ]
      }
    },
    "/members/{memberId}/draft-assessments": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/assessments/createDraftAssessment.html}",
        "operationId": "createDraftAssessment-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The assessment data to create a draft",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAssessmentTriggerRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "400": {
            "description": "${AttemptedToWorkOnClosedTaskException}"
          },
          "400": {
            "description": "${AssessmentOfSameTypeAlreadyInProgressException}"
          },
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${AssessmentQuestionGroupDefinitionNotFoundException}"
          },
          "400": {
            "description": "${AssessmentAlreadyCompletedException}"
          },
          "400": {
            "description": "${DuplicateSpecialityAssessmentTaskException}"
          },
          "400": {
            "description": "${TaskNotFoundException}"
          },
          "400": {
            "description": "${InvalidProviderException}"
          },
          "400": {
            "description": "${InvalidLocalDateException}"
          },
          "400": {
            "description": "${AssessmentMetaStatusException}"
          },
          "400": {
            "description": "${DuplicateQuestionAnswersException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "400": {
            "description": "${MedispanNotConfiguredException}"
          },
          "400": {
            "description": "${MedicationCannotBeUpdatedException}"
          },
          "400": {
            "description": "${CannotAddInvalidMedicationStatusException}"
          },
          "403": {
            "description": "${UserNotOwnerOfTaskException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${AssessmentMetaNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NotMemberResourceException}"
          },
          "404": {
            "description": "${AssessmentQuestionDefinitionNotFoundException}"
          },
          "404": {
            "description": "${MedicationNotFoundException}"
          },
          "404": {
            "description": "${LicenseNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates draft assessment for a member",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/draft-assessments/{draftAssessmentId}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/assessments/submitDraftAssessment.html}",
        "operationId": "submitDraftAssessment-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The draft assessment instance Id",
            "in": "path",
            "name": "draftAssessmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new assessment data, including answers, notes, outcomes, program enrollments and triggers",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAssessmentTriggerRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AttemptedToWorkOnClosedTaskException}"
          },
          "400": {
            "description": "${AssessmentOfSameTypeAlreadyInProgressException}"
          },
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${AssessmentQuestionGroupDefinitionNotFoundException}"
          },
          "400": {
            "description": "${AssessmentAlreadyCompletedException}"
          },
          "400": {
            "description": "${DuplicateSpecialityAssessmentTaskException}"
          },
          "400": {
            "description": "${TaskNotFoundException}"
          },
          "400": {
            "description": "${InvalidLocalDateException}"
          },
          "400": {
            "description": "${MemberAlreadyEnrolledInProgramException}"
          },
          "400": {
            "description": "${DuplicateQuestionAnswersException}"
          },
          "400": {
            "description": "${MemberCannotBeEnrolledInProgramException}"
          },
          "400": {
            "description": "${MedispanNotConfiguredException}"
          },
          "400": {
            "description": "${MedicationCannotBeUpdatedException}"
          },
          "400": {
            "description": "${CannotAddInvalidMedicationStatusException}"
          },
          "403": {
            "description": "${UserNotOwnerOfTaskException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${AssessmentMetaNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NotMemberResourceException}"
          },
          "404": {
            "description": "${AssessmentNotFoundException}"
          },
          "404": {
            "description": "${AssessmentQuestionDefinitionNotFoundException}"
          },
          "404": {
            "description": "${MedicationNotFoundException}"
          },
          "404": {
            "description": "${LicenseNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Submit a draft assessment",
        "tags": [
          "assessments"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/assessments/updateDraftAssessment.html}",
        "operationId": "updateDraftAssessment-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The draft assessment instance Id",
            "in": "path",
            "name": "draftAssessmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new assessment data, including answers, notes, outcomes",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAssessmentTriggerRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AssessmentMetaNotFoundException}"
          },
          "400": {
            "description": "${MemberNotFoundException}"
          },
          "400": {
            "description": "${AttemptedToWorkOnClosedTaskException}"
          },
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${AssessmentQuestionGroupDefinitionNotFoundException}"
          },
          "400": {
            "description": "${BadTaskIdException}"
          },
          "400": {
            "description": "${AssessmentAlreadyCompletedException}"
          },
          "400": {
            "description": "${InstanceVoidedException}"
          },
          "400": {
            "description": "${MemberAlreadyEnrolledInProgramException}"
          },
          "400": {
            "description": "${DuplicateQuestionAnswersException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "400": {
            "description": "${MedispanNotConfiguredException}"
          },
          "400": {
            "description": "${MedicationCannotBeUpdatedException}"
          },
          "400": {
            "description": "${CannotAddInvalidMedicationStatusException}"
          },
          "403": {
            "description": "${UserNotOwnerOfTaskException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${TaskNotFoundException}"
          },
          "404": {
            "description": "${AssessmentNotFoundException}"
          },
          "404": {
            "description": "${AssessmentQuestionDefinitionNotFoundException}"
          },
          "404": {
            "description": "${MedicationNotFoundException}"
          },
          "404": {
            "description": "${LicenseNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Update a draft assessment",
        "tags": [
          "assessments"
        ]
      }
    },
    "/members/{memberId}/draft-authorizations/{draftAuthorizationId}": {
      "delete": {
        "description": "${description/authorizations/voidDraftAuthorization.html}",
        "operationId": "voidDraftAuthorization-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member draft authorization ID",
            "in": "path",
            "name": "draftAuthorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "Version of the authorization",
            "format": "int64",
            "in": "query",
            "minimum": 1,
            "name": "authorizationVersion",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AuthorizationDoesNotBelongToMemberException}"
          },
          "400": {
            "description": "${InvalidAuthorizationStateException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Voids a draft authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/draft-authorizations/{draftAuthorizationId}/header": {
      "get": {
        "description": "${description/authorizations/getDraftAuthorizationHeader.html}",
        "operationId": "getDraftAuthorizationHeader-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "draftAuthorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationHeader2"
            }
          }
        },
        "summary": "Get draft authorization header with servicing facility information",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/draft-authorizations/{draftAuthorizationId}/line-items": {
      "get": {
        "description": "${description/authorizations/getLineItemsPageDraftAuthorization.html}",
        "operationId": "getLineItemsDraft-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "draftAuthorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": 0,
            "description": "Start Index",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          },
          {
            "default": "LINE_ITEM_NUMBER",
            "enum": [
              "LINE_ITEM_NUMBER",
              "STAY_LEVEL",
              "FROM_DATE",
              "TO_DATE",
              "SERVICE_TYPE",
              "STATUS",
              "SERVICING_PROVIDER",
              "PROCEDURE_CODE"
            ],
            "in": "query",
            "name": "sortColumn",
            "type": "string"
          },
          {
            "default": "ASC",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sortType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether the endpoint returns the last page of results",
            "in": "query",
            "name": "gotoLastPage",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidAuthorizationTypeException}"
          },
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/LineItemPaginatedResults"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a page of line items from a draft authorization.",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/draft-authorizations/{draftAuthorizationId}/line-items/{lineItemNumber}": {
      "delete": {
        "description": "${description/authorizations/deleteDraftAuthorizationLineItem.html}",
        "operationId": "voidDraftAuthorizationLineItem-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member draft authorization ID",
            "in": "path",
            "name": "draftAuthorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The line item number",
            "format": "int32",
            "in": "path",
            "name": "lineItemNumber",
            "required": true,
            "type": "integer"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": -1,
            "description": "Version of the line item",
            "format": "int64",
            "in": "query",
            "name": "lineItemVersion",
            "required": true,
            "type": "integer"
          },
          {
            "default": -1,
            "description": "Version of the authorization",
            "format": "int64",
            "in": "query",
            "name": "authorizationVersion",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${NotEditableLineItemException}"
          },
          "400": {
            "description": "${NonVoidableLineItemException}"
          },
          "400": {
            "description": "${LineItemAlreadyVoidedException}"
          },
          "400": {
            "description": "${NotEditableLineItemAuthLockedException}"
          },
          "400": {
            "description": "${InvalidAuthorizationStateException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          }
        },
        "summary": "Delete a draft line item from a draft authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/draft-authorizations/{draftAuthorizationId}/partial-update": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/patchDraftAuthorization.html}",
        "operationId": "partiallyUpdateDraftAuthorization-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member draft authorization ID",
            "in": "path",
            "name": "draftAuthorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether copy is being created, UDFs are being copied even if they are marked as hidden",
            "in": "query",
            "name": "copyArtifact",
            "type": "boolean"
          },
          {
            "description": "The Inpatient Authorization Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDraftAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${LineItemTypeNotAllowedByBhpNodeException}"
          },
          "400": {
            "description": "${InvalidDischargedDateException}"
          },
          "400": {
            "description": "${AuthorizationDisabledTypeException}"
          },
          "400": {
            "description": "${LineItemInvalidUpdateException}"
          },
          "400": {
            "description": "${OonReasonNotAllowedWhenInNetworkException}"
          },
          "400": {
            "description": "${DraftViolatesDatabaseConstraint}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${OptionValueNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationAndLineItemsSummary"
            }
          }
        },
        "summary": "Updates parts of draft authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/draft-care-plans": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/care-plan/postCarePlanDraft.html}",
        "operationId": "createCarePlanDraft-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Care Plan Draft Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCarePlanRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${CarePlanElementDefinitionException}"
          },
          "403": {
            "description": "${TaskAssignmentClaimException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${DraftViolatesDatabaseConstraint}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "404": {
            "description": "${TeamNotFoundException}"
          },
          "404": {
            "description": "${QueueNotFoundException}"
          },
          "404": {
            "description": "${CarePlanElementDefinitionException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/SaveCarePlanResponse"
            }
          }
        },
        "summary": "Creates a new Care Plan Draft",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/members/{memberId}/draft-care-plans/{draftCarePlanId}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/care-plan/postSubmitCarePlanDraft.html}",
        "operationId": "submitCarePlanDraft-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The ID of the Care Plan Draft to update and submit",
            "in": "path",
            "name": "draftCarePlanId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Update Care Plan Draft Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCarePlanRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${CarePlanElementDefinitionException}"
          },
          "400": {
            "description": "${CarePlanIsNotDraftException}"
          },
          "400": {
            "description": "${CarePlanAssessmentInProgressException}"
          },
          "403": {
            "description": "${TaskAssignmentClaimException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${DraftViolatesDatabaseConstraint}"
          },
          "404": {
            "description": "${TeamNotFoundException}"
          },
          "404": {
            "description": "${QueueNotFoundException}"
          },
          "404": {
            "description": "${CarePlanNotFoundException}"
          },
          "404": {
            "description": "${CarePlanElementDefinitionException}"
          },
          "404": {
            "description": "${CarePlanElementNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/SubmitCarePlanResponse"
            }
          }
        },
        "summary": "Updates an existing Care Plan Draft to a submitted Care Plan",
        "tags": [
          "care-plans"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/care-plan/putCarePlanDraft.html}",
        "operationId": "updateCarePlanDraft-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The ID of the Care Plan Draft to update",
            "in": "path",
            "name": "draftCarePlanId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Update Care Plan Draft Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCarePlanRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${CarePlanElementDefinitionException}"
          },
          "400": {
            "description": "${CarePlanIsNotDraftException}"
          },
          "403": {
            "description": "${TaskAssignmentClaimException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${DraftViolatesDatabaseConstraint}"
          },
          "404": {
            "description": "${TeamNotFoundException}"
          },
          "404": {
            "description": "${QueueNotFoundException}"
          },
          "404": {
            "description": "${CarePlanNotFoundException}"
          },
          "404": {
            "description": "${CarePlanElementDefinitionException}"
          },
          "404": {
            "description": "${CarePlanElementNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/SaveCarePlanResponse"
            }
          }
        },
        "summary": "Updates an existing Care Plan Draft",
        "tags": [
          "care-plans"
        ]
      }
    },
    "/members/{memberId}/draft-cost-savings": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/costsavings/createCostSavingsDraft.html}",
        "operationId": "createCostSavingsDraft-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Create Cost Savings request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCostSavingsRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${OptionValueNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new Draft Cost Savings record for member",
        "tags": [
          "cost-savings"
        ]
      }
    },
    "/members/{memberId}/draft-cost-savings/{draftCostSavingsId}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/costsavings/submitCostSavingsDraft.html}",
        "operationId": "submitDraftCostSavings-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Draft Cost Savings Id",
            "in": "path",
            "name": "draftCostSavingsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Update Cost Savings request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCostSavingsRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${OptionValueNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Submit draft Cost Savings record for member",
        "tags": [
          "cost-savings"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/costsavings/saveCostSavingsDraft.html}",
        "operationId": "saveDraftCostSavings-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Draft Cost Savings Id",
            "in": "path",
            "name": "draftCostSavingsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Update Cost Savings request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCostSavingsRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${OptionValueNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Save draft Cost Savings record for member",
        "tags": [
          "cost-savings"
        ]
      }
    },
    "/members/{memberId}/draft-external-letters": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/letters/saveExternalLetterDraft.html}",
        "operationId": "saveDraftExternalLetter-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The external letter information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateExternalLetterRequestV2"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${MemberNotFoundException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AuthorizationNotFoundException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${CaseNotFoundException}"
          },
          "400": {
            "description": "${NonUniqueResultException}"
          },
          "400": {
            "description": "${ProgramNotFoundException}"
          },
          "400": {
            "description": "${TaskAttemptNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Save draft of an external letter",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/members/{memberId}/draft-external-letters/{draftExternalLetterId}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/letters/submitDraftExternalLetter.html}",
        "operationId": "submitExternalCorrespondence-internal",
        "parameters": [
          {
            "description": "Letter Id",
            "in": "path",
            "name": "draftExternalLetterId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Draft Letter request object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateExternalLetterRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${ExternalLetterResendException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          }
        },
        "summary": "Method to submit the Draft letter correspondence",
        "tags": [
          "correspondences"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/letters/draftExternalLetter.html}",
        "operationId": "saveExternalCorrespondence-internal",
        "parameters": [
          {
            "description": "Letter Id",
            "in": "path",
            "name": "draftExternalLetterId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Draft Letter request object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateExternalLetterRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${ExternalLetterResendException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          }
        },
        "summary": "Method to Save the Draft letter correspondence",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/members/{memberId}/draft-hcs-individual-service-plan": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/hcs/draftIndividualServicePlan.html}",
        "operationId": "draftIndividualServicePlan-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Save Draft Individual service Plan",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateIndividualServicePlanRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NoteInstanceNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          },
          "404": {
            "description": "${MemberCenteredPlanNotFoundException}"
          },
          "404": {
            "description": "${CarePlanNotFoundException}"
          }
        },
        "summary": " Save Draft Individual Service Plan",
        "tags": [
          "hcs-individual-service-plan-internal"
        ]
      }
    },
    "/members/{memberId}/draft-inpatient-authorizations/{draftAuthorizationId}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postDraftInpatientAuthorization.html}",
        "operationId": "postDraftInpatientAuthorization-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member draft authorization ID",
            "in": "path",
            "name": "draftAuthorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the authorization/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process in case warning message(s) is generated while validating the gaps between dates of IP line items",
            "in": "query",
            "name": "rejectGapsIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process in case warning message(s) is generated while validating the overlaps of dates of IP line items",
            "in": "query",
            "name": "rejectOverlapsIfWarning",
            "type": "boolean"
          },
          {
            "description": "The Inpatient Authorization Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateInpatientAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${JsonValidationException}"
          },
          "400": {
            "description": "${AuthorizationNotFoundException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${DuplicateAuthorizationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidProviderSpecialtyException}"
          },
          "400": {
            "description": "${InvalidServiceTypeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${InpatientLineItemOverlappingDatesException}"
          },
          "400": {
            "description": "${InpatientLineItemGapDatesException}"
          },
          "400": {
            "description": "${LineItemTypeNotAllowedByBhpNodeException}"
          },
          "400": {
            "description": "${InvalidDischargedDateException}"
          },
          "400": {
            "description": "${AuthorizationDisabledTypeException}"
          },
          "400": {
            "description": "${AuthorizationLimitExceededException}"
          },
          "400": {
            "description": "${LineItemLimitExceededException}"
          },
          "400": {
            "description": "${AuthSpecificContactAddressNotRequiredException}"
          },
          "400": {
            "description": "${AuthSpecificContactRequiredException}"
          },
          "400": {
            "description": "${AuthSpecificContactInvalidException}"
          },
          "400": {
            "description": "${DuplicateRxLineItemSameDrugAndDateOverlapException}"
          },
          "400": {
            "description": "${AuthorizationDoesNotBelongToMemberException}"
          },
          "400": {
            "description": "${OonReasonNotAllowedWhenInNetworkException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${AssigneeDisabledException}"
          },
          "400": {
            "description": "${AssigneeMissingMemberPermissionException}"
          },
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/UpdateAuthorizationResponse"
            }
          }
        },
        "summary": "Submits a draft inpatient authorization",
        "tags": [
          "authorizations"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/putInpatientAuthorizationDraft.html}",
        "operationId": "putDraftInpatientAuthorization-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member draft authorization ID",
            "in": "path",
            "name": "draftAuthorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether copy is being created, UDFs are being copied even if they are marked as hidden",
            "in": "query",
            "name": "copyArtifact",
            "type": "boolean"
          },
          {
            "description": "The Inpatient Authorization Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDraftInpatientAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${ObsoleteProviderException}"
          },
          "400": {
            "description": "${LineItemTypeNotAllowedByBhpNodeException}"
          },
          "400": {
            "description": "${InvalidDischargedDateException}"
          },
          "400": {
            "description": "${AuthorizationDisabledTypeException}"
          },
          "400": {
            "description": "${LineItemInvalidUpdateException}"
          },
          "400": {
            "description": "${AuthorizationDoesNotBelongToMemberException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${ExtendedAttributeDisabledException}"
          },
          "400": {
            "description": "${DraftViolatesDatabaseConstraint}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${OptionValueNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationAndLineItemsSummary"
            }
          }
        },
        "summary": "Updates a draft inpatient authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/draft-internal-letters/templates/{templateName}": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/correspondence/postDraftInternalLetter.html}",
        "operationId": "createDraftInternalLetter-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Resource name of a template",
            "in": "path",
            "name": "templateName",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Claims the notification task",
            "in": "query",
            "name": "claimNotificationTask",
            "type": "boolean"
          },
          {
            "in": "formData",
            "name": "createLetterRequest",
            "type": "object"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${LetterAssociatedObjectNotFoundException}"
          },
          "400": {
            "description": "${UnsupportedDeliveryMethodException}"
          },
          "400": {
            "description": "${InternalLetterRecipientException}"
          },
          "400": {
            "description": "${NotificationRecipientTypeNotSupportedException}"
          },
          "400": {
            "description": "${UploadFileException}"
          },
          "403": {
            "description": "${TaskAssignmentClaimException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "404": {
            "description": "${LetterTemplateNotFoundException}"
          },
          "404": {
            "description": "${InvalidLetterAssociatedObjectException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InternalLetterInfo"
            }
          }
        },
        "summary": "Create a new draft internal letter",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/members/{memberId}/draft-internal-letters/{letterId}": {
      "get": {
        "description": "${description/correspondence/getInternalLetterDraftDetails.html}",
        "operationId": "getCorrespondenceDraftDetails-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Letter Id",
            "in": "path",
            "name": "letterId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LetterNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InternalLetterDetails"
            }
          }
        },
        "summary": "Get internal letter details by letterId and memberId",
        "tags": [
          "correspondences"
        ]
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/correspondence/putDraftInternalLetter.html}",
        "operationId": "saveDraftInternalLetter-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Letter ID",
            "in": "path",
            "name": "letterId",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "updateLetterRequest",
            "type": "object"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${LetterAssociatedObjectNotFoundException}"
          },
          "400": {
            "description": "${UnsupportedDeliveryMethodException}"
          },
          "400": {
            "description": "${InternalLetterRecipientException}"
          },
          "400": {
            "description": "${UploadFileException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "404": {
            "description": "${LetterTemplateNotFoundException}"
          },
          "404": {
            "description": "${InvalidLetterAssociatedObjectException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InternalLetterInfo"
            }
          }
        },
        "summary": "Save an existing draft internal letter",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/members/{memberId}/draft-referrals": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/referrals/postReferralDraft.html}",
        "operationId": "saveReferralDraft-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The option of which referral related screen configuration to validate against",
            "enum": [
              "SUBMITANDVIEW",
              "DECISION",
              "EVALUATION"
            ],
            "in": "query",
            "name": "option",
            "type": "string"
          },
          {
            "description": "The new referral draft information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SaveReferralDraftRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "400": {
            "description": "${DraftViolatesDatabaseConstraint}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ReferralResponseLite"
            }
          }
        },
        "summary": "Creates a draft of a member referral",
        "tags": [
          "referrals"
        ]
      }
    },
    "/members/{memberId}/draft-referrals/{draftReferralId}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/referrals/postSubmitReferralDraft.html}",
        "operationId": "submitReferralDraft-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Referral ID of the draft",
            "in": "path",
            "name": "draftReferralId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The option of which referral related screen configuration to validate against",
            "enum": [
              "SUBMITANDVIEW",
              "DECISION",
              "EVALUATION"
            ],
            "in": "query",
            "name": "option",
            "type": "string"
          },
          {
            "description": "The new referral draft information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateReferralRequest2"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "400": {
            "description": "${NotEditableReferralException}"
          },
          "403": {
            "description": "${UserNotOwnerOfTaskException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ReferralNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ReferralResponseLite"
            }
          }
        },
        "summary": "Submits an existing referral draft",
        "tags": [
          "referrals"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/referrals/updateReferralDraft.html}",
        "operationId": "updateReferralDraft-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The ID of the referral draft to update",
            "in": "path",
            "name": "draftReferralId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The option of which referral related screen configuration to validate against",
            "enum": [
              "SUBMITANDVIEW",
              "DECISION",
              "EVALUATION"
            ],
            "in": "query",
            "name": "option",
            "type": "string"
          },
          {
            "description": "The updated referral draft information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateReferralDraftRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${NotEditableDraftReferralException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "400": {
            "description": "${DraftViolatesDatabaseConstraint}"
          },
          "403": {
            "description": "${UserNotOwnerOfTaskException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ReferralNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Updates a draft of a member referral",
        "tags": [
          "referrals"
        ]
      }
    },
    "/members/{memberId}/draft-rx-authorizations/{draftAuthorizationId}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/updateAndSubmitRXAuthorization.html}",
        "operationId": "updateAndSubmitRxAuthorization-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member draft authorization ID",
            "in": "path",
            "name": "draftAuthorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the authorization/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process in case warning message(s) is generated while validating the gaps between dates of IP line items",
            "in": "query",
            "name": "rejectGapsIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process in case warning message(s) is generated while validating the overlaps of dates of IP line items",
            "in": "query",
            "name": "rejectOverlapsIfWarning",
            "type": "boolean"
          },
          {
            "description": "The RX Authorization Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRxAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${JsonValidationException}"
          },
          "400": {
            "description": "${AuthorizationNotFoundException}"
          },
          "400": {
            "description": "${DuplicateAuthorizationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidDischargedDateException}"
          },
          "400": {
            "description": "${InvalidProviderSpecialtyException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${LineItemInvalidUpdateException}"
          },
          "400": {
            "description": "${DuplicateRxLineItemSameDrugAndDateOverlapException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${AssigneeMissingMemberPermissionException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${OptionValueNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationAndLineItemsSummary"
            }
          }
        },
        "summary": "Updates and Submit RX authorization",
        "tags": [
          "authorizations"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/putRXAuthorizationDraft.html}",
        "operationId": "putDraftRXAuthorization-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member draft authorization ID",
            "in": "path",
            "name": "draftAuthorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether copy is being created, UDFs are being copied even if they are marked as hidden",
            "in": "query",
            "name": "copyArtifact",
            "type": "boolean"
          },
          {
            "description": "The RX Authorization Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDraftRxAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${LineItemTypeNotAllowedByBhpNodeException}"
          },
          "400": {
            "description": "${InvalidDischargedDateException}"
          },
          "400": {
            "description": "${AuthorizationDisabledTypeException}"
          },
          "400": {
            "description": "${LineItemInvalidUpdateException}"
          },
          "400": {
            "description": "${AuthorizationDoesNotBelongToMemberException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${ExtendedAttributeDisabledException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${OptionValueNotFoundException}"
          },
          "404": {
            "description": "${DraftViolatesDatabaseConstraint}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationAndLineItemsSummary"
            }
          }
        },
        "summary": "Updates a draft RX authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/draft-rx-authorizations/{draftAuthorizationId}/attachments": {
      "get": {
        "description": "${description/authorizations/getRxDraftAuthorizationAttachments.html}",
        "operationId": "getDraftAuthorizationAttachments-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member draft authorization ID",
            "in": "path",
            "name": "draftAuthorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/DocumentInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the attachments information for an Draft Rx authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/draft-rx-authorizations/{draftAuthorizationId}/notes": {
      "get": {
        "description": "${description/authorizations/getRxDraftAuthorizationNotes.html}",
        "operationId": "getDraftAuthorizationNotes-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member draft authorization ID",
            "in": "path",
            "name": "draftAuthorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/NoteInstance"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the notes of an Draft Rx authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/draft-rx-authorizations/{draftAuthorizationId}/notifications/correspondence-notifications": {
      "get": {
        "description": "${description/authorizations/getRxDraftCorrespondenceNotifications.html}",
        "operationId": "getDraftAuthorizationCorrespondenceNotifications-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member draft authorization ID",
            "in": "path",
            "name": "draftAuthorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CorrespondenceNotification"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the correspondence notifications for an Draft Rx authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/draft-rx-authorizations/{draftAuthorizationId}/notifications/phone-notifications": {
      "get": {
        "description": "${description/authorizations/getRxDraftPhoneNotifications.html}",
        "operationId": "getDraftAuthorizationPhoneNotifications-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member draft authorization ID",
            "in": "path",
            "name": "draftAuthorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/PhoneNotification"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the phone notifications for an Draft Rx authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/draft-service-procedure-authorizations/{draftAuthorizationId}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postServiceProcedureAuthorizationDraftV2.html}",
        "operationId": "postDraftServiceProcedureAuthorization-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member draft authorization ID",
            "in": "path",
            "name": "draftAuthorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the authorization/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "description": "The Service Procedure Authorization Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServiceProcedureAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${JsonValidationException}"
          },
          "400": {
            "description": "${AuthorizationNotFoundException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${DuplicateAuthorizationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidProviderSpecialtyException}"
          },
          "400": {
            "description": "${InvalidServiceTypeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${LineItemTypeNotAllowedByBhpNodeException}"
          },
          "400": {
            "description": "${AuthorizationDisabledTypeException}"
          },
          "400": {
            "description": "${AuthorizationLimitExceededException}"
          },
          "400": {
            "description": "${LineItemLimitExceededException}"
          },
          "400": {
            "description": "${AuthSpecificContactAddressNotRequiredException}"
          },
          "400": {
            "description": "${AuthSpecificContactRequiredException}"
          },
          "400": {
            "description": "${AuthSpecificContactInvalidException}"
          },
          "400": {
            "description": "${AuthorizationDoesNotBelongToMemberException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${AssigneeDisabledException}"
          },
          "400": {
            "description": "${AssigneeMissingMemberPermissionException}"
          },
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/UpdateAuthorizationResponse"
            }
          }
        },
        "summary": "Submits a draft service procedure authorization",
        "tags": [
          "authorizations"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/putServiceProcedureAuthorizationDraft.html}",
        "operationId": "putDraftServiceProcedureAuthorization-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member draft authorization ID",
            "in": "path",
            "name": "draftAuthorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether copy is being created, UDFs are being copied even if they are marked as hidden",
            "in": "query",
            "name": "copyArtifact",
            "type": "boolean"
          },
          {
            "description": "The Inpatient Authorization Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDraftServiceProcedureAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${JsonValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidProviderSpecialtyException}"
          },
          "400": {
            "description": "${InvalidServiceTypeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${ObsoleteProviderException}"
          },
          "400": {
            "description": "${AuthorizationDisabledTypeException}"
          },
          "400": {
            "description": "${LineItemInvalidUpdateException}"
          },
          "400": {
            "description": "${AuthorizationDoesNotBelongToMemberException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "400": {
            "description": "${ExtendedAttributeDisabledException}"
          },
          "400": {
            "description": "${DraftViolatesDatabaseConstraint}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${OptionValueNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationAndLineItemsSummary"
            }
          }
        },
        "summary": "Updates a draft service procedure authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/draft-service-requests": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/postSaveServiceRequest.html}",
        "operationId": "saveServiceRequest-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether review is required and to create review task",
            "in": "query",
            "name": "needsReview",
            "type": "boolean"
          },
          {
            "description": "The CreateServiceRequestRequest Requesting Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateServiceRequestRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${TeamNotFoundException}"
          },
          "400": {
            "description": "${HCSFeatureNotAvailableForBHPException}"
          },
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Save a service request request",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/draft-service-requests/{draftServiceRequestId}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/submitDraftServiceRequest.html}",
        "operationId": "submitDraftServiceRequest-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member service request ID",
            "in": "path",
            "name": "draftServiceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether to abort service request submission process  in case warning message(s) is generated while validating the service request/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether review is required and to create review task",
            "in": "query",
            "name": "needsReview",
            "type": "boolean"
          },
          {
            "description": "The UpdateServiceRequestRequest object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServiceRequestRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${AlreadyClosedException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${TeamNotFoundException}"
          },
          "400": {
            "description": "${DuplicateServiceRequestException}"
          },
          "400": {
            "description": "${InvalidModifierCodeException}"
          },
          "400": {
            "description": "${InvalidServiceOfferNegotiateRateException}"
          },
          "400": {
            "description": "${InvalidServiceCodeException}"
          },
          "400": {
            "description": "${InvalidServiceOfferException}"
          },
          "400": {
            "description": "${HCSFeatureNotAvailableForBHPException}"
          },
          "400": {
            "description": "${InvalidRequestDateException}"
          },
          "400": {
            "description": "${AuthorizationLimitExceededException}"
          },
          "400": {
            "description": "${LineItemLimitExceededException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${InvalidServiceRequestQuantityException}"
          },
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InvalidServiceRequestStatusException}"
          },
          "404": {
            "description": "${ServiceRequestIsNotDraftException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Submit a Service Request which is in DRAFT state for a member",
        "tags": [
          "service-requests"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/updateDraftServiceRequest.html}",
        "operationId": "updateDraftServiceRequest-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member service request ID",
            "in": "path",
            "name": "draftServiceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether review is required and to create review task",
            "in": "query",
            "name": "needsReview",
            "type": "boolean"
          },
          {
            "description": "The UpdateServiceRequestRequest object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServiceRequestRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${AlreadyClosedException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${TeamNotFoundException}"
          },
          "400": {
            "description": "${HCSFeatureNotAvailableForBHPException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestIsNotDraftException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Update and Save a service request request",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/drug-allergy-reactions-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/medications/postDrugAllergyReactionsSearch.html}",
        "operationId": "postDrugAllergyReactionsSearch-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MedispanDrugReactionSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${MedispanNotConfiguredException}"
          },
          "400": {
            "description": "${MedispanAllergiesNotEnabledException}"
          },
          "404": {
            "description": "${LicenseNotFoundException}"
          },
          "404": {
            "description": "${MediSpanDrugAllergenScreeningException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MedispanAllergenSearchResults"
            }
          }
        },
        "summary": "Search for reacting allergies",
        "tags": [
          "medications"
        ]
      }
    },
    "/members/{memberId}/duplicate-medications-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/medication-screening/postMemberDuplicateMedication.html}",
        "operationId": "searchDuplicateMedication-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "duplicate medication search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DuplicateMedicationCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${MedispanNotConfiguredException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/DuplicateMedicationResults"
            }
          }
        },
        "summary": "Search for duplicate medication for member medications",
        "tags": [
          "medications"
        ]
      }
    },
    "/members/{memberId}/eligibilities": {
      "get": {
        "description": "${description/eligibilities/getClientEligibilities.html}",
        "operationId": "getClientEligibilities",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Eligibility date: all member eligibilities will be returned which are effective on this date",
            "in": "query",
            "name": "date",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "When set to true, the date parameter is ignored and the API retrieves all of the member's eligibilities but does not return data from UDF fields. Otherwise, the API retrieves all of the client eligibilities effective on the provided date and includes data from any UDF fields.",
            "in": "query",
            "name": "includeAll",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidLocalDateException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Eligibility"
              },
              "type": "array"
            }
          }
        },
        "summary": "Loads all eligibilities that are valid for the given member at the given date",
        "tags": [
          "eligibilities"
        ]
      }
    },
    "/members/{memberId}/eligibilities/{eligibilityId}": {
      "get": {
        "description": "${description/eligibilities/getClientEligibilities.html}",
        "operationId": "getEligibility",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The eligibility ID",
            "in": "path",
            "name": "eligibilityId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Eligibility"
            }
          }
        },
        "summary": "Retrieve a member's eligibility",
        "tags": [
          "eligibilities"
        ]
      }
    },
    "/members/{memberId}/eligibilities/{eligibilityId}/eligibility-benefit": {
      "get": {
        "description": "${description/eligibilities/getEligibilityBenefit.html}",
        "operationId": "getEligibilityBenefit-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The eligibility ID",
            "in": "path",
            "name": "eligibilityId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/EligibilityBenefit"
            }
          }
        },
        "summary": "Retrieve a member's eligibility and benefit",
        "tags": [
          "eligibilities"
        ]
      }
    },
    "/members/{memberId}/emails": {
      "get": {
        "description": "${description/member-contacts/getMemberEmailsList.html}",
        "operationId": "getMemberEmailsList",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ContactEmail"
              },
              "type": "array"
            }
          }
        },
        "summary": "Find member emails",
        "tags": [
          "members"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-contacts/postMemberContactEmail.html}",
        "operationId": "addMemberContactEmail",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new member email address",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactEmail"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create a member email address",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/emails/{contactEmailId}": {
      "get": {
        "description": "${description/member-contacts/getMemberContactEmailAddress.html}",
        "operationId": "getContactEmail",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member contact email ID",
            "in": "path",
            "name": "contactEmailId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ContactEmailNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ContactEmail"
            }
          }
        },
        "summary": "Gets a member contact email address",
        "tags": [
          "members"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-contacts/putMemberContactEmail.html}",
        "operationId": "updateMemberContactEmail",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member contact email ID",
            "in": "path",
            "name": "contactEmailId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The updated member email address",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactEmail"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Update an member email address",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/external-letter-mailings/{letterMailingId}/pdfURL": {
      "get": {
        "description": "${description/letters/getExternalLetterPDF.html}",
        "operationId": "getExternalLetterPdf-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Letter Mailing ID",
            "in": "path",
            "name": "letterMailingId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LetterNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ExternalLetterTemplateVersion"
            }
          }
        },
        "summary": "Gets the PDF URL for an  External letter mailing",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/members/{memberId}/fax/{faxId}": {
      "post": {
        "description": "${description/fax/addFaxToMember.html}",
        "operationId": "addFaxToMember-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Fax Id",
            "in": "path",
            "name": "faxId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${FaxNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array"
            }
          }
        },
        "summary": "Add/Tag the fax to a member",
        "tags": [
          "fax-internal"
        ]
      }
    },
    "/members/{memberId}/general-information": {
      "get": {
        "description": "${description/member-properties/getMemberGeneralInformation.html}",
        "operationId": "getMemberGeneralInformation",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberGeneralInformation"
            }
          }
        },
        "summary": "Gets the general information of the member",
        "tags": [
          "members"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-properties/updateMemberGeneralInformation.html}",
        "operationId": "setMemberGeneralInformation",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The updated general information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMemberGeneralInformationRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates the general information of the member",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/hcs-enrollments": {
      "get": {
        "description": "${description/service-requests/enrollment/getHcsWaiverEnrollments.html}",
        "operationId": "getHcsWaiverEnrollmentList",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Include or exclude voided hcs enrollments. Empty param will not retrieve voided enrollments",
            "in": "query",
            "name": "includeVoided",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${TeamNotFoundException}"
          },
          "400": {
            "description": "${HcsEnrollmentInvalidDateException}"
          },
          "400": {
            "description": "${HcsEnrollmentDateRangeOverlappingException}"
          },
          "400": {
            "description": "${InvalidTaskPackageException}"
          },
          "400": {
            "description": "${TaskPackageNotFoundException}"
          },
          "400": {
            "description": "${CaseClosedException}"
          },
          "403": {
            "description": "${DcmTaskAssignmentException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/WaiverEnrollment"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve HCS Waiver Enrollments associated with a member",
        "tags": [
          "enrollments"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/enrollment/createHcsWaiverEnrollment.html}",
        "operationId": "createHcsWaiverEnrollment",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Hcs Enrollment information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateHcsWaiverEnrollmentRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${TeamNotFoundException}"
          },
          "400": {
            "description": "${HcsEnrollmentInvalidDateException}"
          },
          "400": {
            "description": "${HcsEnrollmentDateRangeOverlappingException}"
          },
          "400": {
            "description": "${InvalidTaskPackageException}"
          },
          "400": {
            "description": "${TaskPackageNotFoundException}"
          },
          "400": {
            "description": "${CaseClosedException}"
          },
          "403": {
            "description": "${DcmTaskAssignmentException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create HCS Enrollment",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/hcs-enrollments-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/hcsenrollment/searchWaiverEnrollmentSummary.html}",
        "operationId": "search-hcsenrollment-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Parameters for filtering the HCS enrollments returned",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HcsWaiverEnrollmentSummarySearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/HcsWaiverEnrollmentSummarySearchResponse"
            }
          }
        },
        "summary": "Retrieves a member's HCS waiver enrollments",
        "tags": [
          "search-hcs-enrollments-internal"
        ]
      }
    },
    "/members/{memberId}/hcs-enrollments-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/enrollment/createHcsWaiverEnrollmentV2.html}",
        "operationId": "createHcsWaiverEnrollment-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The Hcs Enrollment information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateHcsWaiverEnrollmentRequestV2"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${TeamNotFoundException}"
          },
          "400": {
            "description": "${HcsEnrollmentInvalidDateException}"
          },
          "400": {
            "description": "${HcsEnrollmentDateRangeOverlappingException}"
          },
          "400": {
            "description": "${InvalidTaskPackageException}"
          },
          "400": {
            "description": "${TaskPackageNotFoundException}"
          },
          "400": {
            "description": "${CaseClosedException}"
          },
          "403": {
            "description": "${DcmTaskAssignmentException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create HCS Enrollment with ExtendedAttributeRequest",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/hcs-enrollments-v2/{enrollmentId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/enrollment/updateHcsWaiverEnrollmentV2.html}",
        "operationId": "updateHcsWaiverEnrollment-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The Enrollment Id to be updated",
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Cancels all the open Tasks related to Task Packages",
            "in": "query",
            "name": "cancelOpenTasks",
            "type": "boolean"
          },
          {
            "description": "The Hcs Enrollment information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateHcsWaiverEnrollmentRequestV2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${CaseNotFoundException}"
          },
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${TeamNotFoundException}"
          },
          "400": {
            "description": "${HcsEnrollmentInvalidDateException}"
          },
          "400": {
            "description": "${HcsEnrollmentDateRangeOverlappingException}"
          },
          "400": {
            "description": "${InvalidTaskPackageException}"
          },
          "400": {
            "description": "${TaskPackageNotFoundException}"
          },
          "400": {
            "description": "${CaseClosedException}"
          },
          "403": {
            "description": "${DcmTaskAssignmentException}"
          },
          "404": {
            "description": "${HcsEnrollmentNotFoundException}"
          }
        },
        "summary": "Update HCS Enrollment V2",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/hcs-enrollments-v2/{enrollmentId}/closure": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/enrollment/closeHcsWaiverEnrollmentV2.html}",
        "operationId": "closeHcsWaiverEnrollment-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The Enrollment Id to be closed",
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Cancels all the open Tasks related to Task Packages",
            "in": "query",
            "name": "cancelOpenTasks",
            "type": "boolean"
          },
          {
            "description": "The HCS Enrollment Closure information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloseHcsWaiverEnrollmentRequestV2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${HcsEnrollmentCloseDateException}"
          },
          "400": {
            "description": "${HcsEnrollmentClosedException}"
          },
          "400": {
            "description": "${InvalidTaskPackageException}"
          },
          "400": {
            "description": "${TaskPackageNotFoundException}"
          },
          "403": {
            "description": "${DcmTaskAssignmentException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${HcsEnrollmentNotFoundException}"
          }
        },
        "summary": "Close HCS Waiver Enrollment",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/hcs-enrollments/owner": {
      "get": {
        "description": "${description/service-requests/enrollment/getHcsEnrollmentOwner.html}",
        "operationId": "getHcsEnrollmentOwner-internal",
        "parameters": [
          {
            "description": "Member Id",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/HcsEnrollmentOwner"
            }
          }
        },
        "summary": "Get HCS Enrollment Owner",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/hcs-enrollments/with-case": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/enrollment/createHcsWaiverEnrollmentWithCase.html}",
        "operationId": "createHcsWaiverEnrollmentWithCase",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Hcs Enrollment with case information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateHcsWaiverEnrollmentWithCaseRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${DiagnosisRequiredException}"
          },
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${DuplicateCaseNameException}"
          },
          "400": {
            "description": "${TeamNotFoundException}"
          },
          "400": {
            "description": "${HcsEnrollmentInvalidDateException}"
          },
          "400": {
            "description": "${HcsEnrollmentDateRangeOverlappingException}"
          },
          "400": {
            "description": "${InvalidTaskPackageException}"
          },
          "400": {
            "description": "${TaskPackageNotFoundException}"
          },
          "400": {
            "description": "${VoidDiagnosisException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "403": {
            "description": "${DcmTaskAssignmentException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/HcsEnrollmentWithCase"
            }
          }
        },
        "summary": "Create HCS Enrollment with case",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/hcs-enrollments/{enrollmentId}": {
      "get": {
        "description": "${description/service-requests/enrollment/getHcsWaiverEnrollmentById.html}",
        "operationId": "getHcsWaiverEnrollment",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Enrollment Id to be updated",
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${HcsEnrollmentNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/WaiverEnrollment"
            }
          }
        },
        "summary": "Retrieve a HCS Waiver Enrollment",
        "tags": [
          "enrollments"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/enrollment/updateHcsWaiverEnrollment.html}",
        "operationId": "updateHcsWaiverEnrollment",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Enrollment Id to be updated",
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Hcs Enrollment information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateHcsWaiverEnrollmentRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${CaseNotFoundException}"
          },
          "400": {
            "description": "${TeamNotFoundException}"
          },
          "400": {
            "description": "${HcsEnrollmentInvalidDateException}"
          },
          "400": {
            "description": "${HcsEnrollmentDateRangeOverlappingException}"
          },
          "400": {
            "description": "${InvalidTaskPackageException}"
          },
          "400": {
            "description": "${TaskPackageNotFoundException}"
          },
          "400": {
            "description": "${CaseClosedException}"
          },
          "403": {
            "description": "${DcmTaskAssignmentException}"
          },
          "404": {
            "description": "${HcsEnrollmentNotFoundException}"
          }
        },
        "summary": "Update HCS Enrollment",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/hcs-enrollments/{enrollmentId}/assigned-case": {
      "delete": {
        "description": "${description/service-requests/enrollment/deleteHcsEntrollmentCase.html}",
        "operationId": "deleteHcsEntrollmentCase-internal",
        "parameters": [
          {
            "description": "Member Id",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Enrollment Id",
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "${HcsEnrollmentVoidedException}"
          },
          "400": {
            "description": "${NoCaseAssociatedWithEnrollmentException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${HcsEnrollmentNotFoundException}"
          }
        },
        "summary": "Unassign case from the existing HCS enrollment",
        "tags": [
          "enrollments"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/enrollment/postAssignCaseHcsEnrollment.html}",
        "operationId": "postAssignCaseHcsEnrollment-internal",
        "parameters": [
          {
            "description": "Member Id",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Enrollment Id",
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "CaseId information to assign for Hcs Waiver Enrollment",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HCSEnrollmentAssignCaseRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${HcsEnrollmentInvalidDateException}"
          },
          "400": {
            "description": "${HcsEnrollmentClosedException}"
          },
          "400": {
            "description": "${HcsEnrollmentDateRangeOverlappingException}"
          },
          "400": {
            "description": "${HcsEnrollmentVoidedException}"
          },
          "400": {
            "description": "${InvalidTaskPackageException}"
          },
          "400": {
            "description": "${TaskPackageNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "404": {
            "description": "${HcsEnrollmentNotFoundException}"
          }
        },
        "summary": "Assign existing case to HCS enrollment",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/hcs-enrollments/{enrollmentId}/cases": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/enrollment/postHCSEntrollment.html}",
        "operationId": "postHCSEntrollment-internal",
        "parameters": [
          {
            "description": "Member Id",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Enrollment Id",
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The HCS Enrollment Closure information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCaseRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${DuplicateCaseNameException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${HcsEnrollmentNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CaseIdentity"
            }
          }
        },
        "summary": "Add case to the existing HCS enrollment",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/hcs-enrollments/{enrollmentId}/closure": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/enrollment/closeHcsWaiverEnrollment.html}",
        "operationId": "closeHcsWaiverEnrollment",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Enrollment Id to be closed",
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The HCS Enrollment Closure information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloseHcsWaiverEnrollmentRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${HcsEnrollmentCloseDateException}"
          },
          "400": {
            "description": "${HcsEnrollmentClosedException}"
          },
          "400": {
            "description": "${InvalidTaskPackageException}"
          },
          "400": {
            "description": "${TaskPackageNotFoundException}"
          },
          "403": {
            "description": "${DcmTaskAssignmentException}"
          },
          "404": {
            "description": "${HcsEnrollmentNotFoundException}"
          }
        },
        "summary": "Close HCS Waiver Enrollment",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/hcs-enrollments/{enrollmentId}/details": {
      "get": {
        "description": "${description/hcs-enrollment-details/waiverEnrollmentDetails.html}",
        "operationId": "getHCSEnrollmentDetails-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The waiver enrollment ID, obtained from the HCS summary list",
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "Start Index",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 10,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          },
          {
            "default": false,
            "description": "Indicates whether the endpoint returns the last page of results",
            "in": "query",
            "name": "gotoLastPage",
            "type": "boolean"
          },
          {
            "default": "EFFECTIVE_DATE",
            "description": "Sort Column",
            "enum": [
              "EFFECTIVE_DATE",
              "TEAM",
              "FUNDING_SOURCE",
              "STATE_CLASSIFICATIONS",
              "STATUS"
            ],
            "in": "query",
            "name": "sortColumn",
            "type": "string"
          },
          {
            "default": "DESC",
            "description": "Sort Type",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sortType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${HcsEnrollmentNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/HcsWaiverEnrollmentDetailResponse"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the enrollment details for a specific HCS waiver enrollment",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/hcs-enrollments/{enrollmentId}/reopen": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/enrollment/postReopenHcsEnrollment.html}",
        "operationId": "postReopenHcsEnrollment-internal",
        "parameters": [
          {
            "description": "Member Id",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Enrollment Id",
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Cancels all the open Tasks related to Task Packages",
            "in": "query",
            "name": "cancelOpenTasks",
            "type": "boolean"
          },
          {
            "description": "Reopen Hcs Waiver Enrollment request information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReopenHcsWaiverEnrollmentRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${HcsEnrollmentInvalidDateException}"
          },
          "400": {
            "description": "${HcsEnrollmentClosedException}"
          },
          "400": {
            "description": "${HcsEnrollmentDateRangeOverlappingException}"
          },
          "400": {
            "description": "${HcsEnrollmentVoidedException}"
          },
          "400": {
            "description": "${InvalidTaskPackageException}"
          },
          "400": {
            "description": "${TaskPackageNotFoundException}"
          },
          "400": {
            "description": "${HCSEnrollmentTaskClosureException}"
          },
          "400": {
            "description": "${HCSEnrollmentTaskAssigneeNotSpecifiedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundException}"
          },
          "404": {
            "description": "${HcsEnrollmentNotFoundException}"
          }
        },
        "summary": "Reopen Hcs Enrollment",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/hcs-enrollments/{enrollmentId}/void-info": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/enrollment/postVoidHcsEnrollment.html}",
        "operationId": "postVoidHcsEnrollment-internal",
        "parameters": [
          {
            "description": "Member Id",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Enrollment Id",
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Cancels all the open Tasks related to Task Packages",
            "in": "query",
            "name": "cancelOpenTasks",
            "type": "boolean"
          },
          {
            "description": "Void Hcs Waiver Enrollment request information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidHcsWaiverEnrollmentRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${HcsEnrollmentVoidedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${HcsEnrollmentNotFoundException}"
          }
        },
        "summary": "Void Hcs Enrollment",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/hcs-individual-service-plan": {
      "get": {
        "description": "${description/hcs/getIndividualServicePlan.html}",
        "operationId": "getIsp-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${IndividualServicePlanNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/IndividualServicePlan"
            }
          }
        },
        "summary": " Retrieve current individual service plan",
        "tags": [
          "hcs-individual-service-plan-internal"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/hcs/submitIndividualServicePlan.html}",
        "operationId": "submitIndividualServicePlan-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Submit Individual service Plan",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateIndividualServicePlanRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "404": {
            "description": "${NoteInstanceNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          },
          "404": {
            "description": "${MemberCenteredPlanNotFoundException}"
          },
          "404": {
            "description": "${CarePlanNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/IspSnapshot"
            }
          }
        },
        "summary": "Submit Individual Service Plan",
        "tags": [
          "hcs-individual-service-plan-internal"
        ]
      }
    },
    "/members/{memberId}/hcs-individual-service-plan/artifact-details": {
      "get": {
        "description": "${description/hcs/getArtifactDetails.html}",
        "operationId": "getArtifactDetails-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/IspArtifactDetail"
              },
              "type": "array"
            }
          }
        },
        "summary": " Retrieve Artifact details",
        "tags": [
          "hcs-individual-service-plan-internal"
        ]
      }
    },
    "/members/{memberId}/hcs-individual-service-plan/artifacts-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/hcs/ispArtifactSearch.html}",
        "operationId": "ispArtifactSearch-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Search Criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IspArtifactsSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Artifact"
            }
          }
        },
        "summary": " Retrieve artifact Search Results",
        "tags": [
          "hcs-individual-service-plan-internal"
        ]
      }
    },
    "/members/{memberId}/hcs-individual-service-plan/attachments": {
      "get": {
        "description": "${description/hcs/getIspAttachments.html}",
        "operationId": "GetIspAttachments-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${IndividualServicePlanNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/DocumentInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the attachments of IndividualServicePlan",
        "tags": [
          "hcs-individual-service-plan-internal"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/hcs/postIspAttachment.html}",
        "operationId": "PostIspAttachment-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Metadata",
            "in": "formData",
            "name": "metadata",
            "type": "object"
          },
          {
            "description": "Attachment file",
            "format": "binary",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AttachmentFileException}"
          },
          "400": {
            "description": "${AttachmentFileSizeException}"
          },
          "404": {
            "description": "${IndividualServicePlanNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new attachment for Individual Service Plan",
        "tags": [
          "hcs-individual-service-plan-internal"
        ]
      }
    },
    "/members/{memberId}/hcs-individual-service-plan/attachments/{attachmentId}/void": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/hcs/voidIspAttachment.html}",
        "operationId": "voidIspAttachment-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The attachment ID",
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Void metadata",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${IndividualServicePlanNotFoundException}"
          },
          "404": {
            "description": "${AttachmentNotFoundException}"
          }
        },
        "summary": "Void an attachment of the Individual Service Plan",
        "tags": [
          "hcs-individual-service-plan-internal"
        ]
      }
    },
    "/members/{memberId}/hcs-individual-service-plan/isp-snapshots": {
      "get": {
        "description": "${description/hcs/getSnapshot.html}",
        "operationId": "IspSnapshot-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/IspSnapshot"
            }
          }
        },
        "summary": " Retrieve current IspSnapshot",
        "tags": [
          "hcs-individual-service-plan-internal"
        ]
      }
    },
    "/members/{memberId}/hcs-individual-service-plan/isp-snapshots/{ispSnapshotId}/attachments": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/hcs/AttachSignedIsp.html}",
        "operationId": "AttachSignedIsp-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "HCS Individual Service Plan Snapshot Id",
            "in": "path",
            "name": "ispSnapshotId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Metadata",
            "in": "formData",
            "name": "metadata",
            "type": "object"
          },
          {
            "description": "Attachment file",
            "format": "binary",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "${AttachmentFileException}"
          },
          "400": {
            "description": "${AttachmentFileSizeException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${IspSnapShotNotFoundException}"
          },
          "404": {
            "description": "${IndividualServicePlanNotFoundException}"
          }
        },
        "summary": "Creates a new attachment for Individual Service Plan",
        "tags": [
          "hcs-individual-service-plan-internal"
        ]
      }
    },
    "/members/{memberId}/hcs-individual-service-plan/medications": {
      "get": {
        "description": "${description/hcs/getMedications.html}",
        "operationId": "medications-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Medication"
            }
          }
        },
        "summary": " Retrieve current Medications",
        "tags": [
          "hcs-individual-service-plan-internal"
        ]
      }
    },
    "/members/{memberId}/hcs-individual-service-plan/notes": {
      "get": {
        "description": "${description/hcs/getIspNotes.html}",
        "operationId": "IspNotes-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${IndividualServicePlanNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/NoteInstance"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the notes of an Individual service plan",
        "tags": [
          "hcs-individual-service-plan-internal"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/hcs/SubmitIspNote.html}",
        "operationId": "SubmitNotes-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Individual Service Plan current version",
            "format": "int64",
            "in": "query",
            "name": "ispVersion",
            "required": true,
            "type": "integer"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Note request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminNoteRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${IndividualServicePlanNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/NewNoteResponse"
            }
          }
        },
        "summary": "submit a note to the individual service plan",
        "tags": [
          "hcs-individual-service-plan-internal"
        ]
      }
    },
    "/members/{memberId}/header": {
      "get": {
        "description": "${description/member-properties/getMemberHeader.html}",
        "operationId": "getHeader",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberHeader"
            }
          }
        },
        "summary": "Gets the header information of the member",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postInpatientAuthorization.html}",
        "operationId": "postInpatientAuthorization",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the authorization/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process in case warning message(s) is generated while validating the gaps between dates of IP line items",
            "in": "query",
            "name": "rejectGapsIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process in case warning message(s) is generated while validating the overlaps of dates of IP line items",
            "in": "query",
            "name": "rejectOverlapsIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether copy is being created, UDFs are being copied even if they are marked as hidden",
            "in": "query",
            "name": "copyArtifact",
            "type": "boolean"
          },
          {
            "description": "The Inpatient Authorization Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InpatientAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${DuplicateAuthorizationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidProviderSpecialtyException}"
          },
          "400": {
            "description": "${InvalidServiceTypeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${InpatientLineItemOverlappingDatesException}"
          },
          "400": {
            "description": "${InpatientLineItemGapDatesException}"
          },
          "400": {
            "description": "${InvalidModifierCodeException}"
          },
          "400": {
            "description": "${NonVoidableLineItemException}"
          },
          "400": {
            "description": "${LineItemTypeNotAllowedByBhpNodeException}"
          },
          "400": {
            "description": "${InvalidDischargedDateException}"
          },
          "400": {
            "description": "${AuthorizationDisabledTypeException}"
          },
          "400": {
            "description": "${AuthorizationLimitExceededException}"
          },
          "400": {
            "description": "${LineItemLimitExceededException}"
          },
          "400": {
            "description": "${AuthSpecificContactRequiredException}"
          },
          "400": {
            "description": "${AuthSpecificContactInvalidException}"
          },
          "400": {
            "description": "${DuplicateRxLineItemSameDrugAndDateOverlapException}"
          },
          "400": {
            "description": "${AssigneeDisabledException}"
          },
          "400": {
            "description": "${AssigneeMissingMemberPermissionException}"
          },
          "400": {
            "description": "${ExtendedAttributeDisabledException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationAndLineItemsSummary"
            }
          }
        },
        "summary": "Submits an inpatient authorization request",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postInpatientAuthorizationV2.html}",
        "operationId": "postInpatientAuthorization-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates if pre-screen has to be run before creating an authorization.",
            "in": "query",
            "name": "runPrescreenBeforeAuthSubmission",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates if in case pre-screen was run resulting in authorization required a pre-screen note has to be created or not.",
            "in": "query",
            "name": "createPrescreenNote",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the authorization/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process in case warning message(s) is generated while validating the gaps between dates of IP line items",
            "in": "query",
            "name": "rejectGapsIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process in case warning message(s) is generated while validating the overlaps of dates of IP line items",
            "in": "query",
            "name": "rejectOverlapsIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether copy is being created, UDFs are being copied even if they are marked as hidden",
            "in": "query",
            "name": "copyArtifact",
            "type": "boolean"
          },
          {
            "description": "The Inpatient Authorization Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InpatientAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${DuplicateAuthorizationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidProviderSpecialtyException}"
          },
          "400": {
            "description": "${InvalidServiceTypeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${InpatientLineItemOverlappingDatesException}"
          },
          "400": {
            "description": "${InpatientLineItemGapDatesException}"
          },
          "400": {
            "description": "${LineItemTypeNotAllowedByBhpNodeException}"
          },
          "400": {
            "description": "${InvalidDischargedDateException}"
          },
          "400": {
            "description": "${AuthorizationDisabledTypeException}"
          },
          "400": {
            "description": "${AuthorizationLimitExceededException}"
          },
          "400": {
            "description": "${LineItemLimitExceededException}"
          },
          "400": {
            "description": "${AuthSpecificContactRequiredException}"
          },
          "400": {
            "description": "${AuthSpecificContactInvalidException}"
          },
          "400": {
            "description": "${DuplicateRxLineItemSameDrugAndDateOverlapException}"
          },
          "400": {
            "description": "${AssigneeDisabledException}"
          },
          "400": {
            "description": "${AssigneeMissingMemberPermissionException}"
          },
          "400": {
            "description": "${ExtendedAttributeDisabledException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationSubmissionResponse"
            }
          }
        },
        "summary": "Submits an inpatient authorization request",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/draft": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postInpatientAuthorizationDraft.html}",
        "operationId": "postInpatientAuthorizationDraft-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether copy is being created, UDFs are being copied even if they are marked as hidden",
            "in": "query",
            "name": "copyArtifact",
            "type": "boolean"
          },
          {
            "description": "The Inpatient Authorization Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InpatientAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${LineItemTypeNotAllowedByBhpNodeException}"
          },
          "400": {
            "description": "${InvalidDischargedDateException}"
          },
          "400": {
            "description": "${AuthorizationDisabledTypeException}"
          },
          "400": {
            "description": "${OonReasonNotAllowedWhenInNetworkException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${ExtendedAttributeDisabledException}"
          },
          "400": {
            "description": "${DraftViolatesDatabaseConstraint}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${OptionValueNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationAndLineItemsSummary"
            }
          }
        },
        "summary": "Saves a draft inpatient authorization request",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/appeals": {
      "get": {
        "description": "${description/authorizations/getIPAuthorizationAppeals.html}",
        "operationId": "getAuthorizationAppealsSummary",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AuthorizationAppeal"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the appeals for an inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/attachments": {
      "get": {
        "description": "${description/authorizations/getInpatientAuthorizationAttachments.html}",
        "operationId": "getAuthorizationAttachments_1",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/DocumentInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the attachments of an authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/authorizations/postInpatientAuthAttachment.html}",
        "operationId": "postAuthorizationAttachment_1",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Metadata",
            "in": "formData",
            "name": "metadata",
            "type": "object"
          },
          {
            "description": "Attachment file",
            "format": "binary",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AttachmentFileException}"
          },
          "400": {
            "description": "${AttachmentFileSizeException}"
          },
          "400": {
            "description": "${AttachmentFileNameExtensionException}"
          },
          "400": {
            "description": "${AttachmentFileNamePatternException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new attachment for an authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/diagnoses": {
      "get": {
        "description": "${description/authorizations/getInpatientAuthorizationDiagnosis.html}",
        "operationId": "getAuthorizationDiagnosis_1",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationDiagnosis"
            }
          }
        },
        "summary": "Gets the diagnosis information for an inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postInpatientAuthorizationDiagnosisRequest.html}",
        "operationId": "addAuthorizationDiagnosis",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "description": "The diagnosis request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationDiagnosisRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${OperationNotSupportedOnDraftAuthorizationException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${MissingExplanationForOtherVoidReasonException}"
          },
          "400": {
            "description": "${MissingDiagnosisInAuthorizationException}"
          },
          "400": {
            "description": "${InvalidAuthStatusForVoidDiagnosisException}"
          },
          "400": {
            "description": "${MissingDiagnosisInVoidOrAddSectionException}"
          },
          "400": {
            "description": "${InvalidAuthStatusForRemoveDiagnosisException}"
          },
          "400": {
            "description": "${UnspecifiedObjectVersionException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          }
        },
        "summary": "Add, Remove, Void authorization diagnoses",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/discharges": {
      "get": {
        "description": "${description/authorizations/getDischargesForIpAuth.html}",
        "operationId": "getDischargesForIpAuthorization",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/DischargeSummary"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the discharge summaries for the given inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/dischargeAuthorization.html}",
        "operationId": "dischargeAuthorization",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "Discharge request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DischargeRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${AuthorizationAlreadyDischargedException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${InvalidDischargedDateException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          }
        },
        "summary": "Discharge an inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/putDischargeAuthorization.html}",
        "operationId": "updateDischargeAuthorization-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "Discharge request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDischargeDiagnosisRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${DuplicateDischargeDiagnosisException}"
          },
          "400": {
            "description": "${PrimaryDischargeDiagnosisAlreadySetException}"
          },
          "400": {
            "description": "${AuthorizationNotDischargedException}"
          },
          "400": {
            "description": "${PrimaryAxisIDischargeCodeAlreadySetException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          }
        },
        "summary": "Updated the discharge of an inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/header": {
      "get": {
        "description": "${description/authorizations/getInpatientAuthorizationHeader.html}",
        "operationId": "getAuthorizationHeader_1",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InpatientAuthorizationHeader"
            }
          }
        },
        "summary": "Gets the header of an inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/putInpatientAuthorizationHeaderRequest.html}",
        "operationId": "updateAuthorizationHeaderRequest",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates if the intent of this request is to update a locked authorization, waiting on additional information from external systems.",
            "in": "query",
            "name": "lockedAuthUpdate",
            "type": "boolean"
          },
          {
            "description": "The update authorization header request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateInpatientAuthorizationHeaderRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${AssigneeMissingMemberPermissionException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "404": {
            "description": "${AlreadyUnlockedException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates an inpatient authorization header",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/line-items": {
      "get": {
        "description": "${description/authorizations/getInpatientLineItems.html}",
        "operationId": "getAuthorizationLineItems",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/LineItem"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the line items of an inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/addLineItemsToIPAuth.html}",
        "operationId": "addLineItems",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the authorization/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "description": "The line Item request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddLineItemsToInpatientAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${DuplicateAuthorizationException}"
          },
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidProviderSpecialtyException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${AuthorizationLimitExceededException}"
          },
          "400": {
            "description": "${LineItemLimitExceededException}"
          },
          "400": {
            "description": "${AuthSpecificContactRequiredException}"
          },
          "400": {
            "description": "${AuthSpecificContactInvalidException}"
          },
          "400": {
            "description": "${DuplicateRxLineItemSameDrugAndDateOverlapException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationAndLineItemsSummary"
            }
          }
        },
        "summary": "Add line items to an existing authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/line-items/line-item-reviews": {
      "get": {
        "description": "${description/authorizations/getIPAuthorizationLineItemReviews.html}",
        "operationId": "getLineItemReviews_1",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AuthorizationLineItemReview"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the line item reviews for the given authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/line-items/{lineItemNumber}/determination": {
      "get": {
        "description": "${description/authorizations/getInpatientAuthorizationDetermination.html}",
        "operationId": "getDetermination_1",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The line item number",
            "format": "int32",
            "in": "path",
            "name": "lineItemNumber",
            "required": true,
            "type": "integer"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${DeterminationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Determination"
            }
          }
        },
        "summary": "Gets the determination for the line item",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/line-items/{lineItemNumber}/inpatient": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/putIPLineItem.html}",
        "operationId": "updateIPLineItem",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The line item number",
            "format": "int32",
            "in": "path",
            "name": "lineItemNumber",
            "required": true,
            "type": "integer"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates if the intent of this request is to update a locked authorization, waiting on additional information from external systems.",
            "in": "query",
            "name": "lockedAuthUpdate",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the authorization/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "description": "The update request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateInpatientLineItemRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${DeterminationNotAllowedException}"
          },
          "400": {
            "description": "${NotEditableLineItemException}"
          },
          "400": {
            "description": "${NotEditableLineItemAuthLockedException}"
          },
          "400": {
            "description": "${InvalidRequestDateException}"
          },
          "400": {
            "description": "${InvalidRequestedUnitsException}"
          },
          "400": {
            "description": "${AuthorizationLimitExceededException}"
          },
          "400": {
            "description": "${LineItemLimitExceededException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "404": {
            "description": "${AlreadyUnlockedException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates an inpatient line item",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/line-items/{lineItemNumber}/rx": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/putRXLineItem.html}",
        "operationId": "updateRXLineItem",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The line item number",
            "format": "int32",
            "in": "path",
            "name": "lineItemNumber",
            "required": true,
            "type": "integer"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates if the intent of this request is to update a locked authorization, waiting on additional information from external systems.",
            "in": "query",
            "name": "lockedAuthUpdate",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "description": "The update request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRxLineItemRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${DeterminationNotAllowedException}"
          },
          "400": {
            "description": "${NotEditableLineItemException}"
          },
          "400": {
            "description": "${NotEditableLineItemAuthLockedException}"
          },
          "400": {
            "description": "${InvalidRequestDateException}"
          },
          "400": {
            "description": "${InvalidRequestedUnitsException}"
          },
          "400": {
            "description": "${AuthSpecificContactRequiredException}"
          },
          "400": {
            "description": "${AuthSpecificContactInvalidException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "404": {
            "description": "${AlreadyUnlockedException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates a RX line item",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/line-items/{lineItemNumber}/service-procedure": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/putSPLineItem.html}",
        "operationId": "updateSPLineItem",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The line item number",
            "format": "int32",
            "in": "path",
            "name": "lineItemNumber",
            "required": true,
            "type": "integer"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates if the intent of this request is to update a locked authorization, waiting on additional information from external systems.",
            "in": "query",
            "name": "lockedAuthUpdate",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "description": "The update request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServiceProcedureLineItemRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidServiceTypeException}"
          },
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${DeterminationNotAllowedException}"
          },
          "400": {
            "description": "${NotEditableLineItemException}"
          },
          "400": {
            "description": "${NotEditableLineItemAuthLockedException}"
          },
          "400": {
            "description": "${InvalidRequestDateException}"
          },
          "400": {
            "description": "${InvalidRequestedUnitsException}"
          },
          "400": {
            "description": "${AuthSpecificContactRequiredException}"
          },
          "400": {
            "description": "${AuthSpecificContactInvalidException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "404": {
            "description": "${AlreadyUnlockedException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates an service procedure line item",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/linked-authorizations": {
      "get": {
        "description": "${description/authorizations/getLinkedAuthorizationsForIpAuth.html}",
        "operationId": "getLinkedAuthorizationSummariesForIpAuthorization",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AuthorizationSummaryLite"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the linked authorizations for the given inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/notes": {
      "get": {
        "description": "${description/authorizations/getInpatientAuthorizationNotes.html}",
        "operationId": "getAuthorizationNotes_1",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/NoteInstance"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the notes of an inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postInpatientAuthNote.html}",
        "operationId": "postAuthorizationNote_1",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Note request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminNoteRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new note for an inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/notifications/correspondence-notifications": {
      "get": {
        "description": "${description/authorizations/getInpatientCorrespondenceNotifications.html}",
        "operationId": "getAuthorizationCorrespondenceNotifications",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CorrespondenceNotification"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the correspondence notifications for an inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/notifications/phone-notifications": {
      "get": {
        "description": "${description/authorizations/getAuthorizationPhoneNotifications.html}",
        "operationId": "getAuthorizationPhoneNotifications",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/PhoneNotification"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the phone notifications for an inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/readmission": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postReadmitDischargedAuthorization.html}",
        "operationId": "postReadmitDischarged-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "ReadmissionRequest request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReadmissionRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${InstanceVoidedException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${InvalidReadmitDateException}"
          },
          "400": {
            "description": "${InvalidAuthorizationStateException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          }
        },
        "summary": "readmission an inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/readmissions": {
      "get": {
        "description": "${description/authorizations/getInpatientAuthorizationReadmissions.html}",
        "operationId": "getAuthorizationReadmissions",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AuthorizationReadmission"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the readmissions for an inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/reopenings": {
      "get": {
        "description": "${description/authorizations/getInpatientAuthorizationReopenings.html}",
        "operationId": "getAuthorizationReopenings",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AuthorizationReopening"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the reopenings for an inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/request-for-information": {
      "get": {
        "description": "${description/authorizations/getIPAuthorizationRequestForInformation.html}",
        "operationId": "getAuthorizationRequestForInformation_1",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/RequestForInformation"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get the requests for information (RFIs) on a inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/requesting-provider": {
      "get": {
        "description": "${description/authorizations/getInpatientAuthRequestingProvider.html}",
        "operationId": "getAuthorizationRequestingProvider_1",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/RequestingProvider"
            }
          }
        },
        "summary": "Gets the requesting provider of an inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/putInpatientAuthRequestingProviderRequest.html}",
        "operationId": "updateAuthorizationRequestingProvider",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "The requesting provider request.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequestingProviderRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidProviderSpecialtyException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${AuthSpecificContactRequiredException}"
          },
          "400": {
            "description": "${AuthSpecificContactInvalidException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          }
        },
        "summary": "Updates the requesting provider of an inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/servicing-facility": {
      "get": {
        "description": "${description/authorizations/getInpatientAuthServicingFacility.html}",
        "operationId": "getServicingFacility",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ServicingFacility"
            }
          }
        },
        "summary": "Gets a servicing facility for an inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/putInpatientAuthServicingFacility.html}",
        "operationId": "updateServicingFacility",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "The servicing facility request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServicingFacilityRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${InvalidProviderSpecialtyException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${InvalidServicingFacilityLocationException}"
          },
          "400": {
            "description": "${AuthSpecificContactRequiredException}"
          },
          "400": {
            "description": "${AuthSpecificContactInvalidException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          }
        },
        "summary": "Updates an inpatient authorization servicing facility",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/void-discharge": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/voidDischargeAuthorization.html}",
        "operationId": "voidDischargeAuthorization-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "The void request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${InstanceVoidedException}"
          },
          "400": {
            "description": "${InvalidAuthorizationStateException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          }
        },
        "summary": "Void the discharge of an inpatient authorization",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/inpatient-authorizations/{authorizationId}/void-readmission": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postVoidReadmission.html}",
        "operationId": "voidReadmission-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "Void request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${JsonValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${InvalidAuthorizationStateException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          }
        },
        "summary": "Voids a readmission for an inpatient discharge",
        "tags": [
          "inpatient-authorizations"
        ]
      }
    },
    "/members/{memberId}/internal-letter-mailings/{letterMailingId}/pdf": {
      "get": {
        "description": "${description/letters/getLetterPDF.html}",
        "operationId": "getPdf",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Letter Mailing ID",
            "in": "path",
            "name": "letterMailingId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${UnsentLetterMailingException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LetterNotFoundException}"
          },
          "default": {
            "schema": {
              "properties": {
                "allowedMethods": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "uniqueItems": true
                },
                "cookies": {
                  "additionalProperties": {
                    "properties": {
                      "comment": {
                        "type": "string"
                      },
                      "domain": {
                        "type": "string"
                      },
                      "expiry": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "httpOnly": {
                        "type": "boolean"
                      },
                      "maxAge": {
                        "format": "int32",
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "path": {
                        "type": "string"
                      },
                      "secure": {
                        "type": "boolean"
                      },
                      "value": {
                        "type": "string"
                      },
                      "version": {
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "object"
                },
                "date": {
                  "format": "date-time",
                  "type": "string"
                },
                "entity": {
                  "type": "object"
                },
                "entityTag": {
                  "properties": {
                    "value": {
                      "type": "string"
                    },
                    "weak": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "headers": {
                  "additionalProperties": {
                    "items": {
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "language": {
                  "properties": {
                    "country": {
                      "type": "string"
                    },
                    "displayCountry": {
                      "type": "string"
                    },
                    "displayLanguage": {
                      "type": "string"
                    },
                    "displayName": {
                      "type": "string"
                    },
                    "displayScript": {
                      "type": "string"
                    },
                    "displayVariant": {
                      "type": "string"
                    },
                    "extensionKeys": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "iso3Country": {
                      "type": "string"
                    },
                    "iso3Language": {
                      "type": "string"
                    },
                    "language": {
                      "type": "string"
                    },
                    "script": {
                      "type": "string"
                    },
                    "unicodeLocaleAttributes": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "unicodeLocaleKeys": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "variant": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "lastModified": {
                  "format": "date-time",
                  "type": "string"
                },
                "length": {
                  "format": "int32",
                  "type": "integer"
                },
                "links": {
                  "items": {
                    "properties": {
                      "params": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "rel": {
                        "type": "string"
                      },
                      "rels": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "title": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "uri": {
                        "format": "uri",
                        "type": "string"
                      },
                      "uriBuilder": {
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array",
                  "uniqueItems": true
                },
                "location": {
                  "format": "uri",
                  "type": "string"
                },
                "mediaType": {
                  "properties": {
                    "parameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "type": "object"
                    },
                    "subtype": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "wildcardSubtype": {
                      "type": "boolean"
                    },
                    "wildcardType": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "metadata": {
                  "additionalProperties": {
                    "items": {
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "status": {
                  "format": "int32",
                  "type": "integer"
                },
                "statusInfo": {
                  "properties": {
                    "family": {
                      "enum": [
                        "INFORMATIONAL",
                        "SUCCESSFUL",
                        "REDIRECTION",
                        "CLIENT_ERROR",
                        "SERVER_ERROR",
                        "OTHER"
                      ],
                      "type": "string"
                    },
                    "reasonPhrase": {
                      "type": "string"
                    },
                    "statusCode": {
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "stringHeaders": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Gets the PDF for an internal letter mailing",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/members/{memberId}/internal-letters/templates/{templateName}": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/correspondence/postInternalLetter.html}",
        "operationId": "submitInternalLetter-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Resource name of a template",
            "in": "path",
            "name": "templateName",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Claims the notification task",
            "in": "query",
            "name": "claimNotificationTask",
            "type": "boolean"
          },
          {
            "description": "Id of existing letter draft",
            "in": "query",
            "name": "draftLetterId",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "createLetterRequest",
            "type": "object"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AuthorizationDoesNotBelongToMemberException}"
          },
          "400": {
            "description": "${LetterAssociatedObjectNotFoundException}"
          },
          "400": {
            "description": "${InternalLetterRecipientCreationException}"
          },
          "400": {
            "description": "${InvalidInternalLetterUserNotesException}"
          },
          "400": {
            "description": "${UnsupportedDeliveryMethodException}"
          },
          "400": {
            "description": "${InternalLetterRecipientException}"
          },
          "400": {
            "description": "${NotificationRecipientTypeNotSupportedException}"
          },
          "400": {
            "description": "${UploadFileException}"
          },
          "400": {
            "description": "${InvalidInternalLetterStateException}"
          },
          "400": {
            "description": "${InternalLetterArtifactException}"
          },
          "403": {
            "description": "${TaskAssignmentClaimException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${LetterNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "404": {
            "description": "${LetterTemplateNotFoundException}"
          },
          "404": {
            "description": "${InternalLetterRecipientCreationException}"
          },
          "404": {
            "description": "${InvalidLetterAssociatedObjectException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InternalLetterInfo"
            }
          }
        },
        "summary": "Submit new internal letter from scratch or from existing draft",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/members/{memberId}/internal-letters/templates/{templateName}/preview": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/correspondence/postInternalLetterPreview.html}",
        "operationId": "previewInternalLetter-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Resource name of a template",
            "in": "path",
            "name": "templateName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Id of existing letter draft",
            "in": "query",
            "name": "draftLetterId",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "previewLetterRequest",
            "type": "object"
          }
        ],
        "produces": [
          "application/octet-stream",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${LetterAssociatedObjectNotFoundException}"
          },
          "400": {
            "description": "${InternalLetterArtifactException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "404": {
            "description": "${LetterTemplateNotFoundException}"
          },
          "404": {
            "description": "${InvalidLetterAssociatedObjectException}"
          },
          "default": {
            "schema": {
              "properties": {
                "allowedMethods": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "uniqueItems": true
                },
                "cookies": {
                  "additionalProperties": {
                    "properties": {
                      "comment": {
                        "type": "string"
                      },
                      "domain": {
                        "type": "string"
                      },
                      "expiry": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "httpOnly": {
                        "type": "boolean"
                      },
                      "maxAge": {
                        "format": "int32",
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "path": {
                        "type": "string"
                      },
                      "secure": {
                        "type": "boolean"
                      },
                      "value": {
                        "type": "string"
                      },
                      "version": {
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "object"
                },
                "date": {
                  "format": "date-time",
                  "type": "string"
                },
                "entity": {
                  "type": "object"
                },
                "entityTag": {
                  "properties": {
                    "value": {
                      "type": "string"
                    },
                    "weak": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "headers": {
                  "additionalProperties": {
                    "items": {
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "language": {
                  "properties": {
                    "country": {
                      "type": "string"
                    },
                    "displayCountry": {
                      "type": "string"
                    },
                    "displayLanguage": {
                      "type": "string"
                    },
                    "displayName": {
                      "type": "string"
                    },
                    "displayScript": {
                      "type": "string"
                    },
                    "displayVariant": {
                      "type": "string"
                    },
                    "extensionKeys": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "iso3Country": {
                      "type": "string"
                    },
                    "iso3Language": {
                      "type": "string"
                    },
                    "language": {
                      "type": "string"
                    },
                    "script": {
                      "type": "string"
                    },
                    "unicodeLocaleAttributes": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "unicodeLocaleKeys": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "variant": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "lastModified": {
                  "format": "date-time",
                  "type": "string"
                },
                "length": {
                  "format": "int32",
                  "type": "integer"
                },
                "links": {
                  "items": {
                    "properties": {
                      "params": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "rel": {
                        "type": "string"
                      },
                      "rels": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "title": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "uri": {
                        "format": "uri",
                        "type": "string"
                      },
                      "uriBuilder": {
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array",
                  "uniqueItems": true
                },
                "location": {
                  "format": "uri",
                  "type": "string"
                },
                "mediaType": {
                  "properties": {
                    "parameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "type": "object"
                    },
                    "subtype": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "wildcardSubtype": {
                      "type": "boolean"
                    },
                    "wildcardType": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "metadata": {
                  "additionalProperties": {
                    "items": {
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "status": {
                  "format": "int32",
                  "type": "integer"
                },
                "statusInfo": {
                  "properties": {
                    "family": {
                      "enum": [
                        "INFORMATIONAL",
                        "SUCCESSFUL",
                        "REDIRECTION",
                        "CLIENT_ERROR",
                        "SERVER_ERROR",
                        "OTHER"
                      ],
                      "type": "string"
                    },
                    "reasonPhrase": {
                      "type": "string"
                    },
                    "statusCode": {
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "stringHeaders": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Previews internal letter in PDF format",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/members/{memberId}/internal-letters/{letterId}": {
      "get": {
        "description": "${description/correspondence/getInternalLetterDetails.html}",
        "operationId": "getCorrespondenceDetails-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Letter Id",
            "in": "path",
            "name": "letterId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LetterNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InternalLetterDetails"
            }
          }
        },
        "summary": "Get internal letter details by letterId and memberId",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/members/{memberId}/internal-letters/{letterId}/default-recipients": {
      "get": {
        "description": "${description/correspondence/getDefaultRecipients.html}",
        "operationId": "GetDefaultRecipients-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Letter Id",
            "in": "path",
            "name": "letterId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LetterNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/LetterRecipient"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get default recipients for an internal letter",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/members/{memberId}/internal-letters/{letterId}/resend": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/correspondence/putResendInternalLetter.html}",
        "operationId": "resendInternalLetter-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Letter Id",
            "in": "path",
            "name": "letterId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Resend internal letter request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InternalLetterResendRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UnsupportedDeliveryMethodException}"
          },
          "400": {
            "description": "${InternalLetterRecipientException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LetterNotFoundException}"
          },
          "404": {
            "description": "${InternalLetterRecipientNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InternalLetterInfo"
            }
          }
        },
        "summary": "Resend an internal letter",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/members/{memberId}/internal-letters/{letterId}/save-resend": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/correspondence/putSaveResendInternalLetter.html}",
        "operationId": "SaveResend-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Letter Id",
            "in": "path",
            "name": "letterId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Save internal letter during resend",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InternalLetterResendRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UnsupportedDeliveryMethodException}"
          },
          "400": {
            "description": "${InternalLetterRecipientException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LetterNotFoundException}"
          },
          "404": {
            "description": "${InternalLetterRecipientNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InternalLetterInfo"
            }
          }
        },
        "summary": "Save a resent internal letter",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/members/{memberId}/internal-letters/{letterId}/void-info": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/correspondence/voidInternalLetter.html}",
        "operationId": "voidInternalLetter-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Letter Id",
            "in": "path",
            "name": "letterId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Void information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidInternalLetterRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${LatestMailingInvalidStateException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${LetterNotFoundException}"
          }
        },
        "summary": "Void internal letter",
        "tags": [
          "correspondences"
        ]
      }
    },
    "/members/{memberId}/key-metric-definitions": {
      "get": {
        "description": "${description/key-metrics/getMemberKeyMetric.html}",
        "operationId": "getMemberKeyMetric-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/KeyMetricDef"
            }
          }
        },
        "summary": "Gets the key metric ",
        "tags": [
          "key-metrics"
        ]
      }
    },
    "/members/{memberId}/key-metric-definitions/{keyMetricDefinitionId}/key-metrics": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/key-metrics/getMemberKeyMetricDefinition.html}",
        "operationId": "getMemberKeyMetricDefinition-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The search critieria for keymetric instances",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyMetricInstanceSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${KeyMetricDefinitionNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/KeyMetricInstanceSummaryResults"
            }
          }
        },
        "summary": "Gets the key metric Instances",
        "tags": [
          "key-metrics"
        ]
      }
    },
    "/members/{memberId}/key-metrics": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/key-metrics/postKeyMetric.html}",
        "operationId": "addNewKeyMetricInstance",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "A boolean specifying unitInSI passed in teh request",
            "in": "query",
            "name": "unitInSI",
            "type": "boolean"
          },
          {
            "description": "The object describing the properties of the new keymetric instance",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyMetricRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${KeyMetricViolationException}"
          },
          "400": {
            "description": "${KeyMetricDefinitionNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new key metric",
        "tags": [
          "key-metrics"
        ]
      }
    },
    "/members/{memberId}/key-metrics-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/key-metrics-search/searchKeyMetrics.html}",
        "operationId": "keyMetricsSearch",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The key metrics search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyMetricsSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/KeyMetricsSearchResults"
            }
          }
        },
        "summary": "Search for member key metrics",
        "tags": [
          "key-metrics"
        ]
      }
    },
    "/members/{memberId}/key-metrics/{keyMetricId}": {
      "get": {
        "description": "${description/key-metrics/getKeyMetric.html}",
        "operationId": "getKeyMetric",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The keyMetricId ID",
            "in": "path",
            "name": "keyMetricId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${KeyMetricNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/KeyMetricInstance"
            }
          }
        },
        "summary": "Finds a key metric by ID",
        "tags": [
          "key-metrics"
        ]
      }
    },
    "/members/{memberId}/key-metrics/{keyMetricId}/void-info": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/key-metrics/voidKeyMetric.html}",
        "operationId": "voidKeyMetric",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The keyMetricId ID",
            "in": "path",
            "name": "keyMetricId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The void information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${KeyMetricNotFoundException}"
          }
        },
        "summary": "Voids a key metric",
        "tags": [
          "key-metrics"
        ]
      }
    },
    "/members/{memberId}/locations": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-locations/postMemberLocation.html}",
        "operationId": "addMemberLocation-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Member location information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMemberLocationRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${JsonValidationException}"
          },
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create a new member location",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/locations-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-locations/postMemberLocationSearch.html}",
        "operationId": "memberLocationSearch-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member location search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberLocationSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${JsonValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberLocationSearchResults"
            }
          }
        },
        "summary": "Search for Member Locations",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/locations/date-ranges": {
      "get": {
        "description": "${description/member-locations/getDateRanges.html}",
        "operationId": "getDateRanges-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member location ID to get excluded from date range list",
            "in": "query",
            "name": "memberLocationIdToExclude",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/MemberLocation"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve list of occupied effective dates for member locations",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/locations/{memberLocationId}": {
      "get": {
        "description": "${description/member-locations/getMemberLocation.html}",
        "operationId": "getMemberLocation-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "memberLocationId",
            "description": "The member location ID",
            "in": "path",
            "name": "memberLocationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The date of interest, typically current date",
            "format": "int64",
            "in": "query",
            "name": "dateOfInterest",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidMemberLocationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/MemberLocation"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve existing member location",
        "tags": [
          "members"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-locations/putMemberLocation.html}",
        "operationId": "updateMemberLocation-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "memberLocationId",
            "description": "The member location ID",
            "in": "path",
            "name": "memberLocationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Updated member location information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMemberLocationRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${JsonValidationException}"
          },
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "400": {
            "description": "${InvalidMemberLocationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Update an existing member location",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/locations/{memberLocationId}/verification": {
      "delete": {
        "description": "${description/member-locations/unVerifyMemberLocation.html}",
        "operationId": "unVerifyAddress-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "memberLocationId",
            "description": "The member location ID",
            "in": "path",
            "name": "memberLocationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "${InvalidMemberLocationException}"
          },
          "400": {
            "description": "${AddressVerificationDoesNotExistException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "UnVerify the already verified address of an existing member location",
        "tags": [
          "members"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-locations/verifyMemberLocation.html}",
        "operationId": "verifyAddress-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "memberLocationId",
            "description": "The member location ID",
            "in": "path",
            "name": "memberLocationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Verified Address information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberLocationVerificationRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AddressVerificationAlreadyExistsException}"
          },
          "400": {
            "description": "${InvalidMemberLocationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Verify the address of an existing member location",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/locations/{memberLocationId}/void": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-locations/voidMemberLocation.html}",
        "operationId": "voidMemberLocation-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "memberLocationId",
            "description": "The member location ID",
            "in": "path",
            "name": "memberLocationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Voided Member location information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${InvalidMemberLocationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Void an existing member location",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/medication-alerts": {
      "get": {
        "description": "${description/medication-screening/getMemberMedicationAlerts.html}",
        "operationId": "getMemberMedicationAlerts-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${MedispanNotConfiguredException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LicenseNotFoundException}"
          },
          "404": {
            "description": "${MediSpanDrugScreeningException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/MemberMedicationAlert"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get medication alerts for the member",
        "tags": [
          "medications"
        ]
      }
    },
    "/members/{memberId}/medication-regimens": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/medications/postMemberMedicationRegimen.html}",
        "operationId": "addMedication-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The medication information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BaseMedicationRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "10012": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${MedispanNotConfiguredException}"
          },
          "400": {
            "description": "${MedicationCannotBeUpdatedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InvalidProviderException}"
          },
          "404": {
            "description": "${MediSpanDrugSearchException}"
          },
          "404": {
            "description": "${MedicationNotFoundException}"
          },
          "404": {
            "description": "${MediSpanDrugAllergenScreeningException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a member medication regimen",
        "tags": [
          "medications"
        ]
      }
    },
    "/members/{memberId}/medication-regimens-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/medication-regimens/postMedicationRegimensSearch.html}",
        "operationId": "searchMemberMedicationRegimens-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "medication regimens search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MedicationRegimensSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${MedispanNotConfiguredException}"
          },
          "400": {
            "description": "${InvalidStandardConfigurationException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MedicationRegimensSearchResults"
            }
          }
        },
        "summary": "Search for member medication regimens",
        "tags": [
          "medications"
        ]
      }
    },
    "/members/{memberId}/medication-regimens/potential-duplicates": {
      "post": {
        "description": "${description/medication-regimens/postMemberPotentialDuplicates.html}",
        "operationId": "searchPotentialClaimMedicationsDuplicates-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${MedispanNotConfiguredException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/DuplicateMedicationResults"
            }
          }
        },
        "summary": "Search for Potential Duplicates for member's claim based medication",
        "tags": [
          "medications"
        ]
      }
    },
    "/members/{memberId}/medication-regimens/{medicationId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/medications/putMemberMedicationRegimen.html}",
        "operationId": "updateMedication-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The medication ID",
            "in": "path",
            "name": "medicationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The medication information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMedicationRegimenRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${MedispanNotConfiguredException}"
          },
          "400": {
            "description": "${MedicationCannotBeUpdatedException}"
          },
          "400": {
            "description": "${DispensedDrugNotRelatedToDrugNameException}"
          },
          "400": {
            "description": "${DuplicateMedicationIDException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${MediSpanDrugSearchException}"
          },
          "404": {
            "description": "${MedicationNotFoundException}"
          },
          "404": {
            "description": "${MediSpanDrugAllergenScreeningException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Update a member medication regimen",
        "tags": [
          "medications"
        ]
      }
    },
    "/members/{memberId}/medication-regimens/{medicationId}/discontinue-medication": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/medications/putDiscontinueMedicationRegimen.html}",
        "operationId": "discontinuedMedicationRegimen-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The medication ID",
            "in": "path",
            "name": "medicationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The medication information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiscontinueMedicationRegimenRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${InvalidProviderException}"
          },
          "400": {
            "description": "${MedicationCannotBeUpdatedException}"
          },
          "400": {
            "description": "${SupplementCannotBeDiscontinuedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${MedicationNotFoundException}"
          }
        },
        "summary": "discontinue a member medication regimen",
        "tags": [
          "medications"
        ]
      }
    },
    "/members/{memberId}/medication-regimens/{medicationId}/medication-review": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/medications/postMedicationRegimenReview.html}",
        "operationId": "addMedicationReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The medication ID",
            "in": "path",
            "name": "medicationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The medication review information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMedicationRegimenReviewRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${MedispanNotConfiguredException}"
          },
          "400": {
            "description": "${MedicationReviewCannotBeCreatedException}"
          },
          "400": {
            "description": "${InvalidMedicationReviewDateException}"
          },
          "400": {
            "description": "${InvalidMedicationRegimenEndDateException}"
          },
          "400": {
            "description": "${InvalidMedicationNextReviewDateException}"
          },
          "400": {
            "description": "${InvalidMissedDoseDateException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${MedicationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a member medication regimen review",
        "tags": [
          "medications"
        ]
      }
    },
    "/members/{memberId}/medication-regimens/{medicationId}/notes": {
      "get": {
        "description": "${description/medications/getMedicationNotes.html}",
        "operationId": "getMedicationNoteInstanceList-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The medication ID",
            "in": "path",
            "name": "medicationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${MedicationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/NoteInstance"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the list of note details for Medication",
        "tags": [
          "medications"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/medications/postMedicationNote.html}",
        "operationId": "postMedicationNote-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The medication ID",
            "in": "path",
            "name": "medicationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The medication information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminNoteRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${MedicationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create a member medication Note",
        "tags": [
          "medications"
        ]
      }
    },
    "/members/{memberId}/medication-regimens/{medicationId}/reactions": {
      "get": {
        "description": "${description/medication-regimens/getMedicationRegimensAllergyReaction.html}",
        "operationId": "getMedispanMemberAllergyReactions-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The medication ID",
            "in": "path",
            "name": "medicationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${MedispanNotConfiguredException}"
          },
          "400": {
            "description": "${MedispanAllergiesNotEnabledException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LicenseNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/MedispanAllergyReaction"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get the Allergy Reactions for a member for a given medication",
        "tags": [
          "medications"
        ]
      }
    },
    "/members/{memberId}/medications": {
      "get": {
        "description": "${description/medications/getMemberMedications.html}",
        "operationId": "getMemberMedications-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Medication"
            }
          }
        },
        "summary": "Gets a member's medications",
        "tags": [
          "medications"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/medications/postMemberMedication.html}",
        "operationId": "addMedication",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The medication information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMedicationRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidProviderException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a member medication",
        "tags": [
          "medications"
        ]
      }
    },
    "/members/{memberId}/medications-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/medication-search/postMedicationSearch.html}",
        "operationId": "medicationSearch",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "medication search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MedicationSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MedicationSearchResults"
            }
          }
        },
        "summary": "Search for member medications",
        "tags": [
          "medications"
        ]
      }
    },
    "/members/{memberId}/medications-search-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/medication-search/postMedicationSearchV2.html}",
        "operationId": "searchMemberMedications-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "medication search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MedicationSummarySearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${MedispanNotConfiguredException}"
          },
          "400": {
            "description": "${InvalidStandardConfigurationException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MedicationSummarySearchResults"
            }
          }
        },
        "summary": "Search for member medications",
        "tags": [
          "medications"
        ]
      }
    },
    "/members/{memberId}/medications/regimen/{medicationCodeId}": {
      "get": {
        "description": "${description/medications/getMemberMedicationsRegimen.html}",
        "operationId": "getMedicationsRegimen",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The medicationCodeId, obtainable from the medication search",
            "in": "path",
            "name": "medicationCodeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Medication"
              },
              "type": "array"
            }
          }
        },
        "summary": "Finds regimen for a member",
        "tags": [
          "medications"
        ]
      }
    },
    "/members/{memberId}/medications/{medicationId}": {
      "get": {
        "description": "${description/medications/getMedication.html}",
        "operationId": "getMedication",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The medication ID",
            "in": "path",
            "name": "medicationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Medication"
            }
          }
        },
        "summary": "Gets a member medication",
        "tags": [
          "medications"
        ]
      }
    },
    "/members/{memberId}/medications/{medicationId}/void-info": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/medications/voidMemberMedication.html}",
        "operationId": "voidMedication",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The medication ID",
            "in": "path",
            "name": "medicationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The void information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest"
            }
          }
        ],
        "responses": {
          "11201": {
            "description": "${TaskCannotBeCancelledException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          }
        },
        "summary": "Voids a member medication",
        "tags": [
          "medications"
        ]
      }
    },
    "/members/{memberId}/member-centered-plans": {
      "get": {
        "description": "${description/members/getMemberCenteredPlans.html}",
        "operationId": "getMemberCenteredPlans-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberCenteredPlan"
            }
          }
        },
        "summary": "Retrieve Member Centered Plans",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/member-details": {
      "get": {
        "description": "${description/member-properties/getMemberDetails.html}",
        "operationId": "getMemberDetails",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberDetails"
            }
          }
        },
        "summary": "Gets the member details",
        "tags": [
          "members"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-properties/setMemberDetails.html}",
        "operationId": "setMemberDetails",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The updated member details",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberDetailsRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates the member details",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/member-opt-out": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "${description/member-properties/updateMemberOptOut.html}",
        "operationId": "updateMemberContactOptOut",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The updated contact opt out value",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberOptOutRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates the contact opt out of the member",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/merge-history": {
      "get": {
        "description": "${description/members/getMemberMergeHistory.html}",
        "operationId": "getMemberMergeHistory-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/MergeHistoryEvent"
              },
              "type": "array"
            }
          }
        },
        "summary": "Find member merge history",
        "tags": [
          "menus-internal"
        ]
      }
    },
    "/members/{memberId}/mpi": {
      "get": {
        "description": "${description/member-properties/getMemberMpi.html}",
        "operationId": "getMemberMpiRecords",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/MemberMpi"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the MPI summary of the member",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/networks": {
      "get": {
        "description": "${description/member-networks/getMemberNetworkList.html}",
        "operationId": "getMemberNetworks",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Date of service. Finds networks that are active on this date. If empty, assumes today's date. Date format: yyyy-mm-dd",
            "in": "query",
            "name": "date",
            "type": "string"
          },
          {
            "description": "Product ID",
            "in": "query",
            "name": "product_id",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Network"
              },
              "type": "array"
            }
          }
        },
        "summary": "Find member networks",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/notes": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/notes/postNewNote.html}",
        "operationId": "postNewNote",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The note request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberNoteRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AuthorizationNotFoundException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${CaseNotFoundException}"
          },
          "400": {
            "description": "${NoteAttributeMissingException}"
          },
          "400": {
            "description": "${InvalidNoteCategoryException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "403": {
            "description": "${NotFaxDocumentException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "409": {
            "description": "${FaxAlreadyAttachedException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Saves a new note",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes-configuration/member-notes-associations/{associationType}": {
      "get": {
        "description": "${description/notes/getMemberNotesAssociations.html}",
        "operationId": "getMemberNotesAssociations",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The type of association",
            "enum": [
              "CASE",
              "AUTH"
            ],
            "in": "path",
            "name": "associationType",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "If set to true and the associationType is CASE, then closed cases will be part of the return set.",
            "in": "query",
            "name": "includeClosedCases",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/MemberNotesAssociation"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the associations that can be made when creating notes for a member",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/notes/postNotesSearch.html}",
        "operationId": "searchNotesSummary",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The search criteria for notes",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NoteSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${MemberNotFoundException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/NoteSearchResults"
            }
          }
        },
        "summary": "Performs a search for notes",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes-search-configuration": {
      "get": {
        "description": "${description/notes/getNotesSearchConfiguration.html}",
        "operationId": "getNotesSearchConfiguration",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/NotesSearchConfiguration"
            }
          }
        },
        "summary": "Gets the configuration for the notes search",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes-search-configuration-v2": {
      "get": {
        "description": "${description/notes/getNotesSearchConfigurationV2.html}",
        "operationId": "getNotesSearchConfiguration-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/NotesSearchConfiguration"
            }
          }
        },
        "summary": "Gets the configuration for the notes search",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes/identity-verification": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/notes/postNewNoteForIdentity.html}",
        "operationId": "createIdVerificationNote-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The note request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminNoteRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "404": {
            "description": "${NoteDefinitionTypeNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Saves a new note for identity verification",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes/{noteId}": {
      "get": {
        "description": "${description/notes/getViewNote.html}",
        "operationId": "getNoteById",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The note id to retrieve",
            "in": "path",
            "name": "noteId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NoteInstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/NoteInstance"
            }
          }
        },
        "summary": "Gets an existing note data",
        "tags": [
          "notes"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/notes/editNote.html}",
        "operationId": "editNote",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The note id to retrieve",
            "in": "path",
            "name": "noteId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The link information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NoteLinkRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AuthorizationNotFoundException}"
          },
          "400": {
            "description": "${InstanceVoidedException}"
          },
          "400": {
            "description": "${CaseNotFoundException}"
          },
          "400": {
            "description": "${InvalidNoteTypeException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          }
        },
        "summary": "Creates a link for an existing note",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes/{noteId}/aag-info": {
      "get": {
        "description": "${description/notes/getAagNote.html}",
        "operationId": "getAagByNoteId-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The note ID",
            "in": "path",
            "name": "noteId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteInstanceDoesNotBelongToMemberException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NoteNotLinkedToAagException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AagInfo"
            }
          }
        },
        "summary": "Gets an aag by note id",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes/{noteId}/appeal-info": {
      "get": {
        "description": "${description/notes/getAppealNote.html}",
        "operationId": "getAppealByNoteId-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The note ID",
            "in": "path",
            "name": "noteId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${AppealNotFoundByNoteIdAndMemberIdException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AppealInfo"
            }
          }
        },
        "summary": "Gets an appeal by note id",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes/{noteId}/associated-member-centered-plan": {
      "get": {
        "description": "${description/notes/getMemberCenteredPlansByNoteId.html}",
        "operationId": "getMemberCenteredPlanByNoteId-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The note ID",
            "in": "path",
            "name": "noteId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NoteInstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberCenteredPlan"
            }
          }
        },
        "summary": "Get Member Centered Plan By Note ID",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes/{noteId}/associated-notes": {
      "get": {
        "description": "${description/notes/getAssociatedNotes.html}",
        "operationId": "getAssociatedNotes-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The note id to retrieve",
            "in": "path",
            "name": "noteId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "404": {
            "description": "${NoteInstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/NoteInstance"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the associated notes for a given note",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes/{noteId}/attachments": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/notes/postAttachment.html}",
        "operationId": "postNoteAttachment",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The note id to retrieve",
            "in": "path",
            "name": "noteId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Metadata",
            "in": "formData",
            "name": "metadata",
            "type": "object"
          },
          {
            "description": "Attachment file",
            "format": "binary",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${InstanceVoidedException}"
          },
          "400": {
            "description": "${AttachmentFileException}"
          },
          "400": {
            "description": "${AttachmentFileSizeException}"
          },
          "400": {
            "description": "${AttachmentFileNameExtensionException}"
          },
          "400": {
            "description": "${AttachmentFileNamePatternException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "404": {
            "description": "${NoteInstanceNotFoundException}"
          }
        },
        "summary": "Creates a new attachment for the note",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes/{noteId}/attachments/{attachmentId}/void-info": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/notes/postVoidAttachment.html}",
        "operationId": "voidNoteAttachment-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The note id to retrieve",
            "in": "path",
            "name": "noteId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The attachment ID",
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Void metadata",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${InvalidUserForVoidNoteException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          }
        },
        "summary": "Void an attachment of a note",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes/{noteId}/authorization-info": {
      "get": {
        "description": "${description/notes/getAuthorizationNote.html}",
        "operationId": "getAuthorizationByNoteId-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The note ID",
            "in": "path",
            "name": "noteId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${NoteInstanceNotFoundException}"
          },
          "404": {
            "description": "${NoteNotLinkedToAuthorizationException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationInfo"
            }
          }
        },
        "summary": "Gets an authorization by note id",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes/{noteId}/comments": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/notes/postNoteComment.html}",
        "operationId": "postNewComment",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The note id to retrieve",
            "in": "path",
            "name": "noteId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Note comment",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NoteCommentRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${InstanceVoidedException}"
          },
          "400": {
            "description": "${NoteDefinitionDisableException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "404": {
            "description": "${NoteInstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new comment for a note",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes/{noteId}/copy": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/notes/postCopyNote.html}",
        "operationId": "postCopyNote-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The note ID",
            "in": "path",
            "name": "noteId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The note request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CopyNoteRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AuthorizationNotFoundException}"
          },
          "400": {
            "description": "${CaseNotFoundException}"
          },
          "400": {
            "description": "${NoteAttributeMissingException}"
          },
          "400": {
            "description": "${InvalidNoteCategoryException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "copy note for all types",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes/{noteId}/cost-savings": {
      "get": {
        "description": "${description/notes/getCostSavingsInfo.html}",
        "operationId": "getCostSavingsByNoteId-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The note ID",
            "in": "path",
            "name": "noteId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${CostSavingDoesNotBelongToMemberException}"
          },
          "400": {
            "description": "${NoteNotLinkedToCostSavingsException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CostSavingsInstanceSummaryLite"
            }
          }
        },
        "summary": "Gets a cost savings by note id",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes/{noteId}/interqual-transition-plan": {
      "get": {
        "description": "${description/notes/getTransitionPlanChecklistByNoteId.html}",
        "operationId": "getTransitionPlanChecklistByNoteId-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The note ID",
            "in": "path",
            "name": "noteId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NoteInstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InterqualTransitionPlanChecklistInfo"
            }
          }
        },
        "summary": "Get transition plan checklist for note instance",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes/{noteId}/noteType/{noteType}/artifact-info": {
      "get": {
        "description": "${description/notes/getArtifactByNoteId.html}",
        "operationId": "getArtifactByNoteId-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The note ID",
            "in": "path",
            "name": "noteId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The note definition type",
            "in": "path",
            "name": "noteType",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteLinkForNoteTypeNotSupportedException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${NoteInstanceNotFoundException}"
          },
          "404": {
            "description": "${NoteLinkNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/NoteSourceArtifactLink"
            }
          }
        },
        "summary": "Gets an artifact info object by note id",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes/{noteId}/restricted-users": {
      "get": {
        "description": "${description/notes/getRestrictedUsers.html}",
        "operationId": "getRestrictedUsers-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The note id to add the comment",
            "in": "path",
            "name": "noteId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NoteInstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "summary": "Retrieve the list of users",
        "tags": [
          "notes"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/notes/postRestrictedUsers.html}",
        "operationId": "postRestrictedUsers-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The note ID",
            "in": "path",
            "name": "noteId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Request for user",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NoteRestrictedUsersRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${InvalidUserForVoidNoteException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          }
        },
        "summary": "Update/Remove multiple users for a note",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes/{noteId}/service-requests": {
      "get": {
        "description": "${description/notes/getServiceRequestByNoteID.html}",
        "operationId": "getServiceRequestByNoteID-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The note ID",
            "in": "path",
            "name": "noteId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NoteInstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceRequest"
            }
          }
        },
        "summary": "Gets Service Request details by note ID",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/notes/{noteId}/void-info": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/notes/putNoteVoidInfo.html}",
        "operationId": "putNoteVoidInfo",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The note id to retrieve",
            "in": "path",
            "name": "noteId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The void information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          }
        },
        "summary": "Voids an existing note",
        "tags": [
          "notes"
        ]
      }
    },
    "/members/{memberId}/offline/devices/{deviceId}/offline-lock": {
      "delete": {
        "description": "${description/offline/removeMemberOffline.html}",
        "operationId": "removeOfflineLock-internal",
        "parameters": [
          {
            "description": "The member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The device ID, the token for the device generated by the server",
            "in": "path",
            "name": "deviceId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "responses": {
          "403": {
            "description": "${WrongOfflineUserException}"
          },
          "403": {
            "description": "${WrongOfflineDeviceException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${MemberNotOfflineException}"
          },
          "409": {
            "description": "${UserOnlineException}"
          }
        },
        "summary": "Remove Member Offline Lock",
        "tags": [
          "offline-internal"
        ]
      }
    },
    "/members/{memberId}/offline/member-batch": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/members/getBatchStream.html}",
        "operationId": "getMembersBatch-internal",
        "parameters": [
          {
            "description": "The member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The request parameters",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberBatchRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "object"
            }
          }
        },
        "summary": "Retrieves a stream with the member batch data and sets the member offline",
        "tags": [
          "offline-internal"
        ]
      }
    },
    "/members/{memberId}/opt-out-preferences": {
      "get": {
        "description": "${description/member-properties/getMemberOptOutPreferences.html}",
        "operationId": "getMemberOptOutPreferences",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/OptOutPreference"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the contact opt-out preferences of the member",
        "tags": [
          "members"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-properties/postMemberOptOutPreference.html}",
        "operationId": "createMemberOptOutPreference",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new opt-out preference",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOptOutPreferenceRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${DuplicateEntityMappingsMemberException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new opt-out preference for the member",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/opt-out-preferences/{preferenceId}": {
      "delete": {
        "description": "${description/member-properties/deleteMemberOptOutPreference.html}",
        "operationId": "deleteMemberOptOutPreference",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The internal preference ID, obtainable from the member opt-out-preferences API",
            "in": "path",
            "name": "preferenceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${OptOutPreferenceNotFoundException}"
          }
        },
        "summary": "Removes the contact opt-out preference of the member",
        "tags": [
          "members"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-properties/setMemberOptOutPreference.html}",
        "operationId": "updateMemberOptOutPreference",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The opt-out preference id",
            "in": "path",
            "name": "preferenceId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new opt-out preference",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateOptOutPreferenceRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${OptOutPreferenceNotFoundException}"
          }
        },
        "summary": "Updates the contact opt-out preference of the member",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/organization-contacts": {
      "get": {
        "description": "${description/organization-contacts/getMemberOrganizationContactSummary.html}",
        "operationId": "getOrganizationContacts",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Retrieve obsolete contacts",
            "in": "query",
            "name": "retrieveObsolete",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/OrganizationContact"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a member's organization contacts",
        "tags": [
          "contacts"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/organization-contacts/postMemberOrganizationContact.html}",
        "operationId": "addMemberOrganizationContact",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Member organization contact information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationContact"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create a member organization contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/organization-contacts/{organizationContactId}": {
      "get": {
        "description": "${description/organization-contacts/getMemberOrganizationContact.html}",
        "operationId": "getOrganizationContact",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The organization contact ID",
            "in": "path",
            "name": "organizationContactId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/OrganizationContact"
            }
          }
        },
        "summary": "Get a member's organization contact",
        "tags": [
          "contacts"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/organization-contacts/putMemberOrganizationContact.html}",
        "operationId": "updateMemberOrganizationContact",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The organization contact ID",
            "in": "path",
            "name": "organizationContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The organization contact information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationContact"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Update a member organization contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/organization-contacts/{organizationContactId}/addresses": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/organization-contacts/postMemberOrganizationContactAddress.html}",
        "operationId": "addMemberOrganizationContactAddress",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The organization contact ID",
            "in": "path",
            "name": "organizationContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact address info.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactAddress"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create an address for a member organization contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/organization-contacts/{organizationContactId}/addresses/{contactAddressId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/organization-contacts/putMemberOrganizationContactAddress.html}",
        "operationId": "editMemberOrganizationContactAddress",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The organization contact ID",
            "in": "path",
            "name": "organizationContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The contact address ID",
            "in": "path",
            "name": "contactAddressId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact address info.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactAddress"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates a contact address for member organization contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/organization-contacts/{organizationContactId}/emails": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/organization-contacts/postMemberOrganizationContactEmail.html}",
        "operationId": "addMemberOrganizationContactEmail",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The organization contact ID",
            "in": "path",
            "name": "organizationContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact email info.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactEmail"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates new email for member organization contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/organization-contacts/{organizationContactId}/emails/{contactEmailId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/organization-contacts/putMemberOrganizationContactEmail.html}",
        "operationId": "editMemberOrganizationContactEmail",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The organization contact ID",
            "in": "path",
            "name": "organizationContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The contact email ID",
            "in": "path",
            "name": "contactEmailId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact email info.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactEmail"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates a contact email for member organization contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/organization-contacts/{organizationContactId}/phone-numbers": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/organization-contacts/postMemberOrganizationContactPhoneNumber.html}",
        "operationId": "addMemberOrganizationContactPhoneNumber",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The organization contact ID",
            "in": "path",
            "name": "organizationContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact phone number info.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactPhoneNumber"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates new phone number for member organization contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/organization-contacts/{organizationContactId}/phone-numbers/{contactPhoneNumberId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/organization-contacts/putMemberOrganizationContactPhoneNumber.html}",
        "operationId": "editMemberOrganizationContactPhoneNumber",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The organization contact ID",
            "in": "path",
            "name": "organizationContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The contact phone number ID",
            "in": "path",
            "name": "contactPhoneNumberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact phone number info.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactPhoneNumber"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates a contact phoneNumber for member organization contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/pcp-details": {
      "get": {
        "description": "${description/member-properties/getMemberPcp.html}",
        "operationId": "getMemberPcp-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberPcp"
            }
          }
        },
        "summary": "Gets the PCP information of the member",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/personal-contacts": {
      "get": {
        "description": "${description/personal-contacts/getMemberPersonalContactSummary.html}",
        "operationId": "getPersonalContacts",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Retrieve obsolete contacts",
            "in": "query",
            "name": "retrieveObsolete",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/PersonalContact"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a member's personal contacts",
        "tags": [
          "contacts"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/personal-contacts/postMemberPersonalContact.html}",
        "operationId": "addMemberPersonalContact",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Member's personal contact information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PersonalContact"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create a member personal contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/personal-contacts/{personalContactId}": {
      "get": {
        "description": "${description/personal-contacts/getMemberPersonalContact.html}",
        "operationId": "getPersonalContact",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The personal contact ID",
            "in": "path",
            "name": "personalContactId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/PersonalContact"
            }
          }
        },
        "summary": "Get a member's personal contacts",
        "tags": [
          "contacts"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/personal-contacts/putMemberPersonalContact.html}",
        "operationId": "updatePersonalContact",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The personal contact ID",
            "in": "path",
            "name": "personalContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The personal contact information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PersonalContact"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "404": {
            "description": "${PersonalContactNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Update a member personal contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/personal-contacts/{personalContactId}/addresses": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/personal-contacts/postMemberPersonalContactAddress.html}",
        "operationId": "addMemberPersonalContactAddress",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The personal contact ID",
            "in": "path",
            "name": "personalContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact address info.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactAddress"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates new address for member personal contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/personal-contacts/{personalContactId}/addresses/{contactAddressId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/personal-contacts/putMemberPersonalContactAddress.html}",
        "operationId": "editMemberPersonalContactAddress",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The personal contact ID",
            "in": "path",
            "name": "personalContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The contact email ID",
            "in": "path",
            "name": "contactAddressId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact address info.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactAddress"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates a contact address for member personal contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/personal-contacts/{personalContactId}/emails": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/personal-contacts/postMemberPersonalContactEmail.html}",
        "operationId": "addMemberPersonalContactEmail",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The personal contact ID",
            "in": "path",
            "name": "personalContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact email info.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactEmail"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates new email for member personal contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/personal-contacts/{personalContactId}/emails/{contactEmailId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/personal-contacts/putMemberPersonalContactEmail.html}",
        "operationId": "editMemberPersonalContactEmail",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The personal contact ID",
            "in": "path",
            "name": "personalContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The contact email ID",
            "in": "path",
            "name": "contactEmailId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact email info.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactEmail"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates a contact email for member personal contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/personal-contacts/{personalContactId}/phone-numbers": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/personal-contacts/postMemberPersonalContactPhoneNumber.html}",
        "operationId": "addMemberPersonalContactPhoneNumber",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The personal contact ID",
            "in": "path",
            "name": "personalContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact phone number info",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactPhoneNumber"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates new phone number for member personal contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/personal-contacts/{personalContactId}/phone-numbers/{contactPhoneNumberId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/personal-contacts/putMemberPersonalContactPhoneNumber.html}",
        "operationId": "editMemberPersonalContactPhoneNumber",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The personal contact ID",
            "in": "path",
            "name": "personalContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The contact phone number ID",
            "in": "path",
            "name": "contactPhoneNumberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact phone number info",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactPhoneNumber"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates a contact phone number for member personal contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/phone-numbers": {
      "get": {
        "description": "${description/member-contacts/getMemberPhoneNumbersList.html}",
        "operationId": "getMemberPhoneNumbersList",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ContactPhoneNumber"
              },
              "type": "array"
            }
          }
        },
        "summary": "Finds member phone numbers",
        "tags": [
          "members"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-contacts/postMemberContactPhoneNumber.html}",
        "operationId": "addMemberContactPhoneNumber",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "contact phone number entity",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactPhoneNumber"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new member phone number",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/phone-numbers/{contactPhoneNumberId}": {
      "get": {
        "description": "${description/member-contacts/getMemberContactPhoneNumber.html}",
        "operationId": "getContactPhoneNumber",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The phone number instance ID",
            "in": "path",
            "name": "contactPhoneNumberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ContactPhoneNumberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ContactPhoneNumber"
            }
          }
        },
        "summary": "Gets a member contact phone number",
        "tags": [
          "members"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/member-contacts/putMemberContactPhone.html}",
        "operationId": "updateMemberContactPhone",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The phone number instance ID",
            "in": "path",
            "name": "contactPhoneNumberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The updated member phone number",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactPhoneNumber"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates a member phone number",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/prescreen/inpatient-authorization": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/members/submitInpatientAuthorizationPrescreenRequest.html}",
        "operationId": "submitInpatientAuthorizationPrescreenRequest",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": true,
            "description": "Indicates whether to automatically persist the prescreen note",
            "in": "query",
            "name": "persistPrescreenNote",
            "type": "boolean"
          },
          {
            "description": "Inpatient Authorization Prescreen Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InpatientAuthorizationPrescreenRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteInstanceDoesNotBelongToMemberException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${NoteInstanceNotFoundException}"
          },
          "400": {
            "description": "${OptionValueNotFoundException}"
          },
          "400": {
            "description": "${InstanceVoidedException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidServiceTypeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${NoteInstanceAlreadyAssociatedWithAuthorizationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "503": {
            "description": "${ServiceUnavailableException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationPrescreenResult"
            }
          }
        },
        "summary": "Get the prescreen results for inpatient authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/prescreen/inpatient-authorization-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/members/submitInpatientAuthorizationPrescreenRequestV2.html}",
        "operationId": "submitInpatientAuthorizationPrescreenRequestV2",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": true,
            "description": "Indicates whether to automatically persist the prescreen notes",
            "in": "query",
            "name": "persistPrescreenNote",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to automatically generate the notes from prescreen",
            "in": "query",
            "name": "forceGenerateNotes",
            "type": "boolean"
          },
          {
            "description": "Inpatient Authorization Prescreen Request V2",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InpatientAuthorizationPrescreenRequestV2"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${OptionValueNotFoundException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidServiceTypeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${PrescreenNotEnabledException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "503": {
            "description": "${ServiceUnavailableException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationPrescreenResult"
            }
          }
        },
        "summary": "Submit the inpatient authorization prescreen and get the results processed by BRE",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/prescreen/inpatient-authorization/notes": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/members/submitInpatientAuthorizationPrescreenNotes.html}",
        "operationId": "submitInpatientPrescreenNote-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Prescreen note request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PrescreenNoteRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Submits the prescreen notes for an inpatient authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/prescreen/rx-authorization": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/members/submitRxAuthorizationPrescreenRequest.html}",
        "operationId": "submitRxAuthorizationPrescreenRequest",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": true,
            "description": "Indicates whether to automatically persist the prescreen note",
            "in": "query",
            "name": "persistPrescreenNote",
            "type": "boolean"
          },
          {
            "description": "RX Authorization Prescreen Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RxAuthorizationPrescreenRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteInstanceDoesNotBelongToMemberException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${NoteInstanceNotFoundException}"
          },
          "400": {
            "description": "${OptionValueNotFoundException}"
          },
          "400": {
            "description": "${InstanceVoidedException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidServiceTypeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${NoteInstanceAlreadyAssociatedWithAuthorizationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "503": {
            "description": "${ServiceUnavailableException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationPrescreenResult"
            }
          }
        },
        "summary": "Get the prescreen results for RX authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/prescreen/rx-authorization/notes": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/members/submitRXAuthorizationPrescreenNotes.html}",
        "operationId": "submitRXPrescreenNote-internal",
        "parameters": [
          {
            "description": "The member ID",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Note request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PrescreenNoteRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Submits the prescreen notes for a RX authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/prescreen/service-procedure-authorization": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/members/submitServiceProcedureAuthorizationPrescreenRequest.html}",
        "operationId": "submitServiceProcedureAuthorizationPrescreenRequest",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": true,
            "description": "Indicates whether to automatically persist the prescreen note",
            "in": "query",
            "name": "persistPrescreenNote",
            "type": "boolean"
          },
          {
            "description": "Service Procedure Authorization Prescreen Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceProcedureAuthorizationPrescreenRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteInstanceDoesNotBelongToMemberException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${NoteInstanceNotFoundException}"
          },
          "400": {
            "description": "${OptionValueNotFoundException}"
          },
          "400": {
            "description": "${InstanceVoidedException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidServiceTypeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${NoteInstanceAlreadyAssociatedWithAuthorizationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "503": {
            "description": "${ServiceUnavailableException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationPrescreenResult"
            }
          }
        },
        "summary": "Get the prescreen results for service procedure authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/prescreen/service-procedure-authorization-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/members/submitServiceProcedureAuthorizationPrescreenRequestV2.html}",
        "operationId": "submitServiceProcedureAuthorizationPrescreenRequestV2",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": true,
            "description": "Indicates whether to automatically persist the prescreen note",
            "in": "query",
            "name": "persistPrescreenNote",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to automatically generate the notes from prescreen",
            "in": "query",
            "name": "forceGenerateNotes",
            "type": "boolean"
          },
          {
            "description": "Service Procedure Authorization Prescreen Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceProcedureAuthorizationPrescreenRequestV2"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${OptionValueNotFoundException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidServiceTypeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${PrescreenNotEnabledException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "503": {
            "description": "${ServiceUnavailableException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationPrescreenResult"
            }
          }
        },
        "summary": "Prescreen a service/procedure authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/prescreen/service-procedure-authorization/notes": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/members/submitServiceProcedureAuthorizationPrescreenNotes.html}",
        "operationId": "submitServiceProcedurePrescreenNote-internal",
        "parameters": [
          {
            "description": "The member ID",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Prescreen note request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PrescreenNoteRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Submits the prescreen notes for a service procedure authorization",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/members/{memberId}/privacy-information": {
      "get": {
        "description": "${description/member-properties/getMemberPrivacyInformation.html}",
        "operationId": "getMemberPrivacyInformation",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberPrivacyInformation"
            }
          }
        },
        "summary": "Gets the member privacy information",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/product-features-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/product-features-search/postProductFeaturesSearch.html}",
        "operationId": "memberProductFeatureItemSearch",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The search criteria for product feature",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberProductFeatureSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${ProductFeaturesDisabledException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/MemberProductFeatureItem"
              },
              "type": "array"
            }
          }
        },
        "summary": "Search product features available to the member",
        "tags": [
          "product-features"
        ]
      }
    },
    "/members/{memberId}/product-features-search/lite": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "${description/product-features-search/postProductFeaturesSearchLite.html}",
        "operationId": "getFeaturesNames",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The search criteria for product feature",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductFeatureSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ProductFeatureId"
              },
              "type": "array"
            }
          }
        },
        "summary": "Search product features names and ids available to the member",
        "tags": [
          "product-features"
        ]
      }
    },
    "/members/{memberId}/product-features-search/lite-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/product-features-search/postProductFeaturesSearchLiteV2.html}",
        "operationId": "getFeaturesNamesV2",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The search criteria for product feature",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductFeatureSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ProductFeatureId"
              },
              "type": "array"
            }
          }
        },
        "summary": "Search product features names and ids available to the member",
        "tags": [
          "product-features"
        ]
      }
    },
    "/members/{memberId}/program-enrollments": {
      "get": {
        "description": "${description/program-enrollments/getMemberProgramEnrollments.html}",
        "operationId": "getProgramEnrollmentsForMember",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the program",
            "in": "query",
            "name": "programName",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ProgramEnrollment"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets member program enrollments",
        "tags": [
          "enrollments"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/program-enrollments/createProgramEnrollment.html}",
        "operationId": "createProgramEnrollment",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The Program Enrollment information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProgramEnrollmentRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${MemberCannotBeEnrolledInProgramException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ProgramNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create Program Enrollment",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/program-enrollments-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/program-enrollments/createProgramEnrollmentV2.html}",
        "operationId": "createProgramEnrollmentV2-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The Program Enrollment information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProgramEnrollmentRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${MemberCannotBeEnrolledInProgramException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${ProgramNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ProgramEnrollmentResponse"
            }
          }
        },
        "summary": "Create Program Enrollment",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/program-enrollments/current": {
      "get": {
        "description": "${description/program-enrollments/getMemberEnrolledPrograms.html}",
        "operationId": "getEnrolledProgramsForMember",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CurrentProgramEnrollment"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets enrolled programs for a member",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/program-enrollments/{programEnrollmentId}/task-package/close": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/program-enrollments/closeTaskPackage.html}",
        "operationId": "closeTaskPackage-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Program enrollment Id",
            "in": "path",
            "name": "programEnrollmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "close task package information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteProgramTaskPackageRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${TaskCannotBeCompletedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ProgramEnrollmentNotFoundForMemberException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "close task package",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/program-enrollments/{programEnrollmentId}/task-package/optional-task": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/program-enrollments/optionalTaskPackage.html}",
        "operationId": "addTaskToTaskPackageInstance-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Program enrollment Id",
            "in": "path",
            "name": "programEnrollmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Optional task package information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOptionalTaskRequest"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "${TaskAlreadyAssignedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${TaskNotFoundException}"
          },
          "404": {
            "description": "${ProgramEnrollmentNotFoundForMemberException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Add Optional-task to Program Enrollment",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/program-enrollments/{programEnrollmentId}/task-package/reopen": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/program-enrollments/reopenTaskPackage.html}",
        "operationId": "reopenTaskPackage-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Program enrollment Id",
            "in": "path",
            "name": "programEnrollmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "reopen task package information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReopenProgramTaskPackageRequest"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ProgramEnrollmentNotFoundForMemberException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "reopen task package",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/program-enrollments/{programEnrollmentId}/task-package/start": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/program-enrollments/startTaskPackage.html}",
        "operationId": "startTaskPackage-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Program enrollment Id",
            "in": "path",
            "name": "programEnrollmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Start task package information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartProgramTaskPackageRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${TaskNotFoundException}"
          },
          "404": {
            "description": "${ProgramEnrollmentNotFoundForMemberException}"
          },
          "404": {
            "description": "${ProgramNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Start task package",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/program-enrollments/{programId}/enrollment-eligibility": {
      "get": {
        "description": "${description/program-enrollments/verifyEnrollmentEligibility.html}",
        "operationId": "verifyEnrollmentEligibilityForProgram-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Program Id",
            "in": "path",
            "name": "programId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Program Reenrollment Action",
            "enum": [
              "REINSTATE",
              "RE_ENROLL"
            ],
            "in": "query",
            "name": "programReenrollmentAction",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidProgramReenrollmentActionException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ProgramEnrollmentNotFoundForMemberException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/EnrollmentRestrictionResponse"
            }
          }
        },
        "summary": "Verify whether member is eligible for reenrollment/reinstatement of a program",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/program-enrollments/{programName}/case-association": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/program-enrollments/assignCaseToProgram.html}",
        "operationId": "assignCaseToProgram-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the program",
            "in": "path",
            "name": "programName",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The Program Enrollment information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProgramCaseAssociationRequest"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ProgramEnrollmentNotFoundForMemberException}"
          },
          "404": {
            "description": "${ProgramNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": " Assign, reassign or un-assign the case available to a Program",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/program-enrollments/{programName}/closure": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/program-enrollments/closeProgramEnrollment.html}",
        "operationId": "closeProgramEnrollment",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the program",
            "in": "path",
            "name": "programName",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Information for Program Enrollment to close",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloseProgramEnrollmentRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${InvalidClosureDateException}"
          },
          "400": {
            "description": "${ProgramEnrollmentClosedException}"
          },
          "404": {
            "description": "${ProgramEnrollmentNotFoundForMemberException}"
          }
        },
        "summary": "Close Program Enrollment",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/program-enrollments/{programName}/engagement-level": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/program-enrollments/updateEngagementLevel.html}",
        "operationId": "updateEngagementLevelForProgram-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the program",
            "in": "path",
            "name": "programName",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Information to update engagement level for program",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateEngagementLevelRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${OptionValueNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ProgramEnrollmentNotFoundForMemberException}"
          },
          "404": {
            "description": "${ProgramNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Update Engagement Level for program",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/program-enrollments/{programName}/enrollment-status/{enrollmentStatusId}": {
      "get": {
        "description": "${description/program-enrollments/getProgramEnrollmentTaskPackageInstances.html}",
        "operationId": "getProgramTaskPackageInstances-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the program",
            "in": "path",
            "name": "programName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Program enrollment Status id",
            "in": "path",
            "name": "enrollmentStatusId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ProgramEnrollmentNotFoundForMemberException}"
          },
          "404": {
            "description": "${ProgramNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/EnrollmentStatusEnrolledFull"
            }
          }
        },
        "summary": "Retrieve Task Packages Instance for program enrollment",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/program-enrollments/{programName}/re-enrollment": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/program-enrollments/reenrollProgramEnrollment.html}",
        "operationId": "reenrollProgramEnrollment",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the program",
            "in": "path",
            "name": "programName",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The Program Enrollment information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReenrollProgramEnrollmentRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${MemberCannotBeEnrolledInProgramException}"
          },
          "400": {
            "description": "${ProgramEnrollmentNotFoundForMemberException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ProgramNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Re-enroll Program Enrollment",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/program-enrollments/{programName}/reinstatement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/program-enrollments/reinstateProgramEnrollment.html}",
        "operationId": "reinstateProgramEnrollment",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the program",
            "in": "path",
            "name": "programName",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The Program reinstatement information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReinstateProgramEnrollmentRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${MemberCannotBeEnrolledInProgramException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ProgramEnrollmentNotFoundForMemberException}"
          },
          "404": {
            "description": "${ProgramNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Reinstates a Program Enrollment",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/members/{memberId}/provider-contacts": {
      "get": {
        "description": "${description/provider-contacts/getMemberProviderContactSummary.html}",
        "operationId": "getProviderContacts",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Retrieve obsolete contacts",
            "in": "query",
            "name": "retrieveObsolete",
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "The start index for pagination",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 10,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ProviderContact"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a member's provider contacts",
        "tags": [
          "contacts"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/provider-contacts/postMemberProviderContact.html}",
        "operationId": "addMemberProviderContact",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Member provider contact information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProviderContact"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create a member provider contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/provider-contacts/{providerContactId}": {
      "get": {
        "description": "${description/provider-contacts/getMemberProviderContact.html}",
        "operationId": "getProviderContact",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The provider contact ID",
            "in": "path",
            "name": "providerContactId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ProviderContact"
            }
          }
        },
        "summary": "Get a member's provider contacts",
        "tags": [
          "contacts"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/provider-contacts/putMemberProviderContact.html}",
        "operationId": "updateMemberProviderContact",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The provider contact ID",
            "in": "path",
            "name": "providerContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The provider contact information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProviderContact"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Update a member provider contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/provider-contacts/{providerContactId}/addresses": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/provider-contacts/postMemberProviderContactAddress.html}",
        "operationId": "addMemberProviderContactAddress",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The provider contact ID",
            "in": "path",
            "name": "providerContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact address info.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactAddress"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates new address for member provider contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/provider-contacts/{providerContactId}/addresses/{contactAddressId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/provider-contacts/putMemberProviderContactAddress.html}",
        "operationId": "editMemberProviderContactAddress",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The provider contact ID",
            "in": "path",
            "name": "providerContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The contact address ID",
            "in": "path",
            "name": "contactAddressId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact address info.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactAddress"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates a contact address for member provider contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/provider-contacts/{providerContactId}/emails": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/provider-contacts/postMemberProviderContactEmail.html}",
        "operationId": "addMemberProviderContactEmail",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The provider contact ID",
            "in": "path",
            "name": "providerContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact email info.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactEmail"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates new email for member provider contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/provider-contacts/{providerContactId}/emails/{contactEmailId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/provider-contacts/putMemberProviderContactEmail.html}",
        "operationId": "editMemberProviderContactEmail",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The provider contact ID",
            "in": "path",
            "name": "providerContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The contact email ID",
            "in": "path",
            "name": "contactEmailId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact email info",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactEmail"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates a contact email for member provider contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/provider-contacts/{providerContactId}/phone-numbers": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/provider-contacts/postMemberProviderContactPhoneNumber.html}",
        "operationId": "addMemberProviderContactPhoneNumber",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The provider contact ID",
            "in": "path",
            "name": "providerContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact phone number info.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactPhoneNumber"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates new phone number for member provider contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/provider-contacts/{providerContactId}/phone-numbers/{contactPhoneNumberId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/provider-contacts/putMemberProviderContactPhoneNumber.html}",
        "operationId": "editMemberProviderContactPhoneNumber",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The provider contact ID",
            "in": "path",
            "name": "providerContactId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The contact phone number ID",
            "in": "path",
            "name": "contactPhoneNumberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Contact phone number info.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactPhoneNumber"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates a contact phone number for member provider contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/members/{memberId}/quality-incidents": {
      "get": {
        "description": "${description/quality-incident/getQualityIncidentSummary.html}",
        "operationId": "getQualityIncidents-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/QualityIncidentSummary"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve the quality incidents along with attachments associated with the incident related to the member",
        "tags": [
          "quality-incidents-summary-internal"
        ]
      }
    },
    "/members/{memberId}/quality-incidents/{qualityIncidentId}": {
      "get": {
        "description": "${description/quality-incident/getQualityIncidentDetails.html}",
        "operationId": "getQualityIncidentDetails-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Quality Incident Id retrieved from quality incident summary search for member.",
            "in": "path",
            "name": "qualityIncidentId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${QualityIncidentNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/QualityIncidentOutcome"
            }
          }
        },
        "summary": "Retrieve the quality incident Details along with attachments",
        "tags": [
          "quality-incidents-summary-internal"
        ]
      }
    },
    "/members/{memberId}/quality-incidents/{qualityIncidentId}/attachments/{attachmentId}/void": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/quality-incident/postVoidQualityIncidentAttachment.html}",
        "operationId": "postVoidQualityIncidentAttachment-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Quality Incident Id retrieved from quality incident summary search for member.",
            "in": "path",
            "name": "qualityIncidentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The attachment ID",
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Void metadata",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AttachmentNotFoundException}"
          },
          "404": {
            "description": "${QualityIncidentNotFoundException}"
          }
        },
        "summary": "Void the quality incident Details attachment",
        "tags": [
          "quality-incidents-summary-internal"
        ]
      }
    },
    "/members/{memberId}/referrals": {
      "get": {
        "description": "${description/referrals/getReferralSummary.html}",
        "operationId": "getReferralSummary",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ReferralLite"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get summary of referral requests for a member",
        "tags": [
          "referrals"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/referrals/postReferral.html}",
        "operationId": "submitReferral",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new referral information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmitReferralRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ReferralResponseLite"
            }
          }
        },
        "summary": "Submit a member referral",
        "tags": [
          "referrals"
        ]
      }
    },
    "/members/{memberId}/referrals-v2": {
      "get": {
        "description": "${description/referrals/getReferralSummary2.html}",
        "operationId": "getReferralSummary-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "Start Index",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          },
          {
            "default": false,
            "description": "Indicates whether the endpoint returns the last page of results",
            "in": "query",
            "name": "gotoLastPage",
            "type": "boolean"
          },
          {
            "default": "REFERRAL_REQUEST_DATE",
            "description": "Sort Column",
            "enum": [
              "REFERRAL_REQUEST_DATE",
              "REFERRAL_SOURCE",
              "REFERRAL_DECISION"
            ],
            "in": "query",
            "name": "sortColumn",
            "type": "string"
          },
          {
            "default": "ASC",
            "description": "Sort Type",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sortType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ReferralLiteSearchResults"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get summary of referral requests for a member",
        "tags": [
          "referrals"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/referrals/postReferral2.html}",
        "operationId": "submitReferral-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Existing draft-referral Id",
            "in": "query",
            "name": "draftReferralId",
            "type": "string"
          },
          {
            "description": "The new referral information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmitReferralRequest2"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "400": {
            "description": "${NotEditableReferralException}"
          },
          "403": {
            "description": "${UserNotOwnerOfTaskException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ReferralNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ReferralResponseLite"
            }
          }
        },
        "summary": "Submit a member referral",
        "tags": [
          "referrals"
        ]
      }
    },
    "/members/{memberId}/referrals-v2/{referralId}": {
      "get": {
        "description": "${description/referrals/getReferral2.html}",
        "operationId": "getReferral-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The referral ID, obtainable from the get member referrals service",
            "in": "path",
            "name": "referralId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ReferralNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Referral2"
            }
          }
        },
        "summary": "Retrieve a member referral",
        "tags": [
          "referrals"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/referrals/updateReferral2.html}",
        "operationId": "updateReferral-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The referral ID, obtainable from the get member referrals service",
            "in": "path",
            "name": "referralId",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "description": "Complete Referral Task",
            "in": "query",
            "name": "completeReferralTask",
            "type": "boolean"
          },
          {
            "description": "The new referral information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateReferralRequest2"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "400": {
            "description": "${NotEditableReferralException}"
          },
          "403": {
            "description": "${UserNotOwnerOfTaskException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ReferralNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Update a member referral",
        "tags": [
          "referrals"
        ]
      }
    },
    "/members/{memberId}/referrals-v2/{referralId}/case": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/referrals/linkReferralToCase2.html}",
        "operationId": "linkReferralToCase_1",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The referral ID, obtainable from the get member referrals service",
            "in": "path",
            "name": "referralId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Request object made up of the case ID to be linked together with the next task",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LinkReferralToCaseRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${CaseNotFoundException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${CaseClosedException}"
          },
          "400": {
            "description": "${InitialAssessmentSetupNotFoundException}"
          },
          "403": {
            "description": "${UserNotOwnerOfTaskException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ReferralNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Link a member referral to a case",
        "tags": [
          "referrals"
        ]
      }
    },
    "/members/{memberId}/referrals/{referralId}": {
      "get": {
        "description": "${description/referrals/getReferral.html}",
        "operationId": "getReferral",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The referral ID, obtainable from the get member referrals service",
            "in": "path",
            "name": "referralId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ReferralNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Referral"
            }
          }
        },
        "summary": "Retrieve a member referral",
        "tags": [
          "referrals"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/referrals/updateReferral.html}",
        "operationId": "updateReferral",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The referral ID, obtainable from the get member referrals service",
            "in": "path",
            "name": "referralId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new referral information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateReferralRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "400": {
            "description": "${NotEditableReferralException}"
          },
          "403": {
            "description": "${UserNotOwnerOfTaskException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ReferralNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Update a member referral",
        "tags": [
          "referrals"
        ]
      }
    },
    "/members/{memberId}/referrals/{referralId}/case": {
      "delete": {
        "description": "${description/referrals/removeCaseFromReferral.html}",
        "operationId": "removeCaseFromReferral-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The referral ID, obtainable from the get member referrals service",
            "in": "path",
            "name": "referralId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Version of the authorization",
            "format": "int64",
            "in": "query",
            "minimum": 1,
            "name": "referralVersion",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${ReferralNotFoundException}"
          },
          "404": {
            "description": "${NoCaseAssociatedWithReferralException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Un assign case from referral",
        "tags": [
          "referrals"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "${description/referrals/linkReferralToCase.html}",
        "operationId": "linkReferralToCase",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The referral ID, obtainable from the get member referrals service",
            "in": "path",
            "name": "referralId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The case ID to be linked",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CaseId"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${CaseNotFoundException}"
          },
          "400": {
            "description": "${CaseClosedException}"
          },
          "400": {
            "description": "${InitialAssessmentSetupNotFoundException}"
          },
          "403": {
            "description": "${UserNotOwnerOfTaskException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ReferralNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Link a member referral to a case",
        "tags": [
          "referrals"
        ]
      }
    },
    "/members/{memberId}/referrals/{referralId}/draft-notifications": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/referrals/saveReferralNotification.html}",
        "operationId": "saveReferralNotification-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The referral ID, obtainable from the get member referrals service",
            "in": "path",
            "name": "referralId",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "saveDraftReferralNotificationRequest",
            "type": "object"
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${TaskNotFoundException}"
          },
          "400": {
            "description": "${CaseNotFoundException}"
          },
          "400": {
            "description": "${InternalLetterRecipientCreationException}"
          },
          "400": {
            "description": "${UnsupportedDeliveryMethodException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NotFoundException}"
          }
        },
        "summary": "Saves a referral notification",
        "tags": [
          "referrals"
        ]
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/referrals/updateDraftReferralNotification.html}",
        "operationId": "updateDraftReferralNotification-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The referral ID, obtainable from the get member referrals service",
            "in": "path",
            "name": "referralId",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "updateDraftReferralNotificationRequest",
            "type": "object"
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${TaskNotFoundException}"
          },
          "400": {
            "description": "${InternalLetterRecipientCreationException}"
          },
          "400": {
            "description": "${UnsupportedDeliveryMethodException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NotFoundException}"
          }
        },
        "summary": "Updates a draft referral notification",
        "tags": [
          "referrals"
        ]
      }
    },
    "/members/{memberId}/referrals/{referralId}/draft-notifications/{draftNotificationId}": {
      "get": {
        "description": "${description/referrals/getDraftReferralNotification.html}",
        "operationId": "getDraftReferralNotification-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The referral ID, obtainable from the get member referrals service",
            "in": "path",
            "name": "referralId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The ID of the draft notification that we want to retrieve",
            "in": "path",
            "name": "draftNotificationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InternalLetterArtifactException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ReferralNotFoundException}"
          },
          "404": {
            "description": "${DraftNotificationNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ReferralNotificationDetails"
            }
          }
        },
        "summary": "Get a referral draft notification",
        "tags": [
          "referrals"
        ]
      }
    },
    "/members/{memberId}/referrals/{referralId}/further-evaluation": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/referrals/evaluateReferral.html}",
        "operationId": "evaluateReferral-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The referral ID, obtainable from the get member referrals service",
            "in": "path",
            "name": "referralId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new referral information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FurtherReferralEvaluationRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${NotEditableReferralException}"
          },
          "403": {
            "description": "${UserNotOwnerOfTaskException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ReferralNotFoundException}"
          }
        },
        "summary": "Evaluate a member referral",
        "tags": [
          "referrals"
        ]
      }
    },
    "/members/{memberId}/referrals/{referralId}/notifications": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/referrals/submitReferralNotification.html}",
        "operationId": "submitReferralNotification-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The referral ID, obtainable from the get member referrals service",
            "in": "path",
            "name": "referralId",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "submitReferralNotificationRequest",
            "type": "object"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${TaskNotFoundException}"
          },
          "400": {
            "description": "${InternalLetterRecipientCreationException}"
          },
          "400": {
            "description": "${UnsupportedDeliveryMethodException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InternalLetterInfo"
            }
          }
        },
        "summary": "Submits a referral notification",
        "tags": [
          "referrals"
        ]
      }
    },
    "/members/{memberId}/relationships": {
      "get": {
        "description": "${description/member-properties/getMemberRelationships.html}",
        "operationId": "getMemberRelationships",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Relationship"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the relationships of the member",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/request-for-information/{requestForInformationId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/rfi/editRfi.html}",
        "operationId": "editRFI",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the request for information to edit",
            "in": "path",
            "name": "requestForInformationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Edit an RFI even for locked authorizations",
            "in": "query",
            "name": "allowForLockedAuth",
            "type": "boolean"
          },
          {
            "description": "The edit request for the request for information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EditRequestForInformationRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${InstanceVoidedException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${NotEditableLineItemException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${InvalidReceivedDateException}"
          },
          "400": {
            "description": "${RequestForInformationAlreadyReceivedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${RequestForInformationNotFoundException}"
          }
        },
        "summary": "Update a request for information (RFI)",
        "tags": [
          "requests-for-information"
        ]
      }
    },
    "/members/{memberId}/request-for-information/{requestForInformationId}/attempt": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/rfi/postRfiAttempt.html}",
        "operationId": "createRFIAttempt",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The ID of the request for information",
            "in": "path",
            "name": "requestForInformationId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Create an RFI attempt even for locked authorizations",
            "in": "query",
            "name": "allowForLockedAuth",
            "type": "boolean"
          },
          {
            "description": "The new RFI attempt information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestForInformationRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InstanceVoidedException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${NotEditableLineItemException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${InvalidReceivedDateException}"
          },
          "400": {
            "description": "${RequestForInformationAlreadyReceivedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${QueueNotFoundException}"
          },
          "404": {
            "description": "${RequestForInformationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "integer"
            }
          }
        },
        "summary": "Create an attempt on a request for information (RFI)",
        "tags": [
          "requests-for-information"
        ]
      }
    },
    "/members/{memberId}/request-for-information/{requestForInformationId}/attempts/void-info": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/rfi/voidRfiAttempt.html}",
        "operationId": "voidRFIAttempt",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The ID of the request for information",
            "in": "path",
            "name": "requestForInformationId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Create an RFI void attempt even for locked authorizations",
            "in": "query",
            "name": "allowForLockedAuth",
            "type": "boolean"
          },
          {
            "description": "Void RFI attempt request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequestBase"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${InvalidReceivedDateException}"
          },
          "400": {
            "description": "${RequestForInformationAlreadyReceivedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${RequestForInformationNotFoundException}"
          }
        },
        "summary": "Void an attempt on a request for information (RFIs)",
        "tags": [
          "requests-for-information"
        ]
      }
    },
    "/members/{memberId}/rx-authorizations": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postRxAuthorization.html}",
        "operationId": "postRxAuthorization",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates if pre-screen has to be run before creating an authorization.",
            "in": "query",
            "name": "runPrescreenBeforeAuthSubmission",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates if in case pre-screen was run resulting in authorization required a pre-screen note has to be created or not.",
            "in": "query",
            "name": "createPrescreenNote",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the authorization/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether copy is being created, UDFs are being copied even if they are marked as hidden",
            "in": "query",
            "name": "copyArtifact",
            "type": "boolean"
          },
          {
            "description": "The Rx Authorization Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RxAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${DuplicateAuthorizationException}"
          },
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidProviderSpecialtyException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${LineItemTypeNotAllowedByBhpNodeException}"
          },
          "400": {
            "description": "${AssigneeDisabledException}"
          },
          "400": {
            "description": "${AssigneeMissingMemberPermissionException}"
          },
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "400": {
            "description": "${ExtendedAttributeDisabledException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationSubmissionResponse"
            }
          }
        },
        "summary": "Submits an Rx authorization request",
        "tags": [
          "rx-authorizations"
        ]
      }
    },
    "/members/{memberId}/rx-authorizations/draft": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postRxAuthorizationDraft.html}",
        "operationId": "postRxAuthorizationDraft-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether copy is being created, UDFs are being copied even if they are marked as hidden",
            "in": "query",
            "name": "copyArtifact",
            "type": "boolean"
          },
          {
            "description": "The Rx Authorization Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RxAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${AuthorizationDisabledTypeException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${ExtendedAttributeDisabledException}"
          },
          "400": {
            "description": "${DraftViolatesDatabaseConstraint}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${OptionValueNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationAndLineItemsSummary"
            }
          }
        },
        "summary": "Saves a draft rx authorization request",
        "tags": [
          "rx-authorizations"
        ]
      }
    },
    "/members/{memberId}/rx-authorizations/{authorizationId}/appeals": {
      "get": {
        "description": "${description/authorizations/getAuthorizationAppeals.html}",
        "operationId": "getAuthorizationAppealsSummary_1",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AuthorizationAppeal"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the appeals for an Rx authorization",
        "tags": [
          "rx-authorizations"
        ]
      }
    },
    "/members/{memberId}/rx-authorizations/{authorizationId}/attachments": {
      "get": {
        "description": "${description/authorizations/getRxAuthorizationAttachments.html}",
        "operationId": "getAuthorizationAttachments_2",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/DocumentInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the attachments information for an Rx authorization",
        "tags": [
          "rx-authorizations"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/authorizations/postRxAuthAttachment.html}",
        "operationId": "postAuthorizationAttachment_2",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "Metadata",
            "in": "formData",
            "name": "metadata",
            "type": "object"
          },
          {
            "description": "Attachment file",
            "format": "binary",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AttachmentFileException}"
          },
          "400": {
            "description": "${AttachmentFileSizeException}"
          },
          "400": {
            "description": "${AttachmentFileNameExtensionException}"
          },
          "400": {
            "description": "${AttachmentFileNamePatternException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new attachment for an Rx authorization",
        "tags": [
          "rx-authorizations"
        ]
      }
    },
    "/members/{memberId}/rx-authorizations/{authorizationId}/diagnoses": {
      "get": {
        "description": "${description/authorizations/getRxAuthorizationDiagnosis.html}",
        "operationId": "getAuthorizationDiagnosis_2",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationDiagnosis"
            }
          }
        },
        "summary": "Gets the diagnosis information for an Rx authorization",
        "tags": [
          "rx-authorizations"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postRxAuthorizationDiagnosis.html}",
        "operationId": "addAuthorizationDiagnosis_1",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "description": "The diagnosis request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationDiagnosisRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${OperationNotSupportedOnDraftAuthorizationException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${MissingExplanationForOtherVoidReasonException}"
          },
          "400": {
            "description": "${MissingDiagnosisInAuthorizationException}"
          },
          "400": {
            "description": "${InvalidAuthStatusForVoidDiagnosisException}"
          },
          "400": {
            "description": "${MissingDiagnosisInVoidOrAddSectionException}"
          },
          "400": {
            "description": "${InvalidAuthStatusForRemoveDiagnosisException}"
          },
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "400": {
            "description": "${UnspecifiedObjectVersionException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          }
        },
        "summary": "Add, Remove, Void authorization diagnoses",
        "tags": [
          "rx-authorizations"
        ]
      }
    },
    "/members/{memberId}/rx-authorizations/{authorizationId}/header": {
      "get": {
        "description": "${description/authorizations/getRxAuthorizationHeader.html}",
        "operationId": "getAuthorizationHeader_2",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/RxAuthorizationHeader"
            }
          }
        },
        "summary": "Gets the header of an Rx authorization",
        "tags": [
          "rx-authorizations"
        ]
      }
    },
    "/members/{memberId}/rx-authorizations/{authorizationId}/line-items": {
      "get": {
        "description": "${description/authorizations/getRxLineItems.html}",
        "operationId": "getAuthorizationLineItems_1",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/RxLineItem"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the line items of an Rx authorization",
        "tags": [
          "rx-authorizations"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/addRxLineItemToRxAuth.html}",
        "operationId": "addRxLineItem",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": "tcclient",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the authorization/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "description": "The request to add a Rx LineItem",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddRxLineItemToAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${DuplicateAuthorizationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidProviderSpecialtyException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${AuthSpecificContactRequiredException}"
          },
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${InvalidProviderLocationException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationAndLineItemsSummary"
            }
          }
        },
        "summary": "Add Rx line items to an existing authorization",
        "tags": [
          "rx-authorizations"
        ]
      }
    },
    "/members/{memberId}/rx-authorizations/{authorizationId}/line-items/line-item-reviews": {
      "get": {
        "description": "${description/authorizations/getRxAuthorizationLineItemReviews.html}",
        "operationId": "getLineItemReviews_2",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AuthorizationLineItemReview"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the line item reviews for the given Rx authorization",
        "tags": [
          "rx-authorizations"
        ]
      }
    },
    "/members/{memberId}/rx-authorizations/{authorizationId}/line-items/{lineItemNumber}/determination": {
      "get": {
        "description": "${description/authorizations/getRxAuthorizationDetermination.html}",
        "operationId": "getDetermination_2",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The line item number",
            "format": "int32",
            "in": "path",
            "name": "lineItemNumber",
            "required": true,
            "type": "integer"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${DeterminationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Determination"
            }
          }
        },
        "summary": "Gets the line item determination information for an Rx authorization",
        "tags": [
          "rx-authorizations"
        ]
      }
    },
    "/members/{memberId}/rx-authorizations/{authorizationId}/notes": {
      "get": {
        "description": "${description/authorizations/getRxAuthorizationNotes.html}",
        "operationId": "getAuthorizationNotes_2",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/NoteInstance"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the notes of an Rx authorization",
        "tags": [
          "rx-authorizations"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postRxAuthNote.html}",
        "operationId": "postAuthorizationNote_2",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "Note request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminNoteRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new note for an Rx authorization",
        "tags": [
          "rx-authorizations"
        ]
      }
    },
    "/members/{memberId}/rx-authorizations/{authorizationId}/notifications/correspondence-notifications": {
      "get": {
        "description": "${description/authorizations/getRxCorrespondenceNotifications.html}",
        "operationId": "getAuthorizationCorrespondenceNotifications_1",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CorrespondenceNotification"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the correspondence notifications for an Rx authorization",
        "tags": [
          "rx-authorizations"
        ]
      }
    },
    "/members/{memberId}/rx-authorizations/{authorizationId}/notifications/phone-notifications": {
      "get": {
        "description": "${description/authorizations/getRxPhoneNotifications.html}",
        "operationId": "getAuthorizationPhoneNotifications_1",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/PhoneNotification"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the phone notifications for an Rx authorization",
        "tags": [
          "rx-authorizations"
        ]
      }
    },
    "/members/{memberId}/rx-authorizations/{authorizationId}/reopenings": {
      "get": {
        "description": "${description/authorizations/getRxAuthorizationReopens.html}",
        "operationId": "getAuthorizationReopenings-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AuthorizationReopening"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the Reopenings for an Rx authorization",
        "tags": [
          "rx-authorizations"
        ]
      }
    },
    "/members/{memberId}/rx-authorizations/{authorizationId}/request-for-information": {
      "get": {
        "description": "${description/authorizations/getRxAuthorizationRequestForInformation.html}",
        "operationId": "getAuthorizationRequestForInformation_2",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/RequestForInformation"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get the requests for information (RFIs) on a Rx authorization",
        "tags": [
          "rx-authorizations"
        ]
      }
    },
    "/members/{memberId}/rx-authorizations/{authorizationId}/requesting-provider": {
      "get": {
        "description": "${description/authorizations/getRxAuthRequestingProvider.html}",
        "operationId": "getAuthorizationRequestingProvider_2",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/RequestingProvider"
            }
          }
        },
        "summary": "Gets the requesting provider information for an Rx authorization",
        "tags": [
          "rx-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-offers/{serviceOfferId}": {
      "get": {
        "description": "${description/service-requests/getServiceOffer.html}",
        "operationId": "getServiceOfferByServiceOfferId",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The service offer Id",
            "in": "path",
            "name": "serviceOfferId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${InvalidServiceOfferException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceOffer"
            }
          }
        },
        "summary": "Gets the service offer by service offer id",
        "tags": [
          "service-offers"
        ]
      }
    },
    "/members/{memberId}/service-procedure-authorizations": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postServiceProcedureAuthorization.html}",
        "operationId": "postServiceProcedureAuthorization",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the authorization/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether copy is being created, UDFs are being copied even if they are marked as hidden",
            "in": "query",
            "name": "copyArtifact",
            "type": "boolean"
          },
          {
            "description": "The Service Procedure Authorization Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceProcedureAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${DuplicateAuthorizationException}"
          },
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidProviderSpecialtyException}"
          },
          "400": {
            "description": "${InvalidServiceTypeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${NonVoidableLineItemException}"
          },
          "400": {
            "description": "${AuthorizationDisabledTypeException}"
          },
          "400": {
            "description": "${AuthorizationLimitExceededException}"
          },
          "400": {
            "description": "${LineItemLimitExceededException}"
          },
          "400": {
            "description": "${AuthSpecificContactRequiredException}"
          },
          "400": {
            "description": "${AuthSpecificContactInvalidException}"
          },
          "400": {
            "description": "${AssigneeMissingMemberPermissionException}"
          },
          "400": {
            "description": "${ExtendedAttributeDisabledException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationAndLineItemsSummary"
            }
          }
        },
        "summary": "Submit a service procedure authorization request",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-procedure-authorizations-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postServiceProcedureAuthorizationV2.html}",
        "operationId": "postServiceProcedureAuthorization-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates if pre-screen has to be run before creating an authorization.",
            "in": "query",
            "name": "runPrescreenBeforeAuthSubmission",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates if in case pre-screen was run resulting in authorization required a pre-screen note has to be created or not.",
            "in": "query",
            "name": "createPrescreenNote",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the authorization/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether copy is being created, UDFs are being copied even if they are marked as hidden",
            "in": "query",
            "name": "copyArtifact",
            "type": "boolean"
          },
          {
            "description": "The Service Procedure Authorization Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceProcedureAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${DuplicateAuthorizationException}"
          },
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidProviderSpecialtyException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${AuthorizationDisabledTypeException}"
          },
          "400": {
            "description": "${AuthorizationLimitExceededException}"
          },
          "400": {
            "description": "${LineItemLimitExceededException}"
          },
          "400": {
            "description": "${AuthSpecificContactRequiredException}"
          },
          "400": {
            "description": "${AuthSpecificContactInvalidException}"
          },
          "400": {
            "description": "${AssigneeMissingMemberPermissionException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationSubmissionResponse"
            }
          }
        },
        "summary": "Submit a service procedure authorization request",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-procedure-authorizations/draft": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postServiceProcedureAuthorizationDraft.html}",
        "operationId": "postServiceProcedureAuthorizationDraft-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "api",
            "description": "Source identifier",
            "in": "query",
            "name": "sourceIdentifier",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether copy is being created, UDFs are being copied even if they are marked as hidden",
            "in": "query",
            "name": "copyArtifact",
            "type": "boolean"
          },
          {
            "description": "The Service Procedure Authorization Request Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceProcedureAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${AuthorizationDisabledTypeException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${ExtendedAttributeDisabledException}"
          },
          "400": {
            "description": "${DraftViolatesDatabaseConstraint}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${OptionValueNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationAndLineItemsSummary"
            }
          }
        },
        "summary": "Saves a draft service procedure authorization request",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-procedure-authorizations/{authorizationId}/appeals": {
      "get": {
        "description": "${description/authorizations/getSPAuthorizationAppeals.html}",
        "operationId": "getAuthorizationAppealsSummary_2",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AuthorizationAppeal"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the appeals for a service procedure authorization",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-procedure-authorizations/{authorizationId}/attachments": {
      "get": {
        "description": "${description/authorizations/getServiceProcedureAuthorizationAttachments.html}",
        "operationId": "getAuthorizationAttachments_3",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/DocumentInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the attachments of an authorization",
        "tags": [
          "service-procedure-authorizations"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/authorizations/postServiceProcedureAuthAttachment.html}",
        "operationId": "postAuthorizationAttachment_3",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Metadata",
            "in": "formData",
            "name": "metadata",
            "type": "object"
          },
          {
            "description": "Attachment file",
            "format": "binary",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AttachmentFileException}"
          },
          "400": {
            "description": "${AttachmentFileSizeException}"
          },
          "400": {
            "description": "${AttachmentFileNameExtensionException}"
          },
          "400": {
            "description": "${AttachmentFileNamePatternException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new attachment for an authorization",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-procedure-authorizations/{authorizationId}/diagnoses": {
      "get": {
        "description": "${description/authorizations/getServiceProcedureAuthorizationDiagnosis.html}",
        "operationId": "getAuthorizationDiagnosis_3",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationDiagnosis"
            }
          }
        },
        "summary": "Gets the diagnosis information for a service procedure authorization",
        "tags": [
          "service-procedure-authorizations"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postServiceProcedureAuthorizationDiagnosisRequest.html}",
        "operationId": "addAuthorizationDiagnosis_2",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "description": "The diagnosis request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationDiagnosisRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${OperationNotSupportedOnDraftAuthorizationException}"
          },
          "400": {
            "description": "${InvalidDiagnosisCodeException}"
          },
          "400": {
            "description": "${InvalidDiagnosisTypeException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${MissingExplanationForOtherVoidReasonException}"
          },
          "400": {
            "description": "${MissingDiagnosisInAuthorizationException}"
          },
          "400": {
            "description": "${InvalidAuthStatusForVoidDiagnosisException}"
          },
          "400": {
            "description": "${MissingDiagnosisInVoidOrAddSectionException}"
          },
          "400": {
            "description": "${InvalidAuthStatusForRemoveDiagnosisException}"
          },
          "400": {
            "description": "${UnspecifiedObjectVersionException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          }
        },
        "summary": "Add, Remove, Void authorization diagnoses",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-procedure-authorizations/{authorizationId}/header": {
      "get": {
        "description": "${description/authorizations/getServiceProcedureAuthorizationHeader.html}",
        "operationId": "getAuthorizationHeader_3",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceProcedureAuthorizationHeader"
            }
          }
        },
        "summary": "Gets the header of a service procedure",
        "tags": [
          "service-procedure-authorizations"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/putServiceProcedureAuthorizationHeaderRequest.html}",
        "operationId": "updateAuthorizationHeaderRequest_1",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates if the intent of this request is to update a locked authorization, waiting on additional information from external systems.",
            "in": "query",
            "name": "lockedAuthUpdate",
            "type": "boolean"
          },
          {
            "description": "The header request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServiceProcedureAuthorizationHeaderRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${AssigneeMissingMemberPermissionException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "404": {
            "description": "${AlreadyUnlockedException}"
          }
        },
        "summary": "Updates an existing service procedure authorization header",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-procedure-authorizations/{authorizationId}/line-items": {
      "get": {
        "description": "${description/authorizations/getAuthorizationLineItems.html}",
        "operationId": "getLineItems",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ServiceProcedureLineItem"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the line items for the given service procedure authorization",
        "tags": [
          "service-procedure-authorizations"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/addSPLineItemToSPAuth.html}",
        "operationId": "addSPLineItem",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the authorization/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "description": "The request to add a SP LineItem",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddServiceProcedureLineItemToAuthorizationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${DuplicateAuthorizationException}"
          },
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidProviderSpecialtyException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${AuthorizationLimitExceededException}"
          },
          "400": {
            "description": "${LineItemLimitExceededException}"
          },
          "400": {
            "description": "${AuthSpecificContactRequiredException}"
          },
          "400": {
            "description": "${AuthSpecificContactInvalidException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AuthorizationAndLineItemsSummary"
            }
          }
        },
        "summary": "Add service procedure line items to an existing authorization",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-procedure-authorizations/{authorizationId}/line-items/line-item-reviews": {
      "get": {
        "description": "${description/authorizations/getSPAuthorizationLineItemReviews.html}",
        "operationId": "getLineItemReviews_3",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AuthorizationLineItemReview"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the line item reviews for the given service procedure authorization",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-procedure-authorizations/{authorizationId}/line-items/{lineItemNumber}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/putSPAuthSPLineItem.html}",
        "operationId": "updateSPLineItem_1",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The line item number",
            "format": "int32",
            "in": "path",
            "name": "lineItemNumber",
            "required": true,
            "type": "integer"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates if the intent of this request is to update a locked authorization, waiting on additional information from external systems.",
            "in": "query",
            "name": "lockedAuthUpdate",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the request for codes (diagnosis, procedure and etc)",
            "in": "query",
            "name": "rejectCodeIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the authorization/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "description": "The update request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServiceProcedureLineItemRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${InvalidDrugException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidServiceTypeException}"
          },
          "400": {
            "description": "${EligibilityNotFoundException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${DeterminationNotAllowedException}"
          },
          "400": {
            "description": "${NotEditableLineItemException}"
          },
          "400": {
            "description": "${NotEditableLineItemAuthLockedException}"
          },
          "400": {
            "description": "${InvalidRequestDateException}"
          },
          "400": {
            "description": "${InvalidRequestedUnitsException}"
          },
          "400": {
            "description": "${AuthorizationLimitExceededException}"
          },
          "400": {
            "description": "${LineItemLimitExceededException}"
          },
          "400": {
            "description": "${AuthSpecificContactRequiredException}"
          },
          "400": {
            "description": "${AuthSpecificContactInvalidException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "404": {
            "description": "${AlreadyUnlockedException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates an service procedure line item",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-procedure-authorizations/{authorizationId}/line-items/{lineItemNumber}/determination": {
      "get": {
        "description": "${description/authorizations/getServiceProcedureAuthorizationDetermination.html}",
        "operationId": "getDetermination_3",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The line item number",
            "format": "int32",
            "in": "path",
            "name": "lineItemNumber",
            "required": true,
            "type": "integer"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${DeterminationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Determination"
            }
          }
        },
        "summary": "Gets the line item determination",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-procedure-authorizations/{authorizationId}/linked-authorizations": {
      "get": {
        "description": "${description/authorizations/getLinkedAuthorizationsForSpAuth.html}",
        "operationId": "getLinkedAuthorizationSummariesForSpAuthorization",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AuthorizationSummaryLite"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the linked authorizations for the given service procedure authorization",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-procedure-authorizations/{authorizationId}/notes": {
      "get": {
        "description": "${description/authorizations/getServiceProcedureAuthorizationNotes.html}",
        "operationId": "getAuthorizationNotes_3",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/NoteInstance"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the notes for a service procedure authorization",
        "tags": [
          "service-procedure-authorizations"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postServiceProcedureAuthNote.html}",
        "operationId": "postAuthorizationNote_3",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Note request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminNoteRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new note for a service procedure authorization",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-procedure-authorizations/{authorizationId}/notifications/correspondence-notifications": {
      "get": {
        "description": "${description/authorizations/getServiceProcedureCorrespondenceNotifications.html}",
        "operationId": "getAuthorizationCorrespondenceNotifications_2",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CorrespondenceNotification"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the correspondence notifications for service procedure authorization",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-procedure-authorizations/{authorizationId}/notifications/phone-notifications": {
      "get": {
        "description": "${description/authorizations/getSPAuthorizationPhoneNotifications.html}",
        "operationId": "getAuthorizationPhoneNotifications_2",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/PhoneNotification"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the phone notifications for service procedure authorization",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-procedure-authorizations/{authorizationId}/reopenings": {
      "get": {
        "description": "${description/authorizations/getServiceProviderAuthorizationReopens.html}",
        "operationId": "getAuthorizationReopenings_1",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AuthorizationReopening"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the Reopenings for an SP authorization",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-procedure-authorizations/{authorizationId}/request-for-information": {
      "get": {
        "description": "${description/authorizations/getSPAuthorizationRequestForInformation.html}",
        "operationId": "getAuthorizationRequestForInformation_3",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/RequestForInformation"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get the requests for information (RFIs) on a service procedure authorization",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-procedure-authorizations/{authorizationId}/requesting-provider": {
      "get": {
        "description": "${description/authorizations/getServiceProcedureAuthRequestingProvider.html}",
        "operationId": "getAuthorizationRequestingProvider_3",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/RequestingProvider"
            }
          }
        },
        "summary": "Gets the requesting provider of a service procedure authorization",
        "tags": [
          "service-procedure-authorizations"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/putServiceProcedureAuthRequestingProviderRequest.html}",
        "operationId": "updateAuthorizationRequestingProvider_1",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member authorization ID",
            "in": "path",
            "name": "authorizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": "INTERNAL_ID",
            "description": "Type of authorization ID. If no value is passed for this parameter, type will be defaulted to 'INTERNAL_ID'",
            "enum": [
              "INTERNAL_ID",
              "AUTHORIZATION_NUMBER",
              "TRACKING_NUMBER"
            ],
            "in": "query",
            "name": "authorizationIdType",
            "type": "string"
          },
          {
            "description": "The request to update a Requesting Provider",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequestingProviderRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${InvalidProviderSpecialtyException}"
          },
          "400": {
            "description": "${NotEditableAuthorizationException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${AuthSpecificContactRequiredException}"
          },
          "400": {
            "description": "${AuthSpecificContactInvalidException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          }
        },
        "summary": "Updates the requesting provider of a service procedure authorization",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/members/{memberId}/service-request-provider-configuration": {
      "get": {
        "description": "${description/service-requests/getServiceRequestProviderConfiguration.html}",
        "operationId": "getServiceRequestProviderConfiguration-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/OptionValue"
            }
          }
        },
        "summary": "Retrieves service request servicing provider",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/postServiceRequest.html}",
        "operationId": "postServiceRequest",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether to abort auth submission process  in case warning message(s) is generated while validating the authorization/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "description": "The ServiceRequest Requesting Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceRequestRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${TeamNotFoundException}"
          },
          "400": {
            "description": "${DuplicateServiceRequestException}"
          },
          "400": {
            "description": "${InvalidModifierCodeException}"
          },
          "400": {
            "description": "${InvalidServiceOfferNegotiateRateException}"
          },
          "400": {
            "description": "${InvalidServiceCodeException}"
          },
          "400": {
            "description": "${InvalidServiceOfferException}"
          },
          "400": {
            "description": "${HCSFeatureNotAvailableForBHPException}"
          },
          "400": {
            "description": "${InvalidRequestDateException}"
          },
          "400": {
            "description": "${AuthorizationLimitExceededException}"
          },
          "400": {
            "description": "${LineItemLimitExceededException}"
          },
          "400": {
            "description": "${InvalidServiceRequestQuantityException}"
          },
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InvalidServiceRequestStatusException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Submit a service request request",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/postServiceRequestSummarySearch.html}",
        "operationId": "serviceRequestSummarySearch-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The search criteria for service request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceRequestSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${InvalidServiceCodeException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InvalidServiceRequestStatusException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ServiceRequestSearchResults"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the summary of service requests",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/postSubmitServiceRequest.html}",
        "operationId": "submitServiceRequest-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether to abort service request submission process  in case warning message(s) is generated while validating the service request/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether review is required and to create review task",
            "in": "query",
            "name": "needsReview",
            "type": "boolean"
          },
          {
            "description": "The CreateServiceRequestRequest Requesting Data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateServiceRequestRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${TeamNotFoundException}"
          },
          "400": {
            "description": "${DuplicateServiceRequestException}"
          },
          "400": {
            "description": "${InvalidModifierCodeException}"
          },
          "400": {
            "description": "${InvalidServiceOfferNegotiateRateException}"
          },
          "400": {
            "description": "${InvalidServiceCodeException}"
          },
          "400": {
            "description": "${InvalidServiceOfferException}"
          },
          "400": {
            "description": "${HCSFeatureNotAvailableForBHPException}"
          },
          "400": {
            "description": "${InvalidRequestDateException}"
          },
          "400": {
            "description": "${AuthorizationLimitExceededException}"
          },
          "400": {
            "description": "${LineItemLimitExceededException}"
          },
          "400": {
            "description": "${InvalidServiceRequestQuantityException}"
          },
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InvalidServiceRequestStatusException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Submit a service request request",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/acknowledge": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/postServiceRequestAcknowledge.html}",
        "operationId": "acknowledgeServiceRequestServicingProvider-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The List of Service Request IDs",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AuthorizationProcessingFailedException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          }
        },
        "summary": "Acknowledges a service request",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/check-procedure-codes-used": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/postCheckProcedureCodesUsed.html}",
        "operationId": "checkProcedureCodesUsed-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The CheckProcedureCodesRequest request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckProcedureCodesRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${HCSFeatureNotAvailableForBHPException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ProcedureCodeNaturalId"
              },
              "type": "array"
            }
          }
        },
        "summary": "Check if service requests procedure codes already exists for the member",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/duplicate-check": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/postDuplicateCheck.html}",
        "operationId": "duplicateCheck-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "DEFAULT",
            "description": "The member service request ID",
            "in": "query",
            "name": "serviceRequestToExclude",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The ServiceRequestDuplicateCheckRequest object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceRequestDuplicateCheckRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidServiceCodeException}"
          },
          "400": {
            "description": "${InvalidServiceOfferException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceRequestDuplicationCheckResult"
            }
          }
        },
        "summary": "Checks for duplicate service request",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/total-cost": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/postTotalCost.html}",
        "operationId": "totalServiceCost-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The List of Service Request IDs",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TotalCostRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/TotalCostResponse"
            }
          }
        },
        "summary": "Get the total cost of service requests",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/{serviceRequestId}": {
      "get": {
        "description": "${description/service-requests/getServiceRequest.html}",
        "operationId": "getServiceRequest-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The service request instance ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceRequest"
            }
          }
        },
        "summary": "Retrieves a service request",
        "tags": [
          "service-requests"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/updateServiceRequestSubmitted.html}",
        "operationId": "updateServiceRequestSubmitted-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member service request ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether to abort service request submission process  in case warning message(s) is generated while validating the service request/line-item limits",
            "in": "query",
            "name": "rejectLimitIfWarning",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Indicates whether review is required and to create review task",
            "in": "query",
            "name": "needsReview",
            "type": "boolean"
          },
          {
            "description": "The UpdateServiceRequestRequest object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServiceRequestRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${AlreadyClosedException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${InvalidProviderLocationException}"
          },
          "400": {
            "description": "${EligibilityInvalidException}"
          },
          "400": {
            "description": "${TeamNotFoundException}"
          },
          "400": {
            "description": "${DuplicateServiceRequestException}"
          },
          "400": {
            "description": "${InvalidModifierCodeException}"
          },
          "400": {
            "description": "${InvalidServiceOfferNegotiateRateException}"
          },
          "400": {
            "description": "${InvalidServiceCodeException}"
          },
          "400": {
            "description": "${InvalidServiceOfferException}"
          },
          "400": {
            "description": "${HCSFeatureNotAvailableForBHPException}"
          },
          "400": {
            "description": "${InvalidRequestDateException}"
          },
          "400": {
            "description": "${AuthorizationLimitExceededException}"
          },
          "400": {
            "description": "${LineItemLimitExceededException}"
          },
          "400": {
            "description": "${OwnerMissingMemberPermissionException}"
          },
          "400": {
            "description": "${InvalidServiceRequestQuantityException}"
          },
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${InvalidServiceRequestStatusException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Submit a Service Request which is already submitted for a member",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/{serviceRequestId}/attachments": {
      "get": {
        "description": "${description/service-requests/getServiceRequestAttachments.html}",
        "operationId": "getServiceRequestAttachments-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The service request instance ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/DocumentInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the attachments of a service request",
        "tags": [
          "service-requests"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/service-requests/postServiceRequestAttachments.html}",
        "operationId": "postServiceRequestAttachments-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member service request ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Metadata",
            "in": "formData",
            "name": "metadata",
            "type": "object"
          },
          {
            "description": "Attachment file",
            "format": "binary",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${AlreadyClosedException}"
          },
          "400": {
            "description": "${AttachmentFileException}"
          },
          "400": {
            "description": "${AttachmentFileSizeException}"
          },
          "400": {
            "description": "${AttachmentFileNameExtensionException}"
          },
          "400": {
            "description": "${AttachmentFileNamePatternException}"
          },
          "400": {
            "description": "${HCSFeatureNotAvailableForBHPException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          },
          "404": {
            "description": "${BhpNodeNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "integer"
            }
          }
        },
        "summary": "Creates a new attachment for a service request",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/{serviceRequestId}/attachments/{attachmentId}/void": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/postVoidServiceRequestAttachment.html}",
        "operationId": "voidServiceRequestAttachment-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member service request ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The attachment ID",
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Void metadata",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${AttachmentNotFoundException}"
          }
        },
        "summary": "Void an attachment of the Service Request",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/{serviceRequestId}/case": {
      "delete": {
        "description": "${description/service-requests/deleteCaseFromServiceRequest.html}",
        "operationId": "removeCaseFromServiceRequestRequest-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member service request ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": 0,
            "description": "Version of Service Request. If no value is passed, the type will be defaulted to '0'",
            "format": "int32",
            "in": "query",
            "name": "versionId",
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "${NoCaseAssociatedWithServiceRequestException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Remove associated case from service request",
        "tags": [
          "service-requests"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/postAssignCaseToServiceRequest.html}",
        "operationId": "assignCaseToServiceRequest-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member service request ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Service Request IDs",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssignCaseToServiceRequestRequest"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${CaseNotFoundExceptionException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Associating service request with CaseID",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/{serviceRequestId}/close-request": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/closeServiceRequest.html}",
        "operationId": "closeServiceRequest",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The service request instance ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The close request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloseServiceRequestRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${AlreadyClosedException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          }
        },
        "summary": "Close a service request",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/{serviceRequestId}/draft-notifications": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/service-requests/postSaveServiceReqNotification.html}",
        "operationId": "saveServiceRequestNotification-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The service request instance ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "saveServiceRequestNotification",
            "type": "object"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InternalLetterRecipientCreationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InternalLetterInfo"
            }
          }
        },
        "summary": "Save a service request notification",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/{serviceRequestId}/header": {
      "get": {
        "description": "${description/service-requests/getServiceRequestHeader.html}",
        "operationId": "getServiceRequestHeader-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member service request ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceRequestHeader"
            }
          }
        },
        "summary": "Gets the header of a service request",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/{serviceRequestId}/line-items": {
      "get": {
        "description": "${description/service-requests/getServiceRequestLineItems.html}",
        "operationId": "getServiceRequestLineItems-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member service request ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ServiceRequestLineItem"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the line items of a service request",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/{serviceRequestId}/line-items/{lineItemNumber}/determination": {
      "get": {
        "description": "${description/service-requests/getDetermination.html}",
        "operationId": "getServiceRequestLineItemDetermination-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member service request ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The line item number",
            "format": "int32",
            "in": "path",
            "name": "lineItemNumber",
            "required": true,
            "type": "integer"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${DeterminationNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceRequestDetermination"
            }
          }
        },
        "summary": "Gets the determination information of a service request line item",
        "tags": [
          "service-requests"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/submitServiceRequestDetermination.html}",
        "operationId": "submitServiceRequestDetermination-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member service request ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The line item number",
            "format": "int32",
            "in": "path",
            "name": "lineItemNumber",
            "required": true,
            "type": "integer"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Claims the determination task if not assigned to the user",
            "in": "query",
            "name": "claimDeterminationTask",
            "type": "boolean"
          },
          {
            "description": "Submit service request determination request detail",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceRequestDeterminationRequest"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          }
        },
        "summary": "Submit determination for service request",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/{serviceRequestId}/line-items/{lineItemNumber}/determination-history": {
      "get": {
        "description": "${description/service-requests/getAllDetermination.html}",
        "operationId": "getAllServiceRequestLineItemDetermination-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member service request ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The line item number",
            "format": "int32",
            "in": "path",
            "name": "lineItemNumber",
            "required": true,
            "type": "integer"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceRequestDetermination"
            }
          }
        },
        "summary": "Gets all the determination information of a service request line item",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/{serviceRequestId}/line-items/{lineItemNumber}/void": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/postVoidServiceRequestLineItem.html}",
        "operationId": "voidServiceRequestLineItem-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member service request ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The line item number",
            "format": "int32",
            "in": "path",
            "name": "lineItemNumber",
            "required": true,
            "type": "integer"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The line item version and authorization version object request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest2"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${LineItemNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          }
        },
        "summary": "Voiding a service line item in service request line item",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/{serviceRequestId}/notes": {
      "get": {
        "description": "${description/service-requests/getServiceRequestNotes.html}",
        "operationId": "getServiceRequestAuthorizationNotes-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The service request instance ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/NoteInstance"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the notes of a service request",
        "tags": [
          "service-requests"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/postServiceRequestNote.html}",
        "operationId": "postServiceRequestNote-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The member service request ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Service Request current version",
            "format": "int64",
            "in": "query",
            "name": "servicerequestVersion",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Note request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminNoteRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/NewNoteResponse"
            }
          }
        },
        "summary": "Creates a new note for an authorization",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/{serviceRequestId}/notifications": {
      "get": {
        "description": "${description/service-requests/getServiceRequestNotification.html}",
        "operationId": "getServiceRequestNotification-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The service request instance ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceRequestNotification"
            }
          }
        },
        "summary": "Retrieves service request Notifications",
        "tags": [
          "service-requests"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "${description/service-requests/postSubmitServiceReqNotification.html}",
        "operationId": "submitServiceRequestNotification-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "Member ID retrieved from member search or member list or 'DEFAULT'",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The service request instance ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Claims the notification task",
            "in": "query",
            "name": "claimNotificationTask",
            "type": "boolean"
          },
          {
            "in": "formData",
            "name": "submitServiceRequestNotification",
            "type": "object"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InternalLetterRecipientCreationException}"
          },
          "400": {
            "description": "${UnsupportedDeliveryMethodException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InternalLetterInfo"
            }
          }
        },
        "summary": "Submit a service request notification",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/{serviceRequestId}/reopen": {
      "post": {
        "description": "${description/service-requests/postReopenServiceRequest.html}",
        "operationId": "reopenServiceRequest-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member service request ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${AlreadyOpenException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          }
        },
        "summary": "Reopen a service request",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/{serviceRequestId}/review/complete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/postSubmitReview.html}",
        "operationId": "completeReview-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member service request ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The CompleteServiceRequestReviewRequest object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteServiceRequestReviewRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${TaskNotFoundException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${TaskNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          }
        },
        "summary": "Complete the review of service request",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/{serviceRequestId}/servicing-provider": {
      "get": {
        "description": "${description/service-requests/getServiceRequestServicingProvider.html}",
        "operationId": "getServiceRequestServicingProvider-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member service request ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${AuthorizationNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        },
        "summary": "Gets the servicing provider of a service request",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/service-requests/{serviceRequestId}/void-info": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/voidServiceRequest.html}",
        "operationId": "voidServiceRequest",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The service request instance ID",
            "in": "path",
            "name": "serviceRequestId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The void information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${ServiceRequestNotFoundException}"
          }
        },
        "summary": "Void a service request",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/members/{memberId}/summary/allergies": {
      "get": {
        "deprecated": true,
        "description": "${description/member-summary/getMemberSummaryAllergies.html}",
        "operationId": "getMemberAllergiesScreen",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Allergy"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the member allergies summary",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/summary/authorizations": {
      "get": {
        "description": "${description/member-summary/getMemberSummaryAuthorizations.html}",
        "operationId": "getMemberSummaryAuthorizations-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": 0,
            "description": "Start Index",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          },
          {
            "default": false,
            "description": "Indicates whether the endpoint returns the last page of results",
            "in": "query",
            "name": "gotoLastPage",
            "type": "boolean"
          },
          {
            "default": "AUTHORIZATION_NUM",
            "description": "Sort Column",
            "enum": [
              "AUTHORIZATION_ID",
              "AUTHORIZATION_NUM",
              "AUTHORIZATION_TYPE",
              "FACILITY",
              "REQUESTING_PROVIDER",
              "ADMIT_DIAGNOSIS",
              "START_DATE",
              "DISCHARGE",
              "END_DATE",
              "STATUS",
              "STATE",
              "DIAGNOSIS_TYPE",
              "SERVICING_PRESCRIBING_PROVIDER",
              "UPDATED_DATE"
            ],
            "in": "query",
            "name": "sortColumn",
            "type": "string"
          },
          {
            "default": "ASC",
            "description": "Sort Type",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sortType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/MemberSummaryAuthorizationSearchResults"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the member authorizations summary",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/summary/care-opportunities": {
      "get": {
        "description": "${description/member-summary/getMemberOpenCareOpportunities.html}",
        "operationId": "getMemberOpenCareOpportunities-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": 0,
            "description": "Start Index",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          },
          {
            "default": false,
            "description": "Indicates whether the endpoint returns the last page of results",
            "in": "query",
            "name": "gotoLastPage",
            "type": "boolean"
          },
          {
            "default": "STATUS_DATE",
            "description": "Sort Column",
            "enum": [
              "CATEGORY",
              "RISK_INDICATOR",
              "CONDITION",
              "ACUITY_RISK",
              "RISK_INDICATOR_VAL",
              "RISK_INDICATOR_DATE",
              "SOURCE",
              "STATUS",
              "STATUS_DATE"
            ],
            "in": "query",
            "name": "sortColumn",
            "type": "string"
          },
          {
            "default": "DESC",
            "description": "Sort Type",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sortType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/CareOpportunitySearchResults"
            }
          }
        },
        "summary": "Retrieve member's open care opportunities",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/summary/clinical-diagnoses": {
      "get": {
        "description": "${description/member-summary/getMemberSummaryClinicalDiagnosis.html}",
        "operationId": "getMemberDiagnoses-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": 0,
            "description": "Start Index",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          },
          {
            "default": "DATE_REPORTED",
            "description": "Sort Column",
            "enum": [
              "DATE_REPORTED",
              "DIAGNOSIS_NAME",
              "DIAGNOSIS_CODE",
              "STATUS",
              "CLOSED_DATE"
            ],
            "in": "query",
            "name": "sortColumn",
            "type": "string"
          },
          {
            "default": "ASC",
            "description": "Sort type",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sortType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether the endpoint returns the last page of results",
            "in": "query",
            "name": "gotoLastPage",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Open Diagnoses Only",
            "in": "query",
            "name": "openDiagnosesOnly",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/DiagnosisLiteResults"
            }
          }
        },
        "summary": "Gets the member diagnosis summary",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/summary/contacts": {
      "get": {
        "description": "${description/member-summary/getMemberSummaryContacts.html}",
        "operationId": "getMemberContactsSummary",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Include inactive contact information",
            "in": "query",
            "name": "includeInactive",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/SimpleContactsSummary"
            }
          }
        },
        "summary": "Gets the member contacts",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/summary/coverage": {
      "get": {
        "description": "${description/member-summary/getMemberSummaryCoverage.html}",
        "operationId": "getEligibilities",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Eligibility"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the member coverage",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/summary/demographics": {
      "get": {
        "description": "${description/member-summary/getMemberSummaryDemographics.html}",
        "operationId": "getMemberSummaryDemographics",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberSummaryDemographics"
            }
          }
        },
        "summary": "Gets the member demographics",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/summary/diagnoses": {
      "get": {
        "description": "${description/member-summary/getMemberSummaryDiagnoses.html}",
        "operationId": "getMemberDiagnosesScreen",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Diagnosis"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the member diagnosis summary",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/summary/medications": {
      "get": {
        "description": "${description/member-summary/getMemberSummaryMedications.html}",
        "operationId": "getMemberMedicationsScreen",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the screen",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": false,
            "description": "Include or exclude voided medications. Empty param will return active medications only",
            "in": "query",
            "name": "include-voided",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Medication"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the member medications summary",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/summary/medications-v2": {
      "get": {
        "description": "${description/member-summary/getMemberMedicationsDashboardPod.html}",
        "operationId": "getMemberMedicationsDashboardPod-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": 0,
            "description": "Start Index",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          },
          {
            "default": false,
            "description": "Indicates whether the endpoint returns the last page of results",
            "in": "query",
            "name": "gotoLastPage",
            "type": "boolean"
          },
          {
            "default": "UPDATED_DATE",
            "description": "Sort Column",
            "enum": [
              "EXPECTED_REFILL_DATE",
              "UPDATED_DATE"
            ],
            "in": "query",
            "name": "sortColumn",
            "type": "string"
          },
          {
            "default": "DESC",
            "description": "Sort Type",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sortType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/MedicationPodResults"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the member medications summary",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/summary/member-details": {
      "get": {
        "description": "${description/member-summary/getMemberSummaryDetails.html}",
        "operationId": "getMemberSummaryDetails-internal",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberSummaryDetails"
            }
          }
        },
        "summary": "Gets the member details.",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/summary/programs": {
      "get": {
        "description": "${description/member-summary/getMemberSummaryEnrollmentPrograms.html}",
        "operationId": "getMemberEnrollmentPrograms-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "If value is passed as true it returns both Open and Closed Programs records or else it returns only Open Programs",
            "in": "query",
            "name": "includeClosed",
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "Start Index",
            "format": "int32",
            "in": "query",
            "name": "startIndex",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          },
          {
            "default": false,
            "description": "Indicates whether the endpoint returns the last page of results",
            "in": "query",
            "name": "gotoLastPage",
            "type": "boolean"
          },
          {
            "default": "START_DATE",
            "description": "Sort Column",
            "enum": [
              "PROGRAM",
              "SERVICE",
              "ENGAGEMENT",
              "START_DATE",
              "END_DATE",
              "STATUS",
              "SOURCE",
              "CASE_NUMBER",
              "CASE_NAME"
            ],
            "in": "query",
            "name": "sortColumn",
            "type": "string"
          },
          {
            "default": "ASC",
            "description": "Sort Type",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sortType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "400": {
            "description": "${InvalidUriParamException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ProgramEnrollmentSearchResults"
            }
          }
        },
        "summary": "Search for member enrollment programs",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/task-for-screen": {
      "get": {
        "description": "${description/member-properties/getTaskForScreen.html}",
        "operationId": "getTaskForScreen-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The name of the screen",
            "in": "query",
            "name": "screenTypeName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The id of the artifact",
            "in": "query",
            "name": "artifactId",
            "type": "string"
          },
          {
            "description": "The id of the instance",
            "in": "query",
            "name": "instanceId",
            "type": "string"
          },
          {
            "description": "The name of the task",
            "in": "query",
            "name": "taskName",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ScreenNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/TaskDTO"
            }
          }
        },
        "summary": "Gets a task for a given screen type",
        "tags": [
          "members"
        ]
      }
    },
    "/members/{memberId}/task-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/tasks/memberSearchTask.html}",
        "operationId": "searchMemberTasks",
        "parameters": [
          {
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The search criteria for tasks",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberTaskSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberTaskSearchResults"
            }
          }
        },
        "summary": "Search for member's tasks",
        "tags": [
          "tasks"
        ]
      }
    },
    "/members/{memberId}/task-search/artifacts": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/tasks/searchTaskArtifacts.html}",
        "operationId": "searchManualTaskArtifacts-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Indicates whether closed artifacts are included in the results. Closed artifacts are not returned by default",
            "in": "query",
            "name": "includeClosed",
            "type": "boolean"
          },
          {
            "description": "The search criteria for tasks",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManualTaskArtifactSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ManualTaskArtifactSearchResults"
            }
          }
        },
        "summary": "Search for artifacts that can be associated with a manual task",
        "tags": [
          "tasks"
        ]
      }
    },
    "/members/{memberId}/tasks": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/tasks/createTask.html}",
        "operationId": "createTask",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The new task data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTaskRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${AlreadyVoidedException}"
          },
          "400": {
            "description": "${AuthorizationNotFoundException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${TeamNotFoundException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${InvalidTaskRecurrenceException}"
          },
          "400": {
            "description": "${InvalidTaskRecurrenceLimitException}"
          },
          "403": {
            "description": "${DcmTaskAssignmentException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "404": {
            "description": "${MedicationNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create a new task instance",
        "tags": [
          "tasks"
        ]
      }
    },
    "/members/{memberId}/tasks/{taskId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/tasks/updateFullTask.html}",
        "operationId": "updateTask-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The task instance ID, obtainable from the task search",
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new task data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateFullTaskRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${TeamNotFoundException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "400": {
            "description": "${InvalidTaskRecurrenceException}"
          },
          "400": {
            "description": "${InvalidTaskRecurrenceLimitException}"
          },
          "403": {
            "description": "${DcmTaskAssignmentException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${TaskNotFoundException}"
          },
          "404": {
            "description": "${NoOpenTaskFoundException}"
          }
        },
        "summary": "Update existing task ",
        "tags": [
          "tasks"
        ]
      }
    },
    "/members/{memberId}/tasks/{taskId}/attempt": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/tasks/createTaskAttempt.html}",
        "operationId": "createTaskAttempt",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The task instance ID, obtainable from the task search",
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          },
          {
            "description": "attempt",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskAttemptRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${TaskNotFoundException}"
          },
          "404": {
            "description": "${NoOpenTaskFoundException}"
          },
          "412": {
            "description": "${TaskAttemptMaxAttemptsReachedException}"
          }
        },
        "summary": "Create task attempt",
        "tags": [
          "tasks"
        ]
      }
    },
    "/members/{memberId}/tasks/{taskId}/attempts": {
      "get": {
        "description": "${description/tasks/getTaskAttempts.html}",
        "operationId": "getTaskAttempts-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The task instance ID, obtainable from the task search",
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${TaskNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/TaskAttemptResponse"
            }
          }
        },
        "summary": "Returns task attempts",
        "tags": [
          "tasks"
        ]
      }
    },
    "/members/{memberId}/tasks/{taskId}/cancellation": {
      "post": {
        "description": "${description/tasks/cancelWorkflowTask.html}",
        "operationId": "cancelWorkflowTask",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The task instance ID, obtainable from the task search",
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "${TaskCannotBeCancelledException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${TaskNotFoundException}"
          },
          "404": {
            "description": "${NoOpenTaskFoundException}"
          }
        },
        "summary": "Cancel a workflow task",
        "tags": [
          "tasks"
        ]
      }
    },
    "/members/{memberId}/tasks/{taskId}/comments": {
      "get": {
        "description": "${description/tasks/getTaskComments.html}",
        "operationId": "getTaskComments",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The task instance ID, obtainable from the task search",
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${TaskNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/TaskComment"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get task comments",
        "tags": [
          "tasks"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/tasks/createTaskComments.html}",
        "operationId": "createTaskComments",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The task instance ID, obtainable from the task search",
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          },
          {
            "description": "comments",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTaskCommentsRequest"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${TaskNotFoundException}"
          },
          "404": {
            "description": "${NoOpenTaskFoundException}"
          }
        },
        "summary": "Create task comments",
        "tags": [
          "tasks"
        ]
      }
    },
    "/members/{memberId}/tasks/{taskId}/completion": {
      "post": {
        "description": "${description/tasks/completeTask.html}",
        "operationId": "completeGenericTask",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The task instance ID, obtainable from the task search",
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "${TaskCannotBeCompletedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${TaskNotFoundException}"
          },
          "404": {
            "description": "${NoOpenTaskFoundException}"
          }
        },
        "summary": "Complete (close) a generic task",
        "tags": [
          "tasks"
        ]
      }
    },
    "/members/{memberId}/tasks/{taskId}/history": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/tasks/getTaskHistory.html}",
        "operationId": "getTaskHistory-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The task instance ID, obtainable from the task search",
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The search criteria for task history",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskLogSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${TaskNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/TaskLogSearchResults"
            }
          }
        },
        "summary": "Returns task history",
        "tags": [
          "tasks"
        ]
      }
    },
    "/members/{memberId}/tasks/{taskId}/task-attempts-configuration": {
      "get": {
        "description": "${description/tasks/getTaskAttemptsConfiguration.html}",
        "operationId": "getTaskAttemptConfiguration-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The task instance ID, obtainable from the task search",
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${TaskNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/TaskAttemptsBhpSetup"
            }
          }
        },
        "summary": "Get task attempts configuration",
        "tags": [
          "tasks"
        ]
      }
    },
    "/members/{memberId}/tasks/{taskId}/taskdetails": {
      "get": {
        "description": "${description/tasks/getTasksDetails.html}",
        "operationId": "getTask",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The task instance ID, obtainable from the task search",
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${TaskNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/TaskDetails"
            }
          }
        },
        "summary": "Get task details",
        "tags": [
          "tasks"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/tasks/updateTask.html}",
        "operationId": "updateTask",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The task instance ID, obtainable from the task search",
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The data to update the task",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTaskRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${TeamNotFoundException}"
          },
          "400": {
            "description": "${QueueNotFoundException}"
          },
          "403": {
            "description": "${DcmTaskAssignmentException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${TaskNotFoundException}"
          },
          "404": {
            "description": "${NoOpenTaskFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Update task details",
        "tags": [
          "tasks"
        ]
      }
    },
    "/members/{memberId}/tasks/{taskId}/taskdetails-v2": {
      "get": {
        "description": "${description/tasks/getTasksDetails-v2.html}",
        "operationId": "getTaskDetailsWithManualTasks-internal",
        "parameters": [
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "The task instance ID, obtainable from the task search",
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${TaskNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberTaskDetails"
            }
          }
        },
        "summary": "Get task details",
        "tags": [
          "tasks"
        ]
      }
    },
    "/members/{memberId}/waiver-types": {
      "get": {
        "description": "${description/service-requests/getMemberWaiverTypes.html}",
        "operationId": "getMemberWaiverTypes-internal",
        "parameters": [
          {
            "default": "DEFAULT",
            "description": "The internal member ID, obtainable from the member search or member list",
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Waiver Local date: all member waiver types will be returned which are effective on this date",
            "in": "query",
            "name": "date",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidLocalDateException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/OptionValue"
            }
          }
        },
        "summary": "Retrieve the waiver types for the member based on the given date",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/menu-configuration": {
      "get": {
        "description": "${description/menu/getMenuConfiguration.html}",
        "operationId": "getMenuConfiguration-internal",
        "parameters": [
          {
            "description": "The BHP node feed ID full path value, if not provided defaults to root",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BhpNodeNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MenuConfiguration"
            }
          }
        },
        "summary": "Get menu configuration",
        "tags": [
          "menus-internal"
        ]
      }
    },
    "/messages": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/message/postMessage.html}",
        "operationId": "createMessage",
        "parameters": [
          {
            "description": "The message to save",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BoardMessageRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${MemberNotFoundException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${TeamNotFoundException}"
          },
          "400": {
            "description": "${NoRecipientsException}"
          },
          "400": {
            "description": "${MemberFilterGroupNotFoundException}"
          },
          "400": {
            "description": "${CompanyGroupNotFoundException}"
          },
          "400": {
            "description": "${NoAccessToCompanyGroupForUserException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a new message",
        "tags": [
          "messages"
        ]
      }
    },
    "/messages/archive": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/message/archiveMessages.html}",
        "operationId": "archiveBoardMessages-internal",
        "parameters": [
          {
            "description": "List of BoardMessages to archive",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BoardMessageArchivationRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${BoardMessageNotFoundException}"
          }
        },
        "summary": "Archives select messages",
        "tags": [
          "messages"
        ]
      }
    },
    "/metrics": {
      "get": {
        "description": "${description/metrics/metrics.html}",
        "operationId": "getMetrics-internal",
        "parameters": [],
        "produces": [
          "text/plain"
        ],
        "responses": {
          "404": {
            "description": "${NotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Get Prometheus metrics in text format, works only in continuous integration environment, otherwise produces 404",
        "tags": [
          "metrics-internal"
        ]
      }
    },
    "/modifier-codes": {
      "get": {
        "description": "${description/modifier-codes/getAllModifierCodes.html}",
        "operationId": "getAllModifierCodes",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ModifierCode"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets all modifier codes",
        "tags": [
          "modifier-codes"
        ]
      }
    },
    "/monographs/{monographTypeId}/{monographId}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/medication-screening/postMonograph.html}",
        "operationId": "searchMonograph-internal",
        "parameters": [
          {
            "description": "monographId to find the Monograph for.",
            "in": "path",
            "name": "monographId",
            "required": true,
            "type": "string"
          },
          {
            "default": "DRUG",
            "description": "monographTypeId to specify the type of interaction",
            "enum": [
              "DRUG",
              "FOOD",
              "ALLERGEN"
            ],
            "in": "path",
            "name": "monographTypeId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Interacting drugs description",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/MonographRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${MedispanNotConfiguredException}"
          },
          "400": {
            "description": "${MedispanAllergiesNotEnabledException}"
          },
          "404": {
            "description": "${LicenseNotFoundException}"
          },
          "404": {
            "description": "${MediSpanMonographSearchException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Finds the Monograph by monographId and monographType",
        "tags": [
          "medications"
        ]
      }
    },
    "/next-task-configuration": {
      "get": {
        "description": "${description/tasks/getNextTaskConfiguration.html}",
        "operationId": "getNextTaskConfigurationForCurrentUser-internal",
        "parameters": [
          {
            "description": "TC UI context",
            "enum": [
              "INPATIENT_AUTHORIZATION_CREATE",
              "SERVICE_AUTHORIZATION_CREATE",
              "RX_AUTHORIZATION_CREATE",
              "CLINICAL_REVIEW_CREATE",
              "ADVISOR_REVIEW_CREATE",
              "DETERMINATION_SUBMIT",
              "SERVICE_REQUEST_CREATE",
              "APPEAL_CREATE",
              "APPEAl_ADVISOR_REVIEW_CREATE",
              "APPEAL_CLINICAL_REVIEW_CREATE",
              "APPEAL_OUTCOME_CREATE",
              "AAG_CREATE",
              "AAG_CLINICAL_REVIEW_CREATE",
              "AAG_ADVISOR_REVIEW_CREATE",
              "AAG_OUTCOME_CREATE"
            ],
            "in": "query",
            "name": "context",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NextTaskContextNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/NextTaskConfigurationResponse"
            }
          }
        },
        "summary": "Gets the next task configuration for a TC UI context",
        "tags": [
          "tasks"
        ]
      }
    },
    "/next-task-configuration-v2": {
      "get": {
        "description": "${description/tasks/getNextTaskConfigurationV2.html}",
        "operationId": "getNextTaskConfigurationForCurrentUserv2-internal",
        "parameters": [
          {
            "description": "The BHP node feed ID full path. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          },
          {
            "description": "TC UI context",
            "enum": [
              "ADD_REFERRAL",
              "EDIT_REFERRAL",
              "ADD_DETERMINATION",
              "ADD_RFI",
              "ADD_ATTEMPT",
              "ADD_INPATIENT_AUTHORIZATION",
              "ADD_SERVICE_AUTHORIZATION",
              "ADD_RX_AUTHORIZATION",
              "EDIT_INPATIENT_AUTHORIZATION",
              "EDIT_SERVICE_AUTHORIZATION",
              "EDIT_RX_AUTHORIZATION",
              "VIEW_INPATIENT_AUTHORIZATION",
              "VIEW_SERVICE_AUTHORIZATION",
              "VIEW_RX_AUTHORIZATION",
              "ADD_CLINICAL_REVIEW",
              "EDIT_CLINICAL_REVIEW",
              "VIEW_CLINICAL_REVIEW",
              "ADD_ADVISOR_REVIEW",
              "EDIT_ADVISOR_REVIEW",
              "VIEW_ADVISOR_REVIEW",
              "ADD_APPEAL",
              "EDIT_APPEAL",
              "VIEW_APPEAL",
              "ADD_APPEAL_CLINICAL_REVIEW",
              "EDIT_APPEAL_CLINICAL_REVIEW",
              "VIEW_APPEAL_CLINICAL_REVIEW",
              "ADD_APPEAl_ADVISOR_REVIEW",
              "EDIT_APPEAl_ADVISOR_REVIEW",
              "VIEW_APPEAl_ADVISOR_REVIEW",
              "ADD_APPEAl_OUTCOME",
              "ADD_AAG",
              "EDIT_AAG",
              "ADD_AAG_CLINICAL_REVIEW",
              "EDIT_AAG_CLINICAL_REVIEW",
              "ADD_AAG_ADVISOR_REVIEW",
              "EDIT_AAG_ADVISOR_REVIEW",
              "ADD_AAG_OUTCOME",
              "ADD_SERVICE_REQUEST",
              "EDIT_SERVICE_REQUEST",
              "ADD_SERVICE_REQUEST_DETERMINATION"
            ],
            "in": "query",
            "name": "context",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${NextTaskContextNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/NextTaskConfigurationResponseV2"
            }
          }
        },
        "summary": "Gets the next task configuration for a TC UI context",
        "tags": [
          "tasks"
        ]
      }
    },
    "/note-definitions/{type}": {
      "get": {
        "description": "${description/notes/getNoteDefinitions.html}",
        "operationId": "getNoteDefinitionsByType",
        "parameters": [
          {
            "description": "The note definition type",
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "default": "CREATE",
            "description": "Retieves notes definitions for Edit/Create Action, allowed values CREATE, EDIT",
            "enum": [
              "CREATE",
              "EDIT"
            ],
            "in": "query",
            "name": "permission",
            "type": "string"
          },
          {
            "default": false,
            "description": "Determines if the response includes lineage of Note Definitions",
            "in": "query",
            "name": "includeVersioning",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${NoteDefinitionTypeNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/NoteDefinitionLite"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets lite form of note definitions by type.",
        "tags": [
          "notes"
        ]
      }
    },
    "/notes-configuration/contact-outcome-reasons": {
      "get": {
        "description": "${description/notes/getContactOutcomeReasons.html}",
        "operationId": "getContactOutcomeReasons",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/OptionValue"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the configuration for contact outcomes for Outbound note",
        "tags": [
          "notes"
        ]
      }
    },
    "/notes-configuration/contact-reasons": {
      "get": {
        "description": "${description/notes/getContactReasons.html}",
        "operationId": "getContactReasons",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/OptionValue"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the configuration for contact reasons for Inbound/Outbound note",
        "tags": [
          "notes"
        ]
      }
    },
    "/notes-configuration/creatable-note-definitions": {
      "get": {
        "description": "${description/notes/getCreatableNoteDefinitionList.html}",
        "operationId": "getCreatableNoteDefinitionsForBhpNode",
        "parameters": [
          {
            "description": "The member BHP node feed full path ID, obtainable from the member header or member details.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/OptionValue"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the list names and ids of creatable Note Definitions",
        "tags": [
          "notes"
        ]
      }
    },
    "/notes-configuration/note-categories": {
      "get": {
        "description": "${description/notes/getNoteCategories.html}",
        "operationId": "getNoteCategories",
        "parameters": [
          {
            "description": "The Note Definition Type",
            "enum": [
              "AAG",
              "AUTH",
              "APPEAL",
              "ASSESSMENT",
              "ASSESSMENT_SUMMARY",
              "CASE",
              "CAREPLAN",
              "COST_SAVINGS",
              "TRANSITION_PLAN",
              "FOLLOWUP",
              "INDIVIDUAL_SERVICE_PLAN",
              "MCP",
              "MEMBER",
              "MEMBER_DEFINED_OUTCOME",
              "MANUAL_QUALITY_MEASURES",
              "PROBLEM",
              "QUESTION_GROUP",
              "QUALITY_MEASURES",
              "TRANSPORTATION",
              "SERVICE_REQUEST",
              "TASK_ATTEMPT",
              "TEAM_APPROACH",
              "UM_APPEAL",
              "IDENTITY_VERIFICATION",
              "PRESCREEN_DATA_IP",
              "PRESCREEN_DATA_SP",
              "PRESCREEN_DATA_RX",
              "MEDICATION"
            ],
            "in": "query",
            "name": "noteDefinitionType",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Note Definition visible ID",
            "in": "query",
            "name": "noteDefinitionVisibleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "404": {
            "description": "${NoteDefinitionTypeNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "enum": [
                  "ADMIN",
                  "INBOUND",
                  "OUTBOUND"
                ],
                "type": "string",
                "xml": {
                  "name": "NoteCategory",
                  "namespace": "http://www.casenet.com/NoteCategory"
                }
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the valid note categories",
        "tags": [
          "notes"
        ]
      }
    },
    "/notes-configuration/note-definition-v2/{noteDefinitionId}": {
      "get": {
        "description": "${description/notes/getNoteDefinitionV2.html}",
        "operationId": "getNoteDefinitionVersionTwo",
        "parameters": [
          {
            "description": "The Note Definition ID",
            "in": "path",
            "name": "noteDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/NoteDefinition"
            }
          }
        },
        "summary": "Gets a detailed Note Definition",
        "tags": [
          "notes"
        ]
      }
    },
    "/notes-configuration/note-definition/{noteDefinitionVisibleId}": {
      "get": {
        "deprecated": true,
        "description": "${description/notes/getNoteDefinition.html}",
        "operationId": "getNoteDefinition",
        "parameters": [
          {
            "description": "The Note Definition visible ID",
            "in": "path",
            "name": "noteDefinitionVisibleId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${NoteDefinitionNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/NoteDefinition"
            }
          }
        },
        "summary": "Gets a detailed Note Definition",
        "tags": [
          "notes"
        ]
      }
    },
    "/notes-configuration/void-config": {
      "get": {
        "description": "${description/notes/getVoidConfiguration.html}",
        "operationId": "getVoidConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/VoidConfig"
            }
          }
        },
        "summary": "Gets the configuration for voiding an existing note",
        "tags": [
          "notes"
        ]
      }
    },
    "/offline/devices/{deviceId}": {
      "get": {
        "description": "${description/offline/getMembersOffline.html}",
        "operationId": "getMemberOfflineByDeviceId-internal",
        "parameters": [
          {
            "description": "The device ID, the token for the device generated by the server",
            "in": "path",
            "name": "deviceId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${DeviceNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/MemberLiteList"
            }
          }
        },
        "summary": "Return list of members which can be synced back to online",
        "tags": [
          "offline-internal"
        ]
      }
    },
    "/offline/general-configuration-batch": {
      "get": {
        "description": "${description/members/getBatchConfiguration.html}",
        "operationId": "getBatchConfiguration-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "object"
            }
          }
        },
        "summary": "Retrieves a stream with the configuration data",
        "tags": [
          "offline-internal"
        ]
      }
    },
    "/offline/offline-lock": {
      "delete": {
        "description": "${description/offline/setUserOnline.html}",
        "operationId": "setUserOnline-internal",
        "parameters": [
          {
            "description": "The device ID, the token for the device generated by the server",
            "in": "query",
            "name": "deviceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "403": {
            "description": "${WrongOfflineDeviceException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          },
          "409": {
            "description": "${UserOnlineException}"
          }
        },
        "summary": "Sets the current user back online",
        "tags": [
          "offline-internal"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/offline/addOfflineLock.html}",
        "operationId": "addOfflineLock-internal",
        "parameters": [
          {
            "description": "Member ID list to set offline",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberListRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${MaximumMembersOfflineExceededException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "409": {
            "description": "${MemberOfflineException}"
          },
          "409": {
            "description": "${UserOfflineException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Add User and Member Offline Lock",
        "tags": [
          "offline-internal"
        ]
      }
    },
    "/offline/offline-lock-internal": {
      "delete": {
        "description": "${description/offline/setUserOnlineInternal.html}",
        "operationId": "internalSetUserOnline-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "summary": "Sets the current user back online",
        "tags": [
          "offline-internal"
        ]
      }
    },
    "/offline/offline-metadata": {
      "get": {
        "description": "${description/offline/getOfflineMetadata.html}",
        "operationId": "getOfflineMetadata-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/OfflineMetadata"
            }
          }
        },
        "summary": "Retrieves a stream with the general offline information",
        "tags": [
          "offline-internal"
        ]
      }
    },
    "/organization-contact-configuration": {
      "get": {
        "description": "${description/organization-contacts/getOrganizationContactConfiguration.html}",
        "operationId": "getOrganizationContactConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/OrganizationContactConfiguration"
            }
          }
        },
        "summary": "Get the configuration for creating or modifying an organization contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/personal-contact-configuration": {
      "get": {
        "description": "${description/personal-contacts/getPersonalContactConfiguration.html}",
        "operationId": "getPersonalContactConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/PersonalContactConfiguration"
            }
          }
        },
        "summary": "Get the configuration for creating or modifying a personal contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/phone-configurations": {
      "get": {
        "description": "${description/phone-numbers/getPhoneConfigurations.html}",
        "operationId": "getPhoneConfigurations",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "Country Alpha2 Code",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "alpha2Code",
            "type": "array",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${PhoneConfigurationNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/PhoneConfiguration"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get phone configurations by country codes",
        "tags": [
          "contacts"
        ]
      }
    },
    "/portal-authorizations-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/postPortalAuthorizationSearch.html}",
        "operationId": "searchAuthorizations-internal",
        "parameters": [
          {
            "description": "The search criteria for authorizations",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PortalAuthorizationSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "404": {
            "description": "${LocationsNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/PortalAuthorizationSearchResults"
            }
          }
        },
        "summary": "Performs a search for authorizations",
        "tags": [
          "portal-authorizations-internal"
        ]
      }
    },
    "/portal-providers-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/providers/postPortalProviderSearch.html}",
        "operationId": "portalSearchProvider-internal",
        "parameters": [
          {
            "description": "The search criteria for providers",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProviderSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ProviderSearchResults"
            }
          }
        },
        "summary": "Performs a search for providers",
        "tags": [
          "portal-authorizations-internal"
        ]
      }
    },
    "/portal-service-requests-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/postServiceRequestSearch.html}",
        "operationId": "searchServiceRequests-internal",
        "parameters": [
          {
            "description": "The search criteria for service requests",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PortalServiceRequestSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "404": {
            "description": "${LocationsNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/PortalServiceRequestSearchResults"
            }
          }
        },
        "summary": "Performs a search for service requests",
        "tags": [
          "portal-service-requests-internal"
        ]
      }
    },
    "/procedure-codes": {
      "get": {
        "description": "${description/procedure-codes/procedureCodes.html}",
        "operationId": "procedureCodeSearch",
        "parameters": [
          {
            "description": "Matches a substring from the procedure name field",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "default": "BEGINS_WITH",
            "description": "Search mode for procedure name field",
            "enum": [
              "BEGINS_WITH",
              "CONTAINS",
              "EQUALS"
            ],
            "in": "query",
            "name": "nameMatchType",
            "type": "string"
          },
          {
            "description": "Matches a substring of the procedure code field",
            "in": "query",
            "name": "code",
            "type": "string"
          },
          {
            "default": "BEGINS_WITH",
            "description": "Search mode for procedure code field",
            "enum": [
              "BEGINS_WITH",
              "CONTAINS",
              "EQUALS"
            ],
            "in": "query",
            "name": "codeMatchType",
            "type": "string"
          },
          {
            "description": "The type of procedure code",
            "enum": [
              "CPT",
              "ICD9",
              "HCPCS",
              "REVENUE",
              "ICD10",
              "EXTENDED"
            ],
            "in": "query",
            "name": "procedureCodeType",
            "type": "string"
          },
          {
            "description": "Language in which the procedure code description needs to be retrieved",
            "in": "query",
            "name": "languageOption",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${OptionValueNotFoundException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ProcedureCode"
              },
              "type": "array"
            }
          }
        },
        "summary": "Search for procedure codes",
        "tags": [
          "procedure-codes"
        ]
      }
    },
    "/procedure-codes-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/procedure-codes/procedureCodesSearch.html}",
        "operationId": "searchWithPagination-internal",
        "parameters": [
          {
            "description": "The search criteria for procedure codes",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProcedureCodesSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${OptionValueNotFoundException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ProcedureCodePaginatedSearchResult"
            }
          }
        },
        "summary": "Search for procedure codes",
        "tags": [
          "procedure-codes"
        ]
      }
    },
    "/procedure-codes/{procedureCodeId}/descriptions": {
      "get": {
        "description": "${description/procedure-codes/procedureCodeDescriptions.html}",
        "operationId": "getProcedureCodeDescriptions",
        "parameters": [
          {
            "description": "Procedure Code Id",
            "in": "path",
            "name": "procedureCodeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ProcedureCodeDescriptions"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get all available language descriptions for a procedure code",
        "tags": [
          "procedure-codes"
        ]
      }
    },
    "/procedure-codes/{procedureCodeId}/services": {
      "get": {
        "description": "${description/service-requests/getServicesByProcedureResponse.html}",
        "operationId": "getServicesByProcedure-internal",
        "parameters": [
          {
            "description": "The Procedure Code Id",
            "in": "path",
            "name": "procedureCodeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Service"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get list of Service for a Procedure Code Id",
        "tags": [
          "procedure-codes"
        ]
      }
    },
    "/product-features-configuration/bhp-configuration": {
      "get": {
        "description": "${description/product-features/getProductFeatureBhpConfiguration.html}",
        "operationId": "getProductFeatureBhpConfiguration",
        "parameters": [
          {
            "description": "The member BHP node Feed ID Full Path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BhpNodeNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ProductFeatureBhpConfiguration"
            }
          }
        },
        "summary": "Get configuration of Product Features for BHP node",
        "tags": [
          "product-features"
        ]
      }
    },
    "/product-features/feature-service-definitions/{externalFeatureServiceDefinitionId}/special-instructions": {
      "get": {
        "description": "${description/product-features/getFeatureServiceSpecialInstructions.html}",
        "operationId": "getFeatureServiceSpecialInstructions",
        "parameters": [
          {
            "description": "Feature service definition Id",
            "in": "path",
            "name": "externalFeatureServiceDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${FeatureServiceDefinitionNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/SpecialInstructions"
            }
          }
        },
        "summary": "Get special instructions for the feature service definition",
        "tags": [
          "product-features"
        ]
      }
    },
    "/product-features/product-feature-definitions/{externalProductFeatureDefinitionId}/special-instructions": {
      "get": {
        "description": "${description/product-features/getProductFeatureSpecialInstructions.html}",
        "operationId": "getProductFeatureSpecialInstructions",
        "parameters": [
          {
            "description": "Product feature definition Id",
            "in": "path",
            "name": "externalProductFeatureDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${ProductFeatureDefinitionNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/SpecialInstructions"
            }
          }
        },
        "summary": "Get special instructions for the product feature definition",
        "tags": [
          "product-features"
        ]
      }
    },
    "/program-enrollments/configuration": {
      "get": {
        "description": "${description/program-enrollments/getProgramEnrollmentConfiguration.html}",
        "operationId": "getProgramEnrollmentConfiguration",
        "parameters": [
          {
            "description": "The user action for program enrollment",
            "enum": [
              "CREATE",
              "CLOSE",
              "REINSTATE",
              "RE_ENROLL"
            ],
            "in": "query",
            "name": "programEnrollmentAction",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member bhp feed Id full path. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ProgramEnrollmentConfiguration"
            }
          }
        },
        "summary": "Gets the program enrollments configuration for create, close, re-enroll and reinstate enrollments",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/programs/{programId}/service-level-configuration": {
      "get": {
        "description": "${description/program-enrollments/getProgramServiceLevel.html}",
        "operationId": "getServiceLevelConfigForProgram-internal",
        "parameters": [
          {
            "default": "INTERNAL",
            "description": "Program ID returned from the program",
            "in": "path",
            "name": "programId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "serviceLevelOption detail returned from the ProgramServiceLevelConfig",
            "in": "query",
            "name": "serviceLevelOption",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${ServiceLevelOptionNotFoundException}"
          },
          "404": {
            "description": "${ProgramNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ProgramServiceLevelConfig"
            }
          }
        },
        "summary": "Get the Service level config for enrolled programs",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/programs/{programId}/service-levels/bhp-configuration": {
      "get": {
        "description": "${description/program-enrollments/getProgramServiceLevelConfiguration.html}",
        "operationId": "getProgramServiceLevelConfiguration-internal",
        "parameters": [
          {
            "description": "Program Id",
            "in": "path",
            "name": "programId",
            "required": true,
            "type": "string"
          },
          {
            "description": "BHP Node full path",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${ProgramNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ProgramServiceLevelBhpConfiguration"
            }
          }
        },
        "summary": "Gets service level bhp configuration for the program",
        "tags": [
          "enrollments"
        ]
      }
    },
    "/provider-contact-configuration": {
      "get": {
        "description": "${description/provider-contacts/getProviderContactConfiguration.html}",
        "operationId": "getProviderContactConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ProviderContactConfiguration"
            }
          }
        },
        "summary": "Get the configuration for creating a provider contact",
        "tags": [
          "contacts"
        ]
      }
    },
    "/provider-locations-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/providers/postProviderLocationSearch.html}",
        "operationId": "searchProviderLocations-internal",
        "parameters": [
          {
            "description": "The search criteria for provider locations",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LocationSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${ObsoleteProviderException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/LocationSearchResults"
            }
          }
        },
        "summary": "Performs a search for provider locations",
        "tags": [
          "providers"
        ]
      }
    },
    "/provider-locations-search-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/providers/postProviderLocationSearchV2.html}",
        "operationId": "searchProviderLocationsv2-internal",
        "parameters": [
          {
            "description": "The search criteria for provider locations",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProviderLocationSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "400": {
            "description": "${ObsoleteProviderException}"
          },
          "404": {
            "description": "${NonUniqueResultException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/LocationSearchResults"
            }
          }
        },
        "summary": "Performs a search for provider locations",
        "tags": [
          "providers"
        ]
      }
    },
    "/provider-locations/{providerLocationId}": {
      "get": {
        "description": "${description/providers/getProviderLocation.html}",
        "operationId": "getProviderLocation_1",
        "parameters": [
          {
            "description": "The provider location ID",
            "in": "path",
            "name": "providerLocationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the provider location ID",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "providerLocationIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${InvalidProviderLocationException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        },
        "summary": "Finds provider location by ID",
        "tags": [
          "providers"
        ]
      }
    },
    "/provider-networks/{providerLocationId}": {
      "get": {
        "description": "${description/providers/getProviderNetworks.html}",
        "operationId": "getProviderNetworks",
        "parameters": [
          {
            "description": "The provider location ID",
            "in": "path",
            "name": "providerLocationId",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "Starting offset for networks to be loaded. Offset numbering starts with zero.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": 20,
            "description": "Maximum number of networks to be loaded. Fewer than the specified limit will be loaded if the end of the list of networks is reached.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${NotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ProviderProductSearchResults"
            }
          }
        },
        "summary": "Finds provider networks by location ID",
        "tags": [
          "providers"
        ]
      }
    },
    "/provider-networks/{providerLocationId}/in-network": {
      "get": {
        "description": "${description/providers/isInNetwork.html}",
        "operationId": "isInNetwork",
        "parameters": [
          {
            "description": "The provider location ID",
            "in": "path",
            "name": "providerLocationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the provider location ID",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "providerLocationIdType",
            "type": "string"
          },
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "query",
            "name": "memberId",
            "required": true,
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the member ID. If no value is passed, the type will be defaulted to 'INTERNAL'",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "in": "query",
            "name": "memberIdType",
            "type": "string"
          },
          {
            "description": "Authorization start date",
            "in": "query",
            "name": "authStartDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "The product ID",
            "in": "query",
            "name": "productId",
            "type": "string"
          },
          {
            "default": "INTERNAL",
            "description": "Type of the product ID",
            "enum": [
              "NAME",
              "EXTERNAL_ID",
              "INTERNAL"
            ],
            "in": "query",
            "name": "productIdType",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidLocalDateException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${NotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/InNetworkResponse"
            }
          }
        },
        "summary": "Return boolean value if provider is in network or not",
        "tags": [
          "providers"
        ]
      }
    },
    "/providers": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/providers/postCreateProvider.html}",
        "operationId": "createProvider-internal",
        "parameters": [
          {
            "description": "The Provider Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProviderRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ProviderLite"
            }
          }
        },
        "summary": "Creates a new provider",
        "tags": [
          "providers"
        ]
      }
    },
    "/providers-details-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/providers/postProviderDetailsSearch.html}",
        "operationId": "searchProviderLimitedResults-internal",
        "parameters": [
          {
            "description": "The search criteria for providers",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProviderSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ProviderDetailsResults"
            }
          }
        },
        "summary": "Performs a search for providers",
        "tags": [
          "providers"
        ]
      }
    },
    "/providers-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/providers/postProviderSearch.html}",
        "operationId": "searchProvider",
        "parameters": [
          {
            "description": "The search criteria for providers",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProviderSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${InvalidProcedureCodeException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ProviderSearchResults"
            }
          }
        },
        "summary": "Performs a search for providers",
        "tags": [
          "providers"
        ]
      }
    },
    "/providers-search-configuration": {
      "get": {
        "description": "${description/providers-search/getProviderSearchConfiguration.html}",
        "operationId": "getProviderSearchConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ProviderSearchConfiguration"
            }
          }
        },
        "summary": "Returns the configuration to search providers",
        "tags": [
          "providers"
        ]
      }
    },
    "/providers-v2": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/providers/postProvider.html}",
        "operationId": "createProviderv2-internal",
        "parameters": [
          {
            "description": "The Provider Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProviderRequestV2"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${ProviderCreationException}"
          },
          "default": {
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "summary": "Creates a new Provider",
        "tags": [
          "providers"
        ]
      }
    },
    "/providers/{providerId}": {
      "get": {
        "description": "${description/providers/getProviderNetworks2.html}",
        "operationId": "getProviderById-internal",
        "parameters": [
          {
            "description": "Provider ID",
            "in": "path",
            "name": "providerId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${InvalidProviderException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Provider"
            }
          }
        },
        "summary": "Get Provider by ID",
        "tags": [
          "providers"
        ]
      }
    },
    "/providers/{providerId}/specialties": {
      "get": {
        "description": "${description/providers/getProviderSpecialties.html}",
        "operationId": "getProviderSpecialties-internal",
        "parameters": [
          {
            "description": "Provider ID",
            "in": "path",
            "name": "providerId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ObsoleteProviderException}"
          },
          "404": {
            "description": "${InvalidProviderException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ProviderSpecialty"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get the specialties for a provider",
        "tags": [
          "providers"
        ]
      }
    },
    "/queue-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/queues/searchQueues.html}",
        "operationId": "queueSearch-internal",
        "parameters": [
          {
            "description": "The Queue search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${DuplicateSortColumnException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/QueueSearchResults"
            }
          }
        },
        "summary": "Search for queues",
        "tags": [
          "queues"
        ]
      }
    },
    "/queues": {
      "get": {
        "description": "${description/queues/getQueues.html}",
        "operationId": "getQueues",
        "parameters": [
          {
            "description": "The type of the queue",
            "enum": [
              "ASSIGNABLE",
              "CLAIMABLE",
              "VIEWABLE"
            ],
            "in": "query",
            "name": "queuePermission",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Queue"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a list of queues",
        "tags": [
          "queues"
        ]
      }
    },
    "/readmit-configuration": {
      "get": {
        "description": "${description/authorizations/getReadmitAuthorizationConfiguration.html}",
        "operationId": "getReadmitConfiguration-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/PortableConfiguration"
            }
          }
        },
        "summary": "Get the configuration for creating a line item clinical review",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/referral-configuration": {
      "get": {
        "deprecated": true,
        "description": "${description/referrals/getReferralConfiguration.html}",
        "operationId": "getReferralConfiguration",
        "parameters": [
          {
            "description": "The option of which referral related screen configuration to get",
            "enum": [
              "SUBMITANDVIEW",
              "DECISION",
              "EVALUATION"
            ],
            "in": "query",
            "name": "option",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ReferralConfiguration"
            }
          }
        },
        "summary": "Gets the configuration for a referral",
        "tags": [
          "referrals"
        ]
      }
    },
    "/referral-configuration-v2": {
      "get": {
        "deprecated": true,
        "description": "${description/referrals/getReferralConfiguration2.html}",
        "operationId": "getReferralConfig",
        "parameters": [
          {
            "description": "The option of which referral related screen configuration to get",
            "enum": [
              "SUBMITANDVIEW",
              "DECISION",
              "EVALUATION"
            ],
            "in": "query",
            "name": "option",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ExtendedAttributesConfiguration"
            }
          }
        },
        "summary": "Gets the configuration for a referral",
        "tags": [
          "referrals"
        ]
      }
    },
    "/referral-configuration-v3": {
      "get": {
        "description": "${description/referrals/getReferralConfiguration3.html}",
        "operationId": "getReferralConfig-internal",
        "parameters": [
          {
            "description": "The option of which referral related screen configuration to get",
            "enum": [
              "SUBMITANDVIEW",
              "DECISION",
              "EVALUATION"
            ],
            "in": "query",
            "name": "option",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ReferralConfiguration3"
            }
          }
        },
        "summary": "Gets the configuration for a referral",
        "tags": [
          "referrals"
        ]
      }
    },
    "/request-for-information-configuration": {
      "get": {
        "description": "${description/rfi/getRFIConfiguration.html}",
        "operationId": "getRFIConfiguration",
        "parameters": [
          {
            "description": "The member BHP node feed ID full path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BhpNodeNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/RequestForInformationConfiguration"
            }
          }
        },
        "summary": "Gets the configuration to create and void requests for information",
        "tags": [
          "requests-for-information"
        ]
      }
    },
    "/rx-authorization-configuration": {
      "get": {
        "description": "${description/authorizations/getRxAuthorizationConfiguration.html}",
        "operationId": "getGetAuthorizationConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/RxAuthorizationConfiguration"
            }
          }
        },
        "summary": "Gets the configuration to create a new  RX authorization",
        "tags": [
          "rx-authorizations"
        ]
      }
    },
    "/rx-authorization-configuration/bhp-configuration": {
      "get": {
        "description": "${description/authorizations/getMemberRxAuthorizationConfiguration.html}",
        "operationId": "getRxAuthorizationBhpConfiguration",
        "parameters": [
          {
            "description": "The member BHP node Feed ID Full Path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${NotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/RxAuthorizationBhpConfiguration"
            }
          }
        },
        "summary": "Gets the valid types of diagnoses",
        "tags": [
          "rx-authorizations"
        ]
      }
    },
    "/rx-line-item-configuration": {
      "get": {
        "description": "${description/authorizations/getRXLineItemConfiguration.html}",
        "operationId": "getRXLineItemConfiguration",
        "parameters": [
          {
            "description": "The member BHP node feed ID full path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          },
          {
            "default": false,
            "description": "A boolean specifying if the authorization is Inpatient or SP.",
            "in": "query",
            "name": "inpatient",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "A boolean specifying if the Rx line item configuration along with the hidden types.",
            "in": "query",
            "name": "includeDisabled",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/RxLineItemConfiguration"
            }
          }
        },
        "summary": "Gets the Rx line item configuration for the member",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/screen-configuration/option-value-sets/{optionValueSetName}": {
      "get": {
        "description": "${description/option-value-sets/getOptionValueSetByName.html}",
        "operationId": "getOptionValueSetByName",
        "parameters": [
          {
            "description": "OptionValueSet name",
            "in": "path",
            "name": "optionValueSetName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${OptionValueSetNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/OptionValueSet"
            }
          }
        },
        "summary": "Retrieves the OptionValueSet by name",
        "tags": [
          "screens"
        ]
      }
    },
    "/screen-configuration/{screenName}": {
      "get": {
        "description": "${description/screen-configuration/getScreenConfiguration.html}",
        "operationId": "getScreenConfig-internal",
        "parameters": [
          {
            "description": "The name of the screen",
            "in": "path",
            "name": "screenName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${ScreenNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ScreenConfigDto"
            }
          }
        },
        "summary": "Get screen's configurations",
        "tags": [
          "screens"
        ]
      }
    },
    "/service-offer-search-configuration": {
      "get": {
        "description": "${description/service-requests/getServiceOfferConfiguration.html}",
        "operationId": "getServiceOfferConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/PortableConfiguration"
            }
          }
        },
        "summary": "Gets the service offer search configuration",
        "tags": [
          "service-offers"
        ]
      }
    },
    "/service-offers-by-location/search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/postServiceOfferSearchByLocationId.html}",
        "operationId": "servicesOfferedByLocation-internal",
        "parameters": [
          {
            "description": "Location offered services request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceOffersByLocationSearchRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${DuplicateSortColumnException}"
          },
          "404": {
            "description": "${NotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceOffersByLocationPaginatedSearchResults"
            }
          }
        },
        "summary": "Returns paginated services offered based on location id",
        "tags": [
          "service-offers"
        ]
      }
    },
    "/service-offers/search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/postServiceOfferSearch.html}",
        "operationId": "searchServiceOffers",
        "parameters": [
          {
            "description": "The search criteria for service offers",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceOfferSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${InvalidServiceCodeException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceOfferSearchResults"
            }
          }
        },
        "summary": "Perform Service Offers Search",
        "tags": [
          "service-offers"
        ]
      }
    },
    "/service-procedure-authorization-configuration": {
      "get": {
        "description": "${description/authorizations/getServiceProcedureAuthorizationConfiguration.html}",
        "operationId": "getAuthorizationConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceProcedureAuthorizationConfiguration"
            }
          }
        },
        "summary": "Get configuration to create a new SP authorization",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/service-procedure-authorization-configuration/bhp-configuration": {
      "get": {
        "description": "${description/authorizations/getMemberServiceProcedureAuthorizationConfiguration.html}",
        "operationId": "getServiceProcedureAuthorizationBhpConfiguration",
        "parameters": [
          {
            "description": "The member BHP node feed full path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${NotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceProcedureAuthorizationBhpConfiguration"
            }
          }
        },
        "summary": "Gets the valid types of diagnoses",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/service-request-configuration": {
      "get": {
        "description": "${description/service-requests/getServiceRequestConfiguration.html}",
        "operationId": "getServiceRequestConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceRequestConfiguration"
            }
          }
        },
        "summary": "Gets the service request configuration",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/service-request-configuration/bhp-configuration": {
      "get": {
        "description": "${description/service-requests/getServiceRequestBHPConfiguration.html}",
        "operationId": "getServiceRequestBHPConfiguration",
        "parameters": [
          {
            "description": "The member BHP node ID, obtainable from the member header or member details. Root (parent) bhp level data displayed if null.",
            "in": "query",
            "name": "bhpNodeId",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceRequestBHPConfiguration"
            }
          }
        },
        "summary": "Gets the member's service request BHP configuration",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/service-request-configuration/statuses": {
      "get": {
        "description": "${description/service-requests/getEnabledSRDetermination.html}",
        "operationId": "getEnabledServiceRequestDeterminationStatus-internal",
        "parameters": [
          {
            "description": "The service request line item requestedQuantity",
            "in": "query",
            "name": "requestedQuantity",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ServiceRequestStatus"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets enabled service request determination status",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/service-request-global-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/service-requests/postServiceRequestGlobalSearch.html}",
        "operationId": "serviceRequestGlobalSearch-internal",
        "parameters": [
          {
            "description": "The search criteria for service request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceRequestGlobalSearchRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ServiceRequestGlobalSearchResults"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the summary of service requests",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/service-request-header-configuration": {
      "get": {
        "description": "${description/service-requests/getServiceRequestHeaderConfiguration.html}",
        "operationId": "getServiceRequestHeaderConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceRequestHeaderConfiguration"
            }
          }
        },
        "summary": "Gets the service request header configuration",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/service-request-lineitem-configuration": {
      "get": {
        "description": "${description/service-requests/getServiceRequestLineItemConfiguration.html}",
        "operationId": "getServiceRequestLineItemConfiguration",
        "parameters": [
          {
            "description": "The member BHP node feed ID full path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceRequestLineItemConfiguration"
            }
          }
        },
        "summary": "Gets the service request line item configuration",
        "tags": [
          "service-requests"
        ]
      }
    },
    "/session": {
      "delete": {
        "description": "${description/users/deleteSession.html}",
        "operationId": "logout",
        "parameters": [],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "summary": "Log out",
        "tags": [
          "session"
        ]
      },
      "post": {
        "description": "${description/users/postSession.html}",
        "operationId": "login",
        "parameters": [],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "summary": "Log in",
        "tags": [
          "session"
        ]
      },
      "put": {
        "description": "${description/users/putSession.html}",
        "operationId": "keepAlive",
        "parameters": [],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "summary": "Keep alive",
        "tags": [
          "session"
        ]
      }
    },
    "/sp-line-item-configuration": {
      "get": {
        "description": "${description/authorizations/getSPLineItemDuplicateAuthConfiguration.html}",
        "operationId": "getSPLineItemDuplicateAuthorizationConfiguration-internal",
        "parameters": [
          {
            "description": "The member BHP node feed full path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          },
          {
            "default": false,
            "description": "A boolean specifying if the diagnosis type is Medical or behavioral.",
            "in": "query",
            "name": "behavioral",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/SPLineItemDuplicateAuthConfiguration"
            }
          }
        },
        "summary": "Get the member-specific Service Procedure line item configuration for duplicate Authorization",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/sp-line-item-configuration/sp-service-types": {
      "get": {
        "description": "${description/authorizations/getFilteredSPServiceTypes.html}",
        "operationId": "getFilteredSPServiceTypes",
        "parameters": [
          {
            "description": "The member BHP node feed ID full path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          },
          {
            "default": false,
            "description": "A boolean specifying if the authorization is Inpatient or SP.",
            "in": "query",
            "name": "inpatient",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "A boolean specifying if the diagnosis type is Medical or behavioral.",
            "in": "query",
            "name": "behavioral",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/OptionValue"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get filtered service types for service procedure line item",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/sp-line-item-configuration/sp-service-types-v2": {
      "get": {
        "description": "${description/authorizations/getFilteredSPServiceTypes.html}",
        "operationId": "getFilteredSPServiceTypesWithDefaults-internal",
        "parameters": [
          {
            "description": "The member BHP node feed ID full path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          },
          {
            "default": false,
            "description": "A boolean specifying if the authorization is Inpatient or SP.",
            "in": "query",
            "name": "inpatient",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "A boolean specifying if the diagnosis type is Medical or behavioral.",
            "in": "query",
            "name": "behavioral",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/OptionGroupFieldConfig"
            }
          }
        },
        "summary": "Get filtered service types for service procedure line item",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/sp-line-item-configuration/{serviceTypeValue}": {
      "get": {
        "description": "${description/authorizations/getSPLineItemConfiguration.html}",
        "operationId": "getSPLineItemConfiguration",
        "parameters": [
          {
            "description": "The member BHP node feed full path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          },
          {
            "description": "SP service type value",
            "in": "path",
            "name": "serviceTypeValue",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "A boolean specifying if the authorization is Inpatient or SP.",
            "in": "query",
            "name": "inpatient",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "A boolean specifying whether or not to include disabled service types in the configuration search.",
            "in": "query",
            "name": "includeDisabled",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceProcedureLineItemConfiguration"
            }
          }
        },
        "summary": "Get the service procedure line item configuration for a service type",
        "tags": [
          "service-procedure-authorizations"
        ]
      }
    },
    "/sp-line-item-service-type-value-configuration": {
      "get": {
        "description": "${description/authorizations/getSPLineItemServiceTypeValueConfiguration.html}",
        "operationId": "getSPLineItemConfigurationByServiceType-internal",
        "parameters": [
          {
            "description": "The member BHP node feed full path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          },
          {
            "description": "SP service type value",
            "in": "query",
            "name": "serviceTypeValue",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "A boolean specifying if the authorization is Inpatient or SP.",
            "in": "query",
            "name": "inpatient",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${InstanceNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/ServiceProcedureLineItemConfiguration"
            }
          }
        },
        "summary": "Get the configuration for a service type on a service procedure line item",
        "tags": [
          "authorizations"
        ]
      }
    },
    "/task-configuration": {
      "get": {
        "description": "${description/tasks/getTaskConfiguration.html}",
        "operationId": "getTaskConfiguration_1",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/TaskConfiguration"
            }
          }
        },
        "summary": "Get the configuration for a tasks",
        "tags": [
          "tasks"
        ]
      }
    },
    "/task-configuration/artifact-link-types": {
      "get": {
        "description": "${description/tasks/getArtifactLinkTypes.html}",
        "operationId": "getArtifactLinkTypes-internal",
        "parameters": [
          {
            "description": "The member BHP node Feed ID Full Path, obtainable from the member header or member details. If value is not provided, it defaults to the root node.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${BadRequestException}"
          },
          "default": {
            "schema": {
              "items": {
                "enum": [
                  "INPATIENT",
                  "SP",
                  "RX",
                  "CASE",
                  "MEDICATION",
                  "ASSESSMENT",
                  "CARE_PLAN"
                ],
                "type": "string",
                "xml": {
                  "name": "TaskLinkArtifactType",
                  "namespace": "http://www.casenet.com/TaskLinkArtifactType"
                }
              },
              "type": "array"
            }
          }
        },
        "summary": "Get available artifact link types based on member bhp node",
        "tags": [
          "tasks"
        ]
      }
    },
    "/task-configuration/attempt-configuration/campaign-types": {
      "get": {
        "description": "${description/tasks/getCampaignTypes.html}",
        "operationId": "getCampaignTypeConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/OptionValue"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get Campaign Types",
        "tags": [
          "tasks"
        ]
      }
    },
    "/task-configuration/attempt-configuration/task-attempt-types": {
      "get": {
        "description": "${description/tasks/getTaskAttemptTypes.html}",
        "operationId": "getTaskAttemptTypes",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/TaskAttemptBehavior"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get task Attempt types configuration",
        "tags": [
          "tasks"
        ]
      }
    },
    "/task-configuration/attempt-configuration/{letterLicenseType}/{bhpNodeFeedIdFullPath}": {
      "get": {
        "description": "${description/tasks/getTaskAttemptsBhpSetup.html}",
        "operationId": "getTaskAttemptSetup-internal",
        "parameters": [
          {
            "description": "The letter license type.",
            "enum": [
              "UM",
              "CM"
            ],
            "in": "path",
            "name": "letterLicenseType",
            "required": true,
            "type": "string"
          },
          {
            "description": "The BHP node feed ID full path.",
            "in": "path",
            "name": "bhpNodeFeedIdFullPath",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${BhpNodeNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/TaskAttemptsBhpSetup"
            }
          }
        },
        "summary": "Gets the task attempt setup information by bhp node feed full path",
        "tags": [
          "tasks"
        ]
      }
    },
    "/task-configuration/browser-configuration/{browserType}": {
      "get": {
        "description": "${description/tasks/getTaskBrowserConfiguration.html}",
        "operationId": "getTaskBrowserConfiguration-internal",
        "parameters": [
          {
            "description": "The task browser type.",
            "enum": [
              "DEFAULT",
              "USER",
              "TEAM",
              "PERSONAL_QUEUE"
            ],
            "in": "path",
            "name": "browserType",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${BadRequestException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/TaskBrowserConfiguration"
            }
          }
        },
        "summary": "Gets the browser configuration for a task by browser type",
        "tags": [
          "tasks"
        ]
      }
    },
    "/task-configuration/queue-configuration/{queueName}": {
      "get": {
        "description": "${description/tasks/getTaskQueueConfiguration.html}",
        "operationId": "getTaskQueueConfiguration-internal",
        "parameters": [
          {
            "description": "The queue name",
            "in": "path",
            "name": "queueName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${QueueNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/QueueTaskBrowserConfiguration"
            }
          }
        },
        "summary": "Gets the queue configuration for a task by queue name",
        "tags": [
          "tasks"
        ]
      }
    },
    "/task-packages": {
      "get": {
        "description": "${description/tasks/getActivePublishedTaskPackagesForCategory.html}",
        "operationId": "getActivePublishedTaskPackagesForTaskCategory",
        "parameters": [
          {
            "description": "Task package search criteria",
            "enum": [
              "GENERIC",
              "HCS_ENROLLMENT_CREATE",
              "HCS_ENROLLMENT_EDIT",
              "HCS_ENROLLMENT_CLOSE",
              "HCS_ENROLLMENT_VOID"
            ],
            "in": "query",
            "name": "taskPackageCategory",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/TaskPackageInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns all the active and published task packages",
        "tags": [
          "tasks"
        ]
      }
    },
    "/task-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/tasks/searchTask.html}",
        "operationId": "searchTasks-internal",
        "parameters": [
          {
            "description": "The Task search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/TaskSearchResults"
            }
          }
        },
        "summary": "Search for tasks",
        "tags": [
          "tasks"
        ]
      }
    },
    "/tasks-batch-action": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/tasks/tasksBatchAction.html}",
        "operationId": "tasksBatchAction-internal",
        "parameters": [
          {
            "description": "The Task Batch Action Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TasksBatchActionRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${TeamNotFoundException}"
          },
          "400": {
            "description": "${AuthorizationLockedException}"
          },
          "400": {
            "description": "${QueueDisabledException}"
          },
          "400": {
            "description": "${TaskCannotBeCompletedException}"
          },
          "400": {
            "description": "${TaskCannotBeCancelledException}"
          },
          "400": {
            "description": "${NoQueueOrTeamWhenTaskUnclaimedException}"
          },
          "400": {
            "description": "${TaskCannotBeAssignedException}"
          },
          "400": {
            "description": "${TeamDisabledException}"
          },
          "403": {
            "description": "${TaskAlreadyAssignedException}"
          },
          "403": {
            "description": "${TaskAssignmentClaimException}"
          },
          "403": {
            "description": "${DcmTaskAssignmentException}"
          },
          "403": {
            "description": "${UserNotInTeamException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${QueueNotFoundException}"
          },
          "404": {
            "description": "${NoOpenTaskFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/TasksBatchActionResults"
            }
          }
        },
        "summary": "Update tasks with batch action",
        "tags": [
          "tasks"
        ]
      }
    },
    "/tasks-search-configuration": {
      "get": {
        "description": "${description/tasks/getTaskSearchConfiguration.html}",
        "operationId": "getConfiguration-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/TaskSearchConfiguration"
            }
          }
        },
        "summary": "Gets the configuration for creating a task search request",
        "tags": [
          "tasks"
        ]
      }
    },
    "/team-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/teams/searchTeam.html}",
        "operationId": "searchTeams-internal",
        "parameters": [
          {
            "description": "The Team search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeamSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BhpNodeNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/TeamSearchResults"
            }
          }
        },
        "summary": "Search for teams",
        "tags": [
          "teams"
        ]
      }
    },
    "/teams": {
      "get": {
        "description": "${description/teams/getTeamsWhoCanAccessBhpNode.html}",
        "operationId": "getTeamsWhoCanAccessBhpNode",
        "parameters": [
          {
            "description": "The BHP Node id",
            "in": "query",
            "name": "bhpNodeId",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/TeamInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns all the teams who can access BHP node",
        "tags": [
          "teams"
        ]
      }
    },
    "/teams/{teamId}": {
      "get": {
        "description": "${description/teams/getTeamByTeamId.html}",
        "operationId": "findTeamById-internal",
        "parameters": [
          {
            "description": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${TeamNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/Team"
            }
          }
        },
        "summary": "Return team By team Id",
        "tags": [
          "teams"
        ]
      }
    },
    "/teams/{teamId}/users": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/teams/updateTeam.html}",
        "operationId": "updateTeamUsers-internal",
        "parameters": [
          {
            "description": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Update Team Users Request Object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTeamUsersRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${TeamNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Update Team users",
        "tags": [
          "teams"
        ]
      }
    },
    "/telephony/call-status/{sourcePhoneExtension}/{destinationPhoneNumber}": {
      "get": {
        "description": "${description/telephony/callStatus.html}",
        "operationId": "callStatus-internal",
        "parameters": [
          {
            "description": "The source phone extension",
            "in": "path",
            "name": "sourcePhoneExtension",
            "required": true,
            "type": "string"
          },
          {
            "description": "The destination phone number",
            "in": "path",
            "name": "destinationPhoneNumber",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/TelephonyCallStatusResponse"
            }
          }
        },
        "summary": "Retrieves the telephony call status using source phone extension and destination phone number",
        "tags": [
          "telephony-internal"
        ]
      }
    },
    "/telephony/dial": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/telephony/telephonyDial.html}",
        "operationId": "telephonyDial-internal",
        "parameters": [
          {
            "description": "The MemberPhoneRequest containing member ID and contact phone number ID",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberPhoneRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${TelephonyServiceInvalidUserPhoneException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ContactPhoneNumberNotFoundException}"
          },
          "503": {
            "description": "${TelephonyServiceNotAvailableException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/DialResponse"
            }
          }
        },
        "summary": "Dials the specified member phone number",
        "tags": [
          "telephony-internal"
        ]
      }
    },
    "/telephony/hang-up": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/telephony/telephonyHangUp.html}",
        "operationId": "telephonyHangUp-internal",
        "parameters": [
          {
            "description": "The MemberPhoneRequest containing member ID and contact phone number ID",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberPhoneRequest"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "404": {
            "description": "${ContactPhoneNumberNotFoundException}"
          }
        },
        "summary": "Hangs up the specified member phone number",
        "tags": [
          "telephony-internal"
        ]
      }
    },
    "/time-tracking": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/timetracking/postTimeTracking.html}",
        "operationId": "postTimeTracking-internal",
        "parameters": [
          {
            "description": "Time Tracking request information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTimeTrackingRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          }
        },
        "summary": "Submit the Time Tracking request",
        "tags": [
          "time-tracking-internal"
        ]
      }
    },
    "/time-tracking-configuration/bhp-configuration": {
      "get": {
        "description": "${description/timetracking/configurationBhp.html}",
        "operationId": "ConfigurationBhp-internal",
        "parameters": [
          {
            "description": "The bhpNodeFeedIdFullPath",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${BhpNodeNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/TimeTrackingConfiguration"
            }
          }
        },
        "summary": "Get time bhp configuration",
        "tags": [
          "time-tracking-internal"
        ]
      }
    },
    "/tools/resource-links": {
      "get": {
        "description": "${description/tools/getResourceLinks.html}",
        "operationId": "getResourceLinks-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ResourceLink"
              },
              "type": "array"
            }
          }
        },
        "summary": "Returns a list of menu links",
        "tags": [
          "tools-resource-links-internal"
        ]
      }
    },
    "/tools/resource-links/{menuId}": {
      "get": {
        "description": "${description/tools/redirectURIResourceLink.html}",
        "operationId": "redirectToResourceMenu-internal",
        "parameters": [
          {
            "description": "The menu id.",
            "format": "int32",
            "in": "path",
            "name": "menuId",
            "required": true,
            "type": "number"
          },
          {
            "description": "Member ID retrieved from member search or member list",
            "in": "query",
            "name": "memberId",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "500": {
            "description": "${InvalidURIException}"
          },
          "default": {
            "schema": {
              "properties": {
                "allowedMethods": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "uniqueItems": true
                },
                "cookies": {
                  "additionalProperties": {
                    "properties": {
                      "comment": {
                        "type": "string"
                      },
                      "domain": {
                        "type": "string"
                      },
                      "expiry": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "httpOnly": {
                        "type": "boolean"
                      },
                      "maxAge": {
                        "format": "int32",
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "path": {
                        "type": "string"
                      },
                      "secure": {
                        "type": "boolean"
                      },
                      "value": {
                        "type": "string"
                      },
                      "version": {
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "object"
                },
                "date": {
                  "format": "date-time",
                  "type": "string"
                },
                "entity": {
                  "type": "object"
                },
                "entityTag": {
                  "properties": {
                    "value": {
                      "type": "string"
                    },
                    "weak": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "headers": {
                  "additionalProperties": {
                    "items": {
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "language": {
                  "properties": {
                    "country": {
                      "type": "string"
                    },
                    "displayCountry": {
                      "type": "string"
                    },
                    "displayLanguage": {
                      "type": "string"
                    },
                    "displayName": {
                      "type": "string"
                    },
                    "displayScript": {
                      "type": "string"
                    },
                    "displayVariant": {
                      "type": "string"
                    },
                    "extensionKeys": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "iso3Country": {
                      "type": "string"
                    },
                    "iso3Language": {
                      "type": "string"
                    },
                    "language": {
                      "type": "string"
                    },
                    "script": {
                      "type": "string"
                    },
                    "unicodeLocaleAttributes": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "unicodeLocaleKeys": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true
                    },
                    "variant": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "lastModified": {
                  "format": "date-time",
                  "type": "string"
                },
                "length": {
                  "format": "int32",
                  "type": "integer"
                },
                "links": {
                  "items": {
                    "properties": {
                      "params": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "rel": {
                        "type": "string"
                      },
                      "rels": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "title": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "uri": {
                        "format": "uri",
                        "type": "string"
                      },
                      "uriBuilder": {
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array",
                  "uniqueItems": true
                },
                "location": {
                  "format": "uri",
                  "type": "string"
                },
                "mediaType": {
                  "properties": {
                    "parameters": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "type": "object"
                    },
                    "subtype": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "wildcardSubtype": {
                      "type": "boolean"
                    },
                    "wildcardType": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "metadata": {
                  "additionalProperties": {
                    "items": {
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "status": {
                  "format": "int32",
                  "type": "integer"
                },
                "statusInfo": {
                  "properties": {
                    "family": {
                      "enum": [
                        "INFORMATIONAL",
                        "SUCCESSFUL",
                        "REDIRECTION",
                        "CLIENT_ERROR",
                        "SERVER_ERROR",
                        "OTHER"
                      ],
                      "type": "string"
                    },
                    "reasonPhrase": {
                      "type": "string"
                    },
                    "statusCode": {
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "stringHeaders": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Redirects to a resource menu item",
        "tags": [
          "tools-resource-links-internal"
        ]
      }
    },
    "/user-dashboard-configuration": {
      "get": {
        "description": "${description/users/userDashboardConfiguration.html}",
        "operationId": "getUserDashboardConfiguration-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/UserDashboardConfiguration"
            }
          }
        },
        "summary": "Get collection of pods to display",
        "tags": [
          "users"
        ]
      }
    },
    "/user-dashboard/case-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/dashboard/postUserDashboardCaseSearch.html}",
        "operationId": "postUserDashboardCaseSearch-internal",
        "parameters": [
          {
            "description": "The search criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserDashboardCaseSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/UserDashboardCaseSearchResults"
            }
          }
        },
        "summary": "Search cases to display on the user dashboard",
        "tags": [
          "user-dashboard-internal"
        ]
      }
    },
    "/user-dashboard/pods-status": {
      "get": {
        "description": "${description/dashboard/getPodsStatus.html}",
        "operationId": "getPodsStatus-internal",
        "parameters": [
          {
            "default": true,
            "description": "Check if cases are available",
            "in": "query",
            "name": "casesExists",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/UserDashboardPodStatusResult"
            }
          }
        },
        "summary": "Retrieve all pods availability",
        "tags": [
          "user-dashboard-internal"
        ]
      }
    },
    "/user-dashboard/queue-statistics": {
      "get": {
        "description": "${description/dashboard/getQueueStatistics.html}",
        "operationId": "getQueueStatistics-internal",
        "parameters": [
          {
            "default": 10,
            "description": "Number of returned values",
            "format": "int32",
            "in": "query",
            "name": "length",
            "type": "integer"
          },
          {
            "default": true,
            "description": "Include overdue tasks",
            "in": "query",
            "name": "includeOverdue",
            "type": "boolean"
          },
          {
            "default": true,
            "description": "Include due today tasks",
            "in": "query",
            "name": "includeDueToday",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/QueueStatistics"
            }
          }
        },
        "summary": "Get Queue statistics for User Dashboard",
        "tags": [
          "user-dashboard-internal"
        ]
      }
    },
    "/user-dashboard/system-message": {
      "get": {
        "description": "${description/dashboard/getCurrentSystemMessage.html}",
        "operationId": "getCurrentSystemMessage-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${SystemMessageNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/SystemMessageResponse"
            }
          }
        },
        "summary": "Get the current system message",
        "tags": [
          "user-dashboard-internal"
        ]
      }
    },
    "/user-dashboard/users/{username}/task-metrics": {
      "get": {
        "description": "${description/dashboard/getTaskMetrics.html}",
        "operationId": "getTaskMetricsForUserDashboardByUsername-internal",
        "parameters": [
          {
            "description": "The username of the user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Time Zone Id",
            "in": "query",
            "name": "timeZoneId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${TimeZoneNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/TaskMetricsResponse"
            }
          }
        },
        "summary": "Returns task metrics for use dashboards by username",
        "tags": [
          "user-dashboard-internal"
        ]
      }
    },
    "/user-ownership-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/users/userOwnershipSearch.html}",
        "operationId": "searchUsers-internal",
        "parameters": [
          {
            "description": "The search criteria for users",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserSearchCriteriaV2"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/UserPaginatedSearchResults"
            }
          }
        },
        "summary": "Search for users",
        "tags": [
          "users"
        ]
      }
    },
    "/user-profile-configuration": {
      "get": {
        "description": "${description/user-profile/getUserProfileConfiguration.html}",
        "operationId": "getUserProfileConfiguration",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/UserProfileConfiguration"
            }
          }
        },
        "summary": "Gets the configuration for user profile",
        "tags": [
          "users"
        ]
      }
    },
    "/user-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/users/searchUser.html}",
        "operationId": "searchUsers",
        "parameters": [
          {
            "description": "The search criteria for users",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BhpNodeNotFoundException}"
          },
          "400": {
            "description": "${DuplicateSortColumnException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/UserPaginatedSearchResults"
            }
          }
        },
        "summary": "Search for users",
        "tags": [
          "users"
        ]
      }
    },
    "/users/appointments/configuration": {
      "get": {
        "description": "${description/user-appointments/getUserAppointmentConfiguration.html}",
        "operationId": "getUserAppointmentConfiguration",
        "parameters": [
          {
            "description": "The BHP node feed ID full path.",
            "in": "query",
            "name": "bhpNodeFeedIdFullPath",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/UserAppointmentConfiguration"
            }
          }
        },
        "summary": "Gets the configuration for a user appointment",
        "tags": [
          "users"
        ]
      }
    },
    "/users/artifacts/reassign": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/users/reAssignOwnership.html}",
        "operationId": "reassignArtifactOwnership-internal",
        "parameters": [
          {
            "description": "ReAssignOwnershipRequest with artifacts & new owner information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReAssignOwnershipRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          }
        },
        "summary": "Re Assign User Artifact Ownership",
        "tags": [
          "users"
        ]
      }
    },
    "/users/coach-candidate-ids-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/user-appointments/postCoachCandidateUsersSearch.html}",
        "operationId": "searchCoachCandidateUsers-internal",
        "parameters": [
          {
            "description": "The Coach Candidate Users Search Criteria",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CoachCandidateUsersSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${MemberNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "summary": "Performs Coach Candidate Users Search",
        "tags": [
          "users"
        ]
      }
    },
    "/users/current": {
      "get": {
        "description": "${description/users/getCurrentUser.html}",
        "operationId": "getCurrentUser",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "summary": "Get the current user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/current/editable-programs": {
      "get": {
        "description": "${description/users/getEditableProgramsForCurrentUser.html}",
        "operationId": "getEditableProgramsForCurrentUser-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/UserEditableProgramsResponse"
            }
          }
        },
        "summary": "Get the editable program id list for the current user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/current/password": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/users/putChangePassword.html}",
        "operationId": "changeCurrentUserPassword-internal",
        "parameters": [
          {
            "description": "The password Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePasswordRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${InvalidPasswordPatternException}"
          },
          "400": {
            "description": "${IncorrectOldPasswordException}"
          }
        },
        "summary": "Update current user's password with new password",
        "tags": [
          "users"
        ]
      }
    },
    "/users/current/personal-queue-users": {
      "get": {
        "description": "${description/users/getPersonalQueueUser.html}",
        "operationId": "getPersonalQueueUser-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get Users of the Personal Queue",
        "tags": [
          "users"
        ]
      }
    },
    "/users/current/quicklinks": {
      "get": {
        "description": "${description/users/getQuickLinks.html}",
        "operationId": "getCurrentUserQuickLinks-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "items": {
                "enum": [
                  "AAG",
                  "ALLERGIES",
                  "ASSESSMENTS",
                  "AUTHORIZATIONS",
                  "BIRTH_EVENTS",
                  "CARE_OPPORTUNITY",
                  "CARE_PLANS",
                  "CASES",
                  "CLAIMS",
                  "CONTACTS",
                  "CORRESPONDENCE",
                  "COST_SAVINGS",
                  "DEMOGRAPHICS",
                  "DIAGNOSES",
                  "DOCUMENTS",
                  "ELIGIBILITY_BENEFITS",
                  "HCS_ENROLLMENT",
                  "KEY_METRICS",
                  "MEDICATIONS",
                  "MEMBER_PRIVACY",
                  "MEMBER_SUMMARY",
                  "NOTES",
                  "PRODUCT_FEATURES",
                  "PROGRAMS",
                  "QUALITY_INCIDENTS",
                  "REFERRALS",
                  "SCHEDULER",
                  "TASKS"
                ],
                "type": "string",
                "xml": {
                  "name": "QuickLinks",
                  "namespace": "http://www.casenet.com/QuickLinks"
                }
              },
              "type": "array"
            }
          }
        },
        "summary": "Get the Quick Links setup for current User",
        "tags": [
          "users"
        ]
      }
    },
    "/users/current/team-members": {
      "get": {
        "description": "${description/users/getCurrentUserTeamMembers.html}",
        "operationId": "getCurrentUserTeamMembers-internal",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "summary": "Gets the current user team members. Disabled users will not be returned as part of the response.",
        "tags": [
          "users"
        ]
      }
    },
    "/users/permissions": {
      "get": {
        "description": "${description/users/getUserPermissions.html}",
        "operationId": "getLoggedUserPermissions",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/UserPermissions"
            }
          }
        },
        "summary": "Gets the current user permissions",
        "tags": [
          "users"
        ]
      }
    },
    "/users/saml": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/users/postCreateUserAccount.html}",
        "operationId": "createUserAccount-internal",
        "parameters": [
          {
            "description": "The SAML Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SamlRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "summary": "Creates a new user account from attributes provided by the SAML Assertion used during authentication",
        "tags": [
          "users"
        ]
      }
    },
    "/users/saml/{username}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/users/putUpdateUserAccount.html}",
        "operationId": "updateUserAccount-internal",
        "parameters": [
          {
            "description": "The username of the user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "The SAML Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SamlRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "summary": "Updates an existing user account from attributes provided by the SAML Assertion used during authentication",
        "tags": [
          "users"
        ]
      }
    },
    "/users/scheduler-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/user-appointments/userScheduleSearch.html}",
        "operationId": "searchUserSchedules-internal",
        "parameters": [
          {
            "description": "The User Schedule Calendar Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserScheduleCalendarRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${UserNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/UserSchedule"
              },
              "type": "array"
            }
          }
        },
        "summary": "Performs user schedule calendar search",
        "tags": [
          "users"
        ]
      }
    },
    "/users/user-profiles": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/user-profile/updateUserProfiles.html}",
        "operationId": "updateTeamUserProfiles-internal",
        "parameters": [
          {
            "description": "AbstractUpdateUserProfileRequest for users to be updated",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "additionalProperties": {
                "$ref": "#/definitions/AbstractUpdateUserProfileRequest"
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "400": {
            "description": "${UserTypeMismatchException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${UserDetailsNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Updates user profile of team",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{username}/appointments": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/user-appointments/addUserAppointment.html}",
        "operationId": "addUserAppointment",
        "parameters": [
          {
            "description": "The username of the user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "The user appointment data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserAppointmentRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${MemberNotFoundException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${UserAppointmentConflictException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Create Appointment for User",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{username}/appointments-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/user-appointments/postUserAppointmentsSearch.html}",
        "operationId": "searchUserAppointments",
        "parameters": [
          {
            "description": "The username of the user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "The search criteria for user appointments",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "400": {
            "description": "${BadRequestException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AppointmentSearchResults"
            }
          }
        },
        "summary": "Performs a search for user appointments",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{username}/appointments/available-times": {
      "delete": {
        "description": "${description/user-appointments/removeAllAvailableTimesForUser.html}",
        "operationId": "removeAllAvailableTimesForUser-internal",
        "parameters": [
          {
            "description": "The username of the user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          }
        },
        "summary": "Remove all available user times",
        "tags": [
          "users"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/user-appointments/postAvailableTimes.html}",
        "operationId": "postAvailableTimes-internal",
        "parameters": [
          {
            "description": "The username of the user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "The List of AvailableTimeRequest",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AvailableTimeListRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${JsonValidationException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/AvailableTimeResponse"
            }
          }
        },
        "summary": "Creates the available times for the User",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{username}/appointments/{appointmentId}": {
      "delete": {
        "description": "${description/user-appointments/deleteUserAppointment.html}",
        "operationId": "deleteUserAppointment-internal",
        "parameters": [
          {
            "description": "The username of the user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "Appointment Id to delete",
            "in": "path",
            "name": "appointmentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${AppointmentNotFoundException}"
          }
        },
        "summary": "Delete Appointment for User",
        "tags": [
          "users"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/user-appointments/updateUserAppointment.html}",
        "operationId": "updateUserAppointment-internal",
        "parameters": [
          {
            "description": "The username of the user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "The appointment Id",
            "in": "path",
            "name": "appointmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The user appointment data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserAppointmentRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${MemberNotFoundException}"
          },
          "400": {
            "description": "${UserNotFoundException}"
          },
          "400": {
            "description": "${UserAppointmentConflictException}"
          },
          "403": {
            "description": "${AccessDeniedException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${AppointmentNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Update user Appointment",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{username}/artifacts": {
      "get": {
        "description": "${description/users/findOpenArtifactsByOwner.html}",
        "operationId": "findOpenArtifactsByOwner-internal",
        "parameters": [
          {
            "description": "The username of the user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "artifactType as a query param",
            "in": "query",
            "name": "artifactType",
            "required": true,
            "type": "string"
          },
          {
            "default": 10,
            "description": "maximumResults as a query param",
            "format": "int64",
            "in": "query",
            "name": "maximumResults",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${BadRequestException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/UserArtifact"
            }
          }
        },
        "summary": "retrieve list of artifacts owned by a given user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{username}/info": {
      "get": {
        "description": "${description/users/getUserInfoByUsername.html}",
        "operationId": "getUserInfoByUsername",
        "parameters": [
          {
            "description": "The username of the user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "The flag indicates if the result should contain only active contact information (phone/emails) records",
            "in": "query",
            "name": "activeContactInfoOnly",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${UserNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          }
        },
        "summary": "Find user information by username",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{username}/message-search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/message/postMessageSearch.html}",
        "operationId": "searchMessages-internal",
        "parameters": [
          {
            "description": "The username of the user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "The search criteria for messages",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BoardMessageSearchCriteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${ValidationException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/BoardMessageSearchResults"
            }
          }
        },
        "summary": "Performs a search for messages",
        "tags": [
          "messages"
        ]
      }
    },
    "/users/{username}/schedule-appointment-permission": {
      "get": {
        "description": "${description/users/userAccessToCreateAppointment.html}",
        "operationId": "userHasAccessToScheduleEvent-internal",
        "parameters": [
          {
            "description": "The username of the user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${UserNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "boolean"
            }
          }
        },
        "summary": "Check Permission to create new appointment for user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{username}/teams": {
      "get": {
        "description": "${description/users/getTeamsSummary.html}",
        "operationId": "getTeamsSummary-internal",
        "parameters": [
          {
            "description": "Username of user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${UserNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/TeamSummary"
            }
          }
        },
        "summary": "Method to show teams associated with user name provided",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{username}/user-profile": {
      "get": {
        "description": "${description/user-profile/getUserProfile.html}",
        "operationId": "getUserProfile",
        "parameters": [
          {
            "description": "The username of the user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "The flag indicates if the result should contain only active contact information (phone/emails) records",
            "in": "query",
            "name": "activeContactInfoOnly",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "The flag indicates to return disabled user with disabled = true flag instead of returning error",
            "in": "query",
            "name": "includeDisabled",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${UserDetailsNotFoundException}"
          },
          "default": {
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          }
        },
        "summary": "Get users profile information",
        "tags": [
          "users"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/user-profile/updateUserProfile.html}",
        "operationId": "updateUserProfile",
        "parameters": [
          {
            "description": "The username of the user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "The user profile data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AbstractUpdateUserProfileRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "${AddressConfigurationNotFoundException}"
          },
          "400": {
            "description": "${UserTypeMismatchException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${UserDetailsNotFoundException}"
          },
          "409": {
            "description": "${OptimisticLockException}"
          }
        },
        "summary": "Update Users Profile",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{username}/user-profile/email-notifications": {
      "get": {
        "description": "${description/user-profile/getEmailNotifications.html}",
        "operationId": "getEmailNotifications",
        "parameters": [
          {
            "description": "The username of the user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "${UserNotFoundException}"
          },
          "default": {
            "schema": {
              "items": {
                "$ref": "#/definitions/EmailNotificationResponse"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get users email notifications",
        "tags": [
          "users"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/user-profile/createEmailNotification.html}",
        "operationId": "createEmailNotification",
        "parameters": [
          {
            "description": "The username of the user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "Email notification",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailNotificationRequest"
            }
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "${DuplicateEmailNotificationConfigurationException}"
          },
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${TeamNotFoundException}"
          },
          "404": {
            "description": "${QueueNotFoundException}"
          },
          "404": {
            "description": "${EmailNotFoundException}"
          },
          "default": {
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Creates a user notification",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{username}/user-profile/email-notifications/{emailNotificationId}": {
      "delete": {
        "description": "${description/user-profile/deleteEmailNotification.html}",
        "operationId": "deleteEmailNotification",
        "parameters": [
          {
            "description": "The username of the user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "The email notification id",
            "format": "int32",
            "in": "path",
            "name": "emailNotificationId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "404": {
            "description": "${UserNotFoundException}"
          },
          "404": {
            "description": "${EmailNotificationNotFoundException}"
          }
        },
        "summary": "Delete an email notification",
        "tags": [
          "users"
        ]
      }
    },
    "/xml-review-parser/cwqi-documents": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/parseCareWebQIReviewDocument.html}",
        "operationId": "parseCareWebQIDocument-internal",
        "parameters": [
          {
            "description": "CareWebQI document",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CareWebQIInnerReviewRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/CareWebQIReview"
            }
          }
        },
        "summary": "Parse CareWebQI XML documents",
        "tags": [
          "xml-review-parser-internal"
        ]
      }
    },
    "/xml-review-parser/interqual-documents": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "${description/authorizations/parseInterqualReviewDocument.html}",
        "operationId": "parseInterqualDocument-internal",
        "parameters": [
          {
            "description": "InterQual Review Source",
            "enum": [
              "REVIEW_MANAGER",
              "IQCONNECT"
            ],
            "in": "query",
            "name": "reviewSource",
            "required": true,
            "type": "string"
          },
          {
            "description": "InterQual document",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "schema": {
              "$ref": "#/definitions/InterqualReview"
            }
          }
        },
        "summary": "Parse InterQual XML documents",
        "tags": [
          "xml-review-parser-internal"
        ]
      }
    }
  },
  "swagger": "2.0",
  "tags": [
    {
      "description": "Operations on Member AAGs",
      "name": "aags"
    },
    {
      "description": "Admin Operations on Trucare admin",
      "name": "admin"
    },
    {
      "description": "Operations on Member Allergies",
      "name": "allergies"
    },
    {
      "description": "Operations on Appeals",
      "name": "appeals"
    },
    {
      "description": "Operations on Member Assessments",
      "name": "assessments"
    },
    {
      "description": "Operations on Member Authorizations",
      "name": "authorizations"
    },
    {
      "description": "Operations on BhpNodes",
      "name": "bhp-nodes"
    },
    {
      "description": "Operations on Birth Events",
      "name": "birth-events"
    },
    {
      "description": "Operations on Care Opportunities",
      "name": "care-opportunities"
    },
    {
      "description": "Operations on Care Plans",
      "name": "care-plans"
    },
    {
      "description": "Operations on Member Cases",
      "name": "cases"
    },
    {
      "description": "Operations on Authorization Claims",
      "name": "claims"
    },
    {
      "description": "Operations on Coaches",
      "name": "coach-internal"
    },
    {
      "description": "Operations on contacts, addresses and countries",
      "name": "contacts"
    },
    {
      "description": "Operations on Internal and External Letters",
      "name": "correspondences"
    },
    {
      "description": "Operations on Cost Savings",
      "name": "cost-savings"
    },
    {
      "description": "Operations on Dashboard",
      "name": "dashboard-internal"
    },
    {
      "description": "Operations on Determinations",
      "name": "determinations"
    },
    {
      "description": "Operations on Member Diagnoses",
      "name": "diagnoses"
    },
    {
      "description": "Operations on Diagnosis Codes",
      "name": "diagnosis-codes"
    },
    {
      "description": "API Discovery Service",
      "name": "discovery-internal"
    },
    {
      "description": "Operations with Documents",
      "name": "documents"
    },
    {
      "description": "Operations on Drugs",
      "name": "drugs"
    },
    {
      "description": "Operations on Dynamic API",
      "name": "dynamic-api-internal"
    },
    {
      "description": "Operations on Eligibilities",
      "name": "eligibilities"
    },
    {
      "description": "Operations on HCS Enrollments",
      "name": "enrollments"
    },
    {
      "description": "Operations on Environment Configuration",
      "name": "environment"
    },
    {
      "description": "Operations on Faxes",
      "name": "fax-internal"
    },
    {
      "description": "Operations on Authorization Follow Ups",
      "name": "follow-ups-internal"
    },
    {
      "description": "Operations on HCS Individual Service Plans",
      "name": "hcs-individual-service-plan-internal"
    },
    {
      "description": "Operations on Member Inpatient Authorizations",
      "name": "inpatient-authorizations"
    },
    {
      "description": "Operations on IQ Connect",
      "name": "iqconnect-internal"
    },
    {
      "description": "Operations on Key Metrics",
      "name": "key-metrics"
    },
    {
      "description": "Operations on Logs",
      "name": "logs"
    },
    {
      "description": "Operations on Member Medications",
      "name": "medications"
    },
    {
      "description": "Operations on Member Dashboard",
      "name": "member-dashboard-configuration-internal"
    },
    {
      "description": "Operations on Members",
      "name": "members"
    },
    {
      "description": "Operations on Member Reconciliation",
      "name": "member-reconciliation-internal"
    },
    {
      "description": "Operations on Menus",
      "name": "menus-internal"
    },
    {
      "description": "Operations on Messages",
      "name": "messages"
    },
    {
      "description": "Operations on Metrics",
      "name": "metrics-internal"
    },
    {
      "description": "Operations on Modifier Codes",
      "name": "modifier-codes"
    },
    {
      "description": "Operations on Notes",
      "name": "notes"
    },
    {
      "description": "Operations on Offline Members",
      "name": "offline-internal"
    },
    {
      "description": "Operations on Procedure Codes",
      "name": "procedure-codes"
    },
    {
      "description": "Operations on Product features",
      "name": "product-features"
    },
    {
      "description": "Operations on Provider Portal Authorizations",
      "name": "portal-authorizations-internal"
    },
    {
      "description": "Operations on Portal Service Requests",
      "name": "portal-service-requests-internal"
    },
    {
      "description": "Operations on Providers",
      "name": "providers"
    },
    {
      "description": "Operations on Quality Incidents Summary",
      "name": "quality-incidents-summary-internal"
    },
    {
      "description": "Operations on Queues",
      "name": "queues"
    },
    {
      "description": "Operations on referrals",
      "name": "referrals"
    },
    {
      "description": "Operations on Requests for information",
      "name": "requests-for-information"
    },
    {
      "description": "Operations on Member Rx Authorizations",
      "name": "rx-authorizations"
    },
    {
      "description": "Operations on Screens",
      "name": "screens"
    },
    {
      "description": "Operations on Service Offers",
      "name": "service-offers"
    },
    {
      "description": "Operations on Service Requests",
      "name": "service-requests"
    },
    {
      "description": "Operations on the User Session",
      "name": "session"
    },
    {
      "description": "Operations on Member Service Procedure Authorizations",
      "name": "service-procedure-authorizations"
    },
    {
      "description": "Operations on Tasks",
      "name": "tasks"
    },
    {
      "description": "Operations on Teams",
      "name": "teams"
    },
    {
      "description": "Operations on Telephony",
      "name": "telephony-internal"
    },
    {
      "description": "Operations on Time Tracking",
      "name": "time-tracking-internal"
    },
    {
      "description": "Operations on Resource Links",
      "name": "tools-resource-links-internal"
    },
    {
      "description": "Operations on Transition Plan",
      "name": "transition-plan-internal"
    },
    {
      "description": "Operations on User Dashboard",
      "name": "user-dashboard-internal"
    },
    {
      "description": "Operations on Users",
      "name": "users"
    },
    {
      "description": "Parsers for Clinical and Advisor Review documents",
      "name": "xml-review-parser-internal"
    }
  ],
  "x-components": {}
}
